{
	"scope": "source.csc",
	"completions":
[	
	"#using scripts\\zm\\craftables\\_zm_craftables;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_armor;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_camo;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_camo_render;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_cleanse;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_clone;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_clone_render;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_es_strike;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_flashback;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_hacker;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_heat_wave;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_infrared;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_overdrive;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_resurrect;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_roulette;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_shield;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_shock_field;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_speed_burst;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_thief;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_turret_deploy;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_unstoppable_force;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_vision_pulse;",
	"#using scripts\\zm\\aats\\_zm_aat_blast_furnace;",
	"#using scripts\\zm\\aats\\_zm_aat_dead_wire;",
	"#using scripts\\zm\\aats\\_zm_aat_fire_works;",
	"#using scripts\\zm\\aats\\_zm_aat_turned;",
	"#using scripts\\codescripts\\struct;",
	"#using scripts\\zm\\zm_giant;",
	"#using scripts\\zm\\zm_giant_amb;",
	"#using scripts\\zm\\zm_giant_fx;",
	"#using scripts\\zm\\zm_giant_teleporter;",
	"#using scripts\\zm\\zm_usermap;",
	"#using scripts\\zm\\_ambient;",
	"#using scripts\\zm\\_callbacks;",
	"#using scripts\\zm\\_claymore;",
	"#using scripts\\zm\\_destructible;",
	"#using scripts\\zm\\_filter;",
	"#using scripts\\zm\\_global_fx;",
	"#using scripts\\zm\\_load;",
	"#using scripts\\zm\\_sticky_grenade;",
	"#using scripts\\zm\\_zm;",
	"#using scripts\\zm\\_zm_ai_dogs;",
	"#using scripts\\zm\\_zm_audio;",
	"#using scripts\\zm\\_zm_demo;",
	"#using scripts\\zm\\_zm_equipment;",
	"#using scripts\\zm\\_zm_laststand;",
	"#using scripts\\zm\\_zm_lightning_chain;",
	"#using scripts\\zm\\_zm_magicbox;",
	"#using scripts\\zm\\_zm_pack_a_punch;",
	"#using scripts\\zm\\_zm_perks;",
	"#using scripts\\zm\\_zm_perk_additionalprimaryweapon;",
	"#using scripts\\zm\\_zm_perk_deadshot;",
	"#using scripts\\zm\\_zm_perk_doubletap2;",
	"#using scripts\\zm\\_zm_perk_electric_cherry;",
	"#using scripts\\zm\\_zm_perk_juggernaut;",
	"#using scripts\\zm\\_zm_perk_quick_revive;",
	"#using scripts\\zm\\_zm_perk_sleight_of_hand;",
	"#using scripts\\zm\\_zm_perk_staminup;",
	"#using scripts\\zm\\_zm_perk_widows_wine;",
	"#using scripts\\zm\\_zm_powerups;",
	"#using scripts\\zm\\_zm_powerup_nuke;",
	"#using scripts\\zm\\_zm_traps;",
	"#using scripts\\zm\\_zm_trap_electric;",
	"#using scripts\\zm\\_zm_utility;",
	"#using scripts\\zm\\_zm_weapons;",
	"#using scripts\\zm\\_zm_weap_gravityspikes;",
	"#using scripts\\zm\\_zm_weap_octobomb;",
	"#using scripts\\zm\\_zm_weap_raygun_mark3;",
	"#using scripts\\zm\\_zm_weap_riotshield;",
	"#using scripts\\zm\\_zm_weap_rocketshield;",
	"#using scripts\\zm\\_zm_weap_tesla;",
	"#using scripts\\zm\\_zm_weap_thundergun;",
	"#using scripts\\shared\\weapons\\antipersonnelguidance;",
	"#using scripts\\shared\\weapons\\multilockapguidance;",
	"#using scripts\\shared\\weapons\\replay_gun;",
	"#using scripts\\shared\\weapons\\spike_charge;",
	"#using scripts\\shared\\weapons\\spike_charge_siegebot;",
	"#using scripts\\shared\\weapons\\_acousticsensor;",
	"#using scripts\\shared\\weapons\\_bouncingbetty;",
	"#using scripts\\shared\\weapons\\_decoy;",
	"#using scripts\\shared\\weapons\\_empgrenade;",
	"#using scripts\\shared\\weapons\\_hacker_tool;",
	"#using scripts\\shared\\weapons\\_hive_gun;",
	"#using scripts\\shared\\weapons\\_proximity_grenade;",
	"#using scripts\\shared\\weapons\\_riotshield;",
	"#using scripts\\shared\\weapons\\_satchel_charge;",
	"#using scripts\\shared\\weapons\\_scrambler;",
	"#using scripts\\shared\\weapons\\_sticky_grenade;",
	"#using scripts\\shared\\weapons\\_tacticalinsertion;",
	"#using scripts\\shared\\weapons\\_trophy_system;",
	"#using scripts\\shared\\weapons\\_weaponobjects;",
	"#using scripts\\zm\\gametypes\\zclassic;",
	"#using scripts\\shared\\ai\\systems\\gib;",
	"#using scripts\\shared\\aat_shared;",
	"#using scripts\\shared\\ai_shared;",
	"#using scripts\\shared\\animation_shared;",
	"#using scripts\\shared\\array_shared;",
	"#using scripts\\shared\\audio_shared;",
	"#using scripts\\shared\\beam_shared;",
	"#using scripts\\shared\\blood;",
	"#using scripts\\shared\\callbacks_shared;",
	"#using scripts\\shared\\clientfaceanim_shared;",
	"#using scripts\\shared\\clientfield_shared;",
	"#using scripts\\shared\\custom_class;",
	"#using scripts\\shared\\debug_menu_shared;",
	"#using scripts\\shared\\drown;",
	"#using scripts\\shared\\duplicaterenderbundle;",
	"#using scripts\\shared\\duplicaterender_mgr;",
	"#using scripts\\shared\\end_game_taunts;",
	"#using scripts\\shared\\enemy_highlight;",
	"#using scripts\\shared\\exploder_shared;",
	"#using scripts\\shared\\filter_shared;",
	"#using scripts\\shared\\flagsys_shared;",
	"#using scripts\\shared\\flag_shared;",
	"#using scripts\\shared\\footsteps_shared;",
	"#using scripts\\shared\\fx_shared;",
	"#using scripts\\shared\\gfx_shared;",
	"#using scripts\\shared\\hackable;",
	"#using scripts\\shared\\load_shared;",
	"#using scripts\\shared\\lui_shared;",
	"#using scripts\\shared\\math_shared;",
	"#using scripts\\shared\\music_shared;",
	"#using scripts\\shared\\player_shared;",
	"#using scripts\\shared\\postfx_shared;",
	"#using scripts\\shared\\scene_shared;",
	"#using scripts\\shared\\scriptbundle_shared;",
	"#using scripts\\shared\\shaderanim_shared;",
	"#using scripts\\shared\\sound_shared;",
	"#using scripts\\shared\\system_shared;",
	"#using scripts\\shared\\trigger_shared;",
	"#using scripts\\shared\\turret_shared;",
	"#using scripts\\shared\\util_shared;",
	"#using scripts\\shared\\vehicleriders_shared;",
	"#using scripts\\shared\\vehicle_shared;",
	"#using scripts\\shared\\visionset_mgr_shared;",
	"#using scripts\\shared\\water_surface;",
	"#using scripts\\shared\\_burnplayer;",
	"#using scripts\\shared\\_character_customization;",
	"#using scripts\\shared\\_explode;",
	"#using scripts\\shared\\_oob;",
	"#using scripts\\shared\\_weapon_customization_icon;",
	"#using scripts\\shared\\vehicles\\_driving_fx;",
	"#using scripts\\shared\\vehicles\\_metal_storm;",
	"#using scripts\\shared\\vehicles\\_quadtank;",
	"#using scripts\\shared\\vehicles\\_raps;",
	"#using scripts\\shared\\vehicles\\_sentinel_drone;",
	"#using scripts\\shared\\vehicles\\_siegebot;",
	"#using scripts\\shared\\vehicles\\_wasp;",
	"#using scripts\\core\\_multi_extracam;",
	"#using scripts\\shared\\ai\\zombie_death;",
	{ "trigger": "PlayerGibLeftArm\t#using scripts\\shared\\ai\\systems\\gib;", "contents": "GibClientUtils::PlayerGibLeftArm(${1:localClientNum})"},
	{ "trigger": "PlayerGibRightArm\t#using scripts\\shared\\ai\\systems\\gib;", "contents": "GibClientUtils::PlayerGibRightArm(${1:localClientNum})"},
	{ "trigger": "PlayerGibLeftLeg\t#using scripts\\shared\\ai\\systems\\gib;", "contents": "GibClientUtils::PlayerGibLeftLeg(${1:localClientNum})"},
	{ "trigger": "PlayerGibRightLeg\t#using scripts\\shared\\ai\\systems\\gib;", "contents": "GibClientUtils::PlayerGibRightLeg(${1:localClientNum})"},
	{ "trigger": "PlayerGibLegs\t#using scripts\\shared\\ai\\systems\\gib;", "contents": "GibClientUtils::PlayerGibLegs(${1:localClientNum})"},
	{ "trigger": "PlayerGibTag\t#using scripts\\shared\\ai\\systems\\gib;", "contents": "GibClientUtils::PlayerGibTag(${1:localClientNum}, ${2:gibFlag})"},
	{ "trigger": "is_local_player\t#using scripts\\shared\\abilities\\gadgets\\_gadget_shock_field;", "contents": "_gadget_shock_field::is_local_player(${1:localClientNum})"},
	{ "trigger": "is_killcam\t#using scripts\\shared\\abilities\\gadgets\\_gadget_shock_field;", "contents": "_gadget_shock_field::is_killcam(${1:localClientNum})"},
	{ "trigger": "player_info_string\t#using scripts\\shared\\abilities\\gadgets\\_gadget_shock_field;", "contents": "_gadget_shock_field::player_info_string(${1:player}, ${2:desc})"},
	{ "trigger": "player_shock_changed\t#using scripts\\shared\\abilities\\gadgets\\_gadget_shock_field;", "contents": "_gadget_shock_field::player_shock_changed(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "octobomb_tentacle_hit_fx\t#using scripts\\zm\\_zm_weap_octobomb;", "contents": "_zm_weap_octobomb::octobomb_tentacle_hit_fx(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "octobomb_fx\t#using scripts\\zm\\_zm_weap_octobomb;", "contents": "_zm_weap_octobomb::octobomb_fx(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "octobomb_spores_fx\t#using scripts\\zm\\_zm_weap_octobomb;", "contents": "_zm_weap_octobomb::octobomb_spores_fx(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "octobomb_spore_fx_on\t#using scripts\\zm\\_zm_weap_octobomb;", "contents": "_zm_weap_octobomb::octobomb_spore_fx_on(${1:localClientNum}, ${2:n_fx_type})"},
	{ "trigger": "octobomb_zombie_explode_fx\t#using scripts\\zm\\_zm_weap_octobomb;", "contents": "_zm_weap_octobomb::octobomb_zombie_explode_fx(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "octobomb_spit_fx\t#using scripts\\zm\\_zm_weap_octobomb;", "contents": "_zm_weap_octobomb::octobomb_spit_fx(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "octobomb_spit_fx_and_cleanup\t#using scripts\\zm\\_zm_weap_octobomb;", "contents": "_zm_weap_octobomb::octobomb_spit_fx_and_cleanup(${1:localClientNum}, ${2:v_origin}, ${3:v_angles}, ${4:fx_spit})"},
	{ "trigger": "watch_lockon\t#using scripts\\shared\\weapons\\replay_gun;", "contents": "replay_gun::watch_lockon(${1:localClientNum})"},
	{ "trigger": "watch_lockon_old\t#using scripts\\shared\\weapons\\replay_gun;", "contents": "replay_gun::watch_lockon_old(${1:localClientNum})"},
	{ "trigger": "ent_set_outline\t#using scripts\\shared\\weapons\\replay_gun;", "contents": "replay_gun::ent_set_outline(${1:color})"},
	{ "trigger": "on_player_spawned\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::on_player_spawned(${1:localclientnum})"},
	{ "trigger": "delay_set_exert_id\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::delay_set_exert_id(${1:newVal})"},
	{ "trigger": "charindex_cb\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::charindex_cb(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "isspeaking_cb\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::isspeaking_cb(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "zmbMusLooper\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::zmbMusLooper()"},
	{ "trigger": "waitfor_music_stop\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::waitfor_music_stop()"},
	{ "trigger": "playerFallDamageSound\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::playerFallDamageSound(${1:client_num}, ${2:firstperson})"},
	{ "trigger": "clientVoiceSetup\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::clientVoiceSetup()"},
	{ "trigger": "audio_player_connect\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::audio_player_connect(${1:localClientNum})"},
	{ "trigger": "playerExert\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::playerExert(${1:localClientNum}, ${2:exert})"},
	{ "trigger": "sndVoNotifyDTP\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::sndVoNotifyDTP(${1:localClientNum}, ${2:notifyString})"},
	{ "trigger": "sndMeleeSwipe\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::sndMeleeSwipe(${1:localClientNum}, ${2:notifyString})"},
	{ "trigger": "sndVoNotifyPlain\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::sndVoNotifyPlain(${1:localClientNum}, ${2:notifyString})"},
	{ "trigger": "end_gameover_snapshot\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::end_gameover_snapshot()"},
	{ "trigger": "gameover_snapshot\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::gameover_snapshot()"},
	{ "trigger": "sndSetZombieContext\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::sndSetZombieContext(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "sndZmbLaststand\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::sndZmbLaststand(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "enemy_highlight_display\t#using scripts\\shared\\enemy_highlight;", "contents": "enemy_highlight::enemy_highlight_display(${1:localClientNum}, ${2:materialName}, ${3:size}, ${4:fovPercent}, ${5:traceTimeCheck}, ${6:actorsOnly}, ${7:allyMaterialName})"},
	{ "trigger": "enemy_highlight_display_pulse\t#using scripts\\shared\\enemy_highlight;", "contents": "enemy_highlight::enemy_highlight_display_pulse(${1:localClientNum}, ${2:actorsOnly}, ${3:allyMaterialName})"},
	{ "trigger": "enemy_highlight_display_frame\t#using scripts\\shared\\enemy_highlight;", "contents": "enemy_highlight::enemy_highlight_display_frame(${1:localClientNum}, ${2:materialName}, ${3:size}, ${4:fovPercent}, ${5:traceTimeCheck}, ${6:allyMaterialName})"},
	{ "trigger": "enemy_highlight_display_stop\t#using scripts\\shared\\enemy_highlight;", "contents": "enemy_highlight::enemy_highlight_display_stop(${1:localClientNum})"},
	{ "trigger": "create_target_indicator\t#using scripts\\shared\\enemy_highlight; self = player", "contents": "enemy_highlight::create_target_indicator(${1:localClientNum}, ${2:entity}, ${3:materialName}, ${4:size})"},
	{ "trigger": "enable_quick_revive_perk_for_level\t#using scripts\\zm\\_zm_perk_quick_revive;", "contents": "zm_perk_quick_revive::enable_quick_revive_perk_for_level()"},
	{ "trigger": "quick_revive_client_field_func\t#using scripts\\zm\\_zm_perk_quick_revive;", "contents": "zm_perk_quick_revive::quick_revive_client_field_func()"},
	{ "trigger": "quick_revive_callback_func\t#using scripts\\zm\\_zm_perk_quick_revive;", "contents": "zm_perk_quick_revive::quick_revive_callback_func()"},
	{ "trigger": "LoadEffects\t#using scripts\\shared\\_burnplayer;", "contents": "burnplayer::LoadEffects()"},
	{ "trigger": "on_local_client_connect\t#using scripts\\shared\\_burnplayer;", "contents": "burnplayer::on_local_client_connect(${1:localClientNum})"},
	{ "trigger": "on_localplayer_spawned\t#using scripts\\shared\\_burnplayer;", "contents": "burnplayer::on_localplayer_spawned(${1:localClientNum})"},
	{ "trigger": "burning_callback\t#using scripts\\shared\\_burnplayer;", "contents": "burnplayer::burning_callback(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "burning_corpse_callback\t#using scripts\\shared\\_burnplayer;", "contents": "burnplayer::burning_corpse_callback(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "set_corpse_burning\t#using scripts\\shared\\_burnplayer;", "contents": "burnplayer::set_corpse_burning(${1:localClientNum})"},
	{ "trigger": "burn_off\t#using scripts\\shared\\_burnplayer;", "contents": "burnplayer::burn_off(${1:localClientNum})"},
	{ "trigger": "burn_on\t#using scripts\\shared\\_burnplayer;", "contents": "burnplayer::burn_on(${1:localClientNum})"},
	{ "trigger": "burn_on_postfx\t#using scripts\\shared\\_burnplayer;", "contents": "burnplayer::burn_on_postfx()"},
	{ "trigger": "electric_cherry_client_field_func\t#using scripts\\zm\\_zm_perk_electric_cherry;", "contents": "zm_perk_electric_cherry::electric_cherry_client_field_func()"},
	{ "trigger": "electric_cherry_code_callback_func\t#using scripts\\zm\\_zm_perk_electric_cherry;", "contents": "zm_perk_electric_cherry::electric_cherry_code_callback_func()"},
	{ "trigger": "electric_cherry_reload_attack_fx\t#using scripts\\zm\\_zm_perk_electric_cherry;", "contents": "zm_perk_electric_cherry::electric_cherry_reload_attack_fx(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "tesla_death_fx_callback\t#using scripts\\zm\\_zm_perk_electric_cherry; self = zombie", "contents": "zm_perk_electric_cherry::tesla_death_fx_callback(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "tesla_shock_eyes_fx_callback\t#using scripts\\zm\\_zm_perk_electric_cherry; self = zombie", "contents": "zm_perk_electric_cherry::tesla_shock_eyes_fx_callback(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "localClientConnect\t#using scripts\\shared\\custom_class;", "contents": "customclass::localClientConnect(${1:localClientNum})"},
	{ "trigger": "custom_class_start_threads\t#using scripts\\shared\\custom_class;", "contents": "customclass::custom_class_start_threads(${1:localClientNum})"},
	{ "trigger": "handle_cac_customization\t#using scripts\\shared\\custom_class;", "contents": "customclass::handle_cac_customization(${1:localClientNum})"},
	{ "trigger": "custom_class_update\t#using scripts\\shared\\custom_class;", "contents": "customclass::custom_class_update(${1:localClientNum})"},
	{ "trigger": "toggle_locked_weapon_shader\t#using scripts\\shared\\custom_class;", "contents": "customclass::toggle_locked_weapon_shader(${1:localClientNum}, ${2:is_item_unlocked = true})"},
	{ "trigger": "toggle_tokenlocked_weapon_shader\t#using scripts\\shared\\custom_class;", "contents": "customclass::toggle_tokenlocked_weapon_shader(${1:localClientNum}, ${2:is_item_tokenlocked = false})"},
	{ "trigger": "is_optic\t#using scripts\\shared\\custom_class;", "contents": "customclass::is_optic(${1:attachmentName})"},
	{ "trigger": "custom_class_attachment_select_focus\t#using scripts\\shared\\custom_class;", "contents": "customclass::custom_class_attachment_select_focus(${1:localClientNum})"},
	{ "trigger": "custom_class_remove\t#using scripts\\shared\\custom_class;", "contents": "customclass::custom_class_remove(${1:localClientNum})"},
	{ "trigger": "custom_class_closed\t#using scripts\\shared\\custom_class;", "contents": "customclass::custom_class_closed(${1:localClientNum})"},
	{ "trigger": "spawn_weapon_model\t#using scripts\\shared\\custom_class;", "contents": "customclass::spawn_weapon_model(${1:localClientNum}, ${2:origin}, ${3:angles})"},
	{ "trigger": "set_attachment_cosmetic_variants\t#using scripts\\shared\\custom_class;", "contents": "customclass::set_attachment_cosmetic_variants(${1:localClientNum}, ${2:acv_param})"},
	{ "trigger": "hide_paintshop_bg\t#using scripts\\shared\\custom_class;", "contents": "customclass::hide_paintshop_bg(${1:localClientNum})"},
	{ "trigger": "show_paintshop_bg\t#using scripts\\shared\\custom_class;", "contents": "customclass::show_paintshop_bg(${1:localClientNum})"},
	{ "trigger": "get_camo_index\t#using scripts\\shared\\custom_class;", "contents": "customclass::get_camo_index(${1:localClientNum})"},
	{ "trigger": "get_reticle_index\t#using scripts\\shared\\custom_class;", "contents": "customclass::get_reticle_index(${1:localClientNum})"},
	{ "trigger": "get_show_payer_tag\t#using scripts\\shared\\custom_class;", "contents": "customclass::get_show_payer_tag(${1:localClientNum})"},
	{ "trigger": "get_show_emblem\t#using scripts\\shared\\custom_class;", "contents": "customclass::get_show_emblem(${1:localClientNum})"},
	{ "trigger": "get_show_paintshop\t#using scripts\\shared\\custom_class;", "contents": "customclass::get_show_paintshop(${1:localClientNum})"},
	{ "trigger": "set_weapon_options\t#using scripts\\shared\\custom_class;", "contents": "customclass::set_weapon_options(${1:localClientNum}, ${2:weapon_options_param})"},
	{ "trigger": "get_lerp_duration\t#using scripts\\shared\\custom_class;", "contents": "customclass::get_lerp_duration(${1:camera})"},
	{ "trigger": "setup_paintshop_bg\t#using scripts\\shared\\custom_class;", "contents": "customclass::setup_paintshop_bg(${1:localClientNum}, ${2:camera})"},
	{ "trigger": "transition_camera_immediate\t#using scripts\\shared\\custom_class;", "contents": "customclass::transition_camera_immediate(${1:localClientNum}, ${2:weaponType}, ${3:camera}, ${4:subxcam}, ${5:lerpDuration}, ${6:notetrack})"},
	{ "trigger": "wait_preload_weapon\t#using scripts\\shared\\custom_class;", "contents": "customclass::wait_preload_weapon(${1:localClientNum})"},
	{ "trigger": "preload_weapon_watcher\t#using scripts\\shared\\custom_class;", "contents": "customclass::preload_weapon_watcher(${1:localClientNum})"},
	{ "trigger": "preload_weapon_model\t#using scripts\\shared\\custom_class;", "contents": "customclass::preload_weapon_model(${1:localClientNum}, ${2:newWeaponString}, ${3:should_update_weapon_options = true})"},
	{ "trigger": "update_weapon_script_model\t#using scripts\\shared\\custom_class;", "contents": "customclass::update_weapon_script_model(${1:localClientNum}, ${2:newWeaponString}, ${3:should_update_weapon_options = true}, ${4:is_item_unlocked = true}, ${5:is_item_tokenlocked = false})"},
	{ "trigger": "get_attachments_intersection\t#using scripts\\shared\\custom_class;", "contents": "customclass::get_attachments_intersection(${1:oldWeapon}, ${2:newWeapon})"},
	{ "trigger": "handle_cac_customization_focus\t#using scripts\\shared\\custom_class;", "contents": "customclass::handle_cac_customization_focus(${1:localClientNum})"},
	{ "trigger": "handle_cac_customization_weaponoption\t#using scripts\\shared\\custom_class;", "contents": "customclass::handle_cac_customization_weaponoption(${1:localClientNum})"},
	{ "trigger": "handle_cac_customization_attachmentvariant\t#using scripts\\shared\\custom_class;", "contents": "customclass::handle_cac_customization_attachmentvariant(${1:localClientNum})"},
	{ "trigger": "handle_cac_customization_closed\t#using scripts\\shared\\custom_class;", "contents": "customclass::handle_cac_customization_closed(${1:localClientNum})"},
	{ "trigger": "BuildAndValidateFacialAnimationList\t#using scripts\\shared\\clientfaceanim_shared;", "contents": "clientfaceanim::BuildAndValidateFacialAnimationList(${1:localClientNum})"},
	{ "trigger": "roulette_clientfield_cb\t#using scripts\\shared\\abilities\\gadgets\\_gadget_roulette;", "contents": "gadget_roulette::roulette_clientfield_cb(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "update_roulette\t#using scripts\\shared\\abilities\\gadgets\\_gadget_roulette;", "contents": "gadget_roulette::update_roulette(${1:localClientNum}, ${2:newVal})"},
	{ "trigger": "on_localplayer_spawned\t#using scripts\\shared\\abilities\\gadgets\\_gadget_roulette;", "contents": "gadget_roulette::on_localplayer_spawned(${1:localClientNum})"},
	{ "trigger": "struct::delete\t#using scripts\\codescripts\\struct;", "contents": "struct::delete()"},
	{ "trigger": "struct::get\t#using scripts\\codescripts\\struct;", "contents": "struct::get(${1:kvp_value}, ${2:kvp_key = \"targetname\"})"},
	{ "trigger": "struct::spawn\t#using scripts\\codescripts\\struct;", "contents": "struct::spawn(${1:v_origin = (0}, ${2:0}, ${3:0)}, ${4:v_angles = (0}, ${5:0}, ${6:0)})"},
	{ "trigger": "struct::get_array\t#using scripts\\codescripts\\struct;", "contents": "struct::get_array(${1:kvp_value}, ${2:kvp_key = \"targetname\"})"},
	{ "trigger": "struct::get_script_bundle\t#using scripts\\codescripts\\struct;", "contents": "struct::get_script_bundle(${1:str_type}, ${2:str_name})"},
	{ "trigger": "struct::delete_script_bundle\t#using scripts\\codescripts\\struct;", "contents": "struct::delete_script_bundle(${1:str_type}, ${2:str_name})"},
	{ "trigger": "struct::get_script_bundles_of_type\t#using scripts\\codescripts\\struct;", "contents": "struct::get_script_bundles_of_type(${1:str_type})"},
	{ "trigger": "struct::get_script_bundles\t#using scripts\\codescripts\\struct;", "contents": "struct::get_script_bundles(${1:str_type})"},
	{ "trigger": "struct::get_script_bundle_list\t#using scripts\\codescripts\\struct;", "contents": "struct::get_script_bundle_list(${1:str_type}, ${2:str_name})"},
	{ "trigger": "struct::get_script_bundle_instances\t#using scripts\\codescripts\\struct;", "contents": "struct::get_script_bundle_instances(${1:str_type}, ${2:str_name = \"\"})"},
	{ "trigger": "bouncingbetty_state_change\t#using scripts\\shared\\weapons\\_bouncingbetty;", "contents": "bouncingbetty::bouncingbetty_state_change(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "bouncingbetty_deploying\t#using scripts\\shared\\weapons\\_bouncingbetty;", "contents": "bouncingbetty::bouncingbetty_deploying(${1:localClientNum})"},
	{ "trigger": "bouncingbetty_detonating\t#using scripts\\shared\\weapons\\_bouncingbetty;", "contents": "bouncingbetty::bouncingbetty_detonating(${1:localClientNum})"},
	{ "trigger": "watchForExplosionNotetracks\t#using scripts\\shared\\weapons\\_bouncingbetty;", "contents": "bouncingbetty::watchForExplosionNotetracks(${1:localClientNum}, ${2:up}, ${3:forward})"},
	{ "trigger": "musicCmdHandler\t#using scripts\\shared\\music_shared;", "contents": "music::musicCmdHandler(${1:clientNum}, ${2:state}, ${3:oldState})"},
	{ "trigger": "function_thread\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::function_thread(${1:ent}, ${2:on_enter_payload}, ${3:on_exit_payload})"},
	{ "trigger": "ent_already_in\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::ent_already_in(${1:trig})"},
	{ "trigger": "add_to_ent\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::add_to_ent(${1:ent}, ${2:trig})"},
	{ "trigger": "remove_from_ent\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::remove_from_ent(${1:ent}, ${2:trig})"},
	{ "trigger": "death_monitor\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::death_monitor(${1:ent}, ${2:ender})"},
	{ "trigger": "on_player_spawned\t#using scripts\\shared\\duplicaterender_mgr;", "contents": "duplicate_render::on_player_spawned(${1:local_client_num})"},
	{ "trigger": "on_player_connect\t#using scripts\\shared\\duplicaterender_mgr;", "contents": "duplicate_render::on_player_connect(${1:localClientNum})"},
	{ "trigger": "wait_team_changed\t#using scripts\\shared\\duplicaterender_mgr;", "contents": "duplicate_render::wait_team_changed(${1:localClientNum})"},
	{ "trigger": "set_dr_filter\t#using scripts\\shared\\duplicaterender_mgr;", "contents": "duplicate_render::set_dr_filter(${1:filterset}, ${2:name}, ${3:priority}, ${4:require_flags}, ${5:refuse_flags}, ${6:drtype1}, ${7:drval1}, ${8:drcull1}, ${9:drtype2}, ${10:drval2}, ${11:drcull2}, ${12:drtype3}, ${13:drval3}, ${14:drcull3})"},
	{ "trigger": "set_dr_filter_framebuffer\t#using scripts\\shared\\duplicaterender_mgr;", "contents": "duplicate_render::set_dr_filter_framebuffer(${1:name}, ${2:priority}, ${3:require_flags}, ${4:refuse_flags}, ${5:drtype1}, ${6:drval1}, ${7:drcull1}, ${8:drtype2}, ${9:drval2}, ${10:drcull2}, ${11:drtype3}, ${12:drval3}, ${13:drcull3})"},
	{ "trigger": "set_dr_filter_framebuffer_duplicate\t#using scripts\\shared\\duplicaterender_mgr;", "contents": "duplicate_render::set_dr_filter_framebuffer_duplicate(${1:name}, ${2:priority}, ${3:require_flags}, ${4:refuse_flags}, ${5:drtype1}, ${6:drval1}, ${7:drcull1}, ${8:drtype2}, ${9:drval2}, ${10:drcull2}, ${11:drtype3}, ${12:drval3}, ${13:drcull3})"},
	{ "trigger": "set_dr_filter_offscreen\t#using scripts\\shared\\duplicaterender_mgr;", "contents": "duplicate_render::set_dr_filter_offscreen(${1:name}, ${2:priority}, ${3:require_flags}, ${4:refuse_flags}, ${5:drtype1}, ${6:drval1}, ${7:drcull1}, ${8:drtype2}, ${9:drval2}, ${10:drcull2}, ${11:drtype3}, ${12:drval3}, ${13:drcull3})"},
	{ "trigger": "register_filter_materials\t#using scripts\\shared\\duplicaterender_mgr;", "contents": "duplicate_render::register_filter_materials(${1:filter})"},
	{ "trigger": "update_dr_flag\t#using scripts\\shared\\duplicaterender_mgr;", "contents": "duplicate_render::update_dr_flag(${1:localClientNum}, ${2:toset}, ${3:setto=true})"},
	{ "trigger": "set_dr_flag_not_array\t#using scripts\\shared\\duplicaterender_mgr;", "contents": "duplicate_render::set_dr_flag_not_array(${1:toset}, ${2:setto=true})"},
	{ "trigger": "set_dr_flag\t#using scripts\\shared\\duplicaterender_mgr;", "contents": "duplicate_render::set_dr_flag(${1:toset}, ${2:setto=true})"},
	{ "trigger": "clear_dr_flag\t#using scripts\\shared\\duplicaterender_mgr;", "contents": "duplicate_render::clear_dr_flag(${1:toclear})"},
	{ "trigger": "change_dr_flags\t#using scripts\\shared\\duplicaterender_mgr;", "contents": "duplicate_render::change_dr_flags(${1:localClientNum}, ${2:toset}, ${3:toclear})"},
	{ "trigger": "_update_dr_filters\t#using scripts\\shared\\duplicaterender_mgr;", "contents": "duplicate_render::_update_dr_filters(${1:localClientNum})"},
	{ "trigger": "update_dr_filters\t#using scripts\\shared\\duplicaterender_mgr;", "contents": "duplicate_render::update_dr_filters(${1:localClientNum})"},
	{ "trigger": "find_dr_filter\t#using scripts\\shared\\duplicaterender_mgr;", "contents": "duplicate_render::find_dr_filter(${1:filterset = level.drfilters[FRAMEBUFFER_FILTER_SET]})"},
	{ "trigger": "can_use_filter\t#using scripts\\shared\\duplicaterender_mgr;", "contents": "duplicate_render::can_use_filter(${1:filter})"},
	{ "trigger": "apply_filter\t#using scripts\\shared\\duplicaterender_mgr;", "contents": "duplicate_render::apply_filter(${1:localClientNum}, ${2:filter}, ${3:filterset = FRAMEBUFFER_FILTER_SET})"},
	{ "trigger": "disable_all_filters_on_game_ended\t#using scripts\\shared\\duplicaterender_mgr;", "contents": "duplicate_render::disable_all_filters_on_game_ended()"},
	{ "trigger": "set_item_retrievable\t#using scripts\\shared\\duplicaterender_mgr;", "contents": "duplicate_render::set_item_retrievable(${1:localClientNum}, ${2:on_off})"},
	{ "trigger": "set_item_unplaceable\t#using scripts\\shared\\duplicaterender_mgr;", "contents": "duplicate_render::set_item_unplaceable(${1:localClientNum}, ${2:on_off})"},
	{ "trigger": "set_item_enemy_equipment\t#using scripts\\shared\\duplicaterender_mgr;", "contents": "duplicate_render::set_item_enemy_equipment(${1:localClientNum}, ${2:on_off})"},
	{ "trigger": "set_item_friendly_equipment\t#using scripts\\shared\\duplicaterender_mgr;", "contents": "duplicate_render::set_item_friendly_equipment(${1:localClientNum}, ${2:on_off})"},
	{ "trigger": "set_item_enemy_explosive\t#using scripts\\shared\\duplicaterender_mgr;", "contents": "duplicate_render::set_item_enemy_explosive(${1:localClientNum}, ${2:on_off})"},
	{ "trigger": "set_item_friendly_explosive\t#using scripts\\shared\\duplicaterender_mgr;", "contents": "duplicate_render::set_item_friendly_explosive(${1:localClientNum}, ${2:on_off})"},
	{ "trigger": "set_item_enemy_vehicle\t#using scripts\\shared\\duplicaterender_mgr;", "contents": "duplicate_render::set_item_enemy_vehicle(${1:localClientNum}, ${2:on_off})"},
	{ "trigger": "set_item_friendly_vehicle\t#using scripts\\shared\\duplicaterender_mgr;", "contents": "duplicate_render::set_item_friendly_vehicle(${1:localClientNum}, ${2:on_off})"},
	{ "trigger": "set_entity_thermal\t#using scripts\\shared\\duplicaterender_mgr;", "contents": "duplicate_render::set_entity_thermal(${1:localClientNum}, ${2:on_off})"},
	{ "trigger": "set_player_threat_detected\t#using scripts\\shared\\duplicaterender_mgr;", "contents": "duplicate_render::set_player_threat_detected(${1:localClientNum}, ${2:on_off})"},
	{ "trigger": "set_hacker_tool_hacked\t#using scripts\\shared\\duplicaterender_mgr;", "contents": "duplicate_render::set_hacker_tool_hacked(${1:localClientNum}, ${2:on_off})"},
	{ "trigger": "set_hacker_tool_hacking\t#using scripts\\shared\\duplicaterender_mgr;", "contents": "duplicate_render::set_hacker_tool_hacking(${1:localClientNum}, ${2:on_off})"},
	{ "trigger": "set_hacker_tool_breaching\t#using scripts\\shared\\duplicaterender_mgr;", "contents": "duplicate_render::set_hacker_tool_breaching(${1:localClientNum}, ${2:on_off})"},
	{ "trigger": "show_friendly_outlines\t#using scripts\\shared\\duplicaterender_mgr;", "contents": "duplicate_render::show_friendly_outlines(${1:local_client_num})"},
	{ "trigger": "is_weapon_included\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::is_weapon_included(${1:weapon})"},
	{ "trigger": "compute_player_weapon_ammo_cost\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::compute_player_weapon_ammo_cost(${1:weapon}, ${2:cost}, ${3:upgraded}, ${4:n_base_non_wallbuy_cost}, ${5:n_upgraded_non_wallbuy_cost})"},
	{ "trigger": "include_weapon\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::include_weapon(${1:weapon_name}, ${2:display_in_box}, ${3:cost}, ${4:ammo_cost}, ${5:upgraded=false})"},
	{ "trigger": "include_upgraded_weapon\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::include_upgraded_weapon(${1:weapon_name}, ${2:upgrade_name}, ${3:display_in_box}, ${4:cost}, ${5:ammo_cost})"},
	{ "trigger": "is_weapon_upgraded\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::is_weapon_upgraded(${1:weapon})"},
	{ "trigger": "is_wallbuy\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::is_wallbuy(${1:w_to_check})"},
	{ "trigger": "wallbuy_player_connect\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::wallbuy_player_connect(${1:localClientNum})"},
	{ "trigger": "wallbuy_callback\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::wallbuy_callback(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "wallbuy_callback_idx\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::wallbuy_callback_idx(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "checkStringValid\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::checkStringValid(${1:str})"},
	{ "trigger": "load_weapon_spec_from_table\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::load_weapon_spec_from_table(${1:table}, ${2:first_row})"},
	{ "trigger": "on_player_connect\t#using scripts\\shared\\abilities\\gadgets\\_gadget_hacker;", "contents": "_gadget_hacker::on_player_connect(${1:localClientNum})"},
	{ "trigger": "on_player_spawned\t#using scripts\\shared\\abilities\\gadgets\\_gadget_hacker;", "contents": "_gadget_hacker::on_player_spawned(${1:localClientNum})"},
	{ "trigger": "has_hacker_changed\t#using scripts\\shared\\abilities\\gadgets\\_gadget_hacker;", "contents": "_gadget_hacker::has_hacker_changed(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "watch_hack_ents\t#using scripts\\shared\\abilities\\gadgets\\_gadget_hacker;", "contents": "_gadget_hacker::watch_hack_ents(${1:localClientNum})"},
	{ "trigger": "has_hacking_changed\t#using scripts\\shared\\abilities\\gadgets\\_gadget_hacker;", "contents": "_gadget_hacker::has_hacking_changed(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "play_hacking_sounds\t#using scripts\\shared\\abilities\\gadgets\\_gadget_hacker;", "contents": "_gadget_hacker::play_hacking_sounds(${1:localClientNum})"},
	{ "trigger": "animate_crack\t#using scripts\\shared\\shaderanim_shared;", "contents": "shaderanim::animate_crack(${1:localClientNum}, ${2:vectorName}, ${3:delay}, ${4:duration}, ${5:start}, ${6:end})"},
	{ "trigger": "shaderanim_update_opacity\t#using scripts\\shared\\shaderanim_shared;", "contents": "shaderanim::shaderanim_update_opacity(${1:entity}, ${2:localClientNum}, ${3:opacity})"},
	{ "trigger": "set_rocketshield_ammo\t#using scripts\\zm\\_zm_weap_rocketshield;", "contents": "zm_equip_turret::set_rocketshield_ammo(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "dog_fx\t#using scripts\\zm\\_zm_ai_dogs; self = dog", "contents": "zm_ai_dogs::dog_fx(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "getExploderId\t#using scripts\\shared\\exploder_shared;", "contents": "exploder::getExploderId(${1:ent})"},
	{ "trigger": "reportExploderIds\t#using scripts\\shared\\exploder_shared;", "contents": "exploder::reportExploderIds()"},
	{ "trigger": "exploder\t#using scripts\\shared\\exploder_shared;", "contents": "exploder::exploder(${1:exploder_id})"},
	{ "trigger": "activate_exploder\t#using scripts\\shared\\exploder_shared;", "contents": "exploder::activate_exploder(${1:num})"},
	{ "trigger": "activate_individual_exploder\t#using scripts\\shared\\exploder_shared;", "contents": "exploder::activate_individual_exploder()"},
	{ "trigger": "activate_radiant_exploder\t#using scripts\\shared\\exploder_shared;", "contents": "exploder::activate_radiant_exploder(${1:string})"},
	{ "trigger": "stop_exploder\t#using scripts\\shared\\exploder_shared;", "contents": "exploder::stop_exploder(${1:exploder_id})"},
	{ "trigger": "kill_exploder\t#using scripts\\shared\\exploder_shared;", "contents": "exploder::kill_exploder(${1:exploder_id})"},
	{ "trigger": "exploder_delay\t#using scripts\\shared\\exploder_shared;", "contents": "exploder::exploder_delay()"},
	{ "trigger": "exploder_playSound\t#using scripts\\shared\\exploder_shared;", "contents": "exploder::exploder_playSound()"},
	{ "trigger": "exploder_earthquake\t#using scripts\\shared\\exploder_shared;", "contents": "exploder::exploder_earthquake()"},
	{ "trigger": "exploder_is_lightning_exploder\t#using scripts\\shared\\exploder_shared;", "contents": "exploder::exploder_is_lightning_exploder(${1:num})"},
	{ "trigger": "stopLightLoopExploder\t#using scripts\\shared\\exploder_shared;", "contents": "exploder::stopLightLoopExploder(${1:exploderIndex})"},
	{ "trigger": "playLightLoopExploder\t#using scripts\\shared\\exploder_shared;", "contents": "exploder::playLightLoopExploder(${1:exploderIndex})"},
	{ "trigger": "createExploder\t#using scripts\\shared\\exploder_shared;", "contents": "exploder::createExploder(${1:fxid})"},
	{ "trigger": "cannon_effect\t#using scripts\\shared\\exploder_shared;", "contents": "exploder::cannon_effect()"},
	{ "trigger": "fire_effect\t#using scripts\\shared\\exploder_shared;", "contents": "exploder::fire_effect()"},
	{ "trigger": "playExploderFX\t#using scripts\\shared\\exploder_shared;", "contents": "exploder::playExploderFX(${1:clientNum})"},
	{ "trigger": "stop_after_duration\t#using scripts\\shared\\exploder_shared;", "contents": "exploder::stop_after_duration(${1:name}, ${2:duration})"},
	{ "trigger": "exploder_duration\t#using scripts\\shared\\exploder_shared;", "contents": "exploder::exploder_duration(${1:name}, ${2:duration})"},
	{ "trigger": "playPostfxBundle\t#using scripts\\shared\\postfx_shared;", "contents": "postfx::playPostfxBundle(${1:playBundleName})"},
	{ "trigger": "watchEntityShutdown\t#using scripts\\shared\\postfx_shared;", "contents": "postfx::watchEntityShutdown(${1:localClientNum}, ${2:filterid})"},
	{ "trigger": "SetFilterConstants\t#using scripts\\shared\\postfx_shared;", "contents": "postfx::SetFilterConstants(${1:localClientNum}, ${2:shaderConstantName}, ${3:filterid}, ${4:values})"},
	{ "trigger": "finishPlayingPostfxBundle\t#using scripts\\shared\\postfx_shared;", "contents": "postfx::finishPlayingPostfxBundle(${1:localClientNum}, ${2:msg}, ${3:filterid})"},
	{ "trigger": "stopPlayingPostfxBundle\t#using scripts\\shared\\postfx_shared;", "contents": "postfx::stopPlayingPostfxBundle()"},
	{ "trigger": "stopPostfxBundle\t#using scripts\\shared\\postfx_shared;", "contents": "postfx::stopPostfxBundle()"},
	{ "trigger": "exitPostfxBundle\t#using scripts\\shared\\postfx_shared;", "contents": "postfx::exitPostfxBundle()"},
	{ "trigger": "setFrontendStreamingOverlay\t#using scripts\\shared\\postfx_shared;", "contents": "postfx::setFrontendStreamingOverlay(${1:localClientNum}, ${2:system}, ${3:enabled})"},
	{ "trigger": "on_player_connect\t#using scripts\\shared\\hackable;", "contents": "hackable::on_player_connect(${1:localClientNum})"},
	{ "trigger": "set_hacked_ent\t#using scripts\\shared\\hackable;", "contents": "hackable::set_hacked_ent(${1:local_client_num}, ${2:ent})"},
	{ "trigger": "setup_teleport_aftereffects\t#using scripts\\zm\\zm_giant_teleporter;", "contents": "zm_giant_teleporter::setup_teleport_aftereffects()"},
	{ "trigger": "wait_for_black_box\t#using scripts\\zm\\zm_giant_teleporter;", "contents": "zm_giant_teleporter::wait_for_black_box()"},
	{ "trigger": "wait_for_teleport_aftereffect\t#using scripts\\zm\\zm_giant_teleporter;", "contents": "zm_giant_teleporter::wait_for_teleport_aftereffect()"},
	{ "trigger": "teleport_aftereffect_shellshock\t#using scripts\\zm\\zm_giant_teleporter;", "contents": "zm_giant_teleporter::teleport_aftereffect_shellshock(${1:localClientNum})"},
	{ "trigger": "teleport_aftereffect_shellshock_electric\t#using scripts\\zm\\zm_giant_teleporter;", "contents": "zm_giant_teleporter::teleport_aftereffect_shellshock_electric(${1:localClientNum})"},
	{ "trigger": "teleport_aftereffect_fov\t#using scripts\\zm\\zm_giant_teleporter;", "contents": "zm_giant_teleporter::teleport_aftereffect_fov(${1:localClientNum})"},
	{ "trigger": "teleport_aftereffect_bw_vision\t#using scripts\\zm\\zm_giant_teleporter;", "contents": "zm_giant_teleporter::teleport_aftereffect_bw_vision(${1:localClientNum})"},
	{ "trigger": "teleport_aftereffect_red_vision\t#using scripts\\zm\\zm_giant_teleporter;", "contents": "zm_giant_teleporter::teleport_aftereffect_red_vision(${1:localClientNum})"},
	{ "trigger": "teleport_aftereffect_flashy_vision\t#using scripts\\zm\\zm_giant_teleporter;", "contents": "zm_giant_teleporter::teleport_aftereffect_flashy_vision(${1:localClientNum})"},
	{ "trigger": "teleport_aftereffect_flare_vision\t#using scripts\\zm\\zm_giant_teleporter;", "contents": "zm_giant_teleporter::teleport_aftereffect_flare_vision(${1:localClientNum})"},
	{ "trigger": "zm_aat_fire_works_summon\t#using scripts\\zm\\aats\\_zm_aat_fire_works;", "contents": "zm_aat_fire_works::zm_aat_fire_works_summon(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "kill_fx_on_demo_jump\t#using scripts\\zm\\aats\\_zm_aat_fire_works;", "contents": "zm_aat_fire_works::kill_fx_on_demo_jump(${1:localClientNum})"},
	{ "trigger": "has_cleanse_changed\t#using scripts\\shared\\abilities\\gadgets\\_gadget_cleanse;", "contents": "_gadget_cleanse::has_cleanse_changed(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "perks_register_clientfield\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::perks_register_clientfield()"},
	{ "trigger": "register_perk_clientfields\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::register_perk_clientfields(${1:str_perk}, ${2:func_clientfield_register}, ${3:func_code_callback})"},
	{ "trigger": "register_perk_effects\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::register_perk_effects(${1:str_perk}, ${2:str_light_effect})"},
	{ "trigger": "_register_undefined_perk\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::_register_undefined_perk(${1:str_perk})"},
	{ "trigger": "perk_meteor_fx\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::perk_meteor_fx(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "perk_start_up\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::perk_start_up()"},
	{ "trigger": "vending_machine_flicker_light\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::vending_machine_flicker_light(${1:fx_light}, ${2:duration})"},
	{ "trigger": "play_perk_fx_on_client\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::play_perk_fx_on_client(${1:client_num}, ${2:fx_light}, ${3:duration})"},
	{ "trigger": "register\t#using scripts\\shared\\weapons\\_hive_gun;", "contents": "hive_gun::register()"},
	{ "trigger": "getOtherTeam\t#using scripts\\shared\\weapons\\_hive_gun;", "contents": "hive_gun::getOtherTeam(${1:team})"},
	{ "trigger": "fireflies_attacking\t#using scripts\\shared\\weapons\\_hive_gun;", "contents": "hive_gun::fireflies_attacking(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "fireflies_chasing\t#using scripts\\shared\\weapons\\_hive_gun;", "contents": "hive_gun::fireflies_chasing(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "watch_player_fx_finished\t#using scripts\\shared\\weapons\\_hive_gun;", "contents": "hive_gun::watch_player_fx_finished(${1:localClientNum}, ${2:fx}, ${3:sound})"},
	{ "trigger": "firefly_state_change\t#using scripts\\shared\\weapons\\_hive_gun;", "contents": "hive_gun::firefly_state_change(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "on_shutdown\t#using scripts\\shared\\weapons\\_hive_gun;", "contents": "hive_gun::on_shutdown(${1:localClientNum}, ${2:ent})"},
	{ "trigger": "firefly_deploying\t#using scripts\\shared\\weapons\\_hive_gun;", "contents": "hive_gun::firefly_deploying(${1:localClientNum})"},
	{ "trigger": "firefly_hunting\t#using scripts\\shared\\weapons\\_hive_gun;", "contents": "hive_gun::firefly_hunting(${1:localClientNum})"},
	{ "trigger": "firefly_watch_fx_finished\t#using scripts\\shared\\weapons\\_hive_gun;", "contents": "hive_gun::firefly_watch_fx_finished(${1:localClientNum}, ${2:fx})"},
	{ "trigger": "firefly_attacking\t#using scripts\\shared\\weapons\\_hive_gun;", "contents": "hive_gun::firefly_attacking(${1:localClientNum})"},
	{ "trigger": "firefly_link_attacking\t#using scripts\\shared\\weapons\\_hive_gun;", "contents": "hive_gun::firefly_link_attacking(${1:localClientNum})"},
	{ "trigger": "gib_fx\t#using scripts\\shared\\weapons\\_hive_gun;", "contents": "hive_gun::gib_fx(${1:localClientNum}, ${2:fxFileName}, ${3:gibFlag})"},
	{ "trigger": "gib_corpse\t#using scripts\\shared\\weapons\\_hive_gun;", "contents": "hive_gun::gib_corpse(${1:localClientNum}, ${2:value})"},
	{ "trigger": "watch_for_gib_notetracks\t#using scripts\\shared\\weapons\\_hive_gun;", "contents": "hive_gun::watch_for_gib_notetracks(${1:localClientNum})"},
	{ "trigger": "sentinel_drone_damage_player_fx\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_drone_damage_player_fx(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "sentinel_drone_deathfx\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_drone_deathfx(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "sentinel_drone_camera_scanner\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_drone_camera_scanner(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "sentinel_drone_camera_destroyed\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_drone_camera_destroyed(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "sentinel_drone_beam_fire1\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_drone_beam_fire1(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "sentinel_drone_beam_fire2\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_drone_beam_fire2(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "sentinel_drone_beam_fire3\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_drone_beam_fire3(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "sentinel_drone_beam_fire\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_drone_beam_fire(${1:localClientNum}, ${2:newVal}, ${3:tag_id})"},
	{ "trigger": "sentinel_drone_beam_set_target_id\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_drone_beam_set_target_id(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "sentinel_drone_beam_set_source_to_target\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_drone_beam_set_source_to_target(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "sentinel_drone_arm_cut_1\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_drone_arm_cut_1(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "sentinel_drone_arm_cut_2\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_drone_arm_cut_2(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "sentinel_drone_arm_cut_3\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_drone_arm_cut_3(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "sentinel_spawn_broken_arm\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_spawn_broken_arm(${1:localClientNum}, ${2:arm}, ${3:arm_tag}, ${4:claw_tag})"},
	{ "trigger": "sentinel_drone_arm_cut\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_drone_arm_cut(${1:localClientNum}, ${2:arm})"},
	{ "trigger": "sentinel_drone_beam_charge\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_drone_beam_charge(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "sentinel_drone_face_cut\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_drone_face_cut(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "sentinel_play_claws_ambient_fx\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_play_claws_ambient_fx(${1:localClientNum}, ${2:b_false})"},
	{ "trigger": "sentinel_play_engine_fx\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_play_engine_fx(${1:localClientNum}, ${2:b_engine}, ${3:b_roll_engine})"},
	{ "trigger": "sentinel_play_taunt\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_play_taunt(${1:localClientNum}, ${2:taunt_Arr})"},
	{ "trigger": "sentinel_launch_piece\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_launch_piece(${1:localClientNum}, ${2:model}, ${3:pos}, ${4:angles}, ${5:hitPos}, ${6:force})"},
	{ "trigger": "empty\t#using scripts\\shared\\util_shared;", "contents": "util::empty(${1:a}, ${2:b}, ${3:c}, ${4:d}, ${5:e})"},
	{ "trigger": "waitforallclients\t#using scripts\\shared\\util_shared;", "contents": "util::waitforallclients()"},
	{ "trigger": "waitforclient\t#using scripts\\shared\\util_shared;", "contents": "util::waitforclient(${1:client})"},
	{ "trigger": "get_dvar_float_default\t#using scripts\\shared\\util_shared;", "contents": "util::get_dvar_float_default(${1:str_dvar}, ${2:default_val})"},
	{ "trigger": "get_dvar_int_default\t#using scripts\\shared\\util_shared;", "contents": "util::get_dvar_int_default(${1:str_dvar}, ${2:default_val})"},
	{ "trigger": "spawn_model\t#using scripts\\shared\\util_shared;", "contents": "util::spawn_model(${1:n_client}, ${2:str_model}, ${3:origin = ( 0}, ${4:0}, ${5:0 )}, ${6:angles = ( 0}, ${7:0}, ${8:0 )})"},
	{ "trigger": "waittill_string\t#using scripts\\shared\\util_shared;", "contents": "util::waittill_string(${1:msg}, ${2:ent})"},
	{ "trigger": "waittill_multiple\t#using scripts\\shared\\util_shared;", "contents": "util::waittill_multiple(${1:...})"},
	{ "trigger": "waittill_multiple_ents\t#using scripts\\shared\\util_shared;", "contents": "util::waittill_multiple_ents(${1:...})"},
	{ "trigger": "_waitlogic\t#using scripts\\shared\\util_shared;", "contents": "util::_waitlogic(${1:s_tracker}, ${2:notifies})"},
	{ "trigger": "waittill_any_return\t#using scripts\\shared\\util_shared;", "contents": "util::waittill_any_return(${1:string1}, ${2:string2}, ${3:string3}, ${4:string4}, ${5:string5}, ${6:string6}, ${7:string7})"},
	{ "trigger": "waittill_any_array_return\t#using scripts\\shared\\util_shared;", "contents": "util::waittill_any_array_return(${1:a_notifies})"},
	{ "trigger": "waittill_any\t#using scripts\\shared\\util_shared;", "contents": "util::waittill_any(${1:str_notify1}, ${2:str_notify2}, ${3:str_notify3}, ${4:str_notify4}, ${5:str_notify5})"},
	{ "trigger": "waittill_any_array\t#using scripts\\shared\\util_shared;", "contents": "util::waittill_any_array(${1:a_notifies})"},
	{ "trigger": "waittill_any_timeout\t#using scripts\\shared\\util_shared;", "contents": "util::waittill_any_timeout(${1:n_timeout}, ${2:string1}, ${3:string2}, ${4:string3}, ${5:string4}, ${6:string5})"},
	{ "trigger": "_timeout\t#using scripts\\shared\\util_shared;", "contents": "util::_timeout(${1:delay})"},
	{ "trigger": "waittill_notify_or_timeout\t#using scripts\\shared\\util_shared;", "contents": "util::waittill_notify_or_timeout(${1:msg}, ${2:timer})"},
	{ "trigger": "waittill_any_ents\t#using scripts\\shared\\util_shared;", "contents": "util::waittill_any_ents(${1:ent1}, ${2:string1}, ${3:ent2}, ${4:string2}, ${5:ent3}, ${6:string3}, ${7:ent4}, ${8:string4}, ${9:ent5}, ${10:string5}, ${11:ent6}, ${12:string6}, ${13:ent7}, ${14:string7})"},
	{ "trigger": "waittill_any_ents_two\t#using scripts\\shared\\util_shared;", "contents": "util::waittill_any_ents_two(${1:ent1}, ${2:string1}, ${3:ent2}, ${4:string2})"},
	{ "trigger": "single_func\t#using scripts\\shared\\util_shared;", "contents": "util::single_func(${1:entity}, ${2:func}, ${3:arg1}, ${4:arg2}, ${5:arg3}, ${6:arg4}, ${7:arg5}, ${8:arg6})"},
	{ "trigger": "new_func\t#using scripts\\shared\\util_shared;", "contents": "util::new_func(${1:func}, ${2:arg1}, ${3:arg2}, ${4:arg3}, ${5:arg4}, ${6:arg5}, ${7:arg6})"},
	{ "trigger": "call_func\t#using scripts\\shared\\util_shared;", "contents": "util::call_func(${1:s_func})"},
	{ "trigger": "array_ent_thread\t#using scripts\\shared\\util_shared;", "contents": "util::array_ent_thread(${1:entities}, ${2:func}, ${3:arg1}, ${4:arg2}, ${5:arg3}, ${6:arg4}, ${7:arg5})"},
	{ "trigger": "single_thread\t#using scripts\\shared\\util_shared;", "contents": "util::single_thread(${1:entity}, ${2:func}, ${3:arg1}, ${4:arg2}, ${5:arg3}, ${6:arg4}, ${7:arg5}, ${8:arg6})"},
	{ "trigger": "add_listen_thread\t#using scripts\\shared\\util_shared;", "contents": "util::add_listen_thread(${1:wait_till}, ${2:func}, ${3:param1}, ${4:param2}, ${5:param3}, ${6:param4}, ${7:param5})"},
	{ "trigger": "add_listen_thread_internal\t#using scripts\\shared\\util_shared;", "contents": "util::add_listen_thread_internal(${1:wait_till}, ${2:func}, ${3:param1}, ${4:param2}, ${5:param3}, ${6:param4}, ${7:param5})"},
	{ "trigger": "timeout\t#using scripts\\shared\\util_shared;", "contents": "util::timeout(${1:n_time}, ${2:func}, ${3:arg1}, ${4:arg2}, ${5:arg3}, ${6:arg4}, ${7:arg5}, ${8:arg6})"},
	{ "trigger": "delay\t#using scripts\\shared\\util_shared;", "contents": "util::delay(${1:time_or_notify}, ${2:str_endon}, ${3:func}, ${4:arg1}, ${5:arg2}, ${6:arg3}, ${7:arg4}, ${8:arg5}, ${9:arg6})"},
	{ "trigger": "_delay\t#using scripts\\shared\\util_shared;", "contents": "util::_delay(${1:time_or_notify}, ${2:str_endon}, ${3:func}, ${4:arg1}, ${5:arg2}, ${6:arg3}, ${7:arg4}, ${8:arg5}, ${9:arg6})"},
	{ "trigger": "delay_notify\t#using scripts\\shared\\util_shared;", "contents": "util::delay_notify(${1:time_or_notify}, ${2:str_notify}, ${3:str_endon})"},
	{ "trigger": "_delay_notify\t#using scripts\\shared\\util_shared;", "contents": "util::_delay_notify(${1:time_or_notify}, ${2:str_notify}, ${3:str_endon})"},
	{ "trigger": "new_timer\t#using scripts\\shared\\util_shared;", "contents": "util::new_timer(${1:n_timer_length})"},
	{ "trigger": "get_time\t#using scripts\\shared\\util_shared;", "contents": "util::get_time()"},
	{ "trigger": "get_time_in_seconds\t#using scripts\\shared\\util_shared;", "contents": "util::get_time_in_seconds()"},
	{ "trigger": "get_time_frac\t#using scripts\\shared\\util_shared;", "contents": "util::get_time_frac(${1:n_end_time})"},
	{ "trigger": "get_time_left\t#using scripts\\shared\\util_shared;", "contents": "util::get_time_left()"},
	{ "trigger": "is_time_left\t#using scripts\\shared\\util_shared;", "contents": "util::is_time_left()"},
	{ "trigger": "timer_wait\t#using scripts\\shared\\util_shared;", "contents": "util::timer_wait(${1:n_wait})"},
	{ "trigger": "add_remove_list\t#using scripts\\shared\\util_shared;", "contents": "util::add_remove_list(${1:&a}, ${2:on_off})"},
	{ "trigger": "clean_deleted\t#using scripts\\shared\\util_shared;", "contents": "util::clean_deleted(${1:&array})"},
	{ "trigger": "get_eye\t#using scripts\\shared\\util_shared;", "contents": "util::get_eye()"},
	{ "trigger": "spawn_player_arms\t#using scripts\\shared\\util_shared;", "contents": "util::spawn_player_arms()"},
	{ "trigger": "lerp_dvar\t#using scripts\\shared\\util_shared;", "contents": "util::lerp_dvar(${1:str_dvar}, ${2:n_start_val}, ${3:n_end_val}, ${4:n_lerp_time}, ${5:b_saved_dvar}, ${6:b_client_dvar}, ${7:n_client = 0})"},
	{ "trigger": "is_valid_type_for_callback\t#using scripts\\shared\\util_shared;", "contents": "util::is_valid_type_for_callback(${1:type})"},
	{ "trigger": "wait_till_not_touching\t#using scripts\\shared\\util_shared;", "contents": "util::wait_till_not_touching(${1:e_to_check}, ${2:e_to_touch})"},
	{ "trigger": "error\t#using scripts\\shared\\util_shared;", "contents": "util::error(${1:message})"},
	{ "trigger": "register_system\t#using scripts\\shared\\util_shared;", "contents": "util::register_system(${1:sSysName}, ${2:cbFunc})"},
	{ "trigger": "field_set_lighting_ent\t#using scripts\\shared\\util_shared;", "contents": "util::field_set_lighting_ent(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "field_use_lighting_ent\t#using scripts\\shared\\util_shared;", "contents": "util::field_use_lighting_ent(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "waittill_dobj\t#using scripts\\shared\\util_shared;", "contents": "util::waittill_dobj(${1:localClientNum})"},
	{ "trigger": "server_wait\t#using scripts\\shared\\util_shared; serverwait", "contents": "util::server_wait(${1:localClientNum}, ${2:seconds}, ${3:waitBetweenChecks}, ${4:level_endon})"},
	{ "trigger": "friend_not_foe\t#using scripts\\shared\\util_shared; friendnotfoe", "contents": "util::friend_not_foe(${1:localClientIndex}, ${2:predicted})"},
	{ "trigger": "friend_not_foe_team\t#using scripts\\shared\\util_shared; friendnotfoe", "contents": "util::friend_not_foe_team(${1:localClientIndex}, ${2:team}, ${3:predicted})"},
	{ "trigger": "IsEnemyPlayer\t#using scripts\\shared\\util_shared;", "contents": "util::IsEnemyPlayer(${1:player})"},
	{ "trigger": "is_player_view_linked_to_entity\t#using scripts\\shared\\util_shared; isplayerviewlinkedtoentity", "contents": "util::is_player_view_linked_to_entity(${1:localClientNum})"},
	{ "trigger": "within_fov\t#using scripts\\shared\\util_shared;", "contents": "util::within_fov(${1:start_origin}, ${2:start_angles}, ${3:end_origin}, ${4:fov})"},
	{ "trigger": "is_mature\t#using scripts\\shared\\util_shared;", "contents": "util::is_mature()"},
	{ "trigger": "is_gib_restricted_build\t#using scripts\\shared\\util_shared;", "contents": "util::is_gib_restricted_build()"},
	{ "trigger": "registerSystem\t#using scripts\\shared\\util_shared;", "contents": "util::registerSystem(${1:sSysName}, ${2:cbFunc})"},
	{ "trigger": "getStatsTableName\t#using scripts\\shared\\util_shared;", "contents": "util::getStatsTableName()"},
	{ "trigger": "add_trigger_to_ent\t#using scripts\\shared\\util_shared;", "contents": "util::add_trigger_to_ent(${1:ent}, ${2:trig})"},
	{ "trigger": "remove_trigger_from_ent\t#using scripts\\shared\\util_shared;", "contents": "util::remove_trigger_from_ent(${1:ent}, ${2:trig})"},
	{ "trigger": "ent_already_in_trigger\t#using scripts\\shared\\util_shared; Self == The entity in the trigger volume.", "contents": "util::ent_already_in_trigger(${1:trig})"},
	{ "trigger": "trigger_thread\t#using scripts\\shared\\util_shared; Self == The trigger.", "contents": "util::trigger_thread(${1:ent}, ${2:on_enter_payload}, ${3:on_exit_payload})"},
	{ "trigger": "local_player_trigger_thread_always_exit\t#using scripts\\shared\\util_shared;", "contents": "util::local_player_trigger_thread_always_exit(${1:ent}, ${2:on_enter_payload}, ${3:on_exit_payload})"},
	{ "trigger": "local_player_entity_thread\t#using scripts\\shared\\util_shared;", "contents": "util::local_player_entity_thread(${1:localClientNum}, ${2:entity}, ${3:func}, ${4:arg1}, ${5:arg2}, ${6:arg3}, ${7:arg4})"},
	{ "trigger": "local_players_entity_thread\t#using scripts\\shared\\util_shared;", "contents": "util::local_players_entity_thread(${1:entity}, ${2:func}, ${3:arg1}, ${4:arg2}, ${5:arg3}, ${6:arg4})"},
	{ "trigger": "debug_line\t#using scripts\\shared\\util_shared;", "contents": "util::debug_line(${1:from}, ${2:to}, ${3:color}, ${4:time})"},
	{ "trigger": "debug_star\t#using scripts\\shared\\util_shared;", "contents": "util::debug_star(${1:origin}, ${2:color}, ${3:time})"},
	{ "trigger": "serverTime\t#using scripts\\shared\\util_shared;", "contents": "util::serverTime()"},
	{ "trigger": "getNextObjID\t#using scripts\\shared\\util_shared;", "contents": "util::getNextObjID(${1:localClientNum})"},
	{ "trigger": "releaseObjID\t#using scripts\\shared\\util_shared;", "contents": "util::releaseObjID(${1:localClientNum}, ${2:objID})"},
	{ "trigger": "get_next_safehouse\t#using scripts\\shared\\util_shared;", "contents": "util::get_next_safehouse(${1:str_next_map})"},
	{ "trigger": "is_safehouse\t#using scripts\\shared\\util_shared;", "contents": "util::is_safehouse(${1:str_next_map})"},
	{ "trigger": "launch\t#using scripts\\shared\\beam_shared;", "contents": "beam::launch(${1:ent_1}, ${2:str_tag1}, ${3:ent_2}, ${4:str_tag2}, ${5:str_beam_type})"},
	{ "trigger": "kill\t#using scripts\\shared\\beam_shared;", "contents": "beam::kill(${1:ent_1}, ${2:str_tag1}, ${3:ent_2}, ${4:str_tag2}, ${5:str_beam_type})"},
	{ "trigger": "register_clientfields\t#using scripts\\shared\\audio_shared;", "contents": "audio::register_clientfields()"},
	{ "trigger": "local_player_spawn\t#using scripts\\shared\\audio_shared;", "contents": "audio::local_player_spawn(${1:localClientNum})"},
	{ "trigger": "sndDoubleJump_Watcher\t#using scripts\\shared\\audio_shared;", "contents": "audio::sndDoubleJump_Watcher()"},
	{ "trigger": "clientVoiceSetup\t#using scripts\\shared\\audio_shared;", "contents": "audio::clientVoiceSetup(${1:localClientNum})"},
	{ "trigger": "sndVoNotify\t#using scripts\\shared\\audio_shared;", "contents": "audio::sndVoNotify(${1:notifyString}, ${2:dialog})"},
	{ "trigger": "sndOnWait\t#using scripts\\shared\\audio_shared;", "contents": "audio::sndOnWait()"},
	{ "trigger": "snd_set_snapshot\t#using scripts\\shared\\audio_shared;", "contents": "audio::snd_set_snapshot(${1:state})"},
	{ "trigger": "snd_snapshot_think\t#using scripts\\shared\\audio_shared;", "contents": "audio::snd_snapshot_think()"},
	{ "trigger": "soundRandom_Thread\t#using scripts\\shared\\audio_shared;", "contents": "audio::soundRandom_Thread(${1:localClientNum}, ${2:randSound})"},
	{ "trigger": "soundRandom_NotifyWait\t#using scripts\\shared\\audio_shared;", "contents": "audio::soundRandom_NotifyWait(${1:notify_name}, ${2:randSound})"},
	{ "trigger": "startSoundRandoms\t#using scripts\\shared\\audio_shared;", "contents": "audio::startSoundRandoms(${1:localClientNum})"},
	{ "trigger": "soundLoopThink\t#using scripts\\shared\\audio_shared;", "contents": "audio::soundLoopThink()"},
	{ "trigger": "soundLoopCheckpointRestore\t#using scripts\\shared\\audio_shared;", "contents": "audio::soundLoopCheckpointRestore()"},
	{ "trigger": "soundLineThink\t#using scripts\\shared\\audio_shared;", "contents": "audio::soundLineThink()"},
	{ "trigger": "soundLineCheckpointRestore\t#using scripts\\shared\\audio_shared;", "contents": "audio::soundLineCheckpointRestore(${1:target})"},
	{ "trigger": "startSoundLoops\t#using scripts\\shared\\audio_shared;", "contents": "audio::startSoundLoops()"},
	{ "trigger": "startLineEmitters\t#using scripts\\shared\\audio_shared;", "contents": "audio::startLineEmitters()"},
	{ "trigger": "startRattles\t#using scripts\\shared\\audio_shared;", "contents": "audio::startRattles()"},
	{ "trigger": "audio_step_trigger\t#using scripts\\shared\\audio_shared;", "contents": "audio::audio_step_trigger(${1:localClientNum})"},
	{ "trigger": "audio_material_trigger\t#using scripts\\shared\\audio_shared;", "contents": "audio::audio_material_trigger(${1:trig})"},
	{ "trigger": "trig_enter_audio_material_trigger\t#using scripts\\shared\\audio_shared;", "contents": "audio::trig_enter_audio_material_trigger(${1:player})"},
	{ "trigger": "trig_leave_audio_material_trigger\t#using scripts\\shared\\audio_shared;", "contents": "audio::trig_leave_audio_material_trigger(${1:player})"},
	{ "trigger": "trig_enter_audio_step_trigger\t#using scripts\\shared\\audio_shared;", "contents": "audio::trig_enter_audio_step_trigger(${1:trigPlayer})"},
	{ "trigger": "trig_leave_audio_step_trigger\t#using scripts\\shared\\audio_shared;", "contents": "audio::trig_leave_audio_step_trigger(${1:trigPlayer})"},
	{ "trigger": "bump_trigger_start\t#using scripts\\shared\\audio_shared;", "contents": "audio::bump_trigger_start(${1:localClientNum})"},
	{ "trigger": "thread_bump_trigger\t#using scripts\\shared\\audio_shared;", "contents": "audio::thread_bump_trigger(${1:localClientNum})"},
	{ "trigger": "trig_enter_bump\t#using scripts\\shared\\audio_shared;", "contents": "audio::trig_enter_bump(${1:ent})"},
	{ "trigger": "trig_leave_bump\t#using scripts\\shared\\audio_shared;", "contents": "audio::trig_leave_bump(${1:ent})"},
	{ "trigger": "bump_trigger_listener\t#using scripts\\shared\\audio_shared; This will deactivate the trigger on a level notify if its stored on the trigger", "contents": "audio::bump_trigger_listener()"},
	{ "trigger": "scale_speed\t#using scripts\\shared\\audio_shared;", "contents": "audio::scale_speed(${1:x1}, ${2:x2}, ${3:y1}, ${4:y2}, ${5:z})"},
	{ "trigger": "get_vol_from_speed\t#using scripts\\shared\\audio_shared;", "contents": "audio::get_vol_from_speed(${1:player})"},
	{ "trigger": "absolute_value\t#using scripts\\shared\\audio_shared;", "contents": "audio::absolute_value(${1:fowd})"},
	{ "trigger": "closest_point_on_line_to_point\t#using scripts\\shared\\audio_shared;", "contents": "audio::closest_point_on_line_to_point(${1:Point}, ${2:LineStart}, ${3:LineEnd})"},
	{ "trigger": "Fxid\t#using scripts\\shared\\audio_shared;", "contents": "audio::Fxid(${1:String): ID of the FX you want to play alias off})"},
	{ "trigger": "alias\t#using scripts\\shared\\audio_shared;", "contents": "audio::alias(${1:String): Audio Alias})"},
	{ "trigger": "offsetx to offsetz\t#using scripts\\shared\\audio_shared;", "contents": "audio::offsetx to offsetz(${1:Int) : Offset from the origin of the fx where audio needs to be played.})"},
	{ "trigger": "onground\t#using scripts\\shared\\audio_shared;", "contents": "audio::onground(${1:Bool) : do a trace ground to ensure audio play above ground.})"},
	{ "trigger": "Area\t#using scripts\\shared\\audio_shared;", "contents": "audio::Area(${1:Int)}, ${2:Threshold(Int)}, ${3:alias_override(String) : used to determine if multiple fx of the same id is in the radius(area) of the fx origin}, ${4:if the number of FX id in the same area exceeds})"},
	{ "trigger": "snd_play_auto_fx\t#using scripts\\shared\\audio_shared;", "contents": "audio::snd_play_auto_fx(${1:fxid}, ${2:alias}, ${3:offsetx}, ${4:offsety}, ${5:offsetz}, ${6:onground}, ${7:area}, ${8:threshold}, ${9:alias_override})"},
	{ "trigger": "snd_print_fx_id\t#using scripts\\shared\\audio_shared;", "contents": "audio::snd_print_fx_id(${1:fxid}, ${2:type}, ${3:ent})"},
	{ "trigger": "move_sound_along_line\t#using scripts\\shared\\audio_shared;", "contents": "audio::move_sound_along_line()"},
	{ "trigger": "playloopat\t#using scripts\\shared\\audio_shared;", "contents": "audio::playloopat(${1:aliasname}, ${2:origin})"},
	{ "trigger": "stoploopat\t#using scripts\\shared\\audio_shared;", "contents": "audio::stoploopat(${1:aliasname}, ${2:origin})"},
	{ "trigger": "soundwait\t#using scripts\\shared\\audio_shared;", "contents": "audio::soundwait(${1:id})"},
	{ "trigger": "snd_underwater\t#using scripts\\shared\\audio_shared;", "contents": "audio::snd_underwater(${1:localClientNum})"},
	{ "trigger": "underwaterBegin\t#using scripts\\shared\\audio_shared;", "contents": "audio::underwaterBegin()"},
	{ "trigger": "underwaterEnd\t#using scripts\\shared\\audio_shared;", "contents": "audio::underwaterEnd()"},
	{ "trigger": "SetPfxContext\t#using scripts\\shared\\audio_shared; need to move to ram 2", "contents": "audio::SetPfxContext()"},
	{ "trigger": "swimBegin\t#using scripts\\shared\\audio_shared;", "contents": "audio::swimBegin()"},
	{ "trigger": "swimEnd\t#using scripts\\shared\\audio_shared;", "contents": "audio::swimEnd(${1:localClientNum})"},
	{ "trigger": "swimCancel\t#using scripts\\shared\\audio_shared;", "contents": "audio::swimCancel(${1:localClientNum})"},
	{ "trigger": "soundplayuidecodeloop\t#using scripts\\shared\\audio_shared;", "contents": "audio::soundplayuidecodeloop(${1:decodeString}, ${2:playTimeMs})"},
	{ "trigger": "setCurrentAmbientState\t#using scripts\\shared\\audio_shared;", "contents": "audio::setCurrentAmbientState(${1:ambientRoom}, ${2:ambientPackage}, ${3:roomColliderCent}, ${4:packageColliderCent}, ${5:defaultRoom})"},
	{ "trigger": "isPlayerInfected\t#using scripts\\shared\\audio_shared;", "contents": "audio::isPlayerInfected()"},
	{ "trigger": "sndHealthSystem\t#using scripts\\shared\\audio_shared;", "contents": "audio::sndHealthSystem(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "sndDniRepair\t#using scripts\\shared\\audio_shared;", "contents": "audio::sndDniRepair(${1:localClientNum}, ${2:alais}, ${3:min}, ${4:max})"},
	{ "trigger": "sndTacRig\t#using scripts\\shared\\audio_shared;", "contents": "audio::sndTacRig(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "doRattle\t#using scripts\\shared\\audio_shared;", "contents": "audio::doRattle(${1:origin}, ${2:min}, ${3:max})"},
	{ "trigger": "sndRattle_Server\t#using scripts\\shared\\audio_shared;", "contents": "audio::sndRattle_Server(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "sndRattle_Grenade_Client\t#using scripts\\shared\\audio_shared;", "contents": "audio::sndRattle_Grenade_Client()"},
	{ "trigger": "weapon_butt_sounds\t#using scripts\\shared\\audio_shared;", "contents": "audio::weapon_butt_sounds(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "set_sound_context_defaults\t#using scripts\\shared\\audio_shared;", "contents": "audio::set_sound_context_defaults()"},
	{ "trigger": "sndMatchSnapshot\t#using scripts\\shared\\audio_shared;", "contents": "audio::sndMatchSnapshot(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "sndFoleyContext\t#using scripts\\shared\\audio_shared;", "contents": "audio::sndFoleyContext(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "sndKillcam\t#using scripts\\shared\\audio_shared;", "contents": "audio::sndKillcam()"},
	{ "trigger": "sndDeath_Activate\t#using scripts\\shared\\audio_shared;", "contents": "audio::sndDeath_Activate()"},
	{ "trigger": "sndDeath_Deactivate\t#using scripts\\shared\\audio_shared;", "contents": "audio::sndDeath_Deactivate()"},
	{ "trigger": "sndFinalKillcam_Activate\t#using scripts\\shared\\audio_shared;", "contents": "audio::sndFinalKillcam_Activate()"},
	{ "trigger": "sndFinalKillcam_Slowdown\t#using scripts\\shared\\audio_shared;", "contents": "audio::sndFinalKillcam_Slowdown()"},
	{ "trigger": "sndFinalKillcam_Deactivate\t#using scripts\\shared\\audio_shared;", "contents": "audio::sndFinalKillcam_Deactivate()"},
	{ "trigger": "sndSwitchVehicleContext\t#using scripts\\shared\\audio_shared;", "contents": "audio::sndSwitchVehicleContext(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "sndMusicDeathWatcher\t#using scripts\\shared\\audio_shared;", "contents": "audio::sndMusicDeathWatcher()"},
	{ "trigger": "sndCChacking\t#using scripts\\shared\\audio_shared;", "contents": "audio::sndCChacking(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "sndIGCsnapshot\t#using scripts\\shared\\audio_shared;", "contents": "audio::sndIGCsnapshot(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "sndLevelStartSnapOff\t#using scripts\\shared\\audio_shared;", "contents": "audio::sndLevelStartSnapOff(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "sndZMBFadeIn\t#using scripts\\shared\\audio_shared;", "contents": "audio::sndZMBFadeIn(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "sndChyronLoop\t#using scripts\\shared\\audio_shared;", "contents": "audio::sndChyronLoop(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "spawned\t#using scripts\\zm\\_claymore;", "contents": "_claymore::spawned(${1:localClientNum})"},
	{ "trigger": "zm_aat_blast_furnace_explosion\t#using scripts\\zm\\aats\\_zm_aat_blast_furnace;", "contents": "zm_aat_blast_furnace::zm_aat_blast_furnace_explosion(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "zm_aat_blast_furnace_explosion_vehicle\t#using scripts\\zm\\aats\\_zm_aat_blast_furnace;", "contents": "zm_aat_blast_furnace::zm_aat_blast_furnace_explosion_vehicle(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "zm_aat_blast_furnace_explosion_think\t#using scripts\\zm\\aats\\_zm_aat_blast_furnace;", "contents": "zm_aat_blast_furnace::zm_aat_blast_furnace_explosion_think(${1:localClientNum})"},
	{ "trigger": "zm_aat_blast_furnace_burn\t#using scripts\\zm\\aats\\_zm_aat_blast_furnace;", "contents": "zm_aat_blast_furnace::zm_aat_blast_furnace_burn(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "zm_aat_blast_furnace_burn_vehicle\t#using scripts\\zm\\aats\\_zm_aat_blast_furnace;", "contents": "zm_aat_blast_furnace::zm_aat_blast_furnace_burn_vehicle(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "zm_aat_blast_furnace_burn_think\t#using scripts\\zm\\aats\\_zm_aat_blast_furnace;", "contents": "zm_aat_blast_furnace::zm_aat_blast_furnace_burn_think(${1:localClientNum}, ${2:e_zombie}, ${3:tag})"},
	{ "trigger": "filter\t#using scripts\\shared\\array_shared;", "contents": "array::filter(${1:&array}, ${2:b_keep_keys}, ${3:func_filter}, ${4:arg1}, ${5:arg2}, ${6:arg3}, ${7:arg4}, ${8:arg5})"},
	{ "trigger": "remove_undefined\t#using scripts\\shared\\array_shared;", "contents": "array::remove_undefined(${1:array}, ${2:b_keep_keys})"},
	{ "trigger": "get_touching\t#using scripts\\shared\\array_shared;", "contents": "array::get_touching(${1:&array}, ${2:b_keep_keys})"},
	{ "trigger": "remove_index\t#using scripts\\shared\\array_shared;", "contents": "array::remove_index(${1:array}, ${2:index}, ${3:b_keep_keys})"},
	{ "trigger": "delete_all\t#using scripts\\shared\\array_shared;", "contents": "array::delete_all(${1:&array}, ${2:is_struct})"},
	{ "trigger": "notify_all\t#using scripts\\shared\\array_shared;", "contents": "array::notify_all(${1:&array}, ${2:str_notify})"},
	{ "trigger": "thread_all\t#using scripts\\shared\\array_shared;", "contents": "array::thread_all(${1:&entities}, ${2:func}, ${3:arg1}, ${4:arg2}, ${5:arg3}, ${6:arg4}, ${7:arg5}, ${8:arg6})"},
	{ "trigger": "thread_all_ents\t#using scripts\\shared\\array_shared;", "contents": "array::thread_all_ents(${1:&entities}, ${2:func}, ${3:arg1}, ${4:arg2}, ${5:arg3}, ${6:arg4}, ${7:arg5})"},
	{ "trigger": "run_all\t#using scripts\\shared\\array_shared;", "contents": "array::run_all(${1:&entities}, ${2:func}, ${3:arg1}, ${4:arg2}, ${5:arg3}, ${6:arg4}, ${7:arg5}, ${8:arg6})"},
	{ "trigger": "exclude\t#using scripts\\shared\\array_shared; returns \"array\" minus all members of array_exclude", "contents": "array::exclude(${1:array}, ${2:array_exclude})"},
	{ "trigger": "add\t#using scripts\\shared\\array_shared;", "contents": "array::add(${1:&array}, ${2:item}, ${3:allow_dupes = true})"},
	{ "trigger": "add_sorted\t#using scripts\\shared\\array_shared;", "contents": "array::add_sorted(${1:&array}, ${2:item}, ${3:allow_dupes = true})"},
	{ "trigger": "wait_till\t#using scripts\\shared\\array_shared;", "contents": "array::wait_till(${1:&array}, ${2:msg}, ${3:n_timeout})"},
	{ "trigger": "flag_wait\t#using scripts\\shared\\array_shared;", "contents": "array::flag_wait(${1:&array}, ${2:str_flag})"},
	{ "trigger": "flagsys_wait\t#using scripts\\shared\\array_shared;", "contents": "array::flagsys_wait(${1:&array}, ${2:str_flag})"},
	{ "trigger": "flagsys_wait_any_flag\t#using scripts\\shared\\array_shared;", "contents": "array::flagsys_wait_any_flag(${1:&array}, ${2:...})"},
	{ "trigger": "flag_wait_clear\t#using scripts\\shared\\array_shared;", "contents": "array::flag_wait_clear(${1:&array}, ${2:str_flag})"},
	{ "trigger": "flagsys_wait_clear\t#using scripts\\shared\\array_shared;", "contents": "array::flagsys_wait_clear(${1:&array}, ${2:str_flag})"},
	{ "trigger": "wait_any\t#using scripts\\shared\\array_shared;", "contents": "array::wait_any(${1:array}, ${2:msg}, ${3:n_timeout})"},
	{ "trigger": "_waitlogic2\t#using scripts\\shared\\array_shared;", "contents": "array::_waitlogic2(${1:s_tracker}, ${2:ent}, ${3:msg})"},
	{ "trigger": "flag_wait_any\t#using scripts\\shared\\array_shared;", "contents": "array::flag_wait_any(${1:array}, ${2:str_flag})"},
	{ "trigger": "random\t#using scripts\\shared\\array_shared;", "contents": "array::random(${1:array})"},
	{ "trigger": "randomize\t#using scripts\\shared\\array_shared;", "contents": "array::randomize(${1:array})"},
	{ "trigger": "reverse\t#using scripts\\shared\\array_shared;", "contents": "array::reverse(${1:array})"},
	{ "trigger": "remove_keys\t#using scripts\\shared\\array_shared;", "contents": "array::remove_keys(${1:array})"},
	{ "trigger": "swap\t#using scripts\\shared\\array_shared;", "contents": "array::swap(${1:&array}, ${2:index1}, ${3:index2})"},
	{ "trigger": "pop\t#using scripts\\shared\\array_shared;", "contents": "array::pop(${1:&array}, ${2:index}, ${3:b_keep_keys = true})"},
	{ "trigger": "pop_front\t#using scripts\\shared\\array_shared;", "contents": "array::pop_front(${1:&array}, ${2:b_keep_keys = true})"},
	{ "trigger": "push\t#using scripts\\shared\\array_shared;", "contents": "array::push(${1:&array}, ${2:val}, ${3:index})"},
	{ "trigger": "push_front\t#using scripts\\shared\\array_shared;", "contents": "array::push_front(${1:&array}, ${2:val})"},
	{ "trigger": "get_closest\t#using scripts\\shared\\array_shared;", "contents": "array::get_closest(${1:org}, ${2:&array}, ${3:dist = undefined})"},
	{ "trigger": "get_farthest\t#using scripts\\shared\\array_shared;", "contents": "array::get_farthest(${1:org}, ${2:&array}, ${3:dist = undefined})"},
	{ "trigger": "closerFunc\t#using scripts\\shared\\array_shared;", "contents": "array::closerFunc(${1:dist1}, ${2:dist2})"},
	{ "trigger": "fartherFunc\t#using scripts\\shared\\array_shared;", "contents": "array::fartherFunc(${1:dist1}, ${2:dist2})"},
	{ "trigger": "get_all_farthest\t#using scripts\\shared\\array_shared;", "contents": "array::get_all_farthest(${1:org}, ${2:&array}, ${3:excluders}, ${4:max})"},
	{ "trigger": "get_all_closest\t#using scripts\\shared\\array_shared;", "contents": "array::get_all_closest(${1:org}, ${2:&array}, ${3:excluders}, ${4:max}, ${5:maxdist})"},
	{ "trigger": "alphabetize\t#using scripts\\shared\\array_shared;", "contents": "array::alphabetize(${1:&array})"},
	{ "trigger": "Name: sort_by_value\t#using scripts\\shared\\array_shared;", "contents": "array::Name: sort_by_value(${1:array}, ${2:b_lowest_first = true})"},
	{ "trigger": "Example: list = array::sort_by_value\t#using scripts\\shared\\array_shared;", "contents": "array::Example: list = array::sort_by_value(${1:array );})"},
	{ "trigger": "sort_by_value\t#using scripts\\shared\\array_shared;", "contents": "array::sort_by_value(${1:&array}, ${2:b_lowest_first = false})"},
	{ "trigger": "_sort_by_value_compare_func\t#using scripts\\shared\\array_shared;", "contents": "array::_sort_by_value_compare_func(${1:val1}, ${2:val2}, ${3:b_lowest_first})"},
	{ "trigger": "Name: sort_by_script_int\t#using scripts\\shared\\array_shared;", "contents": "array::Name: sort_by_script_int(${1:a_ents}, ${2:b_lowest_first = true})"},
	{ "trigger": "Example: list = array::sort_by_script_int\t#using scripts\\shared\\array_shared;", "contents": "array::Example: list = array::sort_by_script_int(${1:a_ents );})"},
	{ "trigger": "sort_by_script_int\t#using scripts\\shared\\array_shared;", "contents": "array::sort_by_script_int(${1:&a_ents}, ${2:b_lowest_first = false})"},
	{ "trigger": "_sort_by_script_int_compare_func\t#using scripts\\shared\\array_shared;", "contents": "array::_sort_by_script_int_compare_func(${1:e1}, ${2:e2}, ${3:b_lowest_first})"},
	{ "trigger": "merge_sort\t#using scripts\\shared\\array_shared;", "contents": "array::merge_sort(${1:&current_list}, ${2:func_sort}, ${3:param})"},
	{ "trigger": "merge\t#using scripts\\shared\\array_shared;", "contents": "array::merge(${1:left}, ${2:right}, ${3:func_sort}, ${4:param})"},
	{ "trigger": "spread_all\t#using scripts\\shared\\array_shared;", "contents": "array::spread_all(${1:&entities}, ${2:func}, ${3:arg1}, ${4:arg2}, ${5:arg3}, ${6:arg4}, ${7:arg5})"},
	{ "trigger": "lc_shock_fx\t#using scripts\\zm\\_zm_lightning_chain;", "contents": "lightning_chain::lc_shock_fx(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "lc_play_death_fx\t#using scripts\\zm\\_zm_lightning_chain;", "contents": "lightning_chain::lc_play_death_fx(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "localplayer_spawned\t#using scripts\\shared\\_explode;", "contents": "explode::localplayer_spawned(${1:localClientNum})"},
	{ "trigger": "watchForPlayerFallDamage\t#using scripts\\shared\\_explode;", "contents": "explode::watchForPlayerFallDamage(${1:localClientNum})"},
	{ "trigger": "watchForPlayerSlide\t#using scripts\\shared\\_explode;", "contents": "explode::watchForPlayerSlide(${1:localClientNum})"},
	{ "trigger": "doTheDirty\t#using scripts\\shared\\_explode;", "contents": "explode::doTheDirty(${1:localClientNum}, ${2:right}, ${3:up}, ${4:distance}, ${5:dirtDuration}, ${6:dirtFadeTime})"},
	{ "trigger": "watchForExplosion\t#using scripts\\shared\\_explode;", "contents": "explode::watchForExplosion(${1:localClientNum})"},
	{ "trigger": "player_resurrect_changed\t#using scripts\\shared\\abilities\\gadgets\\_gadget_resurrect;", "contents": "_gadget_resurrect::player_resurrect_changed(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "resurrect_down_fx\t#using scripts\\shared\\abilities\\gadgets\\_gadget_resurrect;", "contents": "_gadget_resurrect::resurrect_down_fx(${1:localClientNum})"},
	{ "trigger": "resurrect_up_fx\t#using scripts\\shared\\abilities\\gadgets\\_gadget_resurrect;", "contents": "_gadget_resurrect::resurrect_up_fx(${1:localClientNum})"},
	{ "trigger": "player_resurrect_state_changed\t#using scripts\\shared\\abilities\\gadgets\\_gadget_resurrect;", "contents": "_gadget_resurrect::player_resurrect_state_changed(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "thief_clientfield_cb\t#using scripts\\shared\\abilities\\gadgets\\_gadget_thief;", "contents": "gadget_thief::thief_clientfield_cb(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "thief_ui_model_clientfield_cb\t#using scripts\\shared\\abilities\\gadgets\\_gadget_thief;", "contents": "gadget_thief::thief_ui_model_clientfield_cb(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "thief_weapon_option_ui_model_clientfield_cb\t#using scripts\\shared\\abilities\\gadgets\\_gadget_thief;", "contents": "gadget_thief::thief_weapon_option_ui_model_clientfield_cb(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "update_thief\t#using scripts\\shared\\abilities\\gadgets\\_gadget_thief;", "contents": "gadget_thief::update_thief(${1:localClientNum}, ${2:newVal})"},
	{ "trigger": "update_thief_weapon\t#using scripts\\shared\\abilities\\gadgets\\_gadget_thief;", "contents": "gadget_thief::update_thief_weapon(${1:localClientNum}, ${2:newVal})"},
	{ "trigger": "on_localplayer_spawned\t#using scripts\\shared\\abilities\\gadgets\\_gadget_thief;", "contents": "gadget_thief::on_localplayer_spawned(${1:localClientNum})"},
	{ "trigger": "pap_working_FX_handler\t#using scripts\\zm\\_zm_pack_a_punch; self = z_barrier", "contents": "_zm_pack_a_punch::pap_working_FX_handler(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "autoexec ignore_systems\t#using scripts\\zm\\_zm;", "contents": "zm::autoexec ignore_systems()"},
	{ "trigger": "delay_for_clients_then_execute\t#using scripts\\zm\\_zm;", "contents": "zm::delay_for_clients_then_execute(${1:func})"},
	{ "trigger": "player_duplicaterender\t#using scripts\\zm\\_zm;", "contents": "zm::player_duplicaterender(${1:localClientNum})"},
	{ "trigger": "player_umbrahotfixes\t#using scripts\\zm\\_zm;", "contents": "zm::player_umbrahotfixes(${1:localClientNum})"},
	{ "trigger": "basic_player_connect\t#using scripts\\zm\\_zm;", "contents": "zm::basic_player_connect(${1:localClientNum})"},
	{ "trigger": "force_update_player_clientfields\t#using scripts\\zm\\_zm;", "contents": "zm::force_update_player_clientfields(${1:localClientNum})"},
	{ "trigger": "box_monitor\t#using scripts\\zm\\_zm;", "contents": "zm::box_monitor(${1:clientNum}, ${2:state}, ${3:oldState})"},
	{ "trigger": "ZPO_listener\t#using scripts\\zm\\_zm;", "contents": "zm::ZPO_listener()"},
	{ "trigger": "ZPOff_listener\t#using scripts\\zm\\_zm;", "contents": "zm::ZPOff_listener()"},
	{ "trigger": "zombie_power_clientfield_on\t#using scripts\\zm\\_zm;", "contents": "zm::zombie_power_clientfield_on(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "zombie_power_clientfield_off\t#using scripts\\zm\\_zm;", "contents": "zm::zombie_power_clientfield_off(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "round_complete_time\t#using scripts\\zm\\_zm;", "contents": "zm::round_complete_time(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "round_complete_num\t#using scripts\\zm\\_zm;", "contents": "zm::round_complete_num(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "game_end_time\t#using scripts\\zm\\_zm;", "contents": "zm::game_end_time(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "quest_complete_time\t#using scripts\\zm\\_zm;", "contents": "zm::quest_complete_time(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "createZombieEyesInternal\t#using scripts\\zm\\_zm;", "contents": "zm::createZombieEyesInternal(${1:localClientNum})"},
	{ "trigger": "createZombieEyes\t#using scripts\\zm\\_zm;", "contents": "zm::createZombieEyes(${1:localClientNum})"},
	{ "trigger": "deleteZombieEyes\t#using scripts\\zm\\_zm;", "contents": "zm::deleteZombieEyes(${1:localClientNum})"},
	{ "trigger": "player_eyes_clientfield_cb\t#using scripts\\zm\\_zm;", "contents": "zm::player_eyes_clientfield_cb(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "player_eye_color_clientfield_cb\t#using scripts\\zm\\_zm;", "contents": "zm::player_eye_color_clientfield_cb(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "zombie_eyes_handle_demo_jump\t#using scripts\\zm\\_zm;", "contents": "zm::zombie_eyes_handle_demo_jump(${1:localClientNum})"},
	{ "trigger": "zombie_eyes_demo_watcher\t#using scripts\\zm\\_zm;", "contents": "zm::zombie_eyes_demo_watcher(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "zombie_eyes_demo_clientfield_cb\t#using scripts\\zm\\_zm;", "contents": "zm::zombie_eyes_demo_clientfield_cb(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "zombie_eyes_clientfield_cb\t#using scripts\\zm\\_zm; self = actor", "contents": "zm::zombie_eyes_clientfield_cb(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "zombie_zombie_keyline_render_clientfield_cb\t#using scripts\\zm\\_zm; self = actor", "contents": "zm::zombie_zombie_keyline_render_clientfield_cb(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "get_eyeball_on_luminance\t#using scripts\\zm\\_zm;", "contents": "zm::get_eyeball_on_luminance()"},
	{ "trigger": "get_eyeball_off_luminance\t#using scripts\\zm\\_zm;", "contents": "zm::get_eyeball_off_luminance()"},
	{ "trigger": "get_eyeball_color\t#using scripts\\zm\\_zm; self = zombie", "contents": "zm::get_eyeball_color()"},
	{ "trigger": "zombie_ragdoll_explode_cb\t#using scripts\\zm\\_zm;", "contents": "zm::zombie_ragdoll_explode_cb(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "zombie_gut_explosion_cb\t#using scripts\\zm\\_zm;", "contents": "zm::zombie_gut_explosion_cb(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "zombie_wait_explode\t#using scripts\\zm\\_zm;", "contents": "zm::zombie_wait_explode(${1:localClientNum})"},
	{ "trigger": "mark_piece_gibbed\t#using scripts\\zm\\_zm;", "contents": "zm::mark_piece_gibbed(${1:piece_index})"},
	{ "trigger": "has_gibbed_piece\t#using scripts\\zm\\_zm;", "contents": "zm::has_gibbed_piece(${1:piece_index})"},
	{ "trigger": "do_headshot_gib_fx\t#using scripts\\zm\\_zm;", "contents": "zm::do_headshot_gib_fx()"},
	{ "trigger": "do_gib_fx\t#using scripts\\zm\\_zm;", "contents": "zm::do_gib_fx(${1:tag})"},
	{ "trigger": "do_gib\t#using scripts\\zm\\_zm;", "contents": "zm::do_gib(${1:model}, ${2:tag})"},
	{ "trigger": "do_hat_gib\t#using scripts\\zm\\_zm;", "contents": "zm::do_hat_gib(${1:model}, ${2:tag})"},
	{ "trigger": "check_should_gib\t#using scripts\\zm\\_zm;", "contents": "zm::check_should_gib()"},
	{ "trigger": "resetGibCounter\t#using scripts\\zm\\_zm;", "contents": "zm::resetGibCounter()"},
	{ "trigger": "on_gib_event\t#using scripts\\zm\\_zm;", "contents": "zm::on_gib_event(${1:localClientNum}, ${2:type}, ${3:locations})"},
	{ "trigger": "zombie_vision_set_apply\t#using scripts\\zm\\_zm;", "contents": "zm::zombie_vision_set_apply(${1:str_visionset}, ${2:int_priority}, ${3:flt_transition_time}, ${4:int_clientnum})"},
	{ "trigger": "zombie_vision_set_remove\t#using scripts\\zm\\_zm;", "contents": "zm::zombie_vision_set_remove(${1:str_visionset}, ${2:flt_transition_time}, ${3:int_clientnum})"},
	{ "trigger": "zombie_highest_vision_set_apply\t#using scripts\\zm\\_zm;", "contents": "zm::zombie_highest_vision_set_apply()"},
	{ "trigger": "handle_zombie_risers_foliage\t#using scripts\\zm\\_zm;", "contents": "zm::handle_zombie_risers_foliage(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "handle_zombie_risers_water\t#using scripts\\zm\\_zm;", "contents": "zm::handle_zombie_risers_water(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "handle_zombie_risers\t#using scripts\\zm\\_zm;", "contents": "zm::handle_zombie_risers(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "handle_zombie_risers_lowg\t#using scripts\\zm\\_zm;", "contents": "zm::handle_zombie_risers_lowg(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "rise_dust_fx\t#using scripts\\zm\\_zm;", "contents": "zm::rise_dust_fx(${1:clientnum}, ${2:type}, ${3:billow_fx}, ${4:burst_fx})"},
	{ "trigger": "end_last_stand\t#using scripts\\zm\\_zm;", "contents": "zm::end_last_stand(${1:clientNum})"},
	{ "trigger": "last_stand_thread\t#using scripts\\zm\\_zm;", "contents": "zm::last_stand_thread(${1:clientNum})"},
	{ "trigger": "last_stand_monitor\t#using scripts\\zm\\_zm;", "contents": "zm::last_stand_monitor(${1:clientNum}, ${2:state}, ${3:oldState})"},
	{ "trigger": "Laststand\t#using scripts\\zm\\_zm;", "contents": "zm::Laststand(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "update_aat_hud\t#using scripts\\zm\\_zm;", "contents": "zm::update_aat_hud(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "SetStage\t#using scripts\\shared\\gfx_shared;", "contents": "gfx::SetStage(${1:localClientNum}, ${2:bundle}, ${3:filterid}, ${4:stagePrefix}, ${5:stageLength}, ${6:accumTime}, ${7:totalAccumTime}, ${8:setConstants})"},
	{ "trigger": "getShaderConstantValue\t#using scripts\\shared\\gfx_shared;", "contents": "gfx::getShaderConstantValue(${1:bundle}, ${2:constPrefix}, ${3:constName}, ${4:delay})"},
	{ "trigger": "GetStructFieldOrZero\t#using scripts\\shared\\gfx_shared;", "contents": "gfx::GetStructFieldOrZero(${1:bundle}, ${2:field})"},
	{ "trigger": "getShaderConstantIndex\t#using scripts\\shared\\gfx_shared;", "contents": "gfx::getShaderConstantIndex(${1:codeConstName})"},
	{ "trigger": "add_equip_activated_callback_override\t#using scripts\\zm\\_zm_equipment;", "contents": "zm_equipment::add_equip_activated_callback_override(${1:model}, ${2:func})"},
	{ "trigger": "equipment_activated_clientfield_cb\t#using scripts\\zm\\_zm_equipment;", "contents": "zm_equipment::equipment_activated_clientfield_cb(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "play_fx_for_all_clients\t#using scripts\\zm\\_zm_equipment;", "contents": "zm_equipment::play_fx_for_all_clients(${1:fx}, ${2:tag}, ${3:storeHandles = false}, ${4:forward = undefined})"},
	{ "trigger": "is_included\t#using scripts\\zm\\_zm_equipment;", "contents": "zm_equipment::is_included(${1:equipment})"},
	{ "trigger": "include\t#using scripts\\zm\\_zm_equipment;", "contents": "zm_equipment::include(${1:equipment_name})"},
	{ "trigger": "check_for_wind_override\t#using scripts\\zm\\_global_fx;", "contents": "global_fx::check_for_wind_override()"},
	{ "trigger": "player_on_connect\t#using scripts\\zm\\_zm_demo;", "contents": "_zm_demo::player_on_connect(${1:localClientNum})"},
	{ "trigger": "watch_predicted_player_changes\t#using scripts\\zm\\_zm_demo;", "contents": "_zm_demo::watch_predicted_player_changes(${1:localClientNum})"},
	{ "trigger": "autoexec opt_in\t#using scripts\\zm\\zm_usermap;", "contents": "zm_usermap::autoexec opt_in()"},
	{ "trigger": "include_weapons\t#using scripts\\zm\\zm_usermap;", "contents": "zm_usermap::include_weapons()"},
	{ "trigger": "include_perks\t#using scripts\\zm\\zm_usermap;", "contents": "zm_usermap::include_perks()"},
	{ "trigger": "setup_personality_character_exerts\t#using scripts\\zm\\zm_usermap;", "contents": "zm_usermap::setup_personality_character_exerts()"},
	{ "trigger": "wait_and_set_revive_shader_constant\t#using scripts\\zm\\_zm_laststand;", "contents": "zm_laststand::wait_and_set_revive_shader_constant()"},
	{ "trigger": "animation_update\t#using scripts\\zm\\_zm_laststand;", "contents": "zm_laststand::animation_update(${1:model}, ${2:oldValue}, ${3:newValue})"},
	{ "trigger": "update_bleedout_timer\t#using scripts\\zm\\_zm_laststand;", "contents": "zm_laststand::update_bleedout_timer(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "watch_lockon\t#using scripts\\shared\\weapons\\antipersonnelguidance;", "contents": "antipersonnel_guidance::watch_lockon(${1:localClientNum})"},
	{ "trigger": "watch_lockon_old\t#using scripts\\shared\\weapons\\antipersonnelguidance;", "contents": "antipersonnel_guidance::watch_lockon_old(${1:localClientNum})"},
	{ "trigger": "ent_set_outline\t#using scripts\\shared\\weapons\\antipersonnelguidance;", "contents": "antipersonnel_guidance::ent_set_outline(${1:color})"},
	{ "trigger": "watch_lockon\t#using scripts\\shared\\weapons\\multilockapguidance;", "contents": "antipersonnel_guidance::watch_lockon(${1:localClientNum})"},
	{ "trigger": "watch_lockon_old\t#using scripts\\shared\\weapons\\multilockapguidance;", "contents": "antipersonnel_guidance::watch_lockon_old(${1:localClientNum})"},
	{ "trigger": "ent_set_outline\t#using scripts\\shared\\weapons\\multilockapguidance;", "contents": "antipersonnel_guidance::ent_set_outline(${1:color})"},
	{ "trigger": "wc_icon_setup\t#using scripts\\shared\\_weapon_customization_icon;", "contents": "weapon_customization_icon::wc_icon_setup(${1:localClientNum})"},
	{ "trigger": "update_wc_icon_extracam\t#using scripts\\shared\\_weapon_customization_icon;", "contents": "weapon_customization_icon::update_wc_icon_extracam(${1:localClientNum})"},
	{ "trigger": "wait_for_extracam_close\t#using scripts\\shared\\_weapon_customization_icon;", "contents": "weapon_customization_icon::wait_for_extracam_close(${1:localClientNum}, ${2:camera_ent}, ${3:extracam_data_struct})"},
	{ "trigger": "GetXcam\t#using scripts\\shared\\_weapon_customization_icon;", "contents": "weapon_customization_icon::GetXcam(${1:weapon_name}, ${2:camera})"},
	{ "trigger": "setup_wc_extracam_settings\t#using scripts\\shared\\_weapon_customization_icon;", "contents": "weapon_customization_icon::setup_wc_extracam_settings(${1:localClientNum}, ${2:extracam_data_struct})"},
	{ "trigger": "set_wc_icon_weapon_options\t#using scripts\\shared\\_weapon_customization_icon;", "contents": "weapon_customization_icon::set_wc_icon_weapon_options(${1:weapon_options_param}, ${2:extracam_data_struct})"},
	{ "trigger": "spawn_weapon_model\t#using scripts\\shared\\_weapon_customization_icon;", "contents": "weapon_customization_icon::spawn_weapon_model(${1:localClientNum}, ${2:origin}, ${3:angles})"},
	{ "trigger": "set_wc_icon_cosmetic_variants\t#using scripts\\shared\\_weapon_customization_icon;", "contents": "weapon_customization_icon::set_wc_icon_cosmetic_variants(${1:acv_param}, ${2:weapon_full_name}, ${3:extracam_data_struct})"},
	{ "trigger": "get_safehouse_position_struct\t#using scripts\\shared\\_weapon_customization_icon;", "contents": "weapon_customization_icon::get_safehouse_position_struct()"},
	{ "trigger": "setup_wc_weapon_model\t#using scripts\\shared\\_weapon_customization_icon;", "contents": "weapon_customization_icon::setup_wc_weapon_model(${1:localClientNum}, ${2:extracam_data_struct})"},
	{ "trigger": "process_wc_paintjobicon_extracam_request\t#using scripts\\shared\\_weapon_customization_icon;", "contents": "weapon_customization_icon::process_wc_paintjobicon_extracam_request(${1:localClientNum}, ${2:extraCamIndex}, ${3:jobIndex}, ${4:attachmentVariantString}, ${5:weaponOptions}, ${6:weaponPlusAttachments}, ${7:loadoutSlot}, ${8:paintjobIndex}, ${9:paintjobSlot}, ${10:isFilesharePreview})"},
	{ "trigger": "process_wc_varianticon_extracam_request\t#using scripts\\shared\\_weapon_customization_icon;", "contents": "weapon_customization_icon::process_wc_varianticon_extracam_request(${1:localClientNum}, ${2:extraCamIndex}, ${3:jobIndex}, ${4:attachmentVariantString}, ${5:weaponOptions}, ${6:weaponPlusAttachments}, ${7:loadoutSlot}, ${8:paintjobIndex}, ${9:paintjobSlot}, ${10:isFilesharePreview})"},
	{ "trigger": "register_visionset_info\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::register_visionset_info(${1:name}, ${2:version}, ${3:lerp_step_count}, ${4:visionset_from}, ${5:visionset_to}, ${6:visionset_type = VSMGR_VISIONSET_TYPE_NAKED})"},
	{ "trigger": "register_overlay_info_style_none\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::register_overlay_info_style_none(${1:name}, ${2:version}, ${3:lerp_step_count})"},
	{ "trigger": "register_overlay_info_style_filter\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::register_overlay_info_style_filter(${1:name}, ${2:version}, ${3:lerp_step_count}, ${4:filter_index}, ${5:pass_index}, ${6:material_name}, ${7:constant_index})"},
	{ "trigger": "register_overlay_info_style_blur\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::register_overlay_info_style_blur(${1:name}, ${2:version}, ${3:lerp_step_count}, ${4:transition_in}, ${5:transition_out}, ${6:magnitude})"},
	{ "trigger": "register_overlay_info_style_electrified\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::register_overlay_info_style_electrified(${1:name}, ${2:version}, ${3:lerp_step_count}, ${4:duration})"},
	{ "trigger": "register_overlay_info_style_burn\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::register_overlay_info_style_burn(${1:name}, ${2:version}, ${3:lerp_step_count}, ${4:duration})"},
	{ "trigger": "register_overlay_info_style_poison\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::register_overlay_info_style_poison(${1:name}, ${2:version}, ${3:lerp_step_count})"},
	{ "trigger": "register_overlay_info_style_transported\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::register_overlay_info_style_transported(${1:name}, ${2:version}, ${3:lerp_step_count}, ${4:duration})"},
	{ "trigger": "register_overlay_info_style_speed_blur\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::register_overlay_info_style_speed_blur(${1:name}, ${2:version}, ${3:lerp_step_count}, ${4:amount}, ${5:inner_radius}, ${6:outer_radius}, ${7:velocity_should_scale}, ${8:velocity_scale}, ${9:blur_in}, ${10:blur_out}, ${11:should_offset})"},
	{ "trigger": "register_overlay_info_style_postfx_bundle\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::register_overlay_info_style_postfx_bundle(${1:name}, ${2:version}, ${3:lerp_step_count}, ${4:bundle}, ${5:duration})"},
	{ "trigger": "is_type_currently_default\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::is_type_currently_default(${1:localClientNum}, ${2:type})"},
	{ "trigger": "register_type\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::register_type(${1:type}, ${2:cf_slot_cb}, ${3:cf_lerp_cb}, ${4:update_cb})"},
	{ "trigger": "finalize_clientfields\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::finalize_clientfields()"},
	{ "trigger": "finalize_type_clientfields\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::finalize_type_clientfields()"},
	{ "trigger": "validate_info\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::validate_info(${1:type}, ${2:name}, ${3:version})"},
	{ "trigger": "add_sorted_name_key\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::add_sorted_name_key(${1:type}, ${2:name})"},
	{ "trigger": "add_info\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::add_info(${1:type}, ${2:name}, ${3:version}, ${4:lerp_step_count})"},
	{ "trigger": "register_info\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::register_info(${1:type}, ${2:name}, ${3:version}, ${4:lerp_step_count})"},
	{ "trigger": "slot_cb\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::slot_cb(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump}, ${8:type})"},
	{ "trigger": "visionset_slot_cb\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::visionset_slot_cb(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "overlay_slot_cb\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::overlay_slot_cb(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "lerp_cb\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::lerp_cb(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump}, ${8:type})"},
	{ "trigger": "visionset_lerp_cb\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::visionset_lerp_cb(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "overlay_lerp_cb\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::overlay_lerp_cb(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "get_info\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::get_info(${1:type}, ${2:slot})"},
	{ "trigger": "get_state\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::get_state(${1:localClientNum}, ${2:type})"},
	{ "trigger": "should_update_state\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::should_update_state()"},
	{ "trigger": "transition_state\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::transition_state()"},
	{ "trigger": "demo_jump_monitor\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::demo_jump_monitor()"},
	{ "trigger": "demo_spectate_monitor\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::demo_spectate_monitor()"},
	{ "trigger": "monitor\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::monitor()"},
	{ "trigger": "killcam_visionset_vehicle_mismatch\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::killcam_visionset_vehicle_mismatch(${1:visionset_to}, ${2:visionset_vehicle}, ${3:vehicletype})"},
	{ "trigger": "killcam_visionset_player_mismatch\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::killcam_visionset_player_mismatch(${1:visionset_to}, ${2:visionset_vehicle})"},
	{ "trigger": "visionset_update_cb\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::visionset_update_cb(${1:localClientNum}, ${2:type})"},
	{ "trigger": "set_poison_overlay\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::set_poison_overlay(${1:amount})"},
	{ "trigger": "clear_poison_overlay\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::clear_poison_overlay()"},
	{ "trigger": "overlay_update_cb\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::overlay_update_cb(${1:localClientNum}, ${2:type})"},
	{ "trigger": "fog_vol_to_visionset_set_suffix\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::fog_vol_to_visionset_set_suffix(${1:suffix})"},
	{ "trigger": "fog_vol_to_visionset_set_info\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::fog_vol_to_visionset_set_info(${1:id}, ${2:visionset}, ${3:trans_in})"},
	{ "trigger": "fog_vol_to_visionset_force_instant_transition\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::fog_vol_to_visionset_force_instant_transition(${1:localClientNum})"},
	{ "trigger": "fog_vol_to_visionset_instant_transition_monitor\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::fog_vol_to_visionset_instant_transition_monitor()"},
	{ "trigger": "fog_vol_to_visionset_hostmigration_monitor\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::fog_vol_to_visionset_hostmigration_monitor()"},
	{ "trigger": "fog_vol_to_visionset_monitor\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::fog_vol_to_visionset_monitor()"},
	{ "trigger": "reset_player_fv2vs_infos_on_respawn\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::reset_player_fv2vs_infos_on_respawn()"},
	{ "trigger": "trap_fx_monitor\t#using scripts\\zm\\_zm_trap_electric;", "contents": "zm_trap_electric::trap_fx_monitor(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "electric_trap_fx\t#using scripts\\zm\\_zm_trap_electric; self == a single fire point of an electric trap", "contents": "zm_trap_electric::electric_trap_fx()"},
	{ "trigger": "stop_trap_fx\t#using scripts\\zm\\_zm_trap_electric; self == a single fire point of an electric trap", "contents": "zm_trap_electric::stop_trap_fx()"},
	{ "trigger": "is_trap_registered\t#using scripts\\zm\\_zm_traps; self = struct", "contents": "zm_traps::is_trap_registered(${1:a_registered_traps})"},
	{ "trigger": "on_player_connect\t#using scripts\\shared\\lui_shared;", "contents": "lui::on_player_connect(${1:localClientNum})"},
	{ "trigger": "createExtraCamXCamData\t#using scripts\\shared\\lui_shared;", "contents": "lui::createExtraCamXCamData(${1:menu_name}, ${2:localClientNum}, ${3:extracam_index}, ${4:target_name}, ${5:xcam}, ${6:sub_xcam}, ${7:xcam_frame})"},
	{ "trigger": "createCustomExtraCamXCamData\t#using scripts\\shared\\lui_shared;", "contents": "lui::createCustomExtraCamXCamData(${1:menu_name}, ${2:localClientNum}, ${3:extracam_index}, ${4:camera_function})"},
	{ "trigger": "addMenuExploders\t#using scripts\\shared\\lui_shared;", "contents": "lui::addMenuExploders(${1:menu_name}, ${2:localClientNum}, ${3:exploder})"},
	{ "trigger": "linkToCustomCharacter\t#using scripts\\shared\\lui_shared;", "contents": "lui::linkToCustomCharacter(${1:menu_name}, ${2:localClientNum}, ${3:target_name})"},
	{ "trigger": "getCharacterDataForMenu\t#using scripts\\shared\\lui_shared;", "contents": "lui::getCharacterDataForMenu(${1:menu_name}, ${2:localClientNum})"},
	{ "trigger": "createCameraMenu\t#using scripts\\shared\\lui_shared;", "contents": "lui::createCameraMenu(${1:menu_name}, ${2:localClientNum}, ${3:target_name}, ${4:xcam}, ${5:sub_xcam}, ${6:xcam_frame = undefined}, ${7:custom_open_fn = undefined}, ${8:custom_close_fn = undefined})"},
	{ "trigger": "createCustomCameraMenu\t#using scripts\\shared\\lui_shared;", "contents": "lui::createCustomCameraMenu(${1:menu_name}, ${2:localClientNum}, ${3:camera_function}, ${4:has_state}, ${5:custom_open_fn = undefined}, ${6:custom_close_fn = undefined})"},
	{ "trigger": "setup_menu\t#using scripts\\shared\\lui_shared;", "contents": "lui::setup_menu(${1:localClientNum}, ${2:menu_data}, ${3:previous_menu})"},
	{ "trigger": "client_menus\t#using scripts\\shared\\lui_shared;", "contents": "lui::client_menus(${1:localClientNum})"},
	{ "trigger": "screen_fade\t#using scripts\\shared\\lui_shared;", "contents": "lui::screen_fade(${1:n_time}, ${2:n_target_alpha = 1}, ${3:n_start_alpha = 0}, ${4:str_color = \"black\"}, ${5:b_force_close_menu = false})"},
	{ "trigger": "screen_fade_out\t#using scripts\\shared\\lui_shared;", "contents": "lui::screen_fade_out(${1:n_time}, ${2:str_color})"},
	{ "trigger": "screen_fade_in\t#using scripts\\shared\\lui_shared;", "contents": "lui::screen_fade_in(${1:n_time}, ${2:str_color})"},
	{ "trigger": "screen_close_menu\t#using scripts\\shared\\lui_shared;", "contents": "lui::screen_close_menu()"},
	{ "trigger": "set_color\t#using scripts\\shared\\lui_shared;", "contents": "lui::set_color(${1:menu}, ${2:color})"},
	{ "trigger": "enable_staminup_perk_for_level\t#using scripts\\zm\\_zm_perk_staminup;", "contents": "zm_perk_staminup::enable_staminup_perk_for_level()"},
	{ "trigger": "staminup_client_field_func\t#using scripts\\zm\\_zm_perk_staminup;", "contents": "zm_perk_staminup::staminup_client_field_func()"},
	{ "trigger": "staminup_callback_func\t#using scripts\\zm\\_zm_perk_staminup;", "contents": "zm_perk_staminup::staminup_callback_func()"},
	{ "trigger": "clamp\t#using scripts\\shared\\math_shared;", "contents": "math::clamp(${1:val}, ${2:val_min}, ${3:val_max})"},
	{ "trigger": "linear_map\t#using scripts\\shared\\math_shared;", "contents": "math::linear_map(${1:num}, ${2:min_a}, ${3:max_a}, ${4:min_b}, ${5:max_b})"},
	{ "trigger": "lag\t#using scripts\\shared\\math_shared;", "contents": "math::lag(${1:desired}, ${2:curr}, ${3:k}, ${4:dt})"},
	{ "trigger": "array_average\t#using scripts\\shared\\math_shared;", "contents": "math::array_average(${1:array})"},
	{ "trigger": "array_std_deviation\t#using scripts\\shared\\math_shared;", "contents": "math::array_std_deviation(${1:array}, ${2:mean})"},
	{ "trigger": "vector_compare\t#using scripts\\shared\\math_shared;", "contents": "math::vector_compare(${1:vec1}, ${2:vec2})"},
	{ "trigger": "random_vector\t#using scripts\\shared\\math_shared;", "contents": "math::random_vector(${1:max_length})"},
	{ "trigger": "angle_dif\t#using scripts\\shared\\math_shared;", "contents": "math::angle_dif(${1:oldangle}, ${2:newangle})"},
	{ "trigger": "sign\t#using scripts\\shared\\math_shared;", "contents": "math::sign(${1:x})"},
	{ "trigger": "cointoss\t#using scripts\\shared\\math_shared;", "contents": "math::cointoss()"},
	{ "trigger": "on_localplayer_spawned\t#using scripts\\shared\\weapons\\_hacker_tool;", "contents": "hacker_tool::on_localplayer_spawned(${1:localClientNum})"},
	{ "trigger": "player_hacking\t#using scripts\\shared\\weapons\\_hacker_tool;", "contents": "hacker_tool::player_hacking(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "watchHackSpeed\t#using scripts\\shared\\weapons\\_hacker_tool;", "contents": "hacker_tool::watchHackSpeed(${1:localClientNum}, ${2:isBreachingFirewall})"},
	{ "trigger": "watchTargetHack\t#using scripts\\shared\\weapons\\_hacker_tool;", "contents": "hacker_tool::watchTargetHack(${1:localclientnum}, ${2:player}, ${3:isBreachingFirewall})"},
	{ "trigger": "watchHackerPlayerShutdown\t#using scripts\\shared\\weapons\\_hacker_tool;", "contents": "hacker_tool::watchHackerPlayerShutdown(${1:localClientNum}, ${2:hackerPlayer}, ${3:targetEnt})"},
	{ "trigger": "watchForEMP\t#using scripts\\shared\\weapons\\_hacker_tool;", "contents": "hacker_tool::watchForEMP(${1:localClientNum})"},
	{ "trigger": "play\t#using scripts\\shared\\vehicles\\_driving_fx;", "contents": "driving_fx::play(${1:localClientNum}, ${2:vehicle}, ${3:fx_id}, ${4:fx_tag})"},
	{ "trigger": "stop\t#using scripts\\shared\\vehicles\\_driving_fx;", "contents": "driving_fx::stop(${1:localClientNum})"},
	{ "trigger": "update\t#using scripts\\shared\\vehicles\\_driving_fx;", "contents": "driving_fx::update(${1:localClientNum}, ${2:vehicle}, ${3:speed_fraction})"},
	{ "trigger": "update\t#using scripts\\shared\\vehicles\\_driving_fx;", "contents": "driving_fx::update(${1:localClientNum}, ${2:vehicle}, ${3:speed_fraction})"},
	{ "trigger": "play_driving_fx_thirdperson\t#using scripts\\shared\\vehicles\\_driving_fx;", "contents": "driving_fx::play_driving_fx_thirdperson(${1:localClientNum}, ${2:speed}, ${3:speed_fraction})"},
	{ "trigger": "vehicle_enter\t#using scripts\\shared\\vehicles\\_driving_fx;", "contents": "driving_fx::vehicle_enter(${1:localClientNum})"},
	{ "trigger": "speed_fx\t#using scripts\\shared\\vehicles\\_driving_fx;", "contents": "driving_fx::speed_fx(${1:localClientNum})"},
	{ "trigger": "play_driving_fx\t#using scripts\\shared\\vehicles\\_driving_fx;", "contents": "driving_fx::play_driving_fx(${1:localClientNum})"},
	{ "trigger": "get_wheel_fx\t#using scripts\\shared\\vehicles\\_driving_fx;", "contents": "driving_fx::get_wheel_fx(${1:type}, ${2:surface})"},
	{ "trigger": "play_driving_fx_firstperson\t#using scripts\\shared\\vehicles\\_driving_fx;", "contents": "driving_fx::play_driving_fx_firstperson(${1:localClientNum}, ${2:speed}, ${3:speed_fraction})"},
	{ "trigger": "collision_thread\t#using scripts\\shared\\vehicles\\_driving_fx;", "contents": "driving_fx::collision_thread(${1:localClientNum})"},
	{ "trigger": "jump_landing_thread\t#using scripts\\shared\\vehicles\\_driving_fx;", "contents": "driving_fx::jump_landing_thread(${1:localClientNum})"},
	{ "trigger": "suspension_thread\t#using scripts\\shared\\vehicles\\_driving_fx;", "contents": "driving_fx::suspension_thread(${1:localClientNum})"},
	{ "trigger": "get_impact_vol_from_speed\t#using scripts\\shared\\vehicles\\_driving_fx;", "contents": "driving_fx::get_impact_vol_from_speed()"},
	{ "trigger": "any_wheel_colliding\t#using scripts\\shared\\vehicles\\_driving_fx;", "contents": "driving_fx::any_wheel_colliding()"},
	{ "trigger": "dirt_surface_type\t#using scripts\\shared\\vehicles\\_driving_fx;", "contents": "driving_fx::dirt_surface_type(${1:surface_type})"},
	{ "trigger": "correct_surface_type_for_screen_fx\t#using scripts\\shared\\vehicles\\_driving_fx;", "contents": "driving_fx::correct_surface_type_for_screen_fx()"},
	{ "trigger": "play_screen_fx_dirt\t#using scripts\\shared\\vehicles\\_driving_fx;", "contents": "driving_fx::play_screen_fx_dirt(${1:localClientNum})"},
	{ "trigger": "play_screen_fx_dust\t#using scripts\\shared\\vehicles\\_driving_fx;", "contents": "driving_fx::play_screen_fx_dust(${1:localClientNum})"},
	{ "trigger": "extracam_reset_index\t#using scripts\\core\\_multi_extracam;", "contents": "multi_extracam::extracam_reset_index(${1:localClientNum}, ${2:index})"},
	{ "trigger": "widows_wine_client_field_func\t#using scripts\\zm\\_zm_perk_widows_wine;", "contents": "zm_perk_widows_wine::widows_wine_client_field_func()"},
	{ "trigger": "widows_wine_code_callback_func\t#using scripts\\zm\\_zm_perk_widows_wine;", "contents": "zm_perk_widows_wine::widows_wine_code_callback_func()"},
	{ "trigger": "widows_wine_wrap_cb\t#using scripts\\zm\\_zm_perk_widows_wine;", "contents": "zm_perk_widows_wine::widows_wine_wrap_cb(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "widows_wine_1p_contact_explosion\t#using scripts\\zm\\_zm_perk_widows_wine;", "contents": "zm_perk_widows_wine::widows_wine_1p_contact_explosion(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "widows_wine_1p_contact_explosion_play\t#using scripts\\zm\\_zm_perk_widows_wine;", "contents": "zm_perk_widows_wine::widows_wine_1p_contact_explosion_play(${1:localClientNum})"},
	{ "trigger": "enable_deadshot_perk_for_level\t#using scripts\\zm\\_zm_perk_deadshot;", "contents": "zm_perk_deadshot::enable_deadshot_perk_for_level()"},
	{ "trigger": "deadshot_client_field_func\t#using scripts\\zm\\_zm_perk_deadshot;", "contents": "zm_perk_deadshot::deadshot_client_field_func()"},
	{ "trigger": "deadshot_code_callback_func\t#using scripts\\zm\\_zm_perk_deadshot;", "contents": "zm_perk_deadshot::deadshot_code_callback_func()"},
	{ "trigger": "player_deadshot_perk_handler\t#using scripts\\zm\\_zm_perk_deadshot;", "contents": "zm_perk_deadshot::player_deadshot_perk_handler(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "_setup_\t#using scripts\\shared\\vehicles\\_siegebot;", "contents": "siegebot::_setup_(${1:localClientNum})"},
	{ "trigger": "register_clientfields\t#using scripts\\zm\\_zm_weap_gravityspikes;", "contents": "_zm_weap_gravityspikes::register_clientfields()"},
	{ "trigger": "gravity_slam_down\t#using scripts\\zm\\_zm_weap_gravityspikes;", "contents": "_zm_weap_gravityspikes::gravity_slam_down(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "gravity_slam_fx\t#using scripts\\zm\\_zm_weap_gravityspikes;", "contents": "_zm_weap_gravityspikes::gravity_slam_fx(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "gravity_slam_player_fx\t#using scripts\\zm\\_zm_weap_gravityspikes; self = player", "contents": "_zm_weap_gravityspikes::gravity_slam_player_fx(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "gravity_trap_fx\t#using scripts\\zm\\_zm_weap_gravityspikes; self = tag model for gravity trap", "contents": "_zm_weap_gravityspikes::gravity_trap_fx(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "gravity_trap_spike_spark\t#using scripts\\zm\\_zm_weap_gravityspikes;", "contents": "_zm_weap_gravityspikes::gravity_trap_spike_spark(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "gravity_trap_location\t#using scripts\\zm\\_zm_weap_gravityspikes;", "contents": "_zm_weap_gravityspikes::gravity_trap_location(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "gravity_trap_destroy\t#using scripts\\zm\\_zm_weap_gravityspikes;", "contents": "_zm_weap_gravityspikes::gravity_trap_destroy(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "ragdoll_impact_watch_start\t#using scripts\\zm\\_zm_weap_gravityspikes; self = zombie", "contents": "_zm_weap_gravityspikes::ragdoll_impact_watch_start(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasDemoJump})"},
	{ "trigger": "ragdoll_impact_watch\t#using scripts\\zm\\_zm_weap_gravityspikes; self = zombie", "contents": "_zm_weap_gravityspikes::ragdoll_impact_watch(${1:localClientNum})"},
	{ "trigger": "gravity_trap_rumble_callback\t#using scripts\\zm\\_zm_weap_gravityspikes; self = player", "contents": "_zm_weap_gravityspikes::gravity_trap_rumble_callback(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "gravity_trap_rumble\t#using scripts\\zm\\_zm_weap_gravityspikes; self = player", "contents": "_zm_weap_gravityspikes::gravity_trap_rumble(${1:localClientNum})"},
	{ "trigger": "play_sparky_beam_fx\t#using scripts\\zm\\_zm_weap_gravityspikes; self = zombie", "contents": "_zm_weap_gravityspikes::play_sparky_beam_fx(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "sparky_zombie_fx_cb\t#using scripts\\zm\\_zm_weap_gravityspikes; self = zombie", "contents": "_zm_weap_gravityspikes::sparky_zombie_fx_cb(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "sparky_zombie_trail_fx_cb\t#using scripts\\zm\\_zm_weap_gravityspikes; self = zombie", "contents": "_zm_weap_gravityspikes::sparky_zombie_trail_fx_cb(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "gravity_spike_zombie_explode\t#using scripts\\zm\\_zm_weap_gravityspikes;", "contents": "_zm_weap_gravityspikes::gravity_spike_zombie_explode(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "spawned\t#using scripts\\zm\\_sticky_grenade;", "contents": "_sticky_grenade::spawned(${1:localClientNum})"},
	{ "trigger": "fx_think\t#using scripts\\zm\\_sticky_grenade;", "contents": "_sticky_grenade::fx_think(${1:localClientNum})"},
	{ "trigger": "start_light_fx\t#using scripts\\zm\\_sticky_grenade;", "contents": "_sticky_grenade::start_light_fx(${1:localClientNum})"},
	{ "trigger": "stop_light_fx\t#using scripts\\zm\\_sticky_grenade;", "contents": "_sticky_grenade::stop_light_fx(${1:localClientNum})"},
	{ "trigger": "fullscreen_fx\t#using scripts\\zm\\_sticky_grenade;", "contents": "_sticky_grenade::fullscreen_fx(${1:localClientNum})"},
	{ "trigger": "shield_state_change\t#using scripts\\shared\\weapons\\_riotshield;", "contents": "riotshield::shield_state_change(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "riotshield_deploy_anim\t#using scripts\\shared\\weapons\\_riotshield;", "contents": "riotshield::riotshield_deploy_anim(${1:localClientNum}, ${2:instant})"},
	{ "trigger": "watch_riotshield_damage\t#using scripts\\shared\\weapons\\_riotshield;", "contents": "riotshield::watch_riotshield_damage()"},
	{ "trigger": "riotshield_destroy_anim\t#using scripts\\shared\\weapons\\_riotshield;", "contents": "riotshield::riotshield_destroy_anim(${1:localClientNum})"},
	{ "trigger": "ent_camo_material_callback\t#using scripts\\shared\\abilities\\gadgets\\_gadget_camo;", "contents": "_gadget_camo::ent_camo_material_callback(${1:local_client_num}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "on_localplayer_spawned\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::on_localplayer_spawned(${1:local_client_num})"},
	{ "trigger": "watch_killstreak_tap_activation\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::watch_killstreak_tap_activation(${1:local_client_num})"},
	{ "trigger": "proximity_alarm_changed\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::proximity_alarm_changed(${1:local_client_num}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "update_sound\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::update_sound(${1:local_client_num}, ${2:bNewEnt}, ${3:newVal}, ${4:oldVal})"},
	{ "trigger": "teamequip_changed\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::teamequip_changed(${1:local_client_num}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "updateTeamEquipment\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::updateTeamEquipment(${1:local_client_num}, ${2:newVal})"},
	{ "trigger": "retrievable_changed\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::retrievable_changed(${1:local_client_num}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "updateRetrievable\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::updateRetrievable(${1:local_client_num}, ${2:newVal})"},
	{ "trigger": "enemyequip_changed\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::enemyequip_changed(${1:local_client_num}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "updateEnemyEquipment\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::updateEnemyEquipment(${1:local_client_num}, ${2:newVal})"},
	{ "trigger": "equipmentDR\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::equipmentDR(${1:local_client_num})"},
	{ "trigger": "watch_perks_changed\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::watch_perks_changed(${1:local_client_num})"},
	{ "trigger": "checkTeamEquipment\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::checkTeamEquipment(${1:localClientNum})"},
	{ "trigger": "equipmentTeamObject\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::equipmentTeamObject(${1:localClientNum})"},
	{ "trigger": "playFlareFX\t#using scripts\\shared\\weapons\\_weaponobjects; self is the equipment entity", "contents": "weaponobjects::playFlareFX(${1:localClientNum})"},
	{ "trigger": "equipmentWatchTeamFX\t#using scripts\\shared\\weapons\\_weaponobjects; self is the equipment entity", "contents": "weaponobjects::equipmentWatchTeamFX(${1:localClientNum}, ${2:fxHandle})"},
	{ "trigger": "equipmentWatchPlayerTeamChanged\t#using scripts\\shared\\weapons\\_weaponobjects; self is the equipment entity", "contents": "weaponobjects::equipmentWatchPlayerTeamChanged(${1:localClientNum}, ${2:fxHandle})"},
	{ "trigger": "sndProxAlert_EntCleanup\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::sndProxAlert_EntCleanup(${1:localClientNum}, ${2:ent})"},
	{ "trigger": "enable_filter_zm_turned\t#using scripts\\zm\\_filter;", "contents": "filter::enable_filter_zm_turned(${1:player}, ${2:filterid}, ${3:overlayid})"},
	{ "trigger": "disable_filter_zm_turned\t#using scripts\\zm\\_filter;", "contents": "filter::disable_filter_zm_turned(${1:player}, ${2:filterid}, ${3:overlayid})"},
	{ "trigger": "map_material_helper_by_localclientnum\t#using scripts\\shared\\filter_shared;", "contents": "filter::map_material_helper_by_localclientnum(${1:localClientNum}, ${2:materialname})"},
	{ "trigger": "map_material_if_undefined\t#using scripts\\shared\\filter_shared;", "contents": "filter::map_material_if_undefined(${1:localClientNum}, ${2:materialname})"},
	{ "trigger": "map_material_helper\t#using scripts\\shared\\filter_shared;", "contents": "filter::map_material_helper(${1:player}, ${2:materialname})"},
	{ "trigger": "mapped_material_id\t#using scripts\\shared\\filter_shared;", "contents": "filter::mapped_material_id(${1:materialname})"},
	{ "trigger": "enable_filter_binoculars\t#using scripts\\shared\\filter_shared;", "contents": "filter::enable_filter_binoculars(${1:player}, ${2:filterid}, ${3:overlayid})"},
	{ "trigger": "disable_filter_binoculars\t#using scripts\\shared\\filter_shared;", "contents": "filter::disable_filter_binoculars(${1:player}, ${2:filterid}, ${3:overlayid})"},
	{ "trigger": "enable_filter_binoculars_with_outline\t#using scripts\\shared\\filter_shared;", "contents": "filter::enable_filter_binoculars_with_outline(${1:player}, ${2:filterid}, ${3:overlayid})"},
	{ "trigger": "disable_filter_binoculars_with_outline\t#using scripts\\shared\\filter_shared;", "contents": "filter::disable_filter_binoculars_with_outline(${1:player}, ${2:filterid}, ${3:overlayid})"},
	{ "trigger": "set_filter_hazmat_opacity\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_hazmat_opacity(${1:player}, ${2:filterid}, ${3:overlayid}, ${4:opacity})"},
	{ "trigger": "enable_filter_hazmat\t#using scripts\\shared\\filter_shared;", "contents": "filter::enable_filter_hazmat(${1:player}, ${2:filterid}, ${3:overlayid}, ${4:stage}, ${5:opacity})"},
	{ "trigger": "disable_filter_hazmat\t#using scripts\\shared\\filter_shared;", "contents": "filter::disable_filter_hazmat(${1:player}, ${2:filterid}, ${3:overlayid})"},
	{ "trigger": "enable_filter_helmet\t#using scripts\\shared\\filter_shared;", "contents": "filter::enable_filter_helmet(${1:player}, ${2:filterid}, ${3:overlayid})"},
	{ "trigger": "disable_filter_helmet\t#using scripts\\shared\\filter_shared;", "contents": "filter::disable_filter_helmet(${1:player}, ${2:filterid}, ${3:overlayid})"},
	{ "trigger": "enable_filter_tacticalmask\t#using scripts\\shared\\filter_shared;", "contents": "filter::enable_filter_tacticalmask(${1:player}, ${2:filterid})"},
	{ "trigger": "disable_filter_tacticalmask\t#using scripts\\shared\\filter_shared;", "contents": "filter::disable_filter_tacticalmask(${1:player}, ${2:filterid})"},
	{ "trigger": "set_filter_hud_projected_grid_position\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_hud_projected_grid_position(${1:player}, ${2:filterid}, ${3:amount})"},
	{ "trigger": "set_filter_hud_projected_grid_radius\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_hud_projected_grid_radius(${1:player}, ${2:filterid}, ${3:amount})"},
	{ "trigger": "enable_filter_hud_projected_grid\t#using scripts\\shared\\filter_shared;", "contents": "filter::enable_filter_hud_projected_grid(${1:player}, ${2:filterid})"},
	{ "trigger": "enable_filter_hud_projected_grid_haiti\t#using scripts\\shared\\filter_shared;", "contents": "filter::enable_filter_hud_projected_grid_haiti(${1:player}, ${2:filterid})"},
	{ "trigger": "disable_filter_hud_projected_grid\t#using scripts\\shared\\filter_shared;", "contents": "filter::disable_filter_hud_projected_grid(${1:player}, ${2:filterid})"},
	{ "trigger": "set_filter_emp_amount\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_emp_amount(${1:player}, ${2:filterid}, ${3:amount})"},
	{ "trigger": "enable_filter_emp\t#using scripts\\shared\\filter_shared;", "contents": "filter::enable_filter_emp(${1:player}, ${2:filterid})"},
	{ "trigger": "disable_filter_emp\t#using scripts\\shared\\filter_shared;", "contents": "filter::disable_filter_emp(${1:player}, ${2:filterid})"},
	{ "trigger": "set_filter_raindrops_amount\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_raindrops_amount(${1:player}, ${2:filterid}, ${3:amount})"},
	{ "trigger": "enable_filter_raindrops\t#using scripts\\shared\\filter_shared;", "contents": "filter::enable_filter_raindrops(${1:player}, ${2:filterid})"},
	{ "trigger": "disable_filter_raindrops\t#using scripts\\shared\\filter_shared;", "contents": "filter::disable_filter_raindrops(${1:player}, ${2:filterid})"},
	{ "trigger": "set_filter_squirrel_raindrops_amount\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_squirrel_raindrops_amount(${1:player}, ${2:filterid}, ${3:amount})"},
	{ "trigger": "enable_filter_squirrel_raindrops\t#using scripts\\shared\\filter_shared;", "contents": "filter::enable_filter_squirrel_raindrops(${1:player}, ${2:filterid})"},
	{ "trigger": "disable_filter_squirrel_raindrops\t#using scripts\\shared\\filter_shared;", "contents": "filter::disable_filter_squirrel_raindrops(${1:player}, ${2:filterid})"},
	{ "trigger": "set_filter_radialblur_amount\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_radialblur_amount(${1:player}, ${2:filterid}, ${3:amount})"},
	{ "trigger": "enable_filter_radialblur\t#using scripts\\shared\\filter_shared;", "contents": "filter::enable_filter_radialblur(${1:player}, ${2:filterid})"},
	{ "trigger": "disable_filter_radialblur\t#using scripts\\shared\\filter_shared;", "contents": "filter::disable_filter_radialblur(${1:player}, ${2:filterid})"},
	{ "trigger": "set_filter_vehicle_damage_amount\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_vehicle_damage_amount(${1:player}, ${2:filterid}, ${3:amount})"},
	{ "trigger": "set_filter_vehicle_sun_position\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_vehicle_sun_position(${1:player}, ${2:filterid}, ${3:x}, ${4:y})"},
	{ "trigger": "enable_filter_vehicle_damage\t#using scripts\\shared\\filter_shared;", "contents": "filter::enable_filter_vehicle_damage(${1:player}, ${2:filterid}, ${3:materialname})"},
	{ "trigger": "disable_filter_vehicle_damage\t#using scripts\\shared\\filter_shared;", "contents": "filter::disable_filter_vehicle_damage(${1:player}, ${2:filterid})"},
	{ "trigger": "enable_filter_oob\t#using scripts\\shared\\filter_shared;", "contents": "filter::enable_filter_oob(${1:player}, ${2:filterid})"},
	{ "trigger": "disable_filter_oob\t#using scripts\\shared\\filter_shared;", "contents": "filter::disable_filter_oob(${1:player}, ${2:filterid})"},
	{ "trigger": "enable_filter_tactical\t#using scripts\\shared\\filter_shared;", "contents": "filter::enable_filter_tactical(${1:player}, ${2:filterid})"},
	{ "trigger": "set_filter_tactical_amount\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_tactical_amount(${1:player}, ${2:filterid}, ${3:amount})"},
	{ "trigger": "disable_filter_tactical\t#using scripts\\shared\\filter_shared;", "contents": "filter::disable_filter_tactical(${1:player}, ${2:filterid})"},
	{ "trigger": "enable_filter_water_sheeting\t#using scripts\\shared\\filter_shared;", "contents": "filter::enable_filter_water_sheeting(${1:player}, ${2:filterid})"},
	{ "trigger": "set_filter_water_sheet_reveal\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_water_sheet_reveal(${1:player}, ${2:filterid}, ${3:amount})"},
	{ "trigger": "set_filter_water_sheet_speed\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_water_sheet_speed(${1:player}, ${2:filterid}, ${3:amount})"},
	{ "trigger": "set_filter_water_sheet_rivulet_reveal\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_water_sheet_rivulet_reveal(${1:player}, ${2:filterid}, ${3:riv1}, ${4:riv2}, ${5:riv3})"},
	{ "trigger": "disable_filter_water_sheeting\t#using scripts\\shared\\filter_shared;", "contents": "filter::disable_filter_water_sheeting(${1:player}, ${2:filterid})"},
	{ "trigger": "enable_filter_water_dive\t#using scripts\\shared\\filter_shared;", "contents": "filter::enable_filter_water_dive(${1:player}, ${2:filterid})"},
	{ "trigger": "disable_filter_water_dive\t#using scripts\\shared\\filter_shared;", "contents": "filter::disable_filter_water_dive(${1:player}, ${2:filterid})"},
	{ "trigger": "set_filter_water_dive_bubbles\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_water_dive_bubbles(${1:player}, ${2:filterid}, ${3:amount})"},
	{ "trigger": "set_filter_water_scuba_bubbles\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_water_scuba_bubbles(${1:player}, ${2:filterid}, ${3:amount})"},
	{ "trigger": "set_filter_water_scuba_dive_speed\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_water_scuba_dive_speed(${1:player}, ${2:filterid}, ${3:amount})"},
	{ "trigger": "set_filter_water_scuba_bubble_attitude\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_water_scuba_bubble_attitude(${1:player}, ${2:filterid}, ${3:amount})"},
	{ "trigger": "set_filter_water_wash_reveal_dir\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_water_wash_reveal_dir(${1:player}, ${2:filterid}, ${3:dir})"},
	{ "trigger": "set_filter_water_wash_color\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_water_wash_color(${1:player}, ${2:filterid}, ${3:red}, ${4:green}, ${5:blue})"},
	{ "trigger": "enable_filter_teleportation\t#using scripts\\shared\\filter_shared;", "contents": "filter::enable_filter_teleportation(${1:player}, ${2:filterid})"},
	{ "trigger": "set_filter_teleportation_anus_zoom\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_teleportation_anus_zoom(${1:player}, ${2:filterid}, ${3:amount})"},
	{ "trigger": "set_filter_teleportation_anus_amount\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_teleportation_anus_amount(${1:player}, ${2:filterid}, ${3:amount})"},
	{ "trigger": "set_filter_teleportation_panther_zoom\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_teleportation_panther_zoom(${1:player}, ${2:filterid}, ${3:amount})"},
	{ "trigger": "set_filter_teleportation_panther_amount\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_teleportation_panther_amount(${1:player}, ${2:filterid}, ${3:amount})"},
	{ "trigger": "set_filter_teleportation_glow_radius\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_teleportation_glow_radius(${1:player}, ${2:filterid}, ${3:radius})"},
	{ "trigger": "set_filter_teleportation_warp_amount\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_teleportation_warp_amount(${1:player}, ${2:filterid}, ${3:amount})"},
	{ "trigger": "set_filter_teleportation_warp_direction\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_teleportation_warp_direction(${1:player}, ${2:filterid}, ${3:direction})"},
	{ "trigger": "set_filter_teleportation_lightning_reveal\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_teleportation_lightning_reveal(${1:player}, ${2:filterid}, ${3:threshold})"},
	{ "trigger": "set_filter_teleportation_faces_amount\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_teleportation_faces_amount(${1:player}, ${2:filterid}, ${3:amount})"},
	{ "trigger": "set_filter_teleportation_space_background\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_teleportation_space_background(${1:player}, ${2:filterid}, ${3:set})"},
	{ "trigger": "set_filter_teleportation_sparkle_amount\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_teleportation_sparkle_amount(${1:player}, ${2:filterid}, ${3:amount})"},
	{ "trigger": "disable_filter_teleportation\t#using scripts\\shared\\filter_shared;", "contents": "filter::disable_filter_teleportation(${1:player}, ${2:filterid})"},
	{ "trigger": "SetTransported\t#using scripts\\shared\\filter_shared;", "contents": "filter::SetTransported(${1:player})"},
	{ "trigger": "enable_filter_ev_interference\t#using scripts\\shared\\filter_shared;", "contents": "filter::enable_filter_ev_interference(${1:player}, ${2:filterid})"},
	{ "trigger": "set_filter_ev_interference_amount\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_ev_interference_amount(${1:player}, ${2:filterid}, ${3:amount})"},
	{ "trigger": "disable_filter_ev_interference\t#using scripts\\shared\\filter_shared;", "contents": "filter::disable_filter_ev_interference(${1:player}, ${2:filterid})"},
	{ "trigger": "enable_filter_vehicleHijack\t#using scripts\\shared\\filter_shared;", "contents": "filter::enable_filter_vehicleHijack(${1:player}, ${2:filterid}, ${3:overlayid})"},
	{ "trigger": "disable_filter_vehicleHijack\t#using scripts\\shared\\filter_shared;", "contents": "filter::disable_filter_vehicleHijack(${1:player}, ${2:filterid}, ${3:overlayid})"},
	{ "trigger": "set_filter_ev_vehicleHijack_amount\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_ev_vehicleHijack_amount(${1:player}, ${2:filterid}, ${3:amount})"},
	{ "trigger": "enable_filter_vehicle_hijack_oor\t#using scripts\\shared\\filter_shared;", "contents": "filter::enable_filter_vehicle_hijack_oor(${1:player}, ${2:filterid})"},
	{ "trigger": "set_filter_vehicle_hijack_oor_noblack\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_vehicle_hijack_oor_noblack(${1:player}, ${2:filterid})"},
	{ "trigger": "set_filter_vehicle_hijack_oor_amount\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_vehicle_hijack_oor_amount(${1:player}, ${2:filterid}, ${3:amount})"},
	{ "trigger": "disable_filter_vehicle_hijack_oor\t#using scripts\\shared\\filter_shared;", "contents": "filter::disable_filter_vehicle_hijack_oor(${1:player}, ${2:filterid})"},
	{ "trigger": "enable_filter_speed_burst\t#using scripts\\shared\\filter_shared;", "contents": "filter::enable_filter_speed_burst(${1:player}, ${2:filterid})"},
	{ "trigger": "set_filter_speed_burst\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_speed_burst(${1:player}, ${2:filterid}, ${3:constantindex}, ${4:amount})"},
	{ "trigger": "disable_filter_speed_burst\t#using scripts\\shared\\filter_shared;", "contents": "filter::disable_filter_speed_burst(${1:player}, ${2:filterid})"},
	{ "trigger": "enable_filter_overdrive\t#using scripts\\shared\\filter_shared;", "contents": "filter::enable_filter_overdrive(${1:player}, ${2:filterid})"},
	{ "trigger": "set_filter_overdrive\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_overdrive(${1:player}, ${2:filterid}, ${3:constantindex}, ${4:amount})"},
	{ "trigger": "disable_filter_overdrive\t#using scripts\\shared\\filter_shared;", "contents": "filter::disable_filter_overdrive(${1:player}, ${2:filterid})"},
	{ "trigger": "enable_filter_frost\t#using scripts\\shared\\filter_shared;", "contents": "filter::enable_filter_frost(${1:player}, ${2:filterid})"},
	{ "trigger": "set_filter_frost_layer_one\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_frost_layer_one(${1:player}, ${2:filterid}, ${3:amount})"},
	{ "trigger": "set_filter_frost_layer_two\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_frost_layer_two(${1:player}, ${2:filterid}, ${3:amount})"},
	{ "trigger": "set_filter_frost_reveal_direction\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_frost_reveal_direction(${1:player}, ${2:filterid}, ${3:direction})"},
	{ "trigger": "disable_filter_frost\t#using scripts\\shared\\filter_shared;", "contents": "filter::disable_filter_frost(${1:player}, ${2:filterid})"},
	{ "trigger": "enable_filter_vision_pulse\t#using scripts\\shared\\filter_shared;", "contents": "filter::enable_filter_vision_pulse(${1:localClientNum}, ${2:filterid})"},
	{ "trigger": "set_filter_vision_pulse_constant\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_vision_pulse_constant(${1:localClientNum}, ${2:filterid}, ${3:constid}, ${4:value})"},
	{ "trigger": "disable_filter_vision_pulse\t#using scripts\\shared\\filter_shared;", "contents": "filter::disable_filter_vision_pulse(${1:localClientNum}, ${2:filterid})"},
	{ "trigger": "enable_filter_sprite_transition\t#using scripts\\shared\\filter_shared;", "contents": "filter::enable_filter_sprite_transition(${1:player}, ${2:filterid})"},
	{ "trigger": "set_filter_sprite_transition_octogons\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_sprite_transition_octogons(${1:player}, ${2:filterid}, ${3:octos})"},
	{ "trigger": "set_filter_sprite_transition_blur\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_sprite_transition_blur(${1:player}, ${2:filterid}, ${3:blur})"},
	{ "trigger": "set_filter_sprite_transition_boost\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_sprite_transition_boost(${1:player}, ${2:filterid}, ${3:boost})"},
	{ "trigger": "set_filter_sprite_transition_move_radii\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_sprite_transition_move_radii(${1:player}, ${2:filterid}, ${3:inner}, ${4:outter})"},
	{ "trigger": "set_filter_sprite_transition_elapsed\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_sprite_transition_elapsed(${1:player}, ${2:filterid}, ${3:time})"},
	{ "trigger": "disable_filter_sprite_transition\t#using scripts\\shared\\filter_shared;", "contents": "filter::disable_filter_sprite_transition(${1:player}, ${2:filterid})"},
	{ "trigger": "enable_filter_frame_transition\t#using scripts\\shared\\filter_shared;", "contents": "filter::enable_filter_frame_transition(${1:player}, ${2:filterid})"},
	{ "trigger": "set_filter_frame_transition_heavy_hexagons\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_frame_transition_heavy_hexagons(${1:player}, ${2:filterid}, ${3:hexes})"},
	{ "trigger": "set_filter_frame_transition_light_hexagons\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_frame_transition_light_hexagons(${1:player}, ${2:filterid}, ${3:hexes})"},
	{ "trigger": "set_filter_frame_transition_flare\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_frame_transition_flare(${1:player}, ${2:filterid}, ${3:opacity})"},
	{ "trigger": "set_filter_frame_transition_blur\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_frame_transition_blur(${1:player}, ${2:filterid}, ${3:amount})"},
	{ "trigger": "set_filter_frame_transition_iris\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_frame_transition_iris(${1:player}, ${2:filterid}, ${3:opacity})"},
	{ "trigger": "set_filter_frame_transition_saved_frame_reveal\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_frame_transition_saved_frame_reveal(${1:player}, ${2:filterid}, ${3:reveal})"},
	{ "trigger": "set_filter_frame_transition_warp\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_frame_transition_warp(${1:player}, ${2:filterid}, ${3:amount})"},
	{ "trigger": "disable_filter_frame_transition\t#using scripts\\shared\\filter_shared;", "contents": "filter::disable_filter_frame_transition(${1:player}, ${2:filterid})"},
	{ "trigger": "enable_filter_base_frame_transition\t#using scripts\\shared\\filter_shared;", "contents": "filter::enable_filter_base_frame_transition(${1:player}, ${2:filterid})"},
	{ "trigger": "set_filter_base_frame_transition_warp\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_base_frame_transition_warp(${1:player}, ${2:filterid}, ${3:warp})"},
	{ "trigger": "set_filter_base_frame_transition_boost\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_base_frame_transition_boost(${1:player}, ${2:filterid}, ${3:boost})"},
	{ "trigger": "set_filter_base_frame_transition_durden\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_base_frame_transition_durden(${1:player}, ${2:filterid}, ${3:opacity})"},
	{ "trigger": "set_filter_base_frame_transition_durden_blur\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_base_frame_transition_durden_blur(${1:player}, ${2:filterid}, ${3:blur})"},
	{ "trigger": "disable_filter_base_frame_transition\t#using scripts\\shared\\filter_shared;", "contents": "filter::disable_filter_base_frame_transition(${1:player}, ${2:filterid})"},
	{ "trigger": "enable_filter_sprite_blood\t#using scripts\\shared\\filter_shared;", "contents": "filter::enable_filter_sprite_blood(${1:localClientNum}, ${2:filterid}, ${3:passid}, ${4:digitalBlood})"},
	{ "trigger": "enable_filter_sprite_blood_heavy\t#using scripts\\shared\\filter_shared;", "contents": "filter::enable_filter_sprite_blood_heavy(${1:localClientNum}, ${2:filterid}, ${3:passid}, ${4:digitalBlood})"},
	{ "trigger": "set_filter_sprite_blood_opacity\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_sprite_blood_opacity(${1:localClientNum}, ${2:filterid}, ${3:passid}, ${4:opacity})"},
	{ "trigger": "set_filter_sprite_blood_seed_offset\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_sprite_blood_seed_offset(${1:localClientNum}, ${2:filterid}, ${3:passid}, ${4:offset})"},
	{ "trigger": "set_filter_sprite_blood_elapsed\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_sprite_blood_elapsed(${1:localClientNum}, ${2:filterid}, ${3:passid}, ${4:time})"},
	{ "trigger": "disable_filter_sprite_blood\t#using scripts\\shared\\filter_shared;", "contents": "filter::disable_filter_sprite_blood(${1:localClientNum}, ${2:filterid}, ${3:passid})"},
	{ "trigger": "enable_filter_feedback_blood\t#using scripts\\shared\\filter_shared;", "contents": "filter::enable_filter_feedback_blood(${1:localClientNum}, ${2:filterid}, ${3:passid}, ${4:digitalBlood})"},
	{ "trigger": "set_filter_feedback_blood_opacity\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_feedback_blood_opacity(${1:localClientNum}, ${2:filterid}, ${3:passid}, ${4:opacity})"},
	{ "trigger": "set_filter_feedback_blood_sundir\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_feedback_blood_sundir(${1:localClientNum}, ${2:filterid}, ${3:passid}, ${4:pitch}, ${5:yaw})"},
	{ "trigger": "set_filter_feedback_blood_vignette\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_feedback_blood_vignette(${1:localClientNum}, ${2:filterid}, ${3:passid}, ${4:amount})"},
	{ "trigger": "set_filter_feedback_blood_drowning\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_feedback_blood_drowning(${1:localClientNum}, ${2:filterid}, ${3:passid}, ${4:tintAmount}, ${5:allowTint})"},
	{ "trigger": "disable_filter_feedback_blood\t#using scripts\\shared\\filter_shared;", "contents": "filter::disable_filter_feedback_blood(${1:localClientNum}, ${2:filterid}, ${3:passid})"},
	{ "trigger": "enable_filter_sprite_rain\t#using scripts\\shared\\filter_shared;", "contents": "filter::enable_filter_sprite_rain(${1:player}, ${2:filterid})"},
	{ "trigger": "set_filter_sprite_rain_opacity\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_sprite_rain_opacity(${1:player}, ${2:filterid}, ${3:opacity})"},
	{ "trigger": "set_filter_sprite_rain_seed_offset\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_sprite_rain_seed_offset(${1:player}, ${2:filterid}, ${3:offset})"},
	{ "trigger": "set_filter_sprite_rain_elapsed\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_sprite_rain_elapsed(${1:player}, ${2:filterid}, ${3:time})"},
	{ "trigger": "disable_filter_sprite_rain\t#using scripts\\shared\\filter_shared;", "contents": "filter::disable_filter_sprite_rain(${1:player}, ${2:filterid})"},
	{ "trigger": "enable_filter_sgen_sprite_rain\t#using scripts\\shared\\filter_shared;", "contents": "filter::enable_filter_sgen_sprite_rain(${1:player}, ${2:filterid})"},
	{ "trigger": "enable_filter_sprite_dirt\t#using scripts\\shared\\filter_shared;", "contents": "filter::enable_filter_sprite_dirt(${1:player}, ${2:filterid})"},
	{ "trigger": "set_filter_sprite_dirt_opacity\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_sprite_dirt_opacity(${1:player}, ${2:filterid}, ${3:opacity})"},
	{ "trigger": "set_filter_sprite_dirt_source_position\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_sprite_dirt_source_position(${1:player}, ${2:filterid}, ${3:right}, ${4:up}, ${5:distance})"},
	{ "trigger": "set_filter_sprite_dirt_sun_position\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_sprite_dirt_sun_position(${1:player}, ${2:filterid}, ${3:pitch}, ${4:yaw})"},
	{ "trigger": "set_filter_sprite_dirt_seed_offset\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_sprite_dirt_seed_offset(${1:player}, ${2:filterid}, ${3:offset})"},
	{ "trigger": "set_filter_sprite_dirt_elapsed\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_sprite_dirt_elapsed(${1:player}, ${2:filterid}, ${3:time})"},
	{ "trigger": "disable_filter_sprite_dirt\t#using scripts\\shared\\filter_shared;", "contents": "filter::disable_filter_sprite_dirt(${1:player}, ${2:filterid})"},
	{ "trigger": "enable_filter_blood_spatter\t#using scripts\\shared\\filter_shared;", "contents": "filter::enable_filter_blood_spatter(${1:player}, ${2:filterid})"},
	{ "trigger": "set_filter_blood_spatter_reveal\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_blood_spatter_reveal(${1:player}, ${2:filterid}, ${3:threshold}, ${4:direction})"},
	{ "trigger": "disable_filter_blood_spatter\t#using scripts\\shared\\filter_shared;", "contents": "filter::disable_filter_blood_spatter(${1:player}, ${2:filterid})"},
	{ "trigger": "enable_filter_teleporter_base\t#using scripts\\shared\\filter_shared;", "contents": "filter::enable_filter_teleporter_base(${1:player}, ${2:filterid}, ${3:passid})"},
	{ "trigger": "set_filter_teleporter_base_amount\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_teleporter_base_amount(${1:player}, ${2:filterid}, ${3:passid}, ${4:amount})"},
	{ "trigger": "disable_filter_teleporter_base\t#using scripts\\shared\\filter_shared;", "contents": "filter::disable_filter_teleporter_base(${1:player}, ${2:filterid}, ${3:passid})"},
	{ "trigger": "enable_filter_teleporter_sprite\t#using scripts\\shared\\filter_shared;", "contents": "filter::enable_filter_teleporter_sprite(${1:player}, ${2:filterid}, ${3:passid})"},
	{ "trigger": "set_filter_teleporter_sprite_opacity\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_teleporter_sprite_opacity(${1:player}, ${2:filterid}, ${3:passid}, ${4:opacity})"},
	{ "trigger": "set_filter_teleporter_sprite_seed_offset\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_teleporter_sprite_seed_offset(${1:player}, ${2:filterid}, ${3:passid}, ${4:offset})"},
	{ "trigger": "set_filter_teleporter_sprite_elapsed\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_teleporter_sprite_elapsed(${1:player}, ${2:filterid}, ${3:passid}, ${4:time})"},
	{ "trigger": "disable_filter_teleporter_sprite\t#using scripts\\shared\\filter_shared;", "contents": "filter::disable_filter_teleporter_sprite(${1:player}, ${2:filterid}, ${3:passid})"},
	{ "trigger": "enable_filter_teleporter_top\t#using scripts\\shared\\filter_shared;", "contents": "filter::enable_filter_teleporter_top(${1:player}, ${2:filterid}, ${3:passid})"},
	{ "trigger": "set_filter_teleporter_top_reveal\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_teleporter_top_reveal(${1:player}, ${2:filterid}, ${3:passid}, ${4:threshold}, ${5:direction})"},
	{ "trigger": "disable_filter_teleporter_top\t#using scripts\\shared\\filter_shared;", "contents": "filter::disable_filter_teleporter_top(${1:player}, ${2:filterid}, ${3:passid})"},
	{ "trigger": "enable_filter_keyline_blend\t#using scripts\\shared\\filter_shared;", "contents": "filter::enable_filter_keyline_blend(${1:player}, ${2:filterid}, ${3:passid})"},
	{ "trigger": "set_filter_keyline_blend_opacity\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_keyline_blend_opacity(${1:player}, ${2:filterid}, ${3:passid}, ${4:opacity})"},
	{ "trigger": "disable_filter_keyline_blend\t#using scripts\\shared\\filter_shared;", "contents": "filter::disable_filter_keyline_blend(${1:player}, ${2:filterid}, ${3:passid})"},
	{ "trigger": "enable_filter_drowning_damage\t#using scripts\\shared\\filter_shared;", "contents": "filter::enable_filter_drowning_damage(${1:localClientNum}, ${2:passid})"},
	{ "trigger": "set_filter_drowning_damage_opacity\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_drowning_damage_opacity(${1:localClientNum}, ${2:passid}, ${3:opacity})"},
	{ "trigger": "set_filter_drowning_damage_inner_radius\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_drowning_damage_inner_radius(${1:localClientNum}, ${2:passid}, ${3:inner})"},
	{ "trigger": "set_filter_drowning_damage_outer_radius\t#using scripts\\shared\\filter_shared;", "contents": "filter::set_filter_drowning_damage_outer_radius(${1:localClientNum}, ${2:passid}, ${3:outer})"},
	{ "trigger": "disable_filter_drowning_damage\t#using scripts\\shared\\filter_shared;", "contents": "filter::disable_filter_drowning_damage(${1:localClientNum}, ${2:passid})"},
	{ "trigger": "onEmpChanged\t#using scripts\\shared\\weapons\\_empgrenade;", "contents": "empgrenade::onEmpChanged(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "StartEmpEffects\t#using scripts\\shared\\weapons\\_empgrenade;", "contents": "empgrenade::StartEmpEffects(${1:localPlayer}, ${2:bWasTimeJump = false})"},
	{ "trigger": "StopEmpEffects\t#using scripts\\shared\\weapons\\_empgrenade;", "contents": "empgrenade::StopEmpEffects(${1:localPlayer}, ${2:oldVal}, ${3:bWasTimeJump = false})"},
	{ "trigger": "on_player_spawned\t#using scripts\\shared\\weapons\\_empgrenade;", "contents": "empgrenade::on_player_spawned(${1:localClientNum})"},
	{ "trigger": "onEmpMonitorDistanceChanged\t#using scripts\\shared\\weapons\\_empgrenade;", "contents": "empgrenade::onEmpMonitorDistanceChanged(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "MonitorDistance\t#using scripts\\shared\\weapons\\_empgrenade;", "contents": "empgrenade::MonitorDistance(${1:localClientNum})"},
	{ "trigger": "ignore_triggers\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::ignore_triggers(${1:timer})"},
	{ "trigger": "is_encounter\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::is_encounter()"},
	{ "trigger": "round_up_to_ten\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::round_up_to_ten(${1:score})"},
	{ "trigger": "round_up_score\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::round_up_score(${1:score}, ${2:value})"},
	{ "trigger": "halve_score\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::halve_score(${1:n_score})"},
	{ "trigger": "spawn_weapon_model\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::spawn_weapon_model(${1:localClientNum}, ${2:weapon}, ${3:model}, ${4:origin}, ${5:angles}, ${6:options})"},
	{ "trigger": "spawn_buildkit_weapon_model\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::spawn_buildkit_weapon_model(${1:localClientNum}, ${2:weapon}, ${3:camo}, ${4:origin}, ${5:angles})"},
	{ "trigger": "is_classic\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::is_classic()"},
	{ "trigger": "is_gametype_active\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::is_gametype_active(${1:a_gametypes})"},
	{ "trigger": "setInventoryUIModels\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::setInventoryUIModels(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "setSharedInventoryUIModels\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::setSharedInventoryUIModels(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "zm_ui_infotext\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::zm_ui_infotext(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "umbra_fix_logic\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::umbra_fix_logic(${1:localClientNum})"},
	{ "trigger": "umbra_fix_trigger\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::umbra_fix_trigger(${1:localClientNum}, ${2:pos}, ${3:height}, ${4:radius}, ${5:umbra_name})"},
	{ "trigger": "playerJump\t#using scripts\\shared\\footsteps_shared;", "contents": "footsteps::playerJump(${1:client_num}, ${2:player}, ${3:surfaceType}, ${4:firstperson}, ${5:quiet}, ${6:isLouder})"},
	{ "trigger": "playerLand\t#using scripts\\shared\\footsteps_shared;", "contents": "footsteps::playerLand(${1:client_num}, ${2:player}, ${3:surfaceType}, ${4:firstperson}, ${5:quiet}, ${6:damagePlayer}, ${7:isLouder})"},
	{ "trigger": "playerFoliage\t#using scripts\\shared\\footsteps_shared;", "contents": "footsteps::playerFoliage(${1:client_num}, ${2:player}, ${3:firstperson}, ${4:quiet})"},
	{ "trigger": "buildAndCacheSoundAlias\t#using scripts\\shared\\footsteps_shared;", "contents": "footsteps::buildAndCacheSoundAlias(${1:movementtype}, ${2:surfaceType}, ${3:firstperson}, ${4:isLouder})"},
	{ "trigger": "do_foot_effect\t#using scripts\\shared\\footsteps_shared;", "contents": "footsteps::do_foot_effect(${1:client_num}, ${2:ground_type}, ${3:foot_pos}, ${4:on_fire})"},
	{ "trigger": "missing_ai_footstep_callback\t#using scripts\\shared\\footsteps_shared;", "contents": "footsteps::missing_ai_footstep_callback()"},
	{ "trigger": "playAIFootstep\t#using scripts\\shared\\footsteps_shared;", "contents": "footsteps::playAIFootstep(${1:client_num}, ${2:pos}, ${3:surface}, ${4:notetrack}, ${5:bone})"},
	{ "trigger": "levelNotifyHandler\t#using scripts\\zm\\_load;", "contents": "load::levelNotifyHandler(${1:clientNum}, ${2:state}, ${3:oldState})"},
	{ "trigger": "warnMissileLocking\t#using scripts\\zm\\_load;", "contents": "load::warnMissileLocking(${1:localClientNum}, ${2:set})"},
	{ "trigger": "warnMissileLocked\t#using scripts\\zm\\_load;", "contents": "load::warnMissileLocked(${1:localClientNum}, ${2:set})"},
	{ "trigger": "warnMissileFired\t#using scripts\\zm\\_load;", "contents": "load::warnMissileFired(${1:localClientNum}, ${2:set})"},
	{ "trigger": "server_time\t#using scripts\\zm\\_load;", "contents": "load::server_time()"},
	{ "trigger": "register_clientfields\t#using scripts\\zm\\_load;", "contents": "load::register_clientfields()"},
	{ "trigger": "art_review\t#using scripts\\shared\\load_shared;", "contents": "load::art_review()"},
	{ "trigger": "juggernaut_client_field_func\t#using scripts\\zm\\_zm_perk_juggernaut;", "contents": "zm_perk_juggernaut::juggernaut_client_field_func()"},
	{ "trigger": "juggernaut_code_callback_func\t#using scripts\\zm\\_zm_perk_juggernaut;", "contents": "zm_perk_juggernaut::juggernaut_code_callback_func()"},
	{ "trigger": "spawned\t#using scripts\\shared\\vehicles\\_wasp; self == qrdrone", "contents": "wasp::spawned(${1:localClientNum})"},
	{ "trigger": "handle_lod_display_for_driver\t#using scripts\\shared\\vehicles\\_wasp;", "contents": "wasp::handle_lod_display_for_driver(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "setup_radius_values\t#using scripts\\shared\\drown;", "contents": "drown::setup_radius_values()"},
	{ "trigger": "player_spawned\t#using scripts\\shared\\drown;", "contents": "drown::player_spawned(${1:localClientNum})"},
	{ "trigger": "player_watch_drown_shutdown\t#using scripts\\shared\\drown;", "contents": "drown::player_watch_drown_shutdown(${1:localClientNum})"},
	{ "trigger": "enable_drown\t#using scripts\\shared\\drown;", "contents": "drown::enable_drown(${1:localClientNum}, ${2:stage})"},
	{ "trigger": "disable_drown\t#using scripts\\shared\\drown;", "contents": "drown::disable_drown(${1:localClientNum})"},
	{ "trigger": "player_drown_fx\t#using scripts\\shared\\drown;", "contents": "drown::player_drown_fx(${1:localClientNum}, ${2:stage})"},
	{ "trigger": "player_fade_out_drown_fx\t#using scripts\\shared\\drown;", "contents": "drown::player_fade_out_drown_fx(${1:localClientNum})"},
	{ "trigger": "drown_stage_callback\t#using scripts\\shared\\drown;", "contents": "drown::drown_stage_callback(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "player_scene_animation_skip\t#using scripts\\shared\\scene_shared;", "contents": "scene::player_scene_animation_skip(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "player_scene_skip_completed\t#using scripts\\shared\\scene_shared;", "contents": "scene::player_scene_skip_completed(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "play\t#using scripts\\shared\\scene_shared;", "contents": "scene::play()"},
	{ "trigger": "play_per_client\t#using scripts\\shared\\scene_shared;", "contents": "scene::play_per_client(${1:clientNum})"},
	{ "trigger": "finish\t#using scripts\\shared\\scene_shared;", "contents": "scene::finish(${1:b_clear = false})"},
	{ "trigger": "finish_per_client\t#using scripts\\shared\\scene_shared;", "contents": "scene::finish_per_client(${1:clientNum}, ${2:b_clear = false})"},
	{ "trigger": "get_align_ent\t#using scripts\\shared\\scene_shared;", "contents": "scene::get_align_ent(${1:clientNum})"},
	{ "trigger": "scene\t#using scripts\\shared\\scene_shared;", "contents": "scene::scene()"},
	{ "trigger": "_assign_unique_name\t#using scripts\\shared\\scene_shared;", "contents": "scene::_assign_unique_name()"},
	{ "trigger": "get_name\t#using scripts\\shared\\scene_shared;", "contents": "scene::get_name()"},
	{ "trigger": "get_orig_name\t#using scripts\\shared\\scene_shared;", "contents": "scene::get_orig_name()"},
	{ "trigger": "_spawn\t#using scripts\\shared\\scene_shared;", "contents": "scene::_spawn(${1:clientNum}, ${2:b_hide = true})"},
	{ "trigger": "_prepare\t#using scripts\\shared\\scene_shared;", "contents": "scene::_prepare(${1:clientNum})"},
	{ "trigger": "_cleanup\t#using scripts\\shared\\scene_shared;", "contents": "scene::_cleanup(${1:clientNum})"},
	{ "trigger": "_play_anim\t#using scripts\\shared\\scene_shared;", "contents": "scene::_play_anim(${1:clientNum}, ${2:animation}, ${3:n_delay_min = 0}, ${4:n_delay_max = 0}, ${5:n_rate = 1}, ${6:n_blend}, ${7:str_siege_shot}, ${8:loop})"},
	{ "trigger": "get_align_tag\t#using scripts\\shared\\scene_shared;", "contents": "scene::get_align_tag()"},
	{ "trigger": "wait_till_scene_ready\t#using scripts\\shared\\scene_shared;", "contents": "scene::wait_till_scene_ready()"},
	{ "trigger": "is_alive\t#using scripts\\shared\\scene_shared;", "contents": "scene::is_alive(${1:clientNum})"},
	{ "trigger": "in_a_different_scene\t#using scripts\\shared\\scene_shared;", "contents": "scene::in_a_different_scene()"},
	{ "trigger": "get_valid_object_defs\t#using scripts\\shared\\scene_shared;", "contents": "scene::get_valid_object_defs()"},
	{ "trigger": "get_object_id\t#using scripts\\shared\\scene_shared;", "contents": "scene::get_object_id()"},
	{ "trigger": "play\t#using scripts\\shared\\scene_shared;", "contents": "scene::play(${1:b_testing = false}, ${2:str_mode = \"\"})"},
	{ "trigger": "run_next\t#using scripts\\shared\\scene_shared;", "contents": "scene::run_next()"},
	{ "trigger": "stop\t#using scripts\\shared\\scene_shared;", "contents": "scene::stop(${1:b_clear = false}, ${2:b_finished = false})"},
	{ "trigger": "_call_state_funcs\t#using scripts\\shared\\scene_shared;", "contents": "scene::_call_state_funcs(${1:str_state})"},
	{ "trigger": "get_ents\t#using scripts\\shared\\scene_shared;", "contents": "scene::get_ents()"},
	{ "trigger": "get_root\t#using scripts\\shared\\scene_shared;", "contents": "scene::get_root()"},
	{ "trigger": "get_align_ent\t#using scripts\\shared\\scene_shared;", "contents": "scene::get_align_ent(${1:clientNum})"},
	{ "trigger": "allows_multiple\t#using scripts\\shared\\scene_shared;", "contents": "scene::allows_multiple()"},
	{ "trigger": "is_looping\t#using scripts\\shared\\scene_shared;", "contents": "scene::is_looping()"},
	{ "trigger": "wait_till_scene_ready\t#using scripts\\shared\\scene_shared;", "contents": "scene::wait_till_scene_ready()"},
	{ "trigger": "wait_till_scene_done\t#using scripts\\shared\\scene_shared;", "contents": "scene::wait_till_scene_done()"},
	{ "trigger": "get_valid_objects\t#using scripts\\shared\\scene_shared;", "contents": "scene::get_valid_objects()"},
	{ "trigger": "on_error\t#using scripts\\shared\\scene_shared;", "contents": "scene::on_error()"},
	{ "trigger": "get_state\t#using scripts\\shared\\scene_shared;", "contents": "scene::get_state()"},
	{ "trigger": "get_existing_ent\t#using scripts\\shared\\scene_shared;", "contents": "scene::get_existing_ent(${1:clientNum}, ${2:str_name})"},
	{ "trigger": "in_igc\t#using scripts\\shared\\scene_shared;", "contents": "scene::in_igc(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "postfx_igc\t#using scripts\\shared\\scene_shared;", "contents": "scene::postfx_igc(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "postfx_igc_zombies\t#using scripts\\shared\\scene_shared;", "contents": "scene::postfx_igc_zombies(${1:localClientNum})"},
	{ "trigger": "postfx_igc_short\t#using scripts\\shared\\scene_shared;", "contents": "scene::postfx_igc_short(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "cf_server_sync\t#using scripts\\shared\\scene_shared;", "contents": "scene::cf_server_sync(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "remove_invalid_scene_objects\t#using scripts\\shared\\scene_shared;", "contents": "scene::remove_invalid_scene_objects(${1:s_scenedef})"},
	{ "trigger": "is_igc\t#using scripts\\shared\\scene_shared;", "contents": "scene::is_igc()"},
	{ "trigger": "_trigger_play\t#using scripts\\shared\\scene_shared;", "contents": "scene::_trigger_play(${1:trig})"},
	{ "trigger": "_trigger_stop\t#using scripts\\shared\\scene_shared;", "contents": "scene::_trigger_stop(${1:trig})"},
	{ "trigger": "add_scene_func\t#using scripts\\shared\\scene_shared;", "contents": "scene::add_scene_func(${1:str_scenedef}, ${2:func}, ${3:str_state = \"play\"}, ${4:...})"},
	{ "trigger": "remove_scene_func\t#using scripts\\shared\\scene_shared;", "contents": "scene::remove_scene_func(${1:str_scenedef}, ${2:func}, ${3:str_state = \"play\"})"},
	{ "trigger": "spawn\t#using scripts\\shared\\scene_shared;", "contents": "scene::spawn(${1:arg1}, ${2:arg2}, ${3:arg3}, ${4:arg4}, ${5:b_test_run})"},
	{ "trigger": "get_scenedef\t#using scripts\\shared\\scene_shared;", "contents": "scene::get_scenedef(${1:str_scenedef})"},
	{ "trigger": "get_scenedefs\t#using scripts\\shared\\scene_shared;", "contents": "scene::get_scenedefs(${1:str_type = \"scene\"})"},
	{ "trigger": "play\t#using scripts\\shared\\scene_shared;", "contents": "scene::play(${1:arg1}, ${2:arg2}, ${3:arg3}, ${4:b_test_run = false}, ${5:str_mode = \"\"})"},
	{ "trigger": "_play_instance\t#using scripts\\shared\\scene_shared;", "contents": "scene::_play_instance(${1:s_tracker}, ${2:str_scenedef}, ${3:a_ents}, ${4:b_test_run}, ${5:str_mode})"},
	{ "trigger": "stop\t#using scripts\\shared\\scene_shared;", "contents": "scene::stop(${1:arg1}, ${2:arg2}, ${3:arg3}, ${4:b_cancel}, ${5:b_no_assert = false})"},
	{ "trigger": "_stop_instance\t#using scripts\\shared\\scene_shared;", "contents": "scene::_stop_instance(${1:b_clear = false}, ${2:str_scenedef}, ${3:b_cancel = false})"},
	{ "trigger": "cancel\t#using scripts\\shared\\scene_shared;", "contents": "scene::cancel(${1:arg1}, ${2:arg2}, ${3:arg3})"},
	{ "trigger": "get_prop_count\t#using scripts\\shared\\scene_shared;", "contents": "scene::get_prop_count(${1:str_scenedef})"},
	{ "trigger": "get_vehicle_count\t#using scripts\\shared\\scene_shared;", "contents": "scene::get_vehicle_count(${1:str_scenedef})"},
	{ "trigger": "get_actor_count\t#using scripts\\shared\\scene_shared;", "contents": "scene::get_actor_count(${1:str_scenedef})"},
	{ "trigger": "get_player_count\t#using scripts\\shared\\scene_shared;", "contents": "scene::get_player_count(${1:str_scenedef})"},
	{ "trigger": "_get_type_count\t#using scripts\\shared\\scene_shared;", "contents": "scene::_get_type_count(${1:str_type}, ${2:str_scenedef})"},
	{ "trigger": "is_active\t#using scripts\\shared\\scene_shared;", "contents": "scene::is_active(${1:str_scenedef})"},
	{ "trigger": "is_playing\t#using scripts\\shared\\scene_shared;", "contents": "scene::is_playing(${1:str_scenedef})"},
	{ "trigger": "get_active_scenes\t#using scripts\\shared\\scene_shared;", "contents": "scene::get_active_scenes(${1:str_scenedef})"},
	{ "trigger": "get_active_scene\t#using scripts\\shared\\scene_shared;", "contents": "scene::get_active_scene(${1:str_scenedef})"},
	{ "trigger": "is_capture_mode\t#using scripts\\shared\\scene_shared;", "contents": "scene::is_capture_mode()"},
	{ "trigger": "set_shader\t#using scripts\\shared\\abilities\\gadgets\\_gadget_clone;", "contents": "_gadget_clone::set_shader(${1:localClientNum}, ${2:enabled}, ${3:entity})"},
	{ "trigger": "clone_activated\t#using scripts\\shared\\abilities\\gadgets\\_gadget_clone;", "contents": "_gadget_clone::clone_activated(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "player_clone_activated\t#using scripts\\shared\\abilities\\gadgets\\_gadget_clone;", "contents": "_gadget_clone::player_clone_activated(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "clone_damage_flicker\t#using scripts\\shared\\abilities\\gadgets\\_gadget_clone;", "contents": "_gadget_clone::clone_damage_flicker(${1:localClientNum})"},
	{ "trigger": "clone_damage_finish\t#using scripts\\shared\\abilities\\gadgets\\_gadget_clone;", "contents": "_gadget_clone::clone_damage_finish()"},
	{ "trigger": "clone_damaged\t#using scripts\\shared\\abilities\\gadgets\\_gadget_clone;", "contents": "_gadget_clone::clone_damaged(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "autoexec opt_in\t#using scripts\\zm\\zm_giant;", "contents": "zm_giant::autoexec opt_in()"},
	{ "trigger": "power_on_fxanims\t#using scripts\\zm\\zm_giant;", "contents": "zm_giant::power_on_fxanims()"},
	{ "trigger": "console_blue\t#using scripts\\zm\\zm_giant;", "contents": "zm_giant::console_blue(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "console_green\t#using scripts\\zm\\zm_giant;", "contents": "zm_giant::console_green(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "console_red\t#using scripts\\zm\\zm_giant;", "contents": "zm_giant::console_red(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "console_start\t#using scripts\\zm\\zm_giant;", "contents": "zm_giant::console_start(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "lightning_strike\t#using scripts\\zm\\zm_giant;", "contents": "zm_giant::lightning_strike(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "on_player_spawned\t#using scripts\\shared\\abilities\\gadgets\\_gadget_es_strike;", "contents": "_gadget_es_strike::on_player_spawned(${1:local_client_num})"},
	{ "trigger": "localClientConnect\t#using scripts\\shared\\_character_customization;", "contents": "character_customization::localClientConnect(${1:localClientNum})"},
	{ "trigger": "create_character_data_struct\t#using scripts\\shared\\_character_customization;", "contents": "character_customization::create_character_data_struct(${1:characterModel}, ${2:localClientNum}, ${3:alt_render_mode = true})"},
	{ "trigger": "handle_forced_streaming\t#using scripts\\shared\\_character_customization;", "contents": "character_customization::handle_forced_streaming(${1:game_mode})"},
	{ "trigger": "loadEquippedCharacterOnModel\t#using scripts\\shared\\_character_customization;", "contents": "character_customization::loadEquippedCharacterOnModel(${1:localClientNum}, ${2:data_struct}, ${3:characterIndex}, ${4:params})"},
	{ "trigger": "update_model_attachment\t#using scripts\\shared\\_character_customization;", "contents": "character_customization::update_model_attachment(${1:localClientNum}, ${2:data_struct}, ${3:attached_model}, ${4:slot}, ${5:model_anim}, ${6:model_intro_anim}, ${7:force_update})"},
	{ "trigger": "set_character\t#using scripts\\shared\\_character_customization;", "contents": "character_customization::set_character(${1:data_struct}, ${2:characterIndex})"},
	{ "trigger": "set_character_mode\t#using scripts\\shared\\_character_customization;", "contents": "character_customization::set_character_mode(${1:data_struct}, ${2:characterMode})"},
	{ "trigger": "set_body\t#using scripts\\shared\\_character_customization;", "contents": "character_customization::set_body(${1:data_struct}, ${2:mode}, ${3:characterIndex}, ${4:bodyIndex}, ${5:bodyColors})"},
	{ "trigger": "set_body_colors\t#using scripts\\shared\\_character_customization;", "contents": "character_customization::set_body_colors(${1:data_struct}, ${2:mode}, ${3:bodyColors})"},
	{ "trigger": "set_body_color\t#using scripts\\shared\\_character_customization;", "contents": "character_customization::set_body_color(${1:data_struct}, ${2:colorSlot}, ${3:colorIndex})"},
	{ "trigger": "set_head\t#using scripts\\shared\\_character_customization;", "contents": "character_customization::set_head(${1:data_struct}, ${2:mode}, ${3:headIndex})"},
	{ "trigger": "set_helmet\t#using scripts\\shared\\_character_customization;", "contents": "character_customization::set_helmet(${1:data_struct}, ${2:mode}, ${3:characterIndex}, ${4:helmetIndex}, ${5:helmetColors})"},
	{ "trigger": "set_showcase_weapon\t#using scripts\\shared\\_character_customization;", "contents": "character_customization::set_showcase_weapon(${1:data_struct}, ${2:mode}, ${3:localClientNum}, ${4:xuid}, ${5:characterIndex}, ${6:showcaseWeaponName}, ${7:showcaseWeaponAttachmentInfo}, ${8:weaponRenderOptions}, ${9:useShowcasePaintjob}, ${10:useLocalPaintshop})"},
	{ "trigger": "set_helmet_colors\t#using scripts\\shared\\_character_customization;", "contents": "character_customization::set_helmet_colors(${1:data_struct}, ${2:colors})"},
	{ "trigger": "set_helmet_color\t#using scripts\\shared\\_character_customization;", "contents": "character_customization::set_helmet_color(${1:data_struct}, ${2:colorSlot}, ${3:colorIndex})"},
	{ "trigger": "update\t#using scripts\\shared\\_character_customization;", "contents": "character_customization::update(${1:localClientNum}, ${2:data_struct}, ${3:params})"},
	{ "trigger": "is_character_streamed\t#using scripts\\shared\\_character_customization;", "contents": "character_customization::is_character_streamed(${1:data_struct})"},
	{ "trigger": "setup_character_streaming\t#using scripts\\shared\\_character_customization;", "contents": "character_customization::setup_character_streaming(${1:data_struct})"},
	{ "trigger": "get_character_mode\t#using scripts\\shared\\_character_customization;", "contents": "character_customization::get_character_mode(${1:localClientNum})"},
	{ "trigger": "get_character_body\t#using scripts\\shared\\_character_customization;", "contents": "character_customization::get_character_body(${1:localClientNum}, ${2:characterMode}, ${3:characterIndex}, ${4:extracamData})"},
	{ "trigger": "get_character_body_color\t#using scripts\\shared\\_character_customization;", "contents": "character_customization::get_character_body_color(${1:localClientNum}, ${2:characterMode}, ${3:characterIndex}, ${4:bodyIndex}, ${5:colorSlot}, ${6:extracamData})"},
	{ "trigger": "get_character_body_colors\t#using scripts\\shared\\_character_customization;", "contents": "character_customization::get_character_body_colors(${1:localClientNum}, ${2:characterMode}, ${3:characterIndex}, ${4:bodyIndex}, ${5:extracamData})"},
	{ "trigger": "get_character_head\t#using scripts\\shared\\_character_customization;", "contents": "character_customization::get_character_head(${1:localClientNum}, ${2:characterMode}, ${3:extracamData})"},
	{ "trigger": "get_character_helmet\t#using scripts\\shared\\_character_customization;", "contents": "character_customization::get_character_helmet(${1:localClientNum}, ${2:characterMode}, ${3:characterIndex}, ${4:extracamData})"},
	{ "trigger": "get_character_showcase_weapon\t#using scripts\\shared\\_character_customization;", "contents": "character_customization::get_character_showcase_weapon(${1:localClientNum}, ${2:characterMode}, ${3:characterIndex}, ${4:extracamData})"},
	{ "trigger": "get_character_helmet_color\t#using scripts\\shared\\_character_customization;", "contents": "character_customization::get_character_helmet_color(${1:localClientNum}, ${2:characterMode}, ${3:characterIndex}, ${4:helmetIndex}, ${5:colorSlot}, ${6:extracamData})"},
	{ "trigger": "get_character_helmet_colors\t#using scripts\\shared\\_character_customization;", "contents": "character_customization::get_character_helmet_colors(${1:localClientNum}, ${2:characterMode}, ${3:characterIndex}, ${4:helmetIndex}, ${5:extracamData})"},
	{ "trigger": "update_character_animation_tree_for_scene\t#using scripts\\shared\\_character_customization;", "contents": "character_customization::update_character_animation_tree_for_scene(${1:characterModel})"},
	{ "trigger": "reaper_body3_hack\t#using scripts\\shared\\_character_customization;", "contents": "character_customization::reaper_body3_hack(${1:params})"},
	{ "trigger": "get_current_frozen_moment_params\t#using scripts\\shared\\_character_customization;", "contents": "character_customization::get_current_frozen_moment_params(${1:localClientNum}, ${2:data_struct}, ${3:params})"},
	{ "trigger": "play_intro_and_animation\t#using scripts\\shared\\_character_customization;", "contents": "character_customization::play_intro_and_animation(${1:intro_anim_name}, ${2:anim_name}, ${3:b_keep_link})"},
	{ "trigger": "update_character_animation_based_on_showcase_weapon\t#using scripts\\shared\\_character_customization;", "contents": "character_customization::update_character_animation_based_on_showcase_weapon(${1:data_struct}, ${2:params})"},
	{ "trigger": "update_character_animation_and_attachments\t#using scripts\\shared\\_character_customization;", "contents": "character_customization::update_character_animation_and_attachments(${1:localClientNum}, ${2:data_struct}, ${3:params})"},
	{ "trigger": "update_use_frozen_moments\t#using scripts\\shared\\_character_customization;", "contents": "character_customization::update_use_frozen_moments(${1:localClientNum}, ${2:data_struct}, ${3:useFrozenMoments})"},
	{ "trigger": "update_show_helmets\t#using scripts\\shared\\_character_customization;", "contents": "character_customization::update_show_helmets(${1:localClientNum}, ${2:data_struct}, ${3:show_helmets})"},
	{ "trigger": "set_character_align\t#using scripts\\shared\\_character_customization;", "contents": "character_customization::set_character_align(${1:localClientNum}, ${2:data_struct}, ${3:align_target})"},
	{ "trigger": "setup_live_character_customization_target\t#using scripts\\shared\\_character_customization;", "contents": "character_customization::setup_live_character_customization_target(${1:localClientNum})"},
	{ "trigger": "update_locked_shader\t#using scripts\\shared\\_character_customization;", "contents": "character_customization::update_locked_shader(${1:localClientNum}, ${2:params})"},
	{ "trigger": "updateEventThread\t#using scripts\\shared\\_character_customization;", "contents": "character_customization::updateEventThread(${1:localClientNum}, ${2:data_struct})"},
	{ "trigger": "rotation_thread_spawner\t#using scripts\\shared\\_character_customization;", "contents": "character_customization::rotation_thread_spawner(${1:localClientNum}, ${2:data_struct}, ${3:endOnEvent})"},
	{ "trigger": "update_model_rotation_for_right_stick\t#using scripts\\shared\\_character_customization;", "contents": "character_customization::update_model_rotation_for_right_stick(${1:localClientNum}, ${2:data_struct}, ${3:endOnEvent})"},
	{ "trigger": "setup_static_character_customization_target\t#using scripts\\shared\\_character_customization;", "contents": "character_customization::setup_static_character_customization_target(${1:localClientNum})"},
	{ "trigger": "setup_character_extracam_struct\t#using scripts\\shared\\_character_customization;", "contents": "character_customization::setup_character_extracam_struct(${1:xcam}, ${2:subXCam}, ${3:model_animation}, ${4:useLobbyPlayers})"},
	{ "trigger": "wait_for_extracam_close\t#using scripts\\shared\\_character_customization;", "contents": "character_customization::wait_for_extracam_close(${1:localClientNum}, ${2:camera_ent}, ${3:extraCamIndex})"},
	{ "trigger": "setup_character_extracam_settings\t#using scripts\\shared\\_character_customization;", "contents": "character_customization::setup_character_extracam_settings(${1:localClientNum}, ${2:data_struct}, ${3:extracam_data_struct})"},
	{ "trigger": "update_character_extracam\t#using scripts\\shared\\_character_customization;", "contents": "character_customization::update_character_extracam(${1:localClientNum}, ${2:data_struct})"},
	{ "trigger": "process_character_extracam_request\t#using scripts\\shared\\_character_customization;", "contents": "character_customization::process_character_extracam_request(${1:localClientNum}, ${2:jobIndex}, ${3:extraCamIndex}, ${4:sessionMode}, ${5:characterIndex})"},
	{ "trigger": "process_lobby_client_character_extracam_request\t#using scripts\\shared\\_character_customization;", "contents": "character_customization::process_lobby_client_character_extracam_request(${1:localClientNum}, ${2:jobIndex}, ${3:extraCamIndex}, ${4:sessionMode})"},
	{ "trigger": "process_current_hero_headshot_extracam_request\t#using scripts\\shared\\_character_customization;", "contents": "character_customization::process_current_hero_headshot_extracam_request(${1:localClientNum}, ${2:jobIndex}, ${3:extraCamIndex}, ${4:sessionMode}, ${5:characterIndex}, ${6:isDefaultHero})"},
	{ "trigger": "process_outfit_preview_extracam_request\t#using scripts\\shared\\_character_customization;", "contents": "character_customization::process_outfit_preview_extracam_request(${1:localClientNum}, ${2:jobIndex}, ${3:extraCamIndex}, ${4:sessionMode}, ${5:outfitIndex})"},
	{ "trigger": "process_character_body_item_extracam_request\t#using scripts\\shared\\_character_customization;", "contents": "character_customization::process_character_body_item_extracam_request(${1:localClientNum}, ${2:jobIndex}, ${3:extraCamIndex}, ${4:sessionMode}, ${5:characterIndex}, ${6:itemIndex}, ${7:defaultImageRender})"},
	{ "trigger": "process_character_helmet_item_extracam_request\t#using scripts\\shared\\_character_customization;", "contents": "character_customization::process_character_helmet_item_extracam_request(${1:localClientNum}, ${2:jobIndex}, ${3:extraCamIndex}, ${4:sessionMode}, ${5:characterIndex}, ${6:itemIndex}, ${7:defaultImageRender})"},
	{ "trigger": "process_character_head_item_extracam_request\t#using scripts\\shared\\_character_customization;", "contents": "character_customization::process_character_head_item_extracam_request(${1:localClientNum}, ${2:jobIndex}, ${3:extraCamIndex}, ${4:sessionMode}, ${5:headIndex}, ${6:defaultImageRender})"},
	{ "trigger": "on_player_connect\t#using scripts\\shared\\weapons\\_acousticsensor;", "contents": "acousticsensor::on_player_connect(${1:localClientNum})"},
	{ "trigger": "addAcousticSensor\t#using scripts\\shared\\weapons\\_acousticsensor;", "contents": "acousticsensor::addAcousticSensor(${1:handle}, ${2:sensorEnt}, ${3:owner/*}, ${4:sndScramPingEnt*/})"},
	{ "trigger": "removeAcousticSensor\t#using scripts\\shared\\weapons\\_acousticsensor;", "contents": "acousticsensor::removeAcousticSensor(${1:acousticSensorHandle})"},
	{ "trigger": "spawned\t#using scripts\\shared\\weapons\\_acousticsensor;", "contents": "acousticsensor::spawned(${1:localClientNum})"},
	{ "trigger": "spawnedPerClient\t#using scripts\\shared\\weapons\\_acousticsensor;", "contents": "acousticsensor::spawnedPerClient(${1:localClientNum})"},
	{ "trigger": "watchShutdown\t#using scripts\\shared\\weapons\\_acousticsensor;", "contents": "acousticsensor::watchShutdown(${1:handle})"},
	{ "trigger": "updateAcousticSensors\t#using scripts\\shared\\weapons\\_acousticsensor;", "contents": "acousticsensor::updateAcousticSensors()"},
	{ "trigger": "localplayer_spawned\t#using scripts\\zm\\_zm_weap_thundergun;", "contents": "zm_weap_thundergun::localplayer_spawned(${1:localClientNum})"},
	{ "trigger": "watch_for_thunderguns\t#using scripts\\zm\\_zm_weap_thundergun;", "contents": "zm_weap_thundergun::watch_for_thunderguns(${1:localclientnum})"},
	{ "trigger": "thundergun_fx_power_cell\t#using scripts\\zm\\_zm_weap_thundergun;", "contents": "zm_weap_thundergun::thundergun_fx_power_cell(${1:localclientnum}, ${2:w_weapon})"},
	{ "trigger": "thundergun_fx_fire\t#using scripts\\zm\\_zm_weap_thundergun;", "contents": "zm_weap_thundergun::thundergun_fx_fire(${1:localclientnum})"},
	{ "trigger": "zm_aat_dead_wire_zap\t#using scripts\\zm\\aats\\_zm_aat_dead_wire;", "contents": "zm_aat_dead_wire::zm_aat_dead_wire_zap(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "zm_aat_dead_wire_zap_vehicle\t#using scripts\\zm\\aats\\_zm_aat_dead_wire;", "contents": "zm_aat_dead_wire::zm_aat_dead_wire_zap_vehicle(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "field_toggle_lensflare\t#using scripts\\shared\\turret_shared;", "contents": "turret::field_toggle_lensflare(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "playCurrentTaunt\t#using scripts\\shared\\end_game_taunts;", "contents": "end_game_taunts::playCurrentTaunt(${1:localClientNum}, ${2:characterModel}, ${3:topPlayerIndex})"},
	{ "trigger": "previewTaunt\t#using scripts\\shared\\end_game_taunts;", "contents": "end_game_taunts::previewTaunt(${1:localClientNum}, ${2:characterModel}, ${3:idleAnimName}, ${4:tauntAnimName})"},
	{ "trigger": "playTaunt\t#using scripts\\shared\\end_game_taunts;", "contents": "end_game_taunts::playTaunt(${1:localClientNum}, ${2:characterModel}, ${3:topPlayerIndex}, ${4:idleAnimName}, ${5:tauntAnimName}, ${6:toTauntBlendTime = 0}, ${7:playTransitions = true})"},
	{ "trigger": "cancelTaunt\t#using scripts\\shared\\end_game_taunts;", "contents": "end_game_taunts::cancelTaunt(${1:localClientNum}, ${2:characterModel})"},
	{ "trigger": "playGestureType\t#using scripts\\shared\\end_game_taunts;", "contents": "end_game_taunts::playGestureType(${1:localClientNum}, ${2:characterModel}, ${3:topPlayerIndex}, ${4:gestureType})"},
	{ "trigger": "previewGesture\t#using scripts\\shared\\end_game_taunts;", "contents": "end_game_taunts::previewGesture(${1:localClientNum}, ${2:characterModel}, ${3:idleAnimName}, ${4:gestureAnimName})"},
	{ "trigger": "playGesture\t#using scripts\\shared\\end_game_taunts;", "contents": "end_game_taunts::playGesture(${1:localClientNum}, ${2:characterModel}, ${3:topPlayerIndex}, ${4:idleAnimName}, ${5:gestureAnimName}, ${6:playTransitions = true})"},
	{ "trigger": "cancelGesture\t#using scripts\\shared\\end_game_taunts;", "contents": "end_game_taunts::cancelGesture(${1:characterModel})"},
	{ "trigger": "playTransitionAnim\t#using scripts\\shared\\end_game_taunts;", "contents": "end_game_taunts::playTransitionAnim(${1:characterModel}, ${2:transitionAnimName}, ${3:blendInTime = 0}, ${4:blendOutTime = 0})"},
	{ "trigger": "waitRemoveWeapon\t#using scripts\\shared\\end_game_taunts;", "contents": "end_game_taunts::waitRemoveWeapon(${1:characterModel})"},
	{ "trigger": "waitAppearWeapon\t#using scripts\\shared\\end_game_taunts;", "contents": "end_game_taunts::waitAppearWeapon(${1:characterModel})"},
	{ "trigger": "hideWeapon\t#using scripts\\shared\\end_game_taunts;", "contents": "end_game_taunts::hideWeapon(${1:characterModel})"},
	{ "trigger": "showWeapon\t#using scripts\\shared\\end_game_taunts;", "contents": "end_game_taunts::showWeapon(${1:characterModel})"},
	{ "trigger": "getIdleAnimName\t#using scripts\\shared\\end_game_taunts;", "contents": "end_game_taunts::getIdleAnimName(${1:localClientNum}, ${2:characterModel}, ${3:topPlayerIndex})"},
	{ "trigger": "getIdleOutAnimName\t#using scripts\\shared\\end_game_taunts;", "contents": "end_game_taunts::getIdleOutAnimName(${1:characterModel}, ${2:topPlayerIndex})"},
	{ "trigger": "getIdleInAnimName\t#using scripts\\shared\\end_game_taunts;", "contents": "end_game_taunts::getIdleInAnimName(${1:characterModel}, ${2:topPlayerIndex})"},
	{ "trigger": "getWeaponGroup\t#using scripts\\shared\\end_game_taunts;", "contents": "end_game_taunts::getWeaponGroup(${1:characterModel})"},
	{ "trigger": "stream_epic_models\t#using scripts\\shared\\end_game_taunts;", "contents": "end_game_taunts::stream_epic_models()"},
	{ "trigger": "stop_stream_epic_models\t#using scripts\\shared\\end_game_taunts;", "contents": "end_game_taunts::stop_stream_epic_models()"},
	{ "trigger": "playEpicTauntScene\t#using scripts\\shared\\end_game_taunts;", "contents": "end_game_taunts::playEpicTauntScene(${1:localClientNum}, ${2:tauntAnimName})"},
	{ "trigger": "stopEpicTauntScene\t#using scripts\\shared\\end_game_taunts;", "contents": "end_game_taunts::stopEpicTauntScene(${1:localClientNum}, ${2:tauntAnimName})"},
	{ "trigger": "addEpicSceneFunc\t#using scripts\\shared\\end_game_taunts;", "contents": "end_game_taunts::addEpicSceneFunc(${1:tauntAnimName}, ${2:func}, ${3:state})"},
	{ "trigger": "shutdownEpicTauntModels\t#using scripts\\shared\\end_game_taunts;", "contents": "end_game_taunts::shutdownEpicTauntModels()"},
	{ "trigger": "hideModel\t#using scripts\\shared\\end_game_taunts;", "contents": "end_game_taunts::hideModel(${1:param})"},
	{ "trigger": "showModel\t#using scripts\\shared\\end_game_taunts;", "contents": "end_game_taunts::showModel(${1:param})"},
	{ "trigger": "spawnCameraGlass\t#using scripts\\shared\\end_game_taunts;", "contents": "end_game_taunts::spawnCameraGlass(${1:param})"},
	{ "trigger": "deleteCameraGlass\t#using scripts\\shared\\end_game_taunts;", "contents": "end_game_taunts::deleteCameraGlass(${1:param})"},
	{ "trigger": "reaperBulletGlass\t#using scripts\\shared\\end_game_taunts;", "contents": "end_game_taunts::reaperBulletGlass(${1:param})"},
	{ "trigger": "centerBulletGlass\t#using scripts\\shared\\end_game_taunts;", "contents": "end_game_taunts::centerBulletGlass(${1:weaponName})"},
	{ "trigger": "fireWeapon\t#using scripts\\shared\\end_game_taunts;", "contents": "end_game_taunts::fireWeapon(${1:weaponName})"},
	{ "trigger": "stopFireWeapon\t#using scripts\\shared\\end_game_taunts;", "contents": "end_game_taunts::stopFireWeapon(${1:param})"},
	{ "trigger": "fireBeam\t#using scripts\\shared\\end_game_taunts;", "contents": "end_game_taunts::fireBeam(${1:beam})"},
	{ "trigger": "stopFireBeam\t#using scripts\\shared\\end_game_taunts;", "contents": "end_game_taunts::stopFireBeam(${1:param})"},
	{ "trigger": "playWinnerTeamFx\t#using scripts\\shared\\end_game_taunts;", "contents": "end_game_taunts::playWinnerTeamFx(${1:fxName})"},
	{ "trigger": "playLocalTeamFx\t#using scripts\\shared\\end_game_taunts;", "contents": "end_game_taunts::playLocalTeamFx(${1:fxName})"},
	{ "trigger": "magicGlassBullet\t#using scripts\\shared\\end_game_taunts;", "contents": "end_game_taunts::magicGlassBullet(${1:localClientNum}, ${2:weapon}, ${3:pitchAngle}, ${4:yawAngle})"},
	{ "trigger": "launchProjectile\t#using scripts\\shared\\end_game_taunts;", "contents": "end_game_taunts::launchProjectile(${1:localClientNum}, ${2:projectileModel}, ${3:projectileTrail})"},
	{ "trigger": "setupReaperMinigun\t#using scripts\\shared\\end_game_taunts;", "contents": "end_game_taunts::setupReaperMinigun(${1:localClientNum})"},
	{ "trigger": "spawnHiddenClone\t#using scripts\\shared\\end_game_taunts;", "contents": "end_game_taunts::spawnHiddenClone(${1:localClientNum}, ${2:targetName})"},
	{ "trigger": "spawnTopPlayerModel\t#using scripts\\shared\\end_game_taunts;", "contents": "end_game_taunts::spawnTopPlayerModel(${1:localClientNum}, ${2:targetName}, ${3:origin}, ${4:angles}, ${5:topPlayerIndex})"},
	{ "trigger": "spawnPlayerModel\t#using scripts\\shared\\end_game_taunts;", "contents": "end_game_taunts::spawnPlayerModel(${1:localClientNum}, ${2:targetName}, ${3:origin}, ${4:angles}, ${5:bodyModel}, ${6:helmetModel}, ${7:modeRenderOptions}, ${8:bodyRenderOptions}, ${9:helmetRenderOptions})"},
	{ "trigger": "spawnGiUnit\t#using scripts\\shared\\end_game_taunts;", "contents": "end_game_taunts::spawnGiUnit(${1:localClientNum}, ${2:targetName})"},
	{ "trigger": "exec_post_system\t#using scripts\\shared\\system_shared;", "contents": "system::exec_post_system(${1:req})"},
	{ "trigger": "run_post_systems\t#using scripts\\shared\\system_shared;", "contents": "system::run_post_systems()"},
	{ "trigger": "exec_pre_system\t#using scripts\\shared\\system_shared;", "contents": "system::exec_pre_system(${1:req})"},
	{ "trigger": "run_pre_systems\t#using scripts\\shared\\system_shared;", "contents": "system::run_pre_systems()"},
	{ "trigger": "wait_till\t#using scripts\\shared\\system_shared;", "contents": "system::wait_till(${1:required_systems})"},
	{ "trigger": "ignore\t#using scripts\\shared\\system_shared;", "contents": "system::ignore(${1:str_system})"},
	{ "trigger": "is_system_running\t#using scripts\\shared\\system_shared;", "contents": "system::is_system_running(${1:str_system})"},
	{ "trigger": "onPrecacheGameType\t#using scripts\\zm\\gametypes\\zclassic;", "contents": "zclassic::onPrecacheGameType()"},
	{ "trigger": "onStartGameType\t#using scripts\\zm\\gametypes\\zclassic;", "contents": "zclassic::onStartGameType()"},
	{ "trigger": "adjust_side_death_dir_if_trace_fail\t#using scripts\\shared\\vehicles\\_raps;", "contents": "raps::adjust_side_death_dir_if_trace_fail(${1:origin}, ${2:side_dir}, ${3:fxlength}, ${4:up_dir})"},
	{ "trigger": "do_side_death_fx\t#using scripts\\shared\\vehicles\\_raps;", "contents": "raps::do_side_death_fx(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "on_localplayer_shutdown\t#using scripts\\shared\\abilities\\gadgets\\_gadget_unstoppable_force;", "contents": "_gadget_unstoppable_force::on_localplayer_shutdown(${1:localClientNum})"},
	{ "trigger": "player_unstoppableforce_handler\t#using scripts\\shared\\abilities\\gadgets\\_gadget_unstoppable_force;", "contents": "_gadget_unstoppable_force::player_unstoppableforce_handler(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "activation_flash\t#using scripts\\shared\\abilities\\gadgets\\_gadget_unstoppable_force;", "contents": "_gadget_unstoppable_force::activation_flash(${1:localClientNum})"},
	{ "trigger": "enable_boost_camera_fx\t#using scripts\\shared\\abilities\\gadgets\\_gadget_unstoppable_force;", "contents": "_gadget_unstoppable_force::enable_boost_camera_fx(${1:localClientNum})"},
	{ "trigger": "stop_boost_camera_fx\t#using scripts\\shared\\abilities\\gadgets\\_gadget_unstoppable_force;", "contents": "_gadget_unstoppable_force::stop_boost_camera_fx(${1:localClientNum})"},
	{ "trigger": "boost_fx_interrupt_handler\t#using scripts\\shared\\abilities\\gadgets\\_gadget_unstoppable_force;", "contents": "_gadget_unstoppable_force::boost_fx_interrupt_handler(${1:localClientNum})"},
	{ "trigger": "boost_fx_on_velocity\t#using scripts\\shared\\abilities\\gadgets\\_gadget_unstoppable_force; self == player", "contents": "_gadget_unstoppable_force::boost_fx_on_velocity(${1:localClientNum})"},
	{ "trigger": "playGrenadeRumble\t#using scripts\\zm\\_destructible;", "contents": "destructible::playGrenadeRumble(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "doExplosion\t#using scripts\\zm\\_destructible;", "contents": "destructible::doExplosion(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "play_vehicle_anim\t#using scripts\\shared\\vehicleriders_shared; self = vehicle", "contents": "vehicle::play_vehicle_anim(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "set_vehicleriders_bundle\t#using scripts\\shared\\vehicleriders_shared;", "contents": "vehicle::set_vehicleriders_bundle(${1:str_bundlename})"},
	{ "trigger": "add_vehicletype_callback\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::add_vehicletype_callback(${1:vehicletype}, ${2:callback})"},
	{ "trigger": "spawned_callback\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::spawned_callback(${1:localClientNum})"},
	{ "trigger": "rumble\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::rumble(${1:localClientNum})"},
	{ "trigger": "kill_treads_forever\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::kill_treads_forever()"},
	{ "trigger": "play_exhaust\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::play_exhaust(${1:localClientNum})"},
	{ "trigger": "kill_exhaust_watcher\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::kill_exhaust_watcher(${1:localClientNum})"},
	{ "trigger": "stop_exhaust\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::stop_exhaust(${1:localClientNum})"},
	{ "trigger": "aircraft_dustkick\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::aircraft_dustkick()"},
	{ "trigger": "weapon_fired\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::weapon_fired()"},
	{ "trigger": "wait_for_DObj\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::wait_for_DObj(${1:localClientNum})"},
	{ "trigger": "lights_on\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::lights_on(${1:localClientNum}, ${2:team})"},
	{ "trigger": "addAnimToList\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::addAnimToList(${1:animItem}, ${2:&listOn}, ${3:&listOff}, ${4:playWhenOff}, ${5:id}, ${6:maxID})"},
	{ "trigger": "ambient_anim_toggle\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::ambient_anim_toggle(${1:localClientNum}, ${2:groupID}, ${3:isOn})"},
	{ "trigger": "field_toggle_ambient_anim_handler1\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::field_toggle_ambient_anim_handler1(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "field_toggle_ambient_anim_handler2\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::field_toggle_ambient_anim_handler2(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "field_toggle_ambient_anim_handler3\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::field_toggle_ambient_anim_handler3(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "field_toggle_ambient_anim_handler4\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::field_toggle_ambient_anim_handler4(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "lights_group_toggle\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::lights_group_toggle(${1:localClientNum}, ${2:id}, ${3:isOn})"},
	{ "trigger": "field_toggle_lights_group_handler1\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::field_toggle_lights_group_handler1(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "field_toggle_lights_group_handler2\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::field_toggle_lights_group_handler2(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "field_toggle_lights_group_handler3\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::field_toggle_lights_group_handler3(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "field_toggle_lights_group_handler4\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::field_toggle_lights_group_handler4(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "delete_alert_lights\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::delete_alert_lights(${1:localClientNum})"},
	{ "trigger": "lights_off\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::lights_off(${1:localClientNum})"},
	{ "trigger": "field_toggle_emp\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::field_toggle_emp(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "field_toggle_burn\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::field_toggle_burn(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "toggle_fx_bundle\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::toggle_fx_bundle(${1:localClientNum}, ${2:name}, ${3:turnOn})"},
	{ "trigger": "delayed_fx_thread\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::delayed_fx_thread(${1:localClientNum}, ${2:name}, ${3:fx}, ${4:tag}, ${5:delay})"},
	{ "trigger": "field_toggle_sounds\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::field_toggle_sounds(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "field_toggle_dnidamagefx\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::field_toggle_dnidamagefx(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "toggle_flir_postfxbundle\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::toggle_flir_postfxbundle(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "ShouldChangeScreenPostFx\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::ShouldChangeScreenPostFx(${1:localClientNum})"},
	{ "trigger": "set_static_postfxbundle\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::set_static_postfxbundle(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "update_ui_fullscreen_filter_model\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::update_ui_fullscreen_filter_model(${1:localClientNum}, ${2:vision_set_value})"},
	{ "trigger": "field_toggle_treadfx\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::field_toggle_treadfx(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "field_use_engine_damage_sounds\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::field_use_engine_damage_sounds(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "field_do_deathfx\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::field_do_deathfx(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "field_do_standarddeathfx\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::field_do_standarddeathfx(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "field_do_empdeathfx\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::field_do_empdeathfx(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "field_update_alert_level\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::field_update_alert_level(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "field_toggle_exhaustfx_handler\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::field_toggle_exhaustfx_handler(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "control_lights_groups\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::control_lights_groups(${1:localClientNum}, ${2:on})"},
	{ "trigger": "field_toggle_lights_handler\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::field_toggle_lights_handler(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "field_toggle_lockon_handler\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::field_toggle_lockon_handler(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "addFxAndTagToLists\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::addFxAndTagToLists(${1:fx}, ${2:tag}, ${3:&fxList}, ${4:&tagList}, ${5:id}, ${6:maxID})"},
	{ "trigger": "field_update_damage_state\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::field_update_damage_state(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "field_death_spawn_dynents\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::field_death_spawn_dynents(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "field_gib_spawn_dynents\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::field_gib_spawn_dynents(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "autoexec build_damage_filter_list\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::autoexec build_damage_filter_list()"},
	{ "trigger": "damage_filter_enable\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::damage_filter_enable(${1:localClientNum}, ${2:materialid})"},
	{ "trigger": "damage_filter_disable\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::damage_filter_disable(${1:localClientNum})"},
	{ "trigger": "damage_filter_off\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::damage_filter_off(${1:localClientNum})"},
	{ "trigger": "damage_filter_light\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::damage_filter_light(${1:localClientNum})"},
	{ "trigger": "damage_filter_heavy\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::damage_filter_heavy(${1:localClientNum})"},
	{ "trigger": "set_craftable_clientfield\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::set_craftable_clientfield(${1:localClientNum})"},
	{ "trigger": "add_zombie_craftable\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::add_zombie_craftable(${1:craftable_name})"},
	{ "trigger": "set_clientfield_craftables_code_callbacks\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::set_clientfield_craftables_code_callbacks()"},
	{ "trigger": "include_zombie_craftable\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::include_zombie_craftable(${1:craftable_name})"},
	{ "trigger": "set_piece_count\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::set_piece_count(${1:n_count})"},
	{ "trigger": "update_activate\t#using scripts\\shared\\abilities\\gadgets\\_gadget_heat_wave;", "contents": "_gadget_heat_wave::update_activate(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "update_victim\t#using scripts\\shared\\abilities\\gadgets\\_gadget_heat_wave;", "contents": "_gadget_heat_wave::update_victim(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "set_heatwave_fx\t#using scripts\\shared\\abilities\\gadgets\\_gadget_heat_wave;", "contents": "_gadget_heat_wave::set_heatwave_fx(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "clear_heat_wave_fx\t#using scripts\\shared\\abilities\\gadgets\\_gadget_heat_wave;", "contents": "_gadget_heat_wave::clear_heat_wave_fx(${1:localClientNum})"},
	{ "trigger": "aoe_fx\t#using scripts\\shared\\abilities\\gadgets\\_gadget_heat_wave;", "contents": "_gadget_heat_wave::aoe_fx(${1:localClientNum})"},
	{ "trigger": "do_fx\t#using scripts\\shared\\abilities\\gadgets\\_gadget_heat_wave;", "contents": "_gadget_heat_wave::do_fx(${1:localClientNum}, ${2:center}, ${3:yaw_count}, ${4:pitch})"},
	{ "trigger": "playDupRenderBundle\t#using scripts\\shared\\duplicaterenderbundle;", "contents": "duplicate_render_bundle::playDupRenderBundle(${1:playBundleName})"},
	{ "trigger": "AddDupMaterial\t#using scripts\\shared\\duplicaterenderbundle;", "contents": "duplicate_render_bundle::AddDupMaterial(${1:localClientNum}, ${2:bundle}, ${3:prefix}, ${4:type})"},
	{ "trigger": "SetShaderConstants\t#using scripts\\shared\\duplicaterenderbundle;", "contents": "duplicate_render_bundle::SetShaderConstants(${1:localClientNum}, ${2:shaderConstantName}, ${3:filterid}, ${4:values})"},
	{ "trigger": "finishPlayingDupRenderBundle\t#using scripts\\shared\\duplicaterenderbundle;", "contents": "duplicate_render_bundle::finishPlayingDupRenderBundle(${1:localClientNum}, ${2:msg})"},
	{ "trigger": "stopPlayingDupRenderBundle\t#using scripts\\shared\\duplicaterenderbundle;", "contents": "duplicate_render_bundle::stopPlayingDupRenderBundle()"},
	{ "trigger": "stopDupRenderBundle\t#using scripts\\shared\\duplicaterenderbundle;", "contents": "duplicate_render_bundle::stopDupRenderBundle()"},
	{ "trigger": "exitDupRenderBundle\t#using scripts\\shared\\duplicaterenderbundle;", "contents": "duplicate_render_bundle::exitDupRenderBundle()"},
	{ "trigger": "on_localplayer_connect\t#using scripts\\shared\\_oob;", "contents": "oob::on_localplayer_connect(${1:localClientNum})"},
	{ "trigger": "on_localplayer_spawned\t#using scripts\\shared\\_oob;", "contents": "oob::on_localplayer_spawned(${1:localClientNum})"},
	{ "trigger": "on_localplayer_shutdown\t#using scripts\\shared\\_oob;", "contents": "oob::on_localplayer_shutdown(${1:localClientNum})"},
	{ "trigger": "onOutOfBoundsChange\t#using scripts\\shared\\_oob;", "contents": "oob::onOutOfBoundsChange(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "StopOutOfBoundsEffects\t#using scripts\\shared\\_oob;", "contents": "oob::StopOutOfBoundsEffects(${1:localClientNum}, ${2:localPlayer})"},
	{ "trigger": "GetOObUIModel\t#using scripts\\shared\\_oob;", "contents": "oob::GetOObUIModel(${1:localClientNum})"},
	{ "trigger": "on_localplayer_spawned\t#using scripts\\shared\\abilities\\gadgets\\_gadget_vision_pulse;", "contents": "gadget_vision_pulse::on_localplayer_spawned(${1:localClientNum})"},
	{ "trigger": "watch_emped\t#using scripts\\shared\\abilities\\gadgets\\_gadget_vision_pulse;", "contents": "gadget_vision_pulse::watch_emped(${1:localClientNum})"},
	{ "trigger": "disableShader\t#using scripts\\shared\\abilities\\gadgets\\_gadget_vision_pulse;", "contents": "gadget_vision_pulse::disableShader(${1:localClientNum}, ${2:duration})"},
	{ "trigger": "watch_world_pulse_end\t#using scripts\\shared\\abilities\\gadgets\\_gadget_vision_pulse;", "contents": "gadget_vision_pulse::watch_world_pulse_end(${1:localClientNum})"},
	{ "trigger": "do_vision_world_pulse\t#using scripts\\shared\\abilities\\gadgets\\_gadget_vision_pulse;", "contents": "gadget_vision_pulse::do_vision_world_pulse(${1:localClientNum})"},
	{ "trigger": "vision_pulse_owner_valid\t#using scripts\\shared\\abilities\\gadgets\\_gadget_vision_pulse;", "contents": "gadget_vision_pulse::vision_pulse_owner_valid(${1:owner})"},
	{ "trigger": "watch_vision_pulse_owner_death\t#using scripts\\shared\\abilities\\gadgets\\_gadget_vision_pulse;", "contents": "gadget_vision_pulse::watch_vision_pulse_owner_death(${1:localClientNum})"},
	{ "trigger": "do_vision_local_pulse\t#using scripts\\shared\\abilities\\gadgets\\_gadget_vision_pulse;", "contents": "gadget_vision_pulse::do_vision_local_pulse(${1:localClientNum})"},
	{ "trigger": "vision_pulse_changed\t#using scripts\\shared\\abilities\\gadgets\\_gadget_vision_pulse;", "contents": "gadget_vision_pulse::vision_pulse_changed(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "do_reveal_enemy_pulse\t#using scripts\\shared\\abilities\\gadgets\\_gadget_vision_pulse;", "contents": "gadget_vision_pulse::do_reveal_enemy_pulse(${1:localClientNum})"},
	{ "trigger": "set_reveal_enemy\t#using scripts\\shared\\abilities\\gadgets\\_gadget_vision_pulse;", "contents": "gadget_vision_pulse::set_reveal_enemy(${1:localClientNum}, ${2:on_off})"},
	{ "trigger": "set_reveal_self\t#using scripts\\shared\\abilities\\gadgets\\_gadget_vision_pulse;", "contents": "gadget_vision_pulse::set_reveal_self(${1:localClientNum}, ${2:on_off})"},
	{ "trigger": "gadget_visionpulse_reveal\t#using scripts\\shared\\abilities\\gadgets\\_gadget_vision_pulse;", "contents": "gadget_vision_pulse::gadget_visionpulse_reveal(${1:localClientNum}, ${2:bReveal})"},
	{ "trigger": "on_player_spawned\t#using scripts\\shared\\abilities\\gadgets\\_gadget_shield;", "contents": "_gadget_shield::on_player_spawned(${1:local_client_num})"},
	{ "trigger": "has_shield_changed\t#using scripts\\shared\\abilities\\gadgets\\_gadget_shield;", "contents": "_gadget_shield::has_shield_changed(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "update_sound\t#using scripts\\shared\\abilities\\gadgets\\_gadget_shield;", "contents": "_gadget_shield::update_sound(${1:localClientNum})"},
	{ "trigger": "exists\t#using scripts\\shared\\flag_shared;", "contents": "flag::exists(${1:str_flag})"},
	{ "trigger": "set\t#using scripts\\shared\\flag_shared;", "contents": "flag::set(${1:str_flag})"},
	{ "trigger": "delay_set\t#using scripts\\shared\\flag_shared;", "contents": "flag::delay_set(${1:n_delay}, ${2:str_flag}, ${3:str_cancel})"},
	{ "trigger": "_delay_set\t#using scripts\\shared\\flag_shared;", "contents": "flag::_delay_set(${1:n_delay}, ${2:str_flag}, ${3:str_cancel})"},
	{ "trigger": "set_for_time\t#using scripts\\shared\\flag_shared;", "contents": "flag::set_for_time(${1:n_time}, ${2:str_flag})"},
	{ "trigger": "clear\t#using scripts\\shared\\flag_shared;", "contents": "flag::clear(${1:str_flag})"},
	{ "trigger": "toggle\t#using scripts\\shared\\flag_shared;", "contents": "flag::toggle(${1:str_flag})"},
	{ "trigger": "get\t#using scripts\\shared\\flag_shared;", "contents": "flag::get(${1:str_flag})"},
	{ "trigger": "wait_till\t#using scripts\\shared\\flag_shared;", "contents": "flag::wait_till(${1:str_flag})"},
	{ "trigger": "wait_till_timeout\t#using scripts\\shared\\flag_shared;", "contents": "flag::wait_till_timeout(${1:n_timeout}, ${2:str_flag})"},
	{ "trigger": "wait_till_all\t#using scripts\\shared\\flag_shared;", "contents": "flag::wait_till_all(${1:a_flags})"},
	{ "trigger": "wait_till_all_timeout\t#using scripts\\shared\\flag_shared;", "contents": "flag::wait_till_all_timeout(${1:n_timeout}, ${2:a_flags})"},
	{ "trigger": "wait_till_any\t#using scripts\\shared\\flag_shared;", "contents": "flag::wait_till_any(${1:a_flags})"},
	{ "trigger": "wait_till_any_timeout\t#using scripts\\shared\\flag_shared;", "contents": "flag::wait_till_any_timeout(${1:n_timeout}, ${2:a_flags})"},
	{ "trigger": "wait_till_clear\t#using scripts\\shared\\flag_shared;", "contents": "flag::wait_till_clear(${1:str_flag})"},
	{ "trigger": "wait_till_clear_timeout\t#using scripts\\shared\\flag_shared;", "contents": "flag::wait_till_clear_timeout(${1:n_timeout}, ${2:str_flag})"},
	{ "trigger": "wait_till_clear_all\t#using scripts\\shared\\flag_shared;", "contents": "flag::wait_till_clear_all(${1:a_flags})"},
	{ "trigger": "wait_till_clear_all_timeout\t#using scripts\\shared\\flag_shared;", "contents": "flag::wait_till_clear_all_timeout(${1:n_timeout}, ${2:a_flags})"},
	{ "trigger": "wait_till_clear_any\t#using scripts\\shared\\flag_shared;", "contents": "flag::wait_till_clear_any(${1:a_flags})"},
	{ "trigger": "wait_till_clear_any_timeout\t#using scripts\\shared\\flag_shared;", "contents": "flag::wait_till_clear_any_timeout(${1:n_timeout}, ${2:a_flags})"},
	{ "trigger": "delete\t#using scripts\\shared\\flag_shared;", "contents": "flag::delete(${1:str_flag})"},
	{ "trigger": "on_localplayer_spawned\t#using scripts\\shared\\abilities\\gadgets\\_gadget_speed_burst;", "contents": "_gadget_speed_burst::on_localplayer_spawned(${1:localClientNum})"},
	{ "trigger": "player_speed_changed\t#using scripts\\shared\\abilities\\gadgets\\_gadget_speed_burst;", "contents": "_gadget_speed_burst::player_speed_changed(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "precache_util_fx\t#using scripts\\zm\\zm_giant_fx;", "contents": "zm_giant_fx::precache_util_fx()"},
	{ "trigger": "precache_scripted_fx\t#using scripts\\zm\\zm_giant_fx;", "contents": "zm_giant_fx::precache_scripted_fx()"},
	{ "trigger": "precache_createfx_fx\t#using scripts\\zm\\zm_giant_fx;", "contents": "zm_giant_fx::precache_createfx_fx()"},
	{ "trigger": "ramp_fog_in_out\t#using scripts\\zm\\zm_giant_fx;", "contents": "zm_giant_fx::ramp_fog_in_out()"},
	{ "trigger": "light_model_swap\t#using scripts\\zm\\zm_giant_fx;", "contents": "zm_giant_fx::light_model_swap(${1:name}, ${2:model})"},
	{ "trigger": "get_guide_struct_angles\t#using scripts\\zm\\zm_giant_fx;", "contents": "zm_giant_fx::get_guide_struct_angles(${1:ent})"},
	{ "trigger": "teleporter_map_light\t#using scripts\\zm\\zm_giant_fx;", "contents": "zm_giant_fx::teleporter_map_light(${1:index}, ${2:on_msg})"},
	{ "trigger": "teleporter_map_light_receiver\t#using scripts\\zm\\zm_giant_fx;", "contents": "zm_giant_fx::teleporter_map_light_receiver()"},
	{ "trigger": "teleporter_map_light_receiver_flash\t#using scripts\\zm\\zm_giant_fx;", "contents": "zm_giant_fx::teleporter_map_light_receiver_flash()"},
	{ "trigger": "teleporter_map_light_receiver_stop\t#using scripts\\zm\\zm_giant_fx;", "contents": "zm_giant_fx::teleporter_map_light_receiver_stop()"},
	{ "trigger": "force_stream_changed\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::force_stream_changed(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "lock_weapon_model\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::lock_weapon_model(${1:model})"},
	{ "trigger": "unlock_weapon_model\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::unlock_weapon_model(${1:model})"},
	{ "trigger": "stream_model_for_time\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::stream_model_for_time(${1:localClientNum}, ${2:model}, ${3:time})"},
	{ "trigger": "magicbox_show_sounds_callback\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::magicbox_show_sounds_callback(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "magicbox_leave_sounds_callback\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::magicbox_leave_sounds_callback(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "magicbox_open_glow_callback\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::magicbox_open_glow_callback(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "magicbox_closed_glow_callback\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::magicbox_closed_glow_callback(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "magicbox_glow_callback\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::magicbox_glow_callback(${1:localClientNum}, ${2:newVal}, ${3:fx})"},
	{ "trigger": "glow_obj_demo_jump_listener\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::glow_obj_demo_jump_listener(${1:localClientNum})"},
	{ "trigger": "glow_obj_cleanup\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::glow_obj_cleanup(${1:localClientNum})"},
	{ "trigger": "open\t#using scripts\\shared\\debug_menu_shared;", "contents": "debug_menu::open(${1:localClientNum}, ${2:a_menu_items})"},
	{ "trigger": "close\t#using scripts\\shared\\debug_menu_shared;", "contents": "debug_menu::close(${1:localClientNum})"},
	{ "trigger": "set_item_text\t#using scripts\\shared\\debug_menu_shared;", "contents": "debug_menu::set_item_text(${1:localClientNum}, ${2:index}, ${3:name})"},
	{ "trigger": "set_item_color\t#using scripts\\shared\\debug_menu_shared;", "contents": "debug_menu::set_item_color(${1:localClientNum}, ${2:index}, ${3:color})"},
	{ "trigger": "loop_fx_sound\t#using scripts\\shared\\sound_shared;", "contents": "sound::loop_fx_sound(${1:clientNum}, ${2:alias}, ${3:origin}, ${4:ender})"},
	{ "trigger": "play_in_space\t#using scripts\\shared\\sound_shared;", "contents": "sound::play_in_space(${1:localClientNum}, ${2:alias}, ${3:origin})"},
	{ "trigger": "loop_delete\t#using scripts\\shared\\sound_shared;", "contents": "sound::loop_delete(${1:ender}, ${2:sound_entity})"},
	{ "trigger": "play_on_client\t#using scripts\\shared\\sound_shared;", "contents": "sound::play_on_client(${1:sound_alias})"},
	{ "trigger": "loop_on_client\t#using scripts\\shared\\sound_shared;", "contents": "sound::loop_on_client(${1:sound_alias}, ${2:min_delay}, ${3:max_delay}, ${4:end_on})"},
	{ "trigger": "localplayer_spawned\t#using scripts\\shared\\water_surface;", "contents": "water_surface::localplayer_spawned(${1:localClientNum})"},
	{ "trigger": "underwaterWatchBegin\t#using scripts\\shared\\water_surface;", "contents": "water_surface::underwaterWatchBegin()"},
	{ "trigger": "underwaterWatchEnd\t#using scripts\\shared\\water_surface;", "contents": "water_surface::underwaterWatchEnd()"},
	{ "trigger": "underwaterBegin\t#using scripts\\shared\\water_surface;", "contents": "water_surface::underwaterBegin()"},
	{ "trigger": "underwaterEnd\t#using scripts\\shared\\water_surface;", "contents": "water_surface::underwaterEnd()"},
	{ "trigger": "startWaterDive\t#using scripts\\shared\\water_surface;", "contents": "water_surface::startWaterDive()"},
	{ "trigger": "startWaterSheeting\t#using scripts\\shared\\water_surface;", "contents": "water_surface::startWaterSheeting()"},
	{ "trigger": "stop_player_fx\t#using scripts\\shared\\water_surface;", "contents": "water_surface::stop_player_fx(${1:localClient})"},
	{ "trigger": "start_lights\t#using scripts\\zm\\zm_giant_amb;", "contents": "zm_giant_amb::start_lights()"},
	{ "trigger": "light_sound\t#using scripts\\zm\\zm_giant_amb;", "contents": "zm_giant_amb::light_sound()"},
	{ "trigger": "generator_sound\t#using scripts\\zm\\zm_giant_amb;", "contents": "zm_giant_amb::generator_sound()"},
	{ "trigger": "breakers_sound\t#using scripts\\zm\\zm_giant_amb;", "contents": "zm_giant_amb::breakers_sound()"},
	{ "trigger": "switch_progress_sound\t#using scripts\\zm\\zm_giant_amb;", "contents": "zm_giant_amb::switch_progress_sound()"},
	{ "trigger": "homepad_loop\t#using scripts\\zm\\zm_giant_amb;", "contents": "zm_giant_amb::homepad_loop()"},
	{ "trigger": "telepad_loop\t#using scripts\\zm\\zm_giant_amb;", "contents": "zm_giant_amb::telepad_loop()"},
	{ "trigger": "teleportation_audio\t#using scripts\\zm\\zm_giant_amb; Plays warmup and cooldown audio for homepad and telepads", "contents": "zm_giant_amb::teleportation_audio(${1:pad})"},
	{ "trigger": "pa_countdown\t#using scripts\\zm\\zm_giant_amb;", "contents": "zm_giant_amb::pa_countdown(${1:pad})"},
	{ "trigger": "pa_countdown_success\t#using scripts\\zm\\zm_giant_amb;", "contents": "zm_giant_amb::pa_countdown_success(${1:pad})"},
	{ "trigger": "pa_teleport\t#using scripts\\zm\\zm_giant_amb; Plays after successful teleportation, threads cooldown count", "contents": "zm_giant_amb::pa_teleport(${1:pad})"},
	{ "trigger": "pa_electric_trap\t#using scripts\\zm\\zm_giant_amb;", "contents": "zm_giant_amb::pa_electric_trap(${1:location})"},
	{ "trigger": "pa_play_dialog\t#using scripts\\zm\\zm_giant_amb;", "contents": "zm_giant_amb::pa_play_dialog(${1:alias})"},
	{ "trigger": "teleport_2d\t#using scripts\\zm\\zm_giant_amb; Plays a 2d sound for a teleporting player 1.7 seconds after activating teleporter", "contents": "zm_giant_amb::teleport_2d()"},
	{ "trigger": "power_audio_2d\t#using scripts\\zm\\zm_giant_amb;", "contents": "zm_giant_amb::power_audio_2d()"},
	{ "trigger": "linkall_2d\t#using scripts\\zm\\zm_giant_amb;", "contents": "zm_giant_amb::linkall_2d()"},
	{ "trigger": "pa_level_start\t#using scripts\\zm\\zm_giant_amb;", "contents": "zm_giant_amb::pa_level_start()"},
	{ "trigger": "pa_power_on\t#using scripts\\zm\\zm_giant_amb;", "contents": "zm_giant_amb::pa_power_on()"},
	{ "trigger": "crazy_power\t#using scripts\\zm\\zm_giant_amb;", "contents": "zm_giant_amb::crazy_power()"},
	{ "trigger": "flip_sparks\t#using scripts\\zm\\zm_giant_amb;", "contents": "zm_giant_amb::flip_sparks()"},
	{ "trigger": "play_added_ambience\t#using scripts\\zm\\zm_giant_amb;", "contents": "zm_giant_amb::play_added_ambience()"},
	{ "trigger": "play_flux_whispers\t#using scripts\\zm\\zm_giant_amb;", "contents": "zm_giant_amb::play_flux_whispers()"},
	{ "trigger": "play_backwards_children\t#using scripts\\zm\\zm_giant_amb;", "contents": "zm_giant_amb::play_backwards_children()"},
	{ "trigger": "log\t#using scripts\\shared\\scriptbundle_shared;", "contents": "scriptbundle::log(${1:str_msg})"},
	{ "trigger": "error\t#using scripts\\shared\\scriptbundle_shared;", "contents": "scriptbundle::error(${1:condition}, ${2:str_msg})"},
	{ "trigger": "get_ent\t#using scripts\\shared\\scriptbundle_shared;", "contents": "scriptbundle::get_ent(${1:localClientNum})"},
	{ "trigger": "on_error\t#using scripts\\shared\\scriptbundle_shared;", "contents": "scriptbundle::on_error(${1:e})"},
	{ "trigger": "get_type\t#using scripts\\shared\\scriptbundle_shared;", "contents": "scriptbundle::get_type()"},
	{ "trigger": "get_name\t#using scripts\\shared\\scriptbundle_shared;", "contents": "scriptbundle::get_name()"},
	{ "trigger": "get_vm\t#using scripts\\shared\\scriptbundle_shared;", "contents": "scriptbundle::get_vm()"},
	{ "trigger": "get_objects\t#using scripts\\shared\\scriptbundle_shared;", "contents": "scriptbundle::get_objects()"},
	{ "trigger": "is_testing\t#using scripts\\shared\\scriptbundle_shared;", "contents": "scriptbundle::is_testing()"},
	{ "trigger": "add_object\t#using scripts\\shared\\scriptbundle_shared;", "contents": "scriptbundle::add_object(${1:o_object})"},
	{ "trigger": "remove_object\t#using scripts\\shared\\scriptbundle_shared;", "contents": "scriptbundle::remove_object(${1:o_object})"},
	{ "trigger": "log\t#using scripts\\shared\\scriptbundle_shared;", "contents": "scriptbundle::log(${1:str_msg})"},
	{ "trigger": "error\t#using scripts\\shared\\scriptbundle_shared;", "contents": "scriptbundle::error(${1:condition}, ${2:str_msg})"},
	{ "trigger": "error_on_screen\t#using scripts\\shared\\scriptbundle_shared;", "contents": "scriptbundle::error_on_screen(${1:str_msg})"},
	{ "trigger": "_destroy_error_on_screen\t#using scripts\\shared\\scriptbundle_shared;", "contents": "scriptbundle::_destroy_error_on_screen()"},
	{ "trigger": "add_zombie_powerup\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::add_zombie_powerup(${1:powerup_name}, ${2:client_field_name}, ${3:clientfield_version = VERSION_SHIP})"},
	{ "trigger": "set_clientfield_code_callbacks\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::set_clientfield_code_callbacks()"},
	{ "trigger": "include_zombie_powerup\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::include_zombie_powerup(${1:powerup_name})"},
	{ "trigger": "powerup_state_callback\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::powerup_state_callback(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "powerup_fx_callback\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::powerup_fx_callback(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "trophy_state_change\t#using scripts\\shared\\weapons\\_trophy_system;", "contents": "trophy_system::trophy_state_change(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "trophy_state_change_recon\t#using scripts\\shared\\weapons\\_trophy_system;", "contents": "trophy_system::trophy_state_change_recon(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "trophy_rolling_anim\t#using scripts\\shared\\weapons\\_trophy_system;", "contents": "trophy_system::trophy_rolling_anim(${1:localClientNum})"},
	{ "trigger": "trophy_stationary_anim\t#using scripts\\shared\\weapons\\_trophy_system;", "contents": "trophy_system::trophy_stationary_anim(${1:localClientNum})"},
	{ "trigger": "register\t#using scripts\\shared\\aat_shared;", "contents": "aat::register(${1:name}, ${2:localized_string}, ${3:icon})"},
	{ "trigger": "aat_hud_manager\t#using scripts\\shared\\aat_shared;", "contents": "aat::aat_hud_manager(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "finalize_clientfields\t#using scripts\\shared\\aat_shared;", "contents": "aat::finalize_clientfields()"},
	{ "trigger": "get_string\t#using scripts\\shared\\aat_shared;", "contents": "aat::get_string(${1:n_aat_index})"},
	{ "trigger": "get_icon\t#using scripts\\shared\\aat_shared;", "contents": "aat::get_icon(${1:n_aat_index})"},
	{ "trigger": "transition_shader\t#using scripts\\shared\\abilities\\gadgets\\_gadget_clone_render;", "contents": "gadget_clone_render::transition_shader(${1:localClientNum})"},
	{ "trigger": "add_ai_spawn_function\t#using scripts\\shared\\ai_shared;", "contents": "ai::add_ai_spawn_function(${1:spawn_func})"},
	{ "trigger": "add_archetype_spawn_function\t#using scripts\\shared\\ai_shared;", "contents": "ai::add_archetype_spawn_function(${1:archetype}, ${2:spawn_func})"},
	{ "trigger": "spawned_callback\t#using scripts\\shared\\ai_shared;", "contents": "ai::spawned_callback(${1:localClientNum})"},
	{ "trigger": "shouldRegisterClientFieldForArchetype\t#using scripts\\shared\\ai_shared;", "contents": "ai::shouldRegisterClientFieldForArchetype(${1:archetype})"},
	{ "trigger": "proximity_spawned\t#using scripts\\shared\\weapons\\_proximity_grenade;", "contents": "proximity_grenade::proximity_spawned(${1:localClientNum})"},
	{ "trigger": "watchForProximityExplosion\t#using scripts\\shared\\weapons\\_proximity_grenade;", "contents": "proximity_grenade::watchForProximityExplosion()"},
	{ "trigger": "enable_doubletap2_perk_for_level\t#using scripts\\zm\\_zm_perk_doubletap2;", "contents": "zm_perk_doubletap2::enable_doubletap2_perk_for_level()"},
	{ "trigger": "doubletap2_client_field_func\t#using scripts\\zm\\_zm_perk_doubletap2;", "contents": "zm_perk_doubletap2::doubletap2_client_field_func()"},
	{ "trigger": "doubletap2_code_callback_func\t#using scripts\\zm\\_zm_perk_doubletap2;", "contents": "zm_perk_doubletap2::doubletap2_code_callback_func()"},
	{ "trigger": "metalstorm_setup\t#using scripts\\shared\\vehicles\\_metal_storm;", "contents": "metal_storm::metalstorm_setup(${1:localClientNum})"},
	{ "trigger": "metalstorm_player_enter\t#using scripts\\shared\\vehicles\\_metal_storm;", "contents": "metal_storm::metalstorm_player_enter(${1:localClientNum})"},
	{ "trigger": "metalstorm_update_rumble\t#using scripts\\shared\\vehicles\\_metal_storm;", "contents": "metal_storm::metalstorm_update_rumble()"},
	{ "trigger": "field_toggle_gas_freeze\t#using scripts\\shared\\vehicles\\_metal_storm;", "contents": "metal_storm::field_toggle_gas_freeze(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "gameplay_started_callback\t#using scripts\\shared\\player_shared;", "contents": "player::gameplay_started_callback(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "spawned\t#using scripts\\shared\\weapons\\_tacticalinsertion;", "contents": "tacticalinsertion::spawned(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "playFlareFX\t#using scripts\\shared\\weapons\\_tacticalinsertion;", "contents": "tacticalinsertion::playFlareFX(${1:localClientNum})"},
	{ "trigger": "watchTacInsertShutdown\t#using scripts\\shared\\weapons\\_tacticalinsertion;", "contents": "tacticalinsertion::watchTacInsertShutdown(${1:localClientNum}, ${2:fxHandle})"},
	{ "trigger": "stopflareloopWatcher\t#using scripts\\shared\\weapons\\_tacticalinsertion;", "contents": "tacticalinsertion::stopflareloopWatcher(${1:loopOrigin})"},
	{ "trigger": "checkForPlayerSwitch\t#using scripts\\shared\\weapons\\_tacticalinsertion;", "contents": "tacticalinsertion::checkForPlayerSwitch(${1:localClientNum})"},
	{ "trigger": "forceOn\t#using scripts\\shared\\abilities\\gadgets\\_gadget_camo_render;", "contents": "gadget_camo_render::forceOn(${1:local_client_num})"},
	{ "trigger": "doReveal\t#using scripts\\shared\\abilities\\gadgets\\_gadget_camo_render;", "contents": "gadget_camo_render::doReveal(${1:local_client_num}, ${2:direction})"},
	{ "trigger": "spawned\t#using scripts\\shared\\weapons\\spike_charge_siegebot;", "contents": "spike_charge_siegebot::spawned(${1:localClientNum})"},
	{ "trigger": "fx_think\t#using scripts\\shared\\weapons\\spike_charge_siegebot;", "contents": "spike_charge_siegebot::fx_think(${1:localClientNum})"},
	{ "trigger": "start_light_fx\t#using scripts\\shared\\weapons\\spike_charge_siegebot;", "contents": "spike_charge_siegebot::start_light_fx(${1:localClientNum})"},
	{ "trigger": "stop_light_fx\t#using scripts\\shared\\weapons\\spike_charge_siegebot;", "contents": "spike_charge_siegebot::stop_light_fx(${1:localClientNum})"},
	{ "trigger": "sticky_indicator\t#using scripts\\shared\\weapons\\spike_charge_siegebot;", "contents": "spike_charge_siegebot::sticky_indicator(${1:player}, ${2:localClientNum})"},
	{ "trigger": "fullscreen_fx\t#using scripts\\shared\\weapons\\spike_charge_siegebot;", "contents": "spike_charge_siegebot::fullscreen_fx(${1:localClientNum})"},
	{ "trigger": "on_player_connect\t#using scripts\\zm\\_ambient;", "contents": "ambient::on_player_connect(${1:localclientnum})"},
	{ "trigger": "setup_point_fx\t#using scripts\\zm\\_ambient;", "contents": "ambient::setup_point_fx(${1:point}, ${2:fx_id})"},
	{ "trigger": "ambient_flak_think\t#using scripts\\zm\\_ambient;", "contents": "ambient::ambient_flak_think(${1:point})"},
	{ "trigger": "ambient_flak_rotate\t#using scripts\\zm\\_ambient;", "contents": "ambient::ambient_flak_rotate(${1:point})"},
	{ "trigger": "ambient_flak_flash\t#using scripts\\zm\\_ambient;", "contents": "ambient::ambient_flak_flash(${1:point}, ${2:min_burst_time}, ${3:max_burst_time})"},
	{ "trigger": "ambient_fakefire_think\t#using scripts\\zm\\_ambient;", "contents": "ambient::ambient_fakefire_think(${1:point})"},
	{ "trigger": "spin_fan\t#using scripts\\zm\\_ambient; self == fan from the array", "contents": "ambient::spin_fan()"},
	{ "trigger": "clock_run\t#using scripts\\zm\\_ambient; self == either hour hand, minute hand, or second hand", "contents": "ambient::clock_run(${1:time_values})"},
	{ "trigger": "spin_anemometers\t#using scripts\\zm\\_ambient;", "contents": "ambient::spin_anemometers(${1:clientNum})"},
	{ "trigger": "spoon_spin_func\t#using scripts\\zm\\_ambient;", "contents": "ambient::spoon_spin_func()"},
	{ "trigger": "arrow_spin_func\t#using scripts\\zm\\_ambient;", "contents": "ambient::arrow_spin_func()"},
	{ "trigger": "infrared_changed\t#using scripts\\shared\\abilities\\gadgets\\_gadget_infrared;", "contents": "_gadget_infrared::infrared_changed(${1:localclientnum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "on_player_spawned\t#using scripts\\shared\\abilities\\gadgets\\_gadget_infrared;", "contents": "_gadget_infrared::on_player_spawned(${1:localClientNum})"},
	{ "trigger": "enable_sleight_of_hand_perk_for_level\t#using scripts\\zm\\_zm_perk_sleight_of_hand;", "contents": "zm_perk_sleight_of_hand::enable_sleight_of_hand_perk_for_level()"},
	{ "trigger": "sleight_of_hand_client_field_func\t#using scripts\\zm\\_zm_perk_sleight_of_hand;", "contents": "zm_perk_sleight_of_hand::sleight_of_hand_client_field_func()"},
	{ "trigger": "sleight_of_hand_code_callback_func\t#using scripts\\zm\\_zm_perk_sleight_of_hand;", "contents": "zm_perk_sleight_of_hand::sleight_of_hand_code_callback_func()"},
	{ "trigger": "on_player_connect\t#using scripts\\shared\\abilities\\gadgets\\_gadget_turret_deploy;", "contents": "_gadget_turret_deploy::on_player_connect(${1:localClientNum})"},
	{ "trigger": "field_toggle_retrievable_handler\t#using scripts\\shared\\abilities\\gadgets\\_gadget_turret_deploy;", "contents": "_gadget_turret_deploy::field_toggle_retrievable_handler(${1:local_client_num}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "field_toggle_unplaceable_handler\t#using scripts\\shared\\abilities\\gadgets\\_gadget_turret_deploy;", "contents": "_gadget_turret_deploy::field_toggle_unplaceable_handler(${1:local_client_num}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "field_toggle_keyline_handler\t#using scripts\\shared\\abilities\\gadgets\\_gadget_turret_deploy;", "contents": "_gadget_turret_deploy::field_toggle_keyline_handler(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "watch_turret_keyline\t#using scripts\\shared\\abilities\\gadgets\\_gadget_turret_deploy;", "contents": "_gadget_turret_deploy::watch_turret_keyline(${1:localClientNum})"},
	{ "trigger": "field_damage_state_handler\t#using scripts\\shared\\abilities\\gadgets\\_gadget_turret_deploy;", "contents": "_gadget_turret_deploy::field_damage_state_handler(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "setup_turret_damage_states\t#using scripts\\shared\\abilities\\gadgets\\_gadget_turret_deploy;", "contents": "_gadget_turret_deploy::setup_turret_damage_states()"},
	{ "trigger": "field_toggle_hack_handler\t#using scripts\\shared\\abilities\\gadgets\\_gadget_turret_deploy;", "contents": "_gadget_turret_deploy::field_toggle_hack_handler(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "play_beeps\t#using scripts\\shared\\abilities\\gadgets\\_gadget_turret_deploy;", "contents": "_gadget_turret_deploy::play_beeps(${1:localClientNum})"},
	{ "trigger": "turret_hacked_fully\t#using scripts\\shared\\abilities\\gadgets\\_gadget_turret_deploy;", "contents": "_gadget_turret_deploy::turret_hacked_fully()"},
	{ "trigger": "zm_aat_turned_cb\t#using scripts\\zm\\aats\\_zm_aat_turned;", "contents": "zm_aat_turned::zm_aat_turned_cb(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "spawned\t#using scripts\\shared\\weapons\\_decoy;", "contents": "decoy::spawned(${1:localClientNum})"},
	{ "trigger": "watch_for_fake_fire\t#using scripts\\shared\\weapons\\_decoy;", "contents": "decoy::watch_for_fake_fire(${1:localClientNum})"},
	{ "trigger": "level_watch_for_fake_fire\t#using scripts\\shared\\weapons\\_decoy;", "contents": "decoy::level_watch_for_fake_fire()"},
	{ "trigger": "flashback_activated\t#using scripts\\shared\\abilities\\gadgets\\_gadget_flashback;", "contents": "_gadget_flashback::flashback_activated(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "set_flashback_trail_fx\t#using scripts\\shared\\abilities\\gadgets\\_gadget_flashback;", "contents": "_gadget_flashback::set_flashback_trail_fx(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "clone_flashback_changed\t#using scripts\\shared\\abilities\\gadgets\\_gadget_flashback;", "contents": "_gadget_flashback::clone_flashback_changed(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "clone_fade\t#using scripts\\shared\\abilities\\gadgets\\_gadget_flashback;", "contents": "_gadget_flashback::clone_fade(${1:localClientNum})"},
	{ "trigger": "clone_flashback_changed_event\t#using scripts\\shared\\abilities\\gadgets\\_gadget_flashback;", "contents": "_gadget_flashback::clone_flashback_changed_event(${1:localClientNum}, ${2:armorStatusNew})"},
	{ "trigger": "on_fire_timeout\t#using scripts\\shared\\ai\\zombie_death;", "contents": "zombie_death::on_fire_timeout(${1:localClientNum})"},
	{ "trigger": "flame_death_fx\t#using scripts\\shared\\ai\\zombie_death;", "contents": "zombie_death::flame_death_fx(${1:localClientNum})"},
	{ "trigger": "randomize_array\t#using scripts\\shared\\ai\\zombie_death;", "contents": "zombie_death::randomize_array(${1:array})"},
	{ "trigger": "player_on_spawned\t#using scripts\\zm\\_zm_weap_riotshield;", "contents": "zm_equip_shield::player_on_spawned(${1:localClientNum})"},
	{ "trigger": "watch_weapon_changes\t#using scripts\\zm\\_zm_weap_riotshield;", "contents": "zm_equip_shield::watch_weapon_changes(${1:localClientNum})"},
	{ "trigger": "lock_weapon_model\t#using scripts\\zm\\_zm_weap_riotshield;", "contents": "zm_equip_shield::lock_weapon_model(${1:model})"},
	{ "trigger": "unlock_weapon_model\t#using scripts\\zm\\_zm_weap_riotshield;", "contents": "zm_equip_shield::unlock_weapon_model(${1:model})"},
	{ "trigger": "lock_weapon_models\t#using scripts\\zm\\_zm_weap_riotshield;", "contents": "zm_equip_shield::lock_weapon_models(${1:localClientNum}, ${2:weapon})"},
	{ "trigger": "on_local_player_spawned\t#using scripts\\shared\\abilities\\gadgets\\_gadget_armor;", "contents": "_gadget_armor::on_local_player_spawned(${1:localClientNum})"},
	{ "trigger": "player_damage_type_changed\t#using scripts\\shared\\abilities\\gadgets\\_gadget_armor;", "contents": "_gadget_armor::player_damage_type_changed(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "player_armor_changed\t#using scripts\\shared\\abilities\\gadgets\\_gadget_armor;", "contents": "_gadget_armor::player_armor_changed(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "player_armor_changed_event\t#using scripts\\shared\\abilities\\gadgets\\_gadget_armor;", "contents": "_gadget_armor::player_armor_changed_event(${1:localClientNum}, ${2:newVal})"},
	{ "trigger": "armor_update_shader_event\t#using scripts\\shared\\abilities\\gadgets\\_gadget_armor;", "contents": "_gadget_armor::armor_update_shader_event(${1:localClientNum}, ${2:armorStatusNew})"},
	{ "trigger": "armor_get_shader_color\t#using scripts\\shared\\abilities\\gadgets\\_gadget_armor;", "contents": "_gadget_armor::armor_get_shader_color(${1:armorStatusNew})"},
	{ "trigger": "armor_update_fx_event\t#using scripts\\shared\\abilities\\gadgets\\_gadget_armor;", "contents": "_gadget_armor::armor_update_fx_event(${1:localClientNum}, ${2:doArmorFx})"},
	{ "trigger": "armor_overlay_transition_fx\t#using scripts\\shared\\abilities\\gadgets\\_gadget_armor;", "contents": "_gadget_armor::armor_overlay_transition_fx(${1:localClientNum}, ${2:armorStatusNew})"},
	{ "trigger": "armor_is_local_player\t#using scripts\\shared\\abilities\\gadgets\\_gadget_armor;", "contents": "_gadget_armor::armor_is_local_player(${1:localClientNum})"},
	{ "trigger": "first_frame\t#using scripts\\shared\\animation_shared;", "contents": "animation::first_frame(${1:animation}, ${2:v_origin_or_ent}, ${3:v_angles_or_tag})"},
	{ "trigger": "play\t#using scripts\\shared\\animation_shared;", "contents": "animation::play(${1:animation}, ${2:v_origin_or_ent}, ${3:v_angles_or_tag}, ${4:n_rate = 1}, ${5:n_blend_in = .2}, ${6:n_blend_out = .2}, ${7:n_lerp}, ${8:b_link = false})"},
	{ "trigger": "_play\t#using scripts\\shared\\animation_shared;", "contents": "animation::_play(${1:animation}, ${2:v_origin_or_ent}, ${3:v_angles_or_tag}, ${4:n_rate = 1}, ${5:n_blend_in = .2}, ${6:n_blend_out = .2}, ${7:n_lerp}, ${8:b_link = false})"},
	{ "trigger": "_get_align_ent\t#using scripts\\shared\\animation_shared;", "contents": "animation::_get_align_ent(${1:e_align})"},
	{ "trigger": "_get_align_pos\t#using scripts\\shared\\animation_shared;", "contents": "animation::_get_align_pos(${1:v_origin_or_ent}, ${2:v_angles_or_tag})"},
	{ "trigger": "play_siege\t#using scripts\\shared\\animation_shared;", "contents": "animation::play_siege(${1:str_anim}, ${2:str_shot = \"default\"}, ${3:n_rate = 1}, ${4:b_loop = false})"},
	{ "trigger": "add_notetrack_func\t#using scripts\\shared\\animation_shared;", "contents": "animation::add_notetrack_func(${1:funcname}, ${2:func})"},
	{ "trigger": "add_global_notetrack_handler\t#using scripts\\shared\\animation_shared;", "contents": "animation::add_global_notetrack_handler(${1:str_note}, ${2:func}, ${3:...})"},
	{ "trigger": "call_notetrack_handler\t#using scripts\\shared\\animation_shared;", "contents": "animation::call_notetrack_handler(${1:str_note})"},
	{ "trigger": "setup_notetracks\t#using scripts\\shared\\animation_shared;", "contents": "animation::setup_notetracks()"},
	{ "trigger": "handle_notetracks\t#using scripts\\shared\\animation_shared;", "contents": "animation::handle_notetracks()"},
	{ "trigger": "cracks_on\t#using scripts\\shared\\animation_shared;", "contents": "animation::cracks_on(${1:str_type})"},
	{ "trigger": "cracks_off\t#using scripts\\shared\\animation_shared;", "contents": "animation::cracks_off(${1:str_type})"},
	{ "trigger": "cf_cracks_on\t#using scripts\\shared\\animation_shared;", "contents": "animation::cf_cracks_on(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "cf_cracks_off\t#using scripts\\shared\\animation_shared;", "contents": "animation::cf_cracks_off(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "on_localplayer_shutdown\t#using scripts\\shared\\abilities\\gadgets\\_gadget_overdrive;", "contents": "_gadget_overdrive::on_localplayer_shutdown(${1:localClientNum})"},
	{ "trigger": "on_localplayer_spawned\t#using scripts\\shared\\abilities\\gadgets\\_gadget_overdrive;", "contents": "_gadget_overdrive::on_localplayer_spawned(${1:localClientNum})"},
	{ "trigger": "on_player_connect\t#using scripts\\shared\\abilities\\gadgets\\_gadget_overdrive;", "contents": "_gadget_overdrive::on_player_connect(${1:local_client_num})"},
	{ "trigger": "player_overdrive_handler\t#using scripts\\shared\\abilities\\gadgets\\_gadget_overdrive;", "contents": "_gadget_overdrive::player_overdrive_handler(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "activation_flash\t#using scripts\\shared\\abilities\\gadgets\\_gadget_overdrive;", "contents": "_gadget_overdrive::activation_flash(${1:localClientNum})"},
	{ "trigger": "enable_boost_camera_fx\t#using scripts\\shared\\abilities\\gadgets\\_gadget_overdrive;", "contents": "_gadget_overdrive::enable_boost_camera_fx(${1:localClientNum})"},
	{ "trigger": "watch_stop_player_fx\t#using scripts\\shared\\abilities\\gadgets\\_gadget_overdrive;", "contents": "_gadget_overdrive::watch_stop_player_fx(${1:localClientNum}, ${2:fx})"},
	{ "trigger": "stop_boost_camera_fx\t#using scripts\\shared\\abilities\\gadgets\\_gadget_overdrive;", "contents": "_gadget_overdrive::stop_boost_camera_fx(${1:localClientNum})"},
	{ "trigger": "overdrive_boost_fx_interrupt_handler\t#using scripts\\shared\\abilities\\gadgets\\_gadget_overdrive;", "contents": "_gadget_overdrive::overdrive_boost_fx_interrupt_handler(${1:localClientNum})"},
	{ "trigger": "overdrive_shutdown\t#using scripts\\shared\\abilities\\gadgets\\_gadget_overdrive;", "contents": "_gadget_overdrive::overdrive_shutdown(${1:localClientNum})"},
	{ "trigger": "boost_fx_on_velocity\t#using scripts\\shared\\abilities\\gadgets\\_gadget_overdrive; self == player", "contents": "_gadget_overdrive::boost_fx_on_velocity(${1:localClientNum})"},
	{ "trigger": "_setup_\t#using scripts\\shared\\vehicles\\_quadtank;", "contents": "quadtank::_setup_(${1:localClientNum})"},
	{ "trigger": "player_shock_fx_handler\t#using scripts\\shared\\vehicles\\_quadtank;", "contents": "quadtank::player_shock_fx_handler(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "player_shock_fx_fade_off\t#using scripts\\shared\\vehicles\\_quadtank;", "contents": "quadtank::player_shock_fx_fade_off(${1:localClientNum}, ${2:amount}, ${3:fadeoutTime})"},
	{ "trigger": "update_trophy_system_state\t#using scripts\\shared\\vehicles\\_quadtank;", "contents": "quadtank::update_trophy_system_state(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "set_trophy_state\t#using scripts\\shared\\vehicles\\_quadtank;", "contents": "quadtank::set_trophy_state(${1:localClientNum}, ${2:isOn})"},
	{ "trigger": "wait_for_bullet_impact\t#using scripts\\shared\\vehicles\\_quadtank;", "contents": "quadtank::wait_for_bullet_impact(${1:localClientNum})"},
	{ "trigger": "validate\t#using scripts\\shared\\fx_shared;", "contents": "fx::validate(${1:fxId}, ${2:origin})"},
	{ "trigger": "create_loop_sound\t#using scripts\\shared\\fx_shared;", "contents": "fx::create_loop_sound()"},
	{ "trigger": "create_effect\t#using scripts\\shared\\fx_shared;", "contents": "fx::create_effect(${1:type}, ${2:fxid})"},
	{ "trigger": "create_oneshot_effect\t#using scripts\\shared\\fx_shared;", "contents": "fx::create_oneshot_effect(${1:fxid})"},
	{ "trigger": "create_loop_effect\t#using scripts\\shared\\fx_shared;", "contents": "fx::create_loop_effect(${1:fxid})"},
	{ "trigger": "set_forward_and_up_vectors\t#using scripts\\shared\\fx_shared;", "contents": "fx::set_forward_and_up_vectors()"},
	{ "trigger": "oneshot_thread\t#using scripts\\shared\\fx_shared;", "contents": "fx::oneshot_thread(${1:clientNum})"},
	{ "trigger": "report_num_effects\t#using scripts\\shared\\fx_shared;", "contents": "fx::report_num_effects()"},
	{ "trigger": "loop_sound\t#using scripts\\shared\\fx_shared;", "contents": "fx::loop_sound(${1:clientNum})"},
	{ "trigger": "lightning\t#using scripts\\shared\\fx_shared;", "contents": "fx::lightning(${1:normalFunc}, ${2:flashFunc})"},
	{ "trigger": "loop_thread\t#using scripts\\shared\\fx_shared;", "contents": "fx::loop_thread(${1:clientNum})"},
	{ "trigger": "loop_stop\t#using scripts\\shared\\fx_shared;", "contents": "fx::loop_stop(${1:clientNum}, ${2:timeout})"},
	{ "trigger": "create_looper\t#using scripts\\shared\\fx_shared;", "contents": "fx::create_looper(${1:clientNum})"},
	{ "trigger": "loop\t#using scripts\\shared\\fx_shared;", "contents": "fx::loop(${1:clientNum})"},
	{ "trigger": "create_trigger\t#using scripts\\shared\\fx_shared;", "contents": "fx::create_trigger(${1:clientNum})"},
	{ "trigger": "blinky_light\t#using scripts\\shared\\fx_shared; self == equipment", "contents": "fx::blinky_light(${1:localClientNum}, ${2:tagName}, ${3:friendlyfx}, ${4:enemyfx})"},
	{ "trigger": "stop_blinky_light\t#using scripts\\shared\\fx_shared;", "contents": "fx::stop_blinky_light(${1:localClientNum})"},
	{ "trigger": "blinky_emp_wait\t#using scripts\\shared\\fx_shared;", "contents": "fx::blinky_emp_wait(${1:localClientNum})"},
	{ "trigger": "set\t#using scripts\\shared\\flagsys_shared;", "contents": "flagsys::set(${1:str_flag})"},
	{ "trigger": "set_for_time\t#using scripts\\shared\\flagsys_shared;", "contents": "flagsys::set_for_time(${1:n_time}, ${2:str_flag})"},
	{ "trigger": "clear\t#using scripts\\shared\\flagsys_shared;", "contents": "flagsys::clear(${1:str_flag})"},
	{ "trigger": "set_val\t#using scripts\\shared\\flagsys_shared;", "contents": "flagsys::set_val(${1:str_flag}, ${2:b_val})"},
	{ "trigger": "toggle\t#using scripts\\shared\\flagsys_shared;", "contents": "flagsys::toggle(${1:str_flag})"},
	{ "trigger": "get\t#using scripts\\shared\\flagsys_shared;", "contents": "flagsys::get(${1:str_flag})"},
	{ "trigger": "wait_till\t#using scripts\\shared\\flagsys_shared;", "contents": "flagsys::wait_till(${1:str_flag})"},
	{ "trigger": "wait_till_timeout\t#using scripts\\shared\\flagsys_shared;", "contents": "flagsys::wait_till_timeout(${1:n_timeout}, ${2:str_flag})"},
	{ "trigger": "wait_till_all\t#using scripts\\shared\\flagsys_shared;", "contents": "flagsys::wait_till_all(${1:a_flags})"},
	{ "trigger": "wait_till_all_timeout\t#using scripts\\shared\\flagsys_shared;", "contents": "flagsys::wait_till_all_timeout(${1:n_timeout}, ${2:a_flags})"},
	{ "trigger": "wait_till_any\t#using scripts\\shared\\flagsys_shared;", "contents": "flagsys::wait_till_any(${1:a_flags})"},
	{ "trigger": "wait_till_any_timeout\t#using scripts\\shared\\flagsys_shared;", "contents": "flagsys::wait_till_any_timeout(${1:n_timeout}, ${2:a_flags})"},
	{ "trigger": "wait_till_clear\t#using scripts\\shared\\flagsys_shared;", "contents": "flagsys::wait_till_clear(${1:str_flag})"},
	{ "trigger": "wait_till_clear_timeout\t#using scripts\\shared\\flagsys_shared;", "contents": "flagsys::wait_till_clear_timeout(${1:n_timeout}, ${2:str_flag})"},
	{ "trigger": "wait_till_clear_all\t#using scripts\\shared\\flagsys_shared;", "contents": "flagsys::wait_till_clear_all(${1:a_flags})"},
	{ "trigger": "wait_till_clear_all_timeout\t#using scripts\\shared\\flagsys_shared;", "contents": "flagsys::wait_till_clear_all_timeout(${1:n_timeout}, ${2:a_flags})"},
	{ "trigger": "wait_till_clear_any\t#using scripts\\shared\\flagsys_shared;", "contents": "flagsys::wait_till_clear_any(${1:a_flags})"},
	{ "trigger": "wait_till_clear_any_timeout\t#using scripts\\shared\\flagsys_shared;", "contents": "flagsys::wait_till_clear_any_timeout(${1:n_timeout}, ${2:a_flags})"},
	{ "trigger": "delete\t#using scripts\\shared\\flagsys_shared;", "contents": "flagsys::delete(${1:str_flag})"},
	{ "trigger": "spawned\t#using scripts\\shared\\weapons\\spike_charge;", "contents": "sticky_grenade::spawned(${1:localClientNum})"},
	{ "trigger": "spawned_spike_charge\t#using scripts\\shared\\weapons\\spike_charge;", "contents": "sticky_grenade::spawned_spike_charge(${1:localClientNum})"},
	{ "trigger": "fx_think\t#using scripts\\shared\\weapons\\spike_charge;", "contents": "sticky_grenade::fx_think(${1:localClientNum})"},
	{ "trigger": "start_light_fx\t#using scripts\\shared\\weapons\\spike_charge;", "contents": "sticky_grenade::start_light_fx(${1:localClientNum})"},
	{ "trigger": "stop_light_fx\t#using scripts\\shared\\weapons\\spike_charge;", "contents": "sticky_grenade::stop_light_fx(${1:localClientNum})"},
	{ "trigger": "spike_detonation\t#using scripts\\shared\\weapons\\spike_charge;", "contents": "sticky_grenade::spike_detonation(${1:localClientNum})"},
	{ "trigger": "sticky_indicator\t#using scripts\\shared\\weapons\\spike_charge;", "contents": "sticky_grenade::sticky_indicator(${1:player}, ${2:localClientNum})"},
	{ "trigger": "fullscreen_fx\t#using scripts\\shared\\weapons\\spike_charge;", "contents": "sticky_grenade::fullscreen_fx(${1:localClientNum})"},
	{ "trigger": "spawned\t#using scripts\\shared\\weapons\\_sticky_grenade;", "contents": "sticky_grenade::spawned(${1:localClientNum})"},
	{ "trigger": "stop_sound_on_ent_shutdown\t#using scripts\\shared\\weapons\\_sticky_grenade;", "contents": "sticky_grenade::stop_sound_on_ent_shutdown(${1:handle})"},
	{ "trigger": "fx_think\t#using scripts\\shared\\weapons\\_sticky_grenade;", "contents": "sticky_grenade::fx_think(${1:localClientNum})"},
	{ "trigger": "start_light_fx\t#using scripts\\shared\\weapons\\_sticky_grenade;", "contents": "sticky_grenade::start_light_fx(${1:localClientNum})"},
	{ "trigger": "stop_light_fx\t#using scripts\\shared\\weapons\\_sticky_grenade;", "contents": "sticky_grenade::stop_light_fx(${1:localClientNum})"},
	{ "trigger": "sticky_indicator\t#using scripts\\shared\\weapons\\_sticky_grenade;", "contents": "sticky_grenade::sticky_indicator(${1:player}, ${2:localClientNum})"},
	{ "trigger": "stick_indicator_watch_early_shutdown\t#using scripts\\shared\\weapons\\_sticky_grenade;", "contents": "sticky_grenade::stick_indicator_watch_early_shutdown(${1:stickyImageModel})"},
	{ "trigger": "fullscreen_fx\t#using scripts\\shared\\weapons\\_sticky_grenade;", "contents": "sticky_grenade::fullscreen_fx(${1:localClientNum})"},
	{ "trigger": "localplayer_spawned\t#using scripts\\shared\\blood;", "contents": "blood::localplayer_spawned(${1:localClientNum})"},
	{ "trigger": "player_watch_blood_shutdown\t#using scripts\\shared\\blood;", "contents": "blood::player_watch_blood_shutdown(${1:localClientNum})"},
	{ "trigger": "enable_blood\t#using scripts\\shared\\blood;", "contents": "blood::enable_blood(${1:localClientNum})"},
	{ "trigger": "disable_blood\t#using scripts\\shared\\blood;", "contents": "blood::disable_blood(${1:localClientNum})"},
	{ "trigger": "blood_in\t#using scripts\\shared\\blood;", "contents": "blood::blood_in(${1:localClientNum}, ${2:playerHealth})"},
	{ "trigger": "blood_out\t#using scripts\\shared\\blood;", "contents": "blood::blood_out(${1:localClientNum})"},
	{ "trigger": "player_watch_blood\t#using scripts\\shared\\blood;", "contents": "blood::player_watch_blood(${1:localClientNum})"},
	{ "trigger": "SetControllerLightBarColorPulsing\t#using scripts\\shared\\blood;", "contents": "blood::SetControllerLightBarColorPulsing(${1:localClientNum}, ${2:color}, ${3:pulseRate})"},
	{ "trigger": "satchel_spawned\t#using scripts\\shared\\weapons\\_satchel_charge; self == the grenade", "contents": "satchel_charge::satchel_spawned(${1:localClientNum})"},
	{ "trigger": "register\t#using scripts\\shared\\clientfield_shared;", "contents": "clientfield::register(${1:str_pool_name}, ${2:str_name}, ${3:n_version}, ${4:n_bits}, ${5:str_type}, ${6:func_callback}, ${7:b_host}, ${8:b_callback_for_zero_when_new})"},
	{ "trigger": "get\t#using scripts\\shared\\clientfield_shared;", "contents": "clientfield::get(${1:field_name})"},
	{ "trigger": "get_to_player\t#using scripts\\shared\\clientfield_shared;", "contents": "clientfield::get_to_player(${1:field_name})"},
	{ "trigger": "get_player_uimodel\t#using scripts\\shared\\clientfield_shared;", "contents": "clientfield::get_player_uimodel(${1:field_name})"},
	{ "trigger": "spawnedScrambler\t#using scripts\\shared\\weapons\\_scrambler;", "contents": "scrambler::spawnedScrambler(${1:localClientNum}, ${2:set})"},
	{ "trigger": "spawnedGlobalScramber\t#using scripts\\shared\\weapons\\_scrambler;", "contents": "scrambler::spawnedGlobalScramber(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "spawned\t#using scripts\\shared\\weapons\\_scrambler;", "contents": "scrambler::spawned(${1:localClientNum}, ${2:set}, ${3:isLocalized})"},
	{ "trigger": "spawnedPerClient\t#using scripts\\shared\\weapons\\_scrambler;", "contents": "scrambler::spawnedPerClient(${1:localClientNum}, ${2:isLocalized}, ${3:scramblerHandle})"},
	{ "trigger": "scramblerUpdate\t#using scripts\\shared\\weapons\\_scrambler;", "contents": "scrambler::scramblerUpdate(${1:localClientNum})"},
	{ "trigger": "cleanUpScramblerOnDelete\t#using scripts\\shared\\weapons\\_scrambler;", "contents": "scrambler::cleanUpScramblerOnDelete(${1:scramblerEnt}, ${2:scramblerHandle}, ${3:isLocalized}, ${4:localClientNum})"},
	{ "trigger": "isEnemyScrambler\t#using scripts\\shared\\weapons\\_scrambler;", "contents": "scrambler::isEnemyScrambler(${1:localClientNum})"},
	{ "trigger": "checkForPlayerSwitch\t#using scripts\\shared\\weapons\\_scrambler;", "contents": "scrambler::checkForPlayerSwitch()"},
	{ "trigger": "restartSound\t#using scripts\\shared\\weapons\\_scrambler;", "contents": "scrambler::restartSound(${1:isEnemy})"},
	{ "trigger": "set_default_callbacks\t#using scripts\\zm\\_callbacks;", "contents": "callback::set_default_callbacks()"},
	{ "trigger": "localclientconnect\t#using scripts\\zm\\_callbacks;", "contents": "callback::localclientconnect(${1:localClientNum})"},
	{ "trigger": "playerspawned\t#using scripts\\zm\\_callbacks;", "contents": "callback::playerspawned(${1:localClientNum})"},
	{ "trigger": "entityspawned\t#using scripts\\zm\\_callbacks;", "contents": "callback::entityspawned(${1:localClientNum})"},
	{ "trigger": "host_migration\t#using scripts\\zm\\_callbacks;", "contents": "callback::host_migration(${1:localClientNum})"},
	{ "trigger": "prevent_round_switch_animation\t#using scripts\\zm\\_callbacks;", "contents": "callback::prevent_round_switch_animation()"},
	{ "trigger": "callback\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::callback(${1:event}, ${2:localclientnum}, ${3:params})"},
	{ "trigger": "entity_callback\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::entity_callback(${1:event}, ${2:localclientnum}, ${3:params})"},
	{ "trigger": "add_callback\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::add_callback(${1:event}, ${2:func}, ${3:obj})"},
	{ "trigger": "add_entity_callback\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::add_entity_callback(${1:event}, ${2:func}, ${3:obj})"},
	{ "trigger": "remove_callback_on_death\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::remove_callback_on_death(${1:event}, ${2:func})"},
	{ "trigger": "remove_callback\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::remove_callback(${1:event}, ${2:func}, ${3:obj})"},
	{ "trigger": "on_localclient_connect\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::on_localclient_connect(${1:func}, ${2:obj})"},
	{ "trigger": "on_localclient_shutdown\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::on_localclient_shutdown(${1:func}, ${2:obj})"},
	{ "trigger": "on_localplayer_spawned\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::on_localplayer_spawned(${1:func}, ${2:obj})"},
	{ "trigger": "remove_on_localplayer_spawned\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::remove_on_localplayer_spawned(${1:func}, ${2:obj})"},
	{ "trigger": "on_spawned\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::on_spawned(${1:func}, ${2:obj})"},
	{ "trigger": "remove_on_spawned\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::remove_on_spawned(${1:func}, ${2:obj})"},
	{ "trigger": "on_shutdown\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::on_shutdown(${1:func}, ${2:obj})"},
	{ "trigger": "on_start_gametype\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::on_start_gametype(${1:func}, ${2:obj})"},
	{ "trigger": "CodeCallback_PreInitialization\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_PreInitialization()"},
	{ "trigger": "CodeCallback_FinalizeInitialization\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_FinalizeInitialization()"},
	{ "trigger": "CodeCallback_StateChange\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_StateChange(${1:clientNum}, ${2:system}, ${3:newState})"},
	{ "trigger": "CodeCallback_MapRestart\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_MapRestart()"},
	{ "trigger": "CodeCallback_LocalClientConnect\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_LocalClientConnect(${1:localClientNum})"},
	{ "trigger": "CodeCallback_LocalClientDisconnect\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_LocalClientDisconnect(${1:clientNum})"},
	{ "trigger": "CodeCallback_GlassSmash\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_GlassSmash(${1:org}, ${2:dir})"},
	{ "trigger": "CodeCallback_SoundSetAmbientState\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_SoundSetAmbientState(${1:ambientRoom}, ${2:ambientPackage}, ${3:roomColliderCent}, ${4:packageColliderCent}, ${5:defaultRoom})"},
	{ "trigger": "CodeCallback_SoundSetAiAmbientState\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_SoundSetAiAmbientState(${1:triggers}, ${2:actors}, ${3:numTriggers})"},
	{ "trigger": "CodeCallback_SoundPlayUiDecodeLoop\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_SoundPlayUiDecodeLoop(${1:decodeString}, ${2:playTimeMs})"},
	{ "trigger": "CodeCallback_PlayerSpawned\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_PlayerSpawned(${1:localClientNum})"},
	{ "trigger": "CodeCallback_GibEvent\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_GibEvent(${1:localClientNum}, ${2:type}, ${3:locations})"},
	{ "trigger": "CodeCallback_PrecacheGameType\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_PrecacheGameType()"},
	{ "trigger": "CodeCallback_StartGameType\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_StartGameType()"},
	{ "trigger": "CodeCallback_EntitySpawned\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_EntitySpawned(${1:localClientNum})"},
	{ "trigger": "CodeCallback_SoundNotify\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_SoundNotify(${1:localClientNum}, ${2:entity}, ${3:note})"},
	{ "trigger": "CodeCallback_EntityShutdown\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_EntityShutdown(${1:localClientNum}, ${2:entity})"},
	{ "trigger": "CodeCallback_LocalClientShutdown\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_LocalClientShutdown(${1:localClientNum}, ${2:entity})"},
	{ "trigger": "CodeCallback_LocalClientChanged\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_LocalClientChanged(${1:localClientNum}, ${2:entity})"},
	{ "trigger": "CodeCallback_AirSupport\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_AirSupport(${1:localClientNum}, ${2:x}, ${3:y}, ${4:z}, ${5:type}, ${6:yaw}, ${7:team}, ${8:teamfaction}, ${9:owner}, ${10:exittype}, ${11:time}, ${12:height})"},
	{ "trigger": "CodeCallback_DemoJump\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_DemoJump(${1:localClientNum}, ${2:time})"},
	{ "trigger": "CodeCallback_DemoPlayerSwitch\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_DemoPlayerSwitch(${1:localClientNum})"},
	{ "trigger": "CodeCallback_PlayerSwitch\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_PlayerSwitch(${1:localClientNum})"},
	{ "trigger": "CodeCallback_KillcamBegin\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_KillcamBegin(${1:localClientNum}, ${2:time})"},
	{ "trigger": "CodeCallback_KillcamEnd\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_KillcamEnd(${1:localClientNum}, ${2:time})"},
	{ "trigger": "CodeCallback_CreatingCorpse\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_CreatingCorpse(${1:localClientNum}, ${2:player})"},
	{ "trigger": "CodeCallback_PlayerFoliage\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_PlayerFoliage(${1:client_num}, ${2:player}, ${3:firstperson}, ${4:quiet})"},
	{ "trigger": "CodeCallback_ActivateExploder\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_ActivateExploder(${1:exploder_id})"},
	{ "trigger": "CodeCallback_DeactivateExploder\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_DeactivateExploder(${1:exploder_id})"},
	{ "trigger": "CodeCallback_ChargesHotWeaponSoundNotify\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_ChargesHotWeaponSoundNotify(${1:localClientNum}, ${2:weapon}, ${3:chargeShotLevel})"},
	{ "trigger": "CodeCallback_HostMigration\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_HostMigration(${1:localClientNum})"},
	{ "trigger": "CodeCallback_DogSoundNotify\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_DogSoundNotify(${1:client_num}, ${2:entity}, ${3:note})"},
	{ "trigger": "CodeCallback_PlayAIFootstep\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_PlayAIFootstep(${1:client_num}, ${2:pos}, ${3:surface}, ${4:notetrack}, ${5:bone})"},
	{ "trigger": "CodeCallback_PlayLightLoopExploder\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_PlayLightLoopExploder(${1:exploderIndex})"},
	{ "trigger": "CodeCallback_StopLightLoopExploder\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_StopLightLoopExploder(${1:exploderIndex})"},
	{ "trigger": "CodeCallback_ClientFlag\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_ClientFlag(${1:localClientNum}, ${2:flag}, ${3:set})"},
	{ "trigger": "CodeCallback_ClientFlagAsVal\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_ClientFlagAsVal(${1:localClientNum}, ${2:val})"},
	{ "trigger": "CodeCallback_ExtraCamRenderHero\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_ExtraCamRenderHero(${1:localClientNum}, ${2:jobIndex}, ${3:extraCamIndex}, ${4:sessionMode}, ${5:characterIndex})"},
	{ "trigger": "CodeCallback_ExtraCamRenderLobbyClientHero\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_ExtraCamRenderLobbyClientHero(${1:localClientNum}, ${2:jobIndex}, ${3:extraCamIndex}, ${4:sessionMode})"},
	{ "trigger": "CodeCallback_ExtraCamRenderCurrentHeroHeadshot\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_ExtraCamRenderCurrentHeroHeadshot(${1:localClientNum}, ${2:jobIndex}, ${3:extraCamIndex}, ${4:sessionMode}, ${5:characterIndex}, ${6:isDefaultHero})"},
	{ "trigger": "CodeCallback_ExtraCamRenderCharacterBodyItem\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_ExtraCamRenderCharacterBodyItem(${1:localClientNum}, ${2:jobIndex}, ${3:extraCamIndex}, ${4:sessionMode}, ${5:characterIndex}, ${6:itemIndex}, ${7:defaultItemRender})"},
	{ "trigger": "CodeCallback_ExtraCamRenderCharacterBodyItem\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_ExtraCamRenderCharacterBodyItem(${1:localClientNum}, ${2:jobIndex}, ${3:extraCamIndex}, ${4:sessionMode}, ${5:characterIndex}, ${6:itemIndex})"},
	{ "trigger": "CodeCallback_ExtraCamRenderCharacterHelmetItem\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_ExtraCamRenderCharacterHelmetItem(${1:localClientNum}, ${2:jobIndex}, ${3:extraCamIndex}, ${4:sessionMode}, ${5:characterIndex}, ${6:itemIndex}, ${7:defaultItemRender})"},
	{ "trigger": "CodeCallback_ExtraCamRenderCharacterHelmetItem\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_ExtraCamRenderCharacterHelmetItem(${1:localClientNum}, ${2:jobIndex}, ${3:extraCamIndex}, ${4:sessionMode}, ${5:characterIndex}, ${6:itemIndex})"},
	{ "trigger": "CodeCallback_ExtraCamRenderCharacterHeadItem\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_ExtraCamRenderCharacterHeadItem(${1:localClientNum}, ${2:jobIndex}, ${3:extraCamIndex}, ${4:sessionMode}, ${5:headIndex}, ${6:defaultItemRender})"},
	{ "trigger": "CodeCallback_ExtraCamRenderCharacterHeadItem\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_ExtraCamRenderCharacterHeadItem(${1:localClientNum}, ${2:jobIndex}, ${3:extraCamIndex}, ${4:sessionMode}, ${5:headIndex})"},
	{ "trigger": "CodeCallback_ExtraCamRenderOutfitPreview\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_ExtraCamRenderOutfitPreview(${1:localClientNum}, ${2:jobIndex}, ${3:extraCamIndex}, ${4:sessionMode}, ${5:outfitIndex})"},
	{ "trigger": "CodeCallback_ExtraCamRenderWCPaintjobIcon\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_ExtraCamRenderWCPaintjobIcon(${1:localClientNum}, ${2:extraCamIndex}, ${3:jobIndex}, ${4:attachmentVariantString}, ${5:weaponOptions}, ${6:weaponPlusAttachments}, ${7:loadoutSlot}, ${8:paintjobIndex}, ${9:paintjobSlot}, ${10:isFilesharePreview})"},
	{ "trigger": "CodeCallback_ExtraCamRenderWCVariantIcon\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_ExtraCamRenderWCVariantIcon(${1:localClientNum}, ${2:extraCamIndex}, ${3:jobIndex}, ${4:attachmentVariantString}, ${5:weaponOptions}, ${6:weaponPlusAttachments}, ${7:loadoutSlot}, ${8:paintjobIndex}, ${9:paintjobSlot}, ${10:isFilesharePreview})"},
	{ "trigger": "CodeCallback_CollectiblesChanged\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_CollectiblesChanged(${1:changedClient}, ${2:collectiblesArray}, ${3:localClientNum})"},
	{ "trigger": "add_weapon_type\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::add_weapon_type(${1:weapontype}, ${2:callback})"},
	{ "trigger": "spawned_weapon_type\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::spawned_weapon_type(${1:localClientNum})"},
	{ "trigger": "CodeCallback_CallClientScript\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_CallClientScript(${1:pSelf}, ${2:label}, ${3:param})"},
	{ "trigger": "CodeCallback_CallClientScriptOnLevel\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_CallClientScriptOnLevel(${1:label}, ${2:param})"},
	{ "trigger": "CodeCallback_ServerSceneInit\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_ServerSceneInit(${1:scene_name})"},
	{ "trigger": "CodeCallback_ServerScenePlay\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_ServerScenePlay(${1:scene_name})"},
	{ "trigger": "CodeCallback_ServerSceneStop\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_ServerSceneStop(${1:scene_name})"},
	{ "trigger": "scene_black_screen\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::scene_black_screen()"},
	{ "trigger": "CodeCallback_GadgetVisionPulse_Reveal\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_GadgetVisionPulse_Reveal(${1:local_client_num}, ${2:entity}, ${3:bReveal})"},
	{ "trigger": "tesla_fx_rail\t#using scripts\\zm\\_zm_weap_tesla;", "contents": "_zm_weap_tesla::tesla_fx_rail(${1:localclientnum})"},
	{ "trigger": "tesla_fx_tube\t#using scripts\\zm\\_zm_weap_tesla; self = player", "contents": "_zm_weap_tesla::tesla_fx_tube(${1:localclientnum})"},
	{ "trigger": "tesla_notetrack_think\t#using scripts\\zm\\_zm_weap_tesla;", "contents": "_zm_weap_tesla::tesla_notetrack_think()"},
	{ "trigger": "tesla_happy\t#using scripts\\zm\\_zm_weap_tesla;", "contents": "_zm_weap_tesla::tesla_happy(${1:localclientnum})"},
	{ "trigger": "tesla_change_watcher\t#using scripts\\zm\\_zm_weap_tesla; self = player", "contents": "_zm_weap_tesla::tesla_change_watcher(${1:localclientnum})"},
	{ "trigger": "clear_tesla_tube_effect\t#using scripts\\zm\\_zm_weap_tesla; self = player", "contents": "_zm_weap_tesla::clear_tesla_tube_effect(${1:localclientnum})"},
	{ "trigger": "is_beam_raygun\t#using scripts\\zm\\_zm_weap_raygun_mark3;", "contents": "_zm_weap_raygun_mark3::is_beam_raygun(${1:weapon})"},
	{ "trigger": "monitor_raygun_mark3\t#using scripts\\zm\\_zm_weap_raygun_mark3;", "contents": "_zm_weap_raygun_mark3::monitor_raygun_mark3(${1:n_local_client})"},
	{ "trigger": "glow_monitor\t#using scripts\\zm\\_zm_weap_raygun_mark3;", "contents": "_zm_weap_raygun_mark3::glow_monitor(${1:n_local_client})"},
	{ "trigger": "waittill_notetrack\t#using scripts\\zm\\_zm_weap_raygun_mark3;", "contents": "_zm_weap_raygun_mark3::waittill_notetrack(${1:str_notetrack})"},
	{ "trigger": "vortex_shake_and_rumble\t#using scripts\\zm\\_zm_weap_raygun_mark3;", "contents": "_zm_weap_raygun_mark3::vortex_shake_and_rumble(${1:n_local_client}, ${2:n_damage_level})"},
	{ "trigger": "zombie_blacken\t#using scripts\\zm\\_zm_weap_raygun_mark3;", "contents": "_zm_weap_raygun_mark3::zombie_blacken(${1:n_local_client}, ${2:b_blacken})"},
	{ "trigger": "enable_additional_primary_weapon_perk_for_level\t#using scripts\\zm\\_zm_perk_additionalprimaryweapon;", "contents": "zm_perk_additionalprimaryweapon::enable_additional_primary_weapon_perk_for_level()"},
	{ "trigger": "additional_primary_weapon_client_field_func\t#using scripts\\zm\\_zm_perk_additionalprimaryweapon;", "contents": "zm_perk_additionalprimaryweapon::additional_primary_weapon_client_field_func()"},
	{ "trigger": "additional_primary_weapon_code_callback_func\t#using scripts\\zm\\_zm_perk_additionalprimaryweapon;", "contents": "zm_perk_additionalprimaryweapon::additional_primary_weapon_code_callback_func()"},
	{ "trigger": "zombie_nuked\t#using scripts\\zm\\_zm_powerup_nuke;", "contents": "zm_powerup_nuke::zombie_nuked(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	]
}