{
	"scope": "source.gsc",
	"completions":
[	
	"#using scripts\\zm\\craftables\\_zm_craftables;",
	"#using scripts\\zm\\craftables\\_zm_craft_shield;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_active_camo;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_armor;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_cacophany;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_camo;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_cleanse;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_clone;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_combat_efficiency;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_concussive_wave;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_drone;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_es_strike;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_exo_breakdown;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_firefly_swarm;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_flashback;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_forced_malfunction;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_hacker;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_heat_wave;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_hero_weapon;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_iff_override;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_immolation;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_infrared;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_misdirection;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_mrpukey;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_multirocket;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_other;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_overdrive;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_rapid_strike;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_ravage_core;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_resurrect;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_roulette;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_security_breach;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_sensory_overload;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_servo_shortout;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_shield;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_shock_field;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_smokescreen;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_speed_burst;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_surge;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_system_overload;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_thief;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_turret_deploy;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_unstoppable_force;",
	"#using scripts\\shared\\abilities\\gadgets\\_gadget_vision_pulse;",
	"#using scripts\\zm\\aats\\_zm_aat_blast_furnace;",
	"#using scripts\\zm\\aats\\_zm_aat_dead_wire;",
	"#using scripts\\zm\\aats\\_zm_aat_fire_works;",
	"#using scripts\\zm\\aats\\_zm_aat_thunder_wall;",
	"#using scripts\\zm\\aats\\_zm_aat_turned;",
	"#using scripts\\codescripts\\struct;",
	"#using scripts\\zm\\zm_giant;",
	"#using scripts\\zm\\zm_giant_cleanup_mgr;",
	"#using scripts\\zm\\zm_giant_fx;",
	"#using scripts\\zm\\zm_giant_teleporter;",
	"#using scripts\\zm\\zm_usermap;",
	"#using scripts\\zm\\_art;",
	"#using scripts\\zm\\_callbacks;",
	"#using scripts\\zm\\_destructible;",
	"#using scripts\\zm\\_fx;",
	"#using scripts\\zm\\_load;",
	"#using scripts\\zm\\_util;",
	"#using scripts\\zm\\_zm;",
	"#using scripts\\zm\\_zm_ai_dogs;",
	"#using scripts\\zm\\_zm_ai_faller;",
	"#using scripts\\zm\\_zm_attackables;",
	"#using scripts\\zm\\_zm_audio;",
	"#using scripts\\zm\\_zm_behavior - Copy;",
	"#using scripts\\zm\\_zm_behavior;",
	"#using scripts\\zm\\_zm_behavior3;",
	"#using scripts\\zm\\_zm_behavior_utility;",
	"#using scripts\\zm\\_zm_bgb;",
	"#using scripts\\zm\\_zm_bgb_machine;",
	"#using scripts\\zm\\_zm_blockers;",
	"#using scripts\\zm\\_zm_clone;",
	"#using scripts\\zm\\_zm_daily_challenges;",
	"#using scripts\\zm\\_zm_equipment;",
	"#using scripts\\zm\\_zm_ffotd;",
	"#using scripts\\zm\\_zm_game_module;",
	"#using scripts\\zm\\_zm_game_module_utility;",
	"#using scripts\\zm\\_zm_hero_weapon;",
	"#using scripts\\zm\\_zm_jump_pad;",
	"#using scripts\\zm\\_zm_laststand;",
	"#using scripts\\zm\\_zm_lightning_chain;",
	"#using scripts\\zm\\_zm_magicbox;",
	"#using scripts\\zm\\_zm_melee_weapon;",
	"#using scripts\\zm\\_zm_mgturret;",
	"#using scripts\\zm\\_zm_net;",
	"#using scripts\\zm\\_zm_pack_a_punch;",
	"#using scripts\\zm\\_zm_pack_a_punch_util;",
	"#using scripts\\zm\\_zm_perks;",
	"#using scripts\\zm\\_zm_perk_additionalprimaryweapon;",
	"#using scripts\\zm\\_zm_perk_deadshot;",
	"#using scripts\\zm\\_zm_perk_doubletap2;",
	"#using scripts\\zm\\_zm_perk_electric_cherry;",
	"#using scripts\\zm\\_zm_perk_juggernaut;",
	"#using scripts\\zm\\_zm_perk_quick_revive;",
	"#using scripts\\zm\\_zm_perk_sleight_of_hand;",
	"#using scripts\\zm\\_zm_perk_staminup;",
	"#using scripts\\zm\\_zm_perk_widows_wine;",
	"#using scripts\\zm\\_zm_pers_upgrades;",
	"#using scripts\\zm\\_zm_pers_upgrades_functions;",
	"#using scripts\\zm\\_zm_placeable_mine;",
	"#using scripts\\zm\\_zm_playerhealth;",
	"#using scripts\\zm\\_zm_power;",
	"#using scripts\\zm\\_zm_powerups;",
	"#using scripts\\zm\\_zm_powerup_bonfire_sale;",
	"#using scripts\\zm\\_zm_powerup_carpenter;",
	"#using scripts\\zm\\_zm_powerup_double_points;",
	"#using scripts\\zm\\_zm_powerup_fire_sale;",
	"#using scripts\\zm\\_zm_powerup_free_perk;",
	"#using scripts\\zm\\_zm_powerup_full_ammo;",
	"#using scripts\\zm\\_zm_powerup_insta_kill;",
	"#using scripts\\zm\\_zm_powerup_nuke;",
	"#using scripts\\zm\\_zm_powerup_shield_charge;",
	"#using scripts\\zm\\_zm_powerup_weapon_minigun;",
	"#using scripts\\zm\\_zm_powerup_ww_grenade;",
	"#using scripts\\zm\\_zm_score;",
	"#using scripts\\zm\\_zm_server_throttle;",
	"#using scripts\\zm\\_zm_spawner;",
	"#using scripts\\zm\\_zm_stats;",
	"#using scripts\\zm\\_zm_timer;",
	"#using scripts\\zm\\_zm_traps;",
	"#using scripts\\zm\\_zm_trap_electric;",
	"#using scripts\\zm\\_zm_unitrigger;",
	"#using scripts\\zm\\_zm_utility;",
	"#using scripts\\zm\\_zm_weapons;",
	"#using scripts\\zm\\_zm_weap_annihilator;",
	"#using scripts\\zm\\_zm_weap_ballistic_knife;",
	"#using scripts\\zm\\_zm_weap_bouncingbetty;",
	"#using scripts\\zm\\_zm_weap_cymbal_monkey;",
	"#using scripts\\zm\\_zm_weap_gravityspikes;",
	"#using scripts\\zm\\_zm_weap_octobomb;",
	"#using scripts\\zm\\_zm_weap_raygun_mark3;",
	"#using scripts\\zm\\_zm_weap_riotshield;",
	"#using scripts\\zm\\_zm_weap_rocketshield;",
	"#using scripts\\zm\\_zm_weap_tesla;",
	"#using scripts\\zm\\_zm_weap_thundergun;",
	"#using scripts\\zm\\_zm_zonemgr;",
	"#using scripts\\shared\\weapons\\antipersonnelguidance;",
	"#using scripts\\shared\\weapons\\grapple;",
	"#using scripts\\shared\\weapons\\multilockapguidance;",
	"#using scripts\\shared\\weapons\\replay_gun;",
	"#using scripts\\shared\\weapons\\_acousticsensor;",
	"#using scripts\\shared\\weapons\\_ballistic_knife;",
	"#using scripts\\shared\\weapons\\_bouncingbetty;",
	"#using scripts\\shared\\weapons\\_decoy;",
	"#using scripts\\shared\\weapons\\_empgrenade;",
	"#using scripts\\shared\\weapons\\_flashgrenades;",
	"#using scripts\\shared\\weapons\\_hacker_tool;",
	"#using scripts\\shared\\weapons\\_heatseekingmissile;",
	"#using scripts\\shared\\weapons\\_hive_gun;",
	"#using scripts\\shared\\weapons\\_lightninggun;",
	"#using scripts\\shared\\weapons\\_pineapple_gun;",
	"#using scripts\\shared\\weapons\\_proximity_grenade;",
	"#using scripts\\shared\\weapons\\_riotshield;",
	"#using scripts\\shared\\weapons\\_satchel_charge;",
	"#using scripts\\shared\\weapons\\_scrambler;",
	"#using scripts\\shared\\weapons\\_sensor_grenade;",
	"#using scripts\\shared\\weapons\\_smokegrenade;",
	"#using scripts\\shared\\weapons\\_spike_charge_siegebot;",
	"#using scripts\\shared\\weapons\\_sticky_grenade;",
	"#using scripts\\shared\\weapons\\_tabun;",
	"#using scripts\\shared\\weapons\\_tacticalinsertion;",
	"#using scripts\\shared\\weapons\\_trophy_system;",
	"#using scripts\\shared\\weapons\\_weaponobjects;",
	"#using scripts\\shared\\weapons\\_weapons;",
	"#using scripts\\shared\\weapons\\_weapon_utils;",
	"#using scripts\\shared\\bots\\bot_buttons;",
	"#using scripts\\shared\\bots\\bot_traversals;",
	"#using scripts\\shared\\bots\\_bot;",
	"#using scripts\\shared\\bots\\_bot_combat;",
	"#using scripts\\zm\\gametypes\\zclassic;",
	"#using scripts\\zm\\gametypes\\_clientids;",
	"#using scripts\\zm\\gametypes\\_damagefeedback;",
	"#using scripts\\zm\\gametypes\\_globallogic;",
	"#using scripts\\zm\\gametypes\\_globallogic_actor;",
	"#using scripts\\zm\\gametypes\\_globallogic_audio;",
	"#using scripts\\zm\\gametypes\\_globallogic_defaults;",
	"#using scripts\\zm\\gametypes\\_globallogic_player;",
	"#using scripts\\zm\\gametypes\\_globallogic_score;",
	"#using scripts\\zm\\gametypes\\_globallogic_spawn;",
	"#using scripts\\zm\\gametypes\\_globallogic_ui;",
	"#using scripts\\zm\\gametypes\\_globallogic_utils;",
	"#using scripts\\zm\\gametypes\\_globallogic_vehicle;",
	"#using scripts\\zm\\gametypes\\_hostmigration;",
	"#using scripts\\zm\\gametypes\\_hud_message;",
	"#using scripts\\zm\\gametypes\\_perplayer;",
	"#using scripts\\zm\\gametypes\\_serversettings;",
	"#using scripts\\zm\\gametypes\\_shellshock;",
	"#using scripts\\zm\\gametypes\\_spawning;",
	"#using scripts\\zm\\gametypes\\_spawnlogic;",
	"#using scripts\\zm\\gametypes\\_spectating;",
	"#using scripts\\zm\\gametypes\\_weapons;",
	"#using scripts\\zm\\gametypes\\_weapon_utils;",
	"#using scripts\\zm\\gametypes\\_zm_gametype;",
	"#using scripts\\shared\\ai\\systems\\ai_interface;",
	"#using scripts\\shared\\ai\\systems\\behavior_tree_utility;",
	"#using scripts\\shared\\ai\\systems\\blackboard;",
	"#using scripts\\shared\\ai\\systems\\destructible_character;",
	"#using scripts\\shared\\ai\\systems\\gib;",
	"#using scripts\\shared\\ai\\systems\\shared;",
	"#using scripts\\shared\\aat_shared;",
	"#using scripts\\shared\\ai_shared;",
	"#using scripts\\shared\\ai_sniper_shared;",
	"#using scripts\\shared\\ammo_shared;",
	"#using scripts\\shared\\animation_shared;",
	"#using scripts\\shared\\array_shared;",
	"#using scripts\\shared\\audio_shared;",
	"#using scripts\\shared\\bb_shared;",
	"#using scripts\\shared\\callbacks_shared;",
	"#using scripts\\shared\\challenges_shared;",
	"#using scripts\\shared\\clientfield_shared;",
	"#using scripts\\shared\\clientids_shared;",
	"#using scripts\\shared\\colors_shared;",
	"#using scripts\\shared\\compass;",
	"#using scripts\\shared\\containers_shared;",
	"#using scripts\\shared\\damagefeedback_shared;",
	"#using scripts\\shared\\demo_shared;",
	"#using scripts\\shared\\destructible_cover_shared;",
	"#using scripts\\shared\\doors_shared;",
	"#using scripts\\shared\\drown;",
	"#using scripts\\shared\\entityheadicons_shared;",
	"#using scripts\\shared\\exploder_shared;",
	"#using scripts\\shared\\flagsys_shared;",
	"#using scripts\\shared\\flag_shared;",
	"#using scripts\\shared\\floor_collapse_shared;",
	"#using scripts\\shared\\fx_shared;",
	"#using scripts\\shared\\gameobjects_shared;",
	"#using scripts\\shared\\gameskill_shared;",
	"#using scripts\\shared\\hackable;",
	"#using scripts\\shared\\hostmigration_shared;",
	"#using scripts\\shared\\hud_message_shared;",
	"#using scripts\\shared\\hud_shared;",
	"#using scripts\\shared\\hud_util_shared;",
	"#using scripts\\shared\\killcam_shared;",
	"#using scripts\\shared\\killstreaks_shared;",
	"#using scripts\\shared\\laststand_shared;",
	"#using scripts\\shared\\loadout_shared;",
	"#using scripts\\shared\\load_shared;",
	"#using scripts\\shared\\lui_shared;",
	"#using scripts\\shared\\math_shared;",
	"#using scripts\\shared\\medals_shared;",
	"#using scripts\\shared\\music_shared;",
	"#using scripts\\shared\\name_shared;",
	"#using scripts\\shared\\objpoints_shared;",
	"#using scripts\\shared\\persistence_shared;",
	"#using scripts\\shared\\player_shared;",
	"#using scripts\\shared\\popups_shared;",
	"#using scripts\\shared\\rank_shared;",
	"#using scripts\\shared\\scene_shared;",
	"#using scripts\\shared\\scoreevents_shared;",
	"#using scripts\\shared\\scriptbundle_shared;",
	"#using scripts\\shared\\serverfaceanim_shared;",
	"#using scripts\\shared\\simple_hostmigration;",
	"#using scripts\\shared\\sound_shared;",
	"#using scripts\\shared\\spawner_shared;",
	"#using scripts\\shared\\statemachine_shared;",
	"#using scripts\\shared\\string_shared;",
	"#using scripts\\shared\\system_shared;",
	"#using scripts\\shared\\table_shared;",
	"#using scripts\\shared\\teamgather_shared;",
	"#using scripts\\shared\\throttle_shared;",
	"#using scripts\\shared\\traps_shared;",
	"#using scripts\\shared\\trigger_shared;",
	"#using scripts\\shared\\turret_shared;",
	"#using scripts\\shared\\tweakables_shared;",
	"#using scripts\\shared\\util_shared;",
	"#using scripts\\shared\\vehicleriders_shared;",
	"#using scripts\\shared\\vehicle_ai_shared;",
	"#using scripts\\shared\\vehicle_death_shared;",
	"#using scripts\\shared\\vehicle_shared;",
	"#using scripts\\shared\\visionset_mgr_shared;",
	"#using scripts\\shared\\weapons_shared;",
	"#using scripts\\shared\\_burnplayer;",
	"#using scripts\\shared\\_oob;",
	"#using scripts\\shared\\vehicles\\_amws;",
	"#using scripts\\shared\\vehicles\\_auto_turret;",
	"#using scripts\\shared\\vehicles\\_civ_pickup;",
	"#using scripts\\shared\\vehicles\\_counteruav;",
	"#using scripts\\shared\\vehicles\\_croc;",
	"#using scripts\\shared\\vehicles\\_deploy_turret;",
	"#using scripts\\shared\\vehicles\\_dragon_whelp;",
	"#using scripts\\shared\\vehicles\\_escort_drone;",
	"#using scripts\\shared\\vehicles\\_glaive;",
	"#using scripts\\shared\\vehicles\\_hunter;",
	"#using scripts\\shared\\vehicles\\_metal_storm;",
	"#using scripts\\shared\\vehicles\\_parasite;",
	"#using scripts\\shared\\vehicles\\_prowler;",
	"#using scripts\\shared\\vehicles\\_quadrotor;",
	"#using scripts\\shared\\vehicles\\_quadtank;",
	"#using scripts\\shared\\vehicles\\_raps;",
	"#using scripts\\shared\\vehicles\\_scout_drone;",
	"#using scripts\\shared\\vehicles\\_sentinel_drone;",
	"#using scripts\\shared\\vehicles\\_siegebot;",
	"#using scripts\\shared\\vehicles\\_spider;",
	"#using scripts\\shared\\vehicles\\_wasp;",
	"#using scripts\\core\\core_frontend;",
	"#using scripts\\shared\\ai\\archetype_utility;",
	"#using scripts\\shared\\ai\\blackboard_vehicle;",
	"#using scripts\\shared\\ai\\margwa;",
	"#using scripts\\shared\\ai\\zombie_death;",
	"#using scripts\\shared\\ai\\zombie_shared;",
	"#using scripts\\shared\\ai\\zombie_utility;",
	"#using scripts\\shared\\ai\\zombie_vortex;",
	"#using scripts\\core_common\\ai\\systems\\behavior_tree_utility;",
	"#using scripts\\shared\\abilities\\_ability_gadgets;",
	"#using scripts\\shared\\abilities\\_ability_player;",
	"#using scripts\\shared\\abilities\\_ability_power;",
	"#using scripts\\shared\\abilities\\_ability_util;",
	{ "trigger": "registerDvars\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::registerDvars()"},
	{ "trigger": "blank\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::blank(${1:arg1}, ${2:arg2}, ${3:arg3}, ${4:arg4}, ${5:arg5}, ${6:arg6}, ${7:arg7}, ${8:arg8}, ${9:arg9}, ${10:arg10})"},
	{ "trigger": "SetupCallbacks\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::SetupCallbacks()"},
	{ "trigger": "precache_mp_leaderboards\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::precache_mp_leaderboards()"},
	{ "trigger": "compareTeamByGameStat\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::compareTeamByGameStat(${1:gameStat}, ${2:teamA}, ${3:teamB}, ${4:previous_winner_score})"},
	{ "trigger": "determineTeamWinnerByGameStat\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::determineTeamWinnerByGameStat(${1:gameStat})"},
	{ "trigger": "compareTeamByTeamScore\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::compareTeamByTeamScore(${1:teamA}, ${2:teamB}, ${3:previous_winner_score})"},
	{ "trigger": "determineTeamWinnerByTeamScore\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::determineTeamWinnerByTeamScore()"},
	{ "trigger": "forceEnd\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::forceEnd(${1:hostsucks})"},
	{ "trigger": "killserverPc\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::killserverPc()"},
	{ "trigger": "someoneOnEachTeam\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::someoneOnEachTeam()"},
	{ "trigger": "checkIfTeamForfeits\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::checkIfTeamForfeits(${1:team})"},
	{ "trigger": "checkForAnyTeamForfeit\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::checkForAnyTeamForfeit()"},
	{ "trigger": "doSpawnQueueUpdates\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::doSpawnQueueUpdates()"},
	{ "trigger": "isTeamAllDead\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::isTeamAllDead(${1:team})"},
	{ "trigger": "areAllTeamsDead\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::areAllTeamsDead()"},
	{ "trigger": "allDeadTeamCount\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::allDeadTeamCount()"},
	{ "trigger": "doDeadEventUpdates\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::doDeadEventUpdates()"},
	{ "trigger": "isOnlyOneLeftAliveOnTeam\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::isOnlyOneLeftAliveOnTeam(${1:team})"},
	{ "trigger": "doOneLeftEventUpdates\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::doOneLeftEventUpdates()"},
	{ "trigger": "updateGameEvents\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::updateGameEvents()"},
	{ "trigger": "matchStartTimer\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::matchStartTimer()"},
	{ "trigger": "matchStartTimerSkip\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::matchStartTimerSkip()"},
	{ "trigger": "notifyTeamWaveSpawn\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::notifyTeamWaveSpawn(${1:team}, ${2:time})"},
	{ "trigger": "waveSpawnTimer\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::waveSpawnTimer()"},
	{ "trigger": "hostIdledOut\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::hostIdledOut()"},
	{ "trigger": "IncrementMatchCompletionStat\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::IncrementMatchCompletionStat(${1:gameMode}, ${2:playedOrHosted}, ${3:stat})"},
	{ "trigger": "SetMatchCompletionStat\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::SetMatchCompletionStat(${1:gameMode}, ${2:playedOrHosted}, ${3:stat})"},
	{ "trigger": "displayRoundEnd\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::displayRoundEnd(${1:winner}, ${2:endReasonText})"},
	{ "trigger": "displayRoundSwitch\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::displayRoundSwitch(${1:winner}, ${2:endReasonText})"},
	{ "trigger": "displayGameEnd\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::displayGameEnd(${1:winner}, ${2:endReasonText})"},
	{ "trigger": "getEndReasonText\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::getEndReasonText()"},
	{ "trigger": "resetOutcomeForAllPlayers\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::resetOutcomeForAllPlayers()"},
	{ "trigger": "startNextRound\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::startNextRound(${1:winner}, ${2:endReasonText})"},
	{ "trigger": "getGameLength\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::getGameLength()"},
	{ "trigger": "gameHistoryPlayerQuit\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::gameHistoryPlayerQuit()"},
	{ "trigger": "recordZMEndGameComScoreEvent\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::recordZMEndGameComScoreEvent(${1:winner})"},
	{ "trigger": "endGame\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::endGame(${1:winner}, ${2:endReasonText})"},
	{ "trigger": "bbPlayerMatchEnd\t#using scripts\\zm\\gametypes\\_globallogic; self == player", "contents": "globallogic::bbPlayerMatchEnd(${1:gameLength}, ${2:endReasonString}, ${3:gameOver})"},
	{ "trigger": "roundEndWait\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::roundEndWait(${1:defaultDelay}, ${2:matchBonus})"},
	{ "trigger": "roundEndDOF\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::roundEndDOF(${1:time})"},
	{ "trigger": "checkTimeLimit\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::checkTimeLimit()"},
	{ "trigger": "allTeamsUnderScoreLimit\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::allTeamsUnderScoreLimit()"},
	{ "trigger": "checkScoreLimit\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::checkScoreLimit()"},
	{ "trigger": "updateGameTypeDvars\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::updateGameTypeDvars()"},
	{ "trigger": "removeDisconnectedPlayerFromPlacement\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::removeDisconnectedPlayerFromPlacement()"},
	{ "trigger": "updatePlacement\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::updatePlacement()"},
	{ "trigger": "updateTeamPlacement\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::updateTeamPlacement()"},
	{ "trigger": "getPlacementForPlayer\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::getPlacementForPlayer(${1:player})"},
	{ "trigger": "sortDeadPlayers\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::sortDeadPlayers(${1:team})"},
	{ "trigger": "totalAliveCount\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::totalAliveCount()"},
	{ "trigger": "totalPlayerLives\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::totalPlayerLives()"},
	{ "trigger": "resetTeamVariables\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::resetTeamVariables(${1:team})"},
	{ "trigger": "updateTeamStatus\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::updateTeamStatus()"},
	{ "trigger": "checkTeamScoreLimitSoon\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::checkTeamScoreLimitSoon(${1:team})"},
	{ "trigger": "checkPlayerScoreLimitSoon\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::checkPlayerScoreLimitSoon()"},
	{ "trigger": "startGame\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::startGame()"},
	{ "trigger": "waitForPlayers\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::waitForPlayers()"},
	{ "trigger": "prematchPeriod\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::prematchPeriod()"},
	{ "trigger": "gracePeriod\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::gracePeriod()"},
	{ "trigger": "watchMatchEndingSoon\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::watchMatchEndingSoon()"},
	{ "trigger": "assertTeamVariables\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::assertTeamVariables()"},
	{ "trigger": "anyTeamHasWaveDelay\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::anyTeamHasWaveDelay()"},
	{ "trigger": "Callback_StartGameType\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::Callback_StartGameType()"},
	{ "trigger": "registerFriendlyFireDelay\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::registerFriendlyFireDelay(${1:dvarString}, ${2:defaultValue}, ${3:minValue}, ${4:maxValue})"},
	{ "trigger": "checkRoundSwitch\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::checkRoundSwitch()"},
	{ "trigger": "listenForGameEnd\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::listenForGameEnd()"},
	{ "trigger": "getKillStreaks\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::getKillStreaks(${1:player})"},
	{ "trigger": "updateRankedMatch\t#using scripts\\zm\\gametypes\\_globallogic;", "contents": "globallogic::updateRankedMatch(${1:winner})"},
	{ "trigger": "processScoreEvent\t#using scripts\\shared\\scoreevents_shared;", "contents": "scoreevents::processScoreEvent(${1:event}, ${2:player}, ${3:victim}, ${4:weapon})"},
	{ "trigger": "shouldAddRankXP\t#using scripts\\shared\\scoreevents_shared;", "contents": "scoreevents::shouldAddRankXP(${1:player})"},
	{ "trigger": "uninterruptedObitFeedKills\t#using scripts\\shared\\scoreevents_shared;", "contents": "scoreevents::uninterruptedObitFeedKills(${1:attacker}, ${2:weapon})"},
	{ "trigger": "isRegisteredEvent\t#using scripts\\shared\\scoreevents_shared;", "contents": "scoreevents::isRegisteredEvent(${1:type})"},
	{ "trigger": "decrementLastObituaryPlayerCountAfterFade\t#using scripts\\shared\\scoreevents_shared;", "contents": "scoreevents::decrementLastObituaryPlayerCountAfterFade()"},
	{ "trigger": "getScoreEventTableName\t#using scripts\\shared\\scoreevents_shared;", "contents": "scoreevents::getScoreEventTableName()"},
	{ "trigger": "getScoreEventTableID\t#using scripts\\shared\\scoreevents_shared;", "contents": "scoreevents::getScoreEventTableID()"},
	{ "trigger": "getScoreEventColumn\t#using scripts\\shared\\scoreevents_shared;", "contents": "scoreevents::getScoreEventColumn(${1:gameType})"},
	{ "trigger": "getXPEventColumn\t#using scripts\\shared\\scoreevents_shared;", "contents": "scoreevents::getXPEventColumn(${1:gameType})"},
	{ "trigger": "getColumnOffsetForGametype\t#using scripts\\shared\\scoreevents_shared;", "contents": "scoreevents::getColumnOffsetForGametype(${1:gameType})"},
	{ "trigger": "killstreakWeaponsAllowedScore\t#using scripts\\shared\\scoreevents_shared;", "contents": "scoreevents::killstreakWeaponsAllowedScore(${1:type})"},
	{ "trigger": "is_hero_score_event_restricted\t#using scripts\\shared\\scoreevents_shared;", "contents": "scoreevents::is_hero_score_event_restricted(${1:event})"},
	{ "trigger": "giveCrateCaptureMedal\t#using scripts\\shared\\scoreevents_shared;", "contents": "scoreevents::giveCrateCaptureMedal(${1:crate}, ${2:capturer})"},
	{ "trigger": "register_hero_ability_kill_event\t#using scripts\\shared\\scoreevents_shared;", "contents": "scoreevents::register_hero_ability_kill_event(${1:event_func})"},
	{ "trigger": "register_hero_ability_multikill_event\t#using scripts\\shared\\scoreevents_shared;", "contents": "scoreevents::register_hero_ability_multikill_event(${1:event_func})"},
	{ "trigger": "register_hero_weapon_multikill_event\t#using scripts\\shared\\scoreevents_shared;", "contents": "scoreevents::register_hero_weapon_multikill_event(${1:event_func})"},
	{ "trigger": "register_thief_shutdown_enemy_event\t#using scripts\\shared\\scoreevents_shared;", "contents": "scoreevents::register_thief_shutdown_enemy_event(${1:event_func})"},
	{ "trigger": "hero_ability_kill_event\t#using scripts\\shared\\scoreevents_shared;", "contents": "scoreevents::hero_ability_kill_event(${1:ability}, ${2:victim_ability})"},
	{ "trigger": "hero_ability_multikill_event\t#using scripts\\shared\\scoreevents_shared;", "contents": "scoreevents::hero_ability_multikill_event(${1:killcount}, ${2:ability})"},
	{ "trigger": "hero_weapon_multikill_event\t#using scripts\\shared\\scoreevents_shared;", "contents": "scoreevents::hero_weapon_multikill_event(${1:killcount}, ${2:weapon})"},
	{ "trigger": "thief_shutdown_enemy_event\t#using scripts\\shared\\scoreevents_shared;", "contents": "scoreevents::thief_shutdown_enemy_event()"},
	{ "trigger": "gadgets_print\t#using scripts\\shared\\abilities\\_ability_gadgets;", "contents": "ability_gadgets::gadgets_print(${1:str})"},
	{ "trigger": "on_player_connect\t#using scripts\\shared\\abilities\\_ability_gadgets;", "contents": "ability_gadgets::on_player_connect()"},
	{ "trigger": "SetFlickering\t#using scripts\\shared\\abilities\\_ability_gadgets;", "contents": "ability_gadgets::SetFlickering(${1:slot}, ${2:length})"},
	{ "trigger": "on_player_spawned\t#using scripts\\shared\\abilities\\_ability_gadgets; self == player", "contents": "ability_gadgets::on_player_spawned()"},
	{ "trigger": "gadget_give_callback\t#using scripts\\shared\\abilities\\_ability_gadgets;", "contents": "ability_gadgets::gadget_give_callback(${1:ent}, ${2:slot}, ${3:weapon})"},
	{ "trigger": "gadget_take_callback\t#using scripts\\shared\\abilities\\_ability_gadgets;", "contents": "ability_gadgets::gadget_take_callback(${1:ent}, ${2:slot}, ${3:weapon})"},
	{ "trigger": "gadget_primed_callback\t#using scripts\\shared\\abilities\\_ability_gadgets;", "contents": "ability_gadgets::gadget_primed_callback(${1:ent}, ${2:slot}, ${3:weapon})"},
	{ "trigger": "gadget_ready_callback\t#using scripts\\shared\\abilities\\_ability_gadgets;", "contents": "ability_gadgets::gadget_ready_callback(${1:ent}, ${2:slot}, ${3:weapon})"},
	{ "trigger": "gadget_on_callback\t#using scripts\\shared\\abilities\\_ability_gadgets;", "contents": "ability_gadgets::gadget_on_callback(${1:ent}, ${2:slot}, ${3:weapon})"},
	{ "trigger": "gadget_off_callback\t#using scripts\\shared\\abilities\\_ability_gadgets;", "contents": "ability_gadgets::gadget_off_callback(${1:ent}, ${2:slot}, ${3:weapon})"},
	{ "trigger": "gadget_flicker_callback\t#using scripts\\shared\\abilities\\_ability_gadgets;", "contents": "ability_gadgets::gadget_flicker_callback(${1:ent}, ${2:slot}, ${3:weapon})"},
	{ "trigger": "enable_electric_cherry_perk_for_level\t#using scripts\\zm\\_zm_perk_electric_cherry;", "contents": "zm_perk_electric_cherry::enable_electric_cherry_perk_for_level()"},
	{ "trigger": "electric_cherry_precache\t#using scripts\\zm\\_zm_perk_electric_cherry;", "contents": "zm_perk_electric_cherry::electric_cherry_precache()"},
	{ "trigger": "electric_cherry_register_clientfield\t#using scripts\\zm\\_zm_perk_electric_cherry;", "contents": "zm_perk_electric_cherry::electric_cherry_register_clientfield()"},
	{ "trigger": "electric_cherry_set_clientfield\t#using scripts\\zm\\_zm_perk_electric_cherry;", "contents": "zm_perk_electric_cherry::electric_cherry_set_clientfield(${1:state})"},
	{ "trigger": "electric_cherry_perk_machine_setup\t#using scripts\\zm\\_zm_perk_electric_cherry;", "contents": "zm_perk_electric_cherry::electric_cherry_perk_machine_setup(${1:use_trigger}, ${2:perk_machine}, ${3:bump_trigger}, ${4:collision})"},
	{ "trigger": "electric_cherry_perk_machine_think\t#using scripts\\zm\\_zm_perk_electric_cherry;", "contents": "zm_perk_electric_cherry::electric_cherry_perk_machine_think()"},
	{ "trigger": "electric_cherry_host_migration_func\t#using scripts\\zm\\_zm_perk_electric_cherry;", "contents": "zm_perk_electric_cherry::electric_cherry_host_migration_func()"},
	{ "trigger": "electric_cherry_laststand\t#using scripts\\zm\\_zm_perk_electric_cherry; self = player", "contents": "zm_perk_electric_cherry::electric_cherry_laststand()"},
	{ "trigger": "electric_cherry_death_fx\t#using scripts\\zm\\_zm_perk_electric_cherry; self = zombie", "contents": "zm_perk_electric_cherry::electric_cherry_death_fx()"},
	{ "trigger": "electric_cherry_shock_fx\t#using scripts\\zm\\_zm_perk_electric_cherry; self = zombie", "contents": "zm_perk_electric_cherry::electric_cherry_shock_fx()"},
	{ "trigger": "electric_cherry_stun\t#using scripts\\zm\\_zm_perk_electric_cherry; self = zombie", "contents": "zm_perk_electric_cherry::electric_cherry_stun()"},
	{ "trigger": "electric_cherry_reload_attack\t#using scripts\\zm\\_zm_perk_electric_cherry; self = player", "contents": "zm_perk_electric_cherry::electric_cherry_reload_attack()"},
	{ "trigger": "electric_cherry_cooldown_timer\t#using scripts\\zm\\_zm_perk_electric_cherry; self = player", "contents": "zm_perk_electric_cherry::electric_cherry_cooldown_timer(${1:current_weapon})"},
	{ "trigger": "check_for_reload_complete\t#using scripts\\zm\\_zm_perk_electric_cherry; self = player", "contents": "zm_perk_electric_cherry::check_for_reload_complete(${1:weapon})"},
	{ "trigger": "weapon_replaced_monitor\t#using scripts\\zm\\_zm_perk_electric_cherry; self = player", "contents": "zm_perk_electric_cherry::weapon_replaced_monitor(${1:weapon})"},
	{ "trigger": "electric_cherry_reload_fx\t#using scripts\\zm\\_zm_perk_electric_cherry;", "contents": "zm_perk_electric_cherry::electric_cherry_reload_fx(${1:n_fraction})"},
	{ "trigger": "electric_cherry_perk_lost\t#using scripts\\zm\\_zm_perk_electric_cherry;", "contents": "zm_perk_electric_cherry::electric_cherry_perk_lost(${1:b_pause}, ${2:str_perk}, ${3:str_result})"},
	{ "trigger": "gadget_flashback_spawned\t#using scripts\\shared\\abilities\\gadgets\\_gadget_flashback;", "contents": "flashback::gadget_flashback_spawned()"},
	{ "trigger": "gadget_flashback_is_inuse\t#using scripts\\shared\\abilities\\gadgets\\_gadget_flashback;", "contents": "flashback::gadget_flashback_is_inuse(${1:slot})"},
	{ "trigger": "gadget_flashback_is_flickering\t#using scripts\\shared\\abilities\\gadgets\\_gadget_flashback;", "contents": "flashback::gadget_flashback_is_flickering(${1:slot})"},
	{ "trigger": "gadget_flashback_on_flicker\t#using scripts\\shared\\abilities\\gadgets\\_gadget_flashback;", "contents": "flashback::gadget_flashback_on_flicker(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_flashback_on_give\t#using scripts\\shared\\abilities\\gadgets\\_gadget_flashback;", "contents": "flashback::gadget_flashback_on_give(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_flashback_on_take\t#using scripts\\shared\\abilities\\gadgets\\_gadget_flashback;", "contents": "flashback::gadget_flashback_on_take(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_flashback_on_connect\t#using scripts\\shared\\abilities\\gadgets\\_gadget_flashback;", "contents": "flashback::gadget_flashback_on_connect()"},
	{ "trigger": "clone_watch_death\t#using scripts\\shared\\abilities\\gadgets\\_gadget_flashback;", "contents": "flashback::clone_watch_death()"},
	{ "trigger": "drop_unlinked_grenades\t#using scripts\\shared\\abilities\\gadgets\\_gadget_flashback;", "contents": "flashback::drop_unlinked_grenades(${1:linkedGrenades})"},
	{ "trigger": "unlink_grenades\t#using scripts\\shared\\abilities\\gadgets\\_gadget_flashback;", "contents": "flashback::unlink_grenades(${1:oldpos})"},
	{ "trigger": "gadget_flashback_on\t#using scripts\\shared\\abilities\\gadgets\\_gadget_flashback;", "contents": "flashback::gadget_flashback_on(${1:slot}, ${2:weapon})"},
	{ "trigger": "watchClientfields\t#using scripts\\shared\\abilities\\gadgets\\_gadget_flashback;", "contents": "flashback::watchClientfields()"},
	{ "trigger": "flashBackTrailImpact\t#using scripts\\shared\\abilities\\gadgets\\_gadget_flashback;", "contents": "flashback::flashBackTrailImpact(${1:startPos}, ${2:endPos}, ${3:recursionDepth})"},
	{ "trigger": "deactivateFlashbackWarpAfterTime\t#using scripts\\shared\\abilities\\gadgets\\_gadget_flashback;", "contents": "flashback::deactivateFlashbackWarpAfterTime(${1:time})"},
	{ "trigger": "flashbackTrailFx\t#using scripts\\shared\\abilities\\gadgets\\_gadget_flashback;", "contents": "flashback::flashbackTrailFx(${1:slot}, ${2:weapon}, ${3:oldpos}, ${4:newPos})"},
	{ "trigger": "gadget_flashback_is_primed\t#using scripts\\shared\\abilities\\gadgets\\_gadget_flashback;", "contents": "flashback::gadget_flashback_is_primed(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_flashback_off\t#using scripts\\shared\\abilities\\gadgets\\_gadget_flashback;", "contents": "flashback::gadget_flashback_off(${1:slot}, ${2:weapon})"},
	{ "trigger": "proximityWeaponObjectDetonation_override\t#using scripts\\zm\\_zm_weap_bouncingbetty;", "contents": "bouncingbetty::proximityWeaponObjectDetonation_override(${1:watcher})"},
	{ "trigger": "register\t#using scripts\\shared\\weapons\\_bouncingbetty;", "contents": "bouncingbetty::register()"},
	{ "trigger": "createBouncingBettyWatcher\t#using scripts\\shared\\weapons\\_bouncingbetty; self == player", "contents": "bouncingbetty::createBouncingBettyWatcher()"},
	{ "trigger": "onBouncingBettyFizzleOut\t#using scripts\\shared\\weapons\\_bouncingbetty;", "contents": "bouncingbetty::onBouncingBettyFizzleOut()"},
	{ "trigger": "onSpawnBouncingBetty\t#using scripts\\shared\\weapons\\_bouncingbetty; self == betty ent", "contents": "bouncingbetty::onSpawnBouncingBetty(${1:watcher}, ${2:owner})"},
	{ "trigger": "trackUsedStatOnDeath\t#using scripts\\shared\\weapons\\_bouncingbetty;", "contents": "bouncingbetty::trackUsedStatOnDeath()"},
	{ "trigger": "doNoTrackUsedStatOnPickup\t#using scripts\\shared\\weapons\\_bouncingbetty; self == betty ent", "contents": "bouncingbetty::doNoTrackUsedStatOnPickup()"},
	{ "trigger": "trackUsedOnHack\t#using scripts\\shared\\weapons\\_bouncingbetty; self == betty ent", "contents": "bouncingbetty::trackUsedOnHack()"},
	{ "trigger": "trackBouncingBettyAsUsed\t#using scripts\\shared\\weapons\\_bouncingbetty;", "contents": "bouncingbetty::trackBouncingBettyAsUsed()"},
	{ "trigger": "trackOnOwner\t#using scripts\\shared\\weapons\\_bouncingbetty;", "contents": "bouncingbetty::trackOnOwner(${1:owner})"},
	{ "trigger": "spawnMineMover\t#using scripts\\shared\\weapons\\_bouncingbetty; self == betty ent", "contents": "bouncingbetty::spawnMineMover()"},
	{ "trigger": "killMineMoverOnPickup\t#using scripts\\shared\\weapons\\_bouncingbetty; self == betty ent", "contents": "bouncingbetty::killMineMoverOnPickup()"},
	{ "trigger": "killMineMover\t#using scripts\\shared\\weapons\\_bouncingbetty; self == betty ent", "contents": "bouncingbetty::killMineMover()"},
	{ "trigger": "bouncingBettyDetonate\t#using scripts\\shared\\weapons\\_bouncingbetty; self == betty", "contents": "bouncingbetty::bouncingBettyDetonate(${1:attacker}, ${2:weapon}, ${3:target})"},
	{ "trigger": "bouncingBettyDestroyed\t#using scripts\\shared\\weapons\\_bouncingbetty; self == betty", "contents": "bouncingbetty::bouncingBettyDestroyed()"},
	{ "trigger": "bouncingBettyJumpAndExplode\t#using scripts\\shared\\weapons\\_bouncingbetty; self == script mover spawned at weaponobject location", "contents": "bouncingbetty::bouncingBettyJumpAndExplode()"},
	{ "trigger": "mineExplode\t#using scripts\\shared\\weapons\\_bouncingbetty;", "contents": "bouncingbetty::mineExplode(${1:explosionDir}, ${2:explodePos})"},
	{ "trigger": "grab_bonfire_sale\t#using scripts\\zm\\_zm_powerup_bonfire_sale;", "contents": "zm_powerup_bonfire_sale::grab_bonfire_sale(${1:player})"},
	{ "trigger": "start_bonfire_sale\t#using scripts\\zm\\_zm_powerup_bonfire_sale;", "contents": "zm_powerup_bonfire_sale::start_bonfire_sale(${1:item})"},
	{ "trigger": "toggle_bonfire_sale_on\t#using scripts\\zm\\_zm_powerup_bonfire_sale;", "contents": "zm_powerup_bonfire_sale::toggle_bonfire_sale_on()"},
	{ "trigger": "setup_bonfiresale_audio\t#using scripts\\zm\\_zm_powerup_bonfire_sale;", "contents": "zm_powerup_bonfire_sale::setup_bonfiresale_audio()"},
	{ "trigger": "play_bonfiresale_audio\t#using scripts\\zm\\_zm_powerup_bonfire_sale;", "contents": "zm_powerup_bonfire_sale::play_bonfiresale_audio()"},
	{ "trigger": "enable_dog_rounds\t#using scripts\\zm\\_zm_ai_dogs;", "contents": "zm_ai_dogs::enable_dog_rounds()"},
	{ "trigger": "dog_round_spawning\t#using scripts\\zm\\_zm_ai_dogs;", "contents": "zm_ai_dogs::dog_round_spawning()"},
	{ "trigger": "waiting_for_next_dog_spawn\t#using scripts\\zm\\_zm_ai_dogs;", "contents": "zm_ai_dogs::waiting_for_next_dog_spawn(${1:count}, ${2:max})"},
	{ "trigger": "dog_round_aftermath\t#using scripts\\zm\\_zm_ai_dogs;", "contents": "zm_ai_dogs::dog_round_aftermath()"},
	{ "trigger": "dog_spawn_fx\t#using scripts\\zm\\_zm_ai_dogs;", "contents": "zm_ai_dogs::dog_spawn_fx(${1:ai}, ${2:ent})"},
	{ "trigger": "dog_spawn_factory_logic\t#using scripts\\zm\\_zm_ai_dogs;", "contents": "zm_ai_dogs::dog_spawn_factory_logic(${1:favorite_enemy})"},
	{ "trigger": "get_favorite_enemy\t#using scripts\\zm\\_zm_ai_dogs;", "contents": "zm_ai_dogs::get_favorite_enemy()"},
	{ "trigger": "dog_health_increase\t#using scripts\\zm\\_zm_ai_dogs;", "contents": "zm_ai_dogs::dog_health_increase()"},
	{ "trigger": "dog_round_wait_func\t#using scripts\\zm\\_zm_ai_dogs;", "contents": "zm_ai_dogs::dog_round_wait_func()"},
	{ "trigger": "dog_round_tracker\t#using scripts\\zm\\_zm_ai_dogs;", "contents": "zm_ai_dogs::dog_round_tracker()"},
	{ "trigger": "dog_round_start\t#using scripts\\zm\\_zm_ai_dogs;", "contents": "zm_ai_dogs::dog_round_start()"},
	{ "trigger": "dog_round_stop\t#using scripts\\zm\\_zm_ai_dogs;", "contents": "zm_ai_dogs::dog_round_stop()"},
	{ "trigger": "play_dog_round\t#using scripts\\zm\\_zm_ai_dogs;", "contents": "zm_ai_dogs::play_dog_round()"},
	{ "trigger": "dog_death\t#using scripts\\zm\\_zm_ai_dogs;", "contents": "zm_ai_dogs::dog_death()"},
	{ "trigger": "dog_explode_fx\t#using scripts\\zm\\_zm_ai_dogs;", "contents": "zm_ai_dogs::dog_explode_fx(${1:origin})"},
	{ "trigger": "zombie_setup_attack_properties_dog\t#using scripts\\zm\\_zm_ai_dogs;", "contents": "zm_ai_dogs::zombie_setup_attack_properties_dog()"},
	{ "trigger": "stop_dog_sound_on_death\t#using scripts\\zm\\_zm_ai_dogs;", "contents": "zm_ai_dogs::stop_dog_sound_on_death()"},
	{ "trigger": "dog_behind_audio\t#using scripts\\zm\\_zm_ai_dogs;", "contents": "zm_ai_dogs::dog_behind_audio()"},
	{ "trigger": "dog_clip_monitor\t#using scripts\\zm\\_zm_ai_dogs;", "contents": "zm_ai_dogs::dog_clip_monitor()"},
	{ "trigger": "special_dog_spawn\t#using scripts\\zm\\_zm_ai_dogs;", "contents": "zm_ai_dogs::special_dog_spawn(${1:num_to_spawn}, ${2:spawners}, ${3:spawn_point})"},
	{ "trigger": "dog_run_think\t#using scripts\\zm\\_zm_ai_dogs;", "contents": "zm_ai_dogs::dog_run_think()"},
	{ "trigger": "dog_stalk_audio\t#using scripts\\zm\\_zm_ai_dogs;", "contents": "zm_ai_dogs::dog_stalk_audio()"},
	{ "trigger": "dog_thundergun_knockdown\t#using scripts\\zm\\_zm_ai_dogs;", "contents": "zm_ai_dogs::dog_thundergun_knockdown(${1:player}, ${2:gib})"},
	{ "trigger": "rfill\t#using scripts\\shared\\string_shared;", "contents": "string::rfill(${1:str_input}, ${2:n_length}, ${3:str_fill_char = \" \"})"},
	{ "trigger": "gadget_speed_burst_is_inuse\t#using scripts\\shared\\abilities\\gadgets\\_gadget_speed_burst;", "contents": "speedburst::gadget_speed_burst_is_inuse(${1:slot})"},
	{ "trigger": "gadget_speed_burst_is_flickering\t#using scripts\\shared\\abilities\\gadgets\\_gadget_speed_burst;", "contents": "speedburst::gadget_speed_burst_is_flickering(${1:slot})"},
	{ "trigger": "gadget_speed_burst_on_flicker\t#using scripts\\shared\\abilities\\gadgets\\_gadget_speed_burst;", "contents": "speedburst::gadget_speed_burst_on_flicker(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_speed_burst_on_give\t#using scripts\\shared\\abilities\\gadgets\\_gadget_speed_burst;", "contents": "speedburst::gadget_speed_burst_on_give(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_speed_burst_on_take\t#using scripts\\shared\\abilities\\gadgets\\_gadget_speed_burst;", "contents": "speedburst::gadget_speed_burst_on_take(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_speed_burst_on_connect\t#using scripts\\shared\\abilities\\gadgets\\_gadget_speed_burst;", "contents": "speedburst::gadget_speed_burst_on_connect()"},
	{ "trigger": "gadget_speed_burst_on\t#using scripts\\shared\\abilities\\gadgets\\_gadget_speed_burst;", "contents": "speedburst::gadget_speed_burst_on(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_speed_burst_off\t#using scripts\\shared\\abilities\\gadgets\\_gadget_speed_burst;", "contents": "speedburst::gadget_speed_burst_off(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_speed_burst_flicker\t#using scripts\\shared\\abilities\\gadgets\\_gadget_speed_burst;", "contents": "speedburst::gadget_speed_burst_flicker(${1:slot}, ${2:weapon})"},
	{ "trigger": "set_gadget_status\t#using scripts\\shared\\abilities\\gadgets\\_gadget_speed_burst;", "contents": "speedburst::set_gadget_status(${1:status}, ${2:time})"},
	{ "trigger": "warning\t#using scripts\\zm\\_util;", "contents": "util::warning(${1:msg})"},
	{ "trigger": "brush_delete\t#using scripts\\zm\\_util;", "contents": "util::brush_delete()"},
	{ "trigger": "brush_show\t#using scripts\\zm\\_util;", "contents": "util::brush_show()"},
	{ "trigger": "brush_throw\t#using scripts\\zm\\_util;", "contents": "util::brush_throw()"},
	{ "trigger": "playSoundOnPlayers\t#using scripts\\zm\\_util;", "contents": "util::playSoundOnPlayers(${1:sound}, ${2:team})"},
	{ "trigger": "get_player_height\t#using scripts\\zm\\_util;", "contents": "util::get_player_height()"},
	{ "trigger": "IsBulletImpactMOD\t#using scripts\\zm\\_util;", "contents": "util::IsBulletImpactMOD(${1:sMeansOfDeath})"},
	{ "trigger": "waitRespawnButton\t#using scripts\\zm\\_util;", "contents": "util::waitRespawnButton()"},
	{ "trigger": "setLowerMessage\t#using scripts\\zm\\_util;", "contents": "util::setLowerMessage(${1:text}, ${2:time}, ${3:combineMessageAndTimer})"},
	{ "trigger": "setLowerMessageValue\t#using scripts\\zm\\_util;", "contents": "util::setLowerMessageValue(${1:text}, ${2:value}, ${3:combineMessage})"},
	{ "trigger": "clearLowerMessage\t#using scripts\\zm\\_util;", "contents": "util::clearLowerMessage(${1:fadetime})"},
	{ "trigger": "printOnTeam\t#using scripts\\zm\\_util;", "contents": "util::printOnTeam(${1:text}, ${2:team})"},
	{ "trigger": "printBoldOnTeam\t#using scripts\\zm\\_util;", "contents": "util::printBoldOnTeam(${1:text}, ${2:team})"},
	{ "trigger": "printBoldOnTeamArg\t#using scripts\\zm\\_util;", "contents": "util::printBoldOnTeamArg(${1:text}, ${2:team}, ${3:arg})"},
	{ "trigger": "printOnTeamArg\t#using scripts\\zm\\_util;", "contents": "util::printOnTeamArg(${1:text}, ${2:team}, ${3:arg})"},
	{ "trigger": "printOnPlayers\t#using scripts\\zm\\_util;", "contents": "util::printOnPlayers(${1:text}, ${2:team})"},
	{ "trigger": "printAndSoundOnEveryone\t#using scripts\\zm\\_util;", "contents": "util::printAndSoundOnEveryone(${1:team}, ${2:enemyteam}, ${3:printFriendly}, ${4:printEnemy}, ${5:soundFriendly}, ${6:soundEnemy}, ${7:printarg})"},
	{ "trigger": "_playLocalSound\t#using scripts\\zm\\_util;", "contents": "util::_playLocalSound(${1:soundAlias})"},
	{ "trigger": "getOtherTeam\t#using scripts\\zm\\_util;", "contents": "util::getOtherTeam(${1:team})"},
	{ "trigger": "getTeamMask\t#using scripts\\zm\\_util;", "contents": "util::getTeamMask(${1:team})"},
	{ "trigger": "getOtherTeamsMask\t#using scripts\\zm\\_util;", "contents": "util::getOtherTeamsMask(${1:skip_team})"},
	{ "trigger": "plot_points\t#using scripts\\zm\\_util;", "contents": "util::plot_points(${1:plotpoints}, ${2:r}, ${3:g}, ${4:b}, ${5:timer})"},
	{ "trigger": "getfx\t#using scripts\\zm\\_util;", "contents": "util::getfx(${1:fx})"},
	{ "trigger": "set_dvar_if_unset\t#using scripts\\zm\\_util;", "contents": "util::set_dvar_if_unset(${1:dvar}, ${2:value}, ${3:reset})"},
	{ "trigger": "set_dvar_float_if_unset\t#using scripts\\zm\\_util;", "contents": "util::set_dvar_float_if_unset(${1:dvar}, ${2:value}, ${3:reset})"},
	{ "trigger": "set_dvar_int_if_unset\t#using scripts\\zm\\_util;", "contents": "util::set_dvar_int_if_unset(${1:dvar}, ${2:value}, ${3:reset})"},
	{ "trigger": "isStrStart\t#using scripts\\zm\\_util;", "contents": "util::isStrStart(${1:string1}, ${2:subStr})"},
	{ "trigger": "isKillStreaksEnabled\t#using scripts\\zm\\_util;", "contents": "util::isKillStreaksEnabled()"},
	{ "trigger": "setUsingRemote\t#using scripts\\zm\\_util;", "contents": "util::setUsingRemote(${1:remoteName})"},
	{ "trigger": "getRemoteName\t#using scripts\\zm\\_util;", "contents": "util::getRemoteName()"},
	{ "trigger": "setObjectiveText\t#using scripts\\zm\\_util;", "contents": "util::setObjectiveText(${1:team}, ${2:text})"},
	{ "trigger": "setObjectiveScoreText\t#using scripts\\zm\\_util;", "contents": "util::setObjectiveScoreText(${1:team}, ${2:text})"},
	{ "trigger": "setObjectiveHintText\t#using scripts\\zm\\_util;", "contents": "util::setObjectiveHintText(${1:team}, ${2:text})"},
	{ "trigger": "getObjectiveText\t#using scripts\\zm\\_util;", "contents": "util::getObjectiveText(${1:team})"},
	{ "trigger": "getObjectiveScoreText\t#using scripts\\zm\\_util;", "contents": "util::getObjectiveScoreText(${1:team})"},
	{ "trigger": "getObjectiveHintText\t#using scripts\\zm\\_util;", "contents": "util::getObjectiveHintText(${1:team})"},
	{ "trigger": "registerRoundSwitch\t#using scripts\\zm\\_util;", "contents": "util::registerRoundSwitch(${1:minValue}, ${2:maxValue})"},
	{ "trigger": "registerRoundLimit\t#using scripts\\zm\\_util;", "contents": "util::registerRoundLimit(${1:minValue}, ${2:maxValue})"},
	{ "trigger": "registerRoundWinLimit\t#using scripts\\zm\\_util;", "contents": "util::registerRoundWinLimit(${1:minValue}, ${2:maxValue})"},
	{ "trigger": "registerScoreLimit\t#using scripts\\zm\\_util;", "contents": "util::registerScoreLimit(${1:minValue}, ${2:maxValue})"},
	{ "trigger": "registerTimeLimit\t#using scripts\\zm\\_util;", "contents": "util::registerTimeLimit(${1:minValue}, ${2:maxValue})"},
	{ "trigger": "registerNumLives\t#using scripts\\zm\\_util;", "contents": "util::registerNumLives(${1:minValue}, ${2:maxValue})"},
	{ "trigger": "getPlayerFromClientNum\t#using scripts\\zm\\_util;", "contents": "util::getPlayerFromClientNum(${1:clientNum})"},
	{ "trigger": "isPressBuild\t#using scripts\\zm\\_util;", "contents": "util::isPressBuild()"},
	{ "trigger": "isFlashbanged\t#using scripts\\zm\\_util;", "contents": "util::isFlashbanged()"},
	{ "trigger": "DoMaxDamage\t#using scripts\\zm\\_util; self == entity to damage", "contents": "util::DoMaxDamage(${1:origin}, ${2:attacker}, ${3:inflictor}, ${4:headshot}, ${5:mod})"},
	{ "trigger": "get_array_of_closest\t#using scripts\\zm\\_util;", "contents": "util::get_array_of_closest(${1:org}, ${2:array}, ${3:excluders}, ${4:max}, ${5:maxdist})"},
	{ "trigger": "empty\t#using scripts\\shared\\util_shared;", "contents": "util::empty(${1:a}, ${2:b}, ${3:c}, ${4:d}, ${5:e})"},
	{ "trigger": "wait_network_frame\t#using scripts\\shared\\util_shared;", "contents": "util::wait_network_frame(${1:n_count = 1})"},
	{ "trigger": "streamer_wait\t#using scripts\\shared\\util_shared;", "contents": "util::streamer_wait(${1:n_stream_request_id}, ${2:n_wait_frames = 0}, ${3:n_timeout = 0}, ${4:b_bonuszm_streamer_fallback = true})"},
	{ "trigger": "waittillend\t#using scripts\\shared\\util_shared;", "contents": "util::waittillend(${1:msg})"},
	{ "trigger": "track\t#using scripts\\shared\\util_shared;", "contents": "util::track(${1:spot_to_track})"},
	{ "trigger": "waittill_string\t#using scripts\\shared\\util_shared;", "contents": "util::waittill_string(${1:msg}, ${2:ent})"},
	{ "trigger": "waittill_level_string\t#using scripts\\shared\\util_shared;", "contents": "util::waittill_level_string(${1:msg}, ${2:ent}, ${3:otherEnt})"},
	{ "trigger": "waittill_multiple\t#using scripts\\shared\\util_shared;", "contents": "util::waittill_multiple(${1:...})"},
	{ "trigger": "waittill_either\t#using scripts\\shared\\util_shared;", "contents": "util::waittill_either(${1:msg1}, ${2:msg2})"},
	{ "trigger": "break_glass\t#using scripts\\shared\\util_shared;", "contents": "util::break_glass(${1:n_radius = 50})"},
	{ "trigger": "waittill_multiple_ents\t#using scripts\\shared\\util_shared;", "contents": "util::waittill_multiple_ents(${1:...})"},
	{ "trigger": "_waitlogic\t#using scripts\\shared\\util_shared;", "contents": "util::_waitlogic(${1:s_tracker}, ${2:notifies})"},
	{ "trigger": "waittill_any_return\t#using scripts\\shared\\util_shared;", "contents": "util::waittill_any_return(${1:string1}, ${2:string2}, ${3:string3}, ${4:string4}, ${5:string5}, ${6:string6}, ${7:string7})"},
	{ "trigger": "waittill_any_array_return\t#using scripts\\shared\\util_shared;", "contents": "util::waittill_any_array_return(${1:a_notifies})"},
	{ "trigger": "waittill_any\t#using scripts\\shared\\util_shared;", "contents": "util::waittill_any(${1:str_notify1}, ${2:str_notify2}, ${3:str_notify3}, ${4:str_notify4}, ${5:str_notify5}, ${6:str_notify6})"},
	{ "trigger": "waittill_any_array\t#using scripts\\shared\\util_shared;", "contents": "util::waittill_any_array(${1:a_notifies})"},
	{ "trigger": "waittill_any_timeout\t#using scripts\\shared\\util_shared;", "contents": "util::waittill_any_timeout(${1:n_timeout}, ${2:string1}, ${3:string2}, ${4:string3}, ${5:string4}, ${6:string5})"},
	{ "trigger": "waittill_level_any_timeout\t#using scripts\\shared\\util_shared;", "contents": "util::waittill_level_any_timeout(${1:n_timeout}, ${2:otherEnt}, ${3:string1}, ${4:string2}, ${5:string3}, ${6:string4}, ${7:string5})"},
	{ "trigger": "_timeout\t#using scripts\\shared\\util_shared;", "contents": "util::_timeout(${1:delay})"},
	{ "trigger": "waittill_any_ents\t#using scripts\\shared\\util_shared;", "contents": "util::waittill_any_ents(${1:ent1}, ${2:string1}, ${3:ent2}, ${4:string2}, ${5:ent3}, ${6:string3}, ${7:ent4}, ${8:string4}, ${9:ent5}, ${10:string5}, ${11:ent6}, ${12:string6}, ${13:ent7}, ${14:string7})"},
	{ "trigger": "waittill_any_ents_two\t#using scripts\\shared\\util_shared;", "contents": "util::waittill_any_ents_two(${1:ent1}, ${2:string1}, ${3:ent2}, ${4:string2})"},
	{ "trigger": "isFlashed\t#using scripts\\shared\\util_shared;", "contents": "util::isFlashed()"},
	{ "trigger": "isStunned\t#using scripts\\shared\\util_shared;", "contents": "util::isStunned()"},
	{ "trigger": "single_func\t#using scripts\\shared\\util_shared;", "contents": "util::single_func(${1:entity}, ${2:func}, ${3:arg1}, ${4:arg2}, ${5:arg3}, ${6:arg4}, ${7:arg5}, ${8:arg6})"},
	{ "trigger": "new_func\t#using scripts\\shared\\util_shared;", "contents": "util::new_func(${1:func}, ${2:arg1}, ${3:arg2}, ${4:arg3}, ${5:arg4}, ${6:arg5}, ${7:arg6})"},
	{ "trigger": "call_func\t#using scripts\\shared\\util_shared;", "contents": "util::call_func(${1:s_func})"},
	{ "trigger": "single_thread\t#using scripts\\shared\\util_shared;", "contents": "util::single_thread(${1:entity}, ${2:func}, ${3:arg1}, ${4:arg2}, ${5:arg3}, ${6:arg4}, ${7:arg5}, ${8:arg6})"},
	{ "trigger": "script_delay\t#using scripts\\shared\\util_shared;", "contents": "util::script_delay()"},
	{ "trigger": "timeout\t#using scripts\\shared\\util_shared;", "contents": "util::timeout(${1:n_time}, ${2:func}, ${3:arg1}, ${4:arg2}, ${5:arg3}, ${6:arg4}, ${7:arg5}, ${8:arg6})"},
	{ "trigger": "create_flags_and_return_tokens\t#using scripts\\shared\\util_shared;", "contents": "util::create_flags_and_return_tokens(${1:flags})"},
	{ "trigger": "fileprint_start\t#using scripts\\shared\\util_shared;", "contents": "util::fileprint_start(${1:file})"},
	{ "trigger": "fileprint_map_start\t#using scripts\\shared\\util_shared;", "contents": "util::fileprint_map_start(${1:file})"},
	{ "trigger": "fileprint_chk\t#using scripts\\shared\\util_shared;", "contents": "util::fileprint_chk(${1:file}, ${2:str})"},
	{ "trigger": "fileprint_map_header\t#using scripts\\shared\\util_shared;", "contents": "util::fileprint_map_header(${1:bInclude_blank_worldspawn})"},
	{ "trigger": "fileprint_map_keypairprint\t#using scripts\\shared\\util_shared;", "contents": "util::fileprint_map_keypairprint(${1:key1}, ${2:key2})"},
	{ "trigger": "fileprint_map_entity_start\t#using scripts\\shared\\util_shared;", "contents": "util::fileprint_map_entity_start()"},
	{ "trigger": "fileprint_map_entity_end\t#using scripts\\shared\\util_shared;", "contents": "util::fileprint_map_entity_end()"},
	{ "trigger": "fileprint_end\t#using scripts\\shared\\util_shared;", "contents": "util::fileprint_end()"},
	{ "trigger": "fileprint_radiant_vec\t#using scripts\\shared\\util_shared;", "contents": "util::fileprint_radiant_vec(${1:vector})"},
	{ "trigger": "death_notify_wrapper\t#using scripts\\shared\\util_shared;", "contents": "util::death_notify_wrapper(${1:attacker}, ${2:damageType})"},
	{ "trigger": "damage_notify_wrapper\t#using scripts\\shared\\util_shared;", "contents": "util::damage_notify_wrapper(${1:damage}, ${2:attacker}, ${3:direction_vec}, ${4:point}, ${5:type}, ${6:modelName}, ${7:tagName}, ${8:partName}, ${9:iDFlags})"},
	{ "trigger": "explode_notify_wrapper\t#using scripts\\shared\\util_shared;", "contents": "util::explode_notify_wrapper()"},
	{ "trigger": "alert_notify_wrapper\t#using scripts\\shared\\util_shared;", "contents": "util::alert_notify_wrapper()"},
	{ "trigger": "shoot_notify_wrapper\t#using scripts\\shared\\util_shared;", "contents": "util::shoot_notify_wrapper()"},
	{ "trigger": "melee_notify_wrapper\t#using scripts\\shared\\util_shared;", "contents": "util::melee_notify_wrapper()"},
	{ "trigger": "isUsabilityEnabled\t#using scripts\\shared\\util_shared;", "contents": "util::isUsabilityEnabled()"},
	{ "trigger": "_disableUsability\t#using scripts\\shared\\util_shared;", "contents": "util::_disableUsability()"},
	{ "trigger": "_enableUsability\t#using scripts\\shared\\util_shared;", "contents": "util::_enableUsability()"},
	{ "trigger": "resetUsability\t#using scripts\\shared\\util_shared;", "contents": "util::resetUsability()"},
	{ "trigger": "_disableWeapon\t#using scripts\\shared\\util_shared;", "contents": "util::_disableWeapon()"},
	{ "trigger": "_enableWeapon\t#using scripts\\shared\\util_shared;", "contents": "util::_enableWeapon()"},
	{ "trigger": "isWeaponEnabled\t#using scripts\\shared\\util_shared;", "contents": "util::isWeaponEnabled()"},
	{ "trigger": "orient_to_normal\t#using scripts\\shared\\util_shared;", "contents": "util::orient_to_normal(${1:normal})"},
	{ "trigger": "delay\t#using scripts\\shared\\util_shared;", "contents": "util::delay(${1:time_or_notify}, ${2:str_endon}, ${3:func}, ${4:arg1}, ${5:arg2}, ${6:arg3}, ${7:arg4}, ${8:arg5}, ${9:arg6})"},
	{ "trigger": "_delay\t#using scripts\\shared\\util_shared;", "contents": "util::_delay(${1:time_or_notify}, ${2:str_endon}, ${3:func}, ${4:arg1}, ${5:arg2}, ${6:arg3}, ${7:arg4}, ${8:arg5}, ${9:arg6})"},
	{ "trigger": "delay_network_frames\t#using scripts\\shared\\util_shared;", "contents": "util::delay_network_frames(${1:n_frames}, ${2:str_endon}, ${3:func}, ${4:arg1}, ${5:arg2}, ${6:arg3}, ${7:arg4}, ${8:arg5}, ${9:arg6})"},
	{ "trigger": "_delay_network_frames\t#using scripts\\shared\\util_shared;", "contents": "util::_delay_network_frames(${1:n_frames}, ${2:str_endon}, ${3:func}, ${4:arg1}, ${5:arg2}, ${6:arg3}, ${7:arg4}, ${8:arg5}, ${9:arg6})"},
	{ "trigger": "delay_notify\t#using scripts\\shared\\util_shared;", "contents": "util::delay_notify(${1:time_or_notify}, ${2:str_notify}, ${3:str_endon}, ${4:arg1}, ${5:arg2}, ${6:arg3}, ${7:arg4}, ${8:arg5})"},
	{ "trigger": "_delay_notify\t#using scripts\\shared\\util_shared;", "contents": "util::_delay_notify(${1:time_or_notify}, ${2:str_notify}, ${3:str_endon}, ${4:arg1}, ${5:arg2}, ${6:arg3}, ${7:arg4}, ${8:arg5})"},
	{ "trigger": "ter_op\t#using scripts\\shared\\util_shared;", "contents": "util::ter_op(${1:statement}, ${2:true_value}, ${3:false_value})"},
	{ "trigger": "get_closest_player\t#using scripts\\shared\\util_shared;", "contents": "util::get_closest_player(${1:org}, ${2:str_team})"},
	{ "trigger": "registerClientSys\t#using scripts\\shared\\util_shared;", "contents": "util::registerClientSys(${1:sSysName})"},
	{ "trigger": "setClientSysState\t#using scripts\\shared\\util_shared;", "contents": "util::setClientSysState(${1:sSysName}, ${2:sSysState}, ${3:player})"},
	{ "trigger": "getClientSysState\t#using scripts\\shared\\util_shared;", "contents": "util::getClientSysState(${1:sSysName})"},
	{ "trigger": "clientNotify\t#using scripts\\shared\\util_shared;", "contents": "util::clientNotify(${1:event})"},
	{ "trigger": "coopGame\t#using scripts\\shared\\util_shared;", "contents": "util::coopGame()"},
	{ "trigger": "is_looking_at\t#using scripts\\shared\\util_shared;", "contents": "util::is_looking_at(${1:ent_or_org}, ${2:n_dot_range = 0.67}, ${3:do_trace = false}, ${4:v_offset})"},
	{ "trigger": "get_eye\t#using scripts\\shared\\util_shared;", "contents": "util::get_eye()"},
	{ "trigger": "is_ads\t#using scripts\\shared\\util_shared;", "contents": "util::is_ads()"},
	{ "trigger": "spawn_model\t#using scripts\\shared\\util_shared;", "contents": "util::spawn_model(${1:model_name}, ${2:origin}, ${3:angles}, ${4:n_spawnflags = 0}, ${5:b_throttle = false})"},
	{ "trigger": "spawn_anim_model\t#using scripts\\shared\\util_shared;", "contents": "util::spawn_anim_model(${1:model_name}, ${2:origin}, ${3:angles}, ${4:n_spawnflags = 0}, ${5:b_throttle})"},
	{ "trigger": "spawn_anim_player_model\t#using scripts\\shared\\util_shared;", "contents": "util::spawn_anim_player_model(${1:model_name}, ${2:origin}, ${3:angles}, ${4:n_spawnflags = 0})"},
	{ "trigger": "waittill_player_looking_at\t#using scripts\\shared\\util_shared;", "contents": "util::waittill_player_looking_at(${1:origin}, ${2:arc_angle_degrees = 90}, ${3:do_trace}, ${4:e_ignore})"},
	{ "trigger": "waittill_player_not_looking_at\t#using scripts\\shared\\util_shared;", "contents": "util::waittill_player_not_looking_at(${1:origin}, ${2:dot}, ${3:do_trace})"},
	{ "trigger": "is_player_looking_at\t#using scripts\\shared\\util_shared;", "contents": "util::is_player_looking_at(${1:origin}, ${2:dot}, ${3:do_trace}, ${4:ignore_ent})"},
	{ "trigger": "wait_endon\t#using scripts\\shared\\util_shared;", "contents": "util::wait_endon(${1:waitTime}, ${2:endOnString}, ${3:endonString2}, ${4:endonString3}, ${5:endonString4})"},
	{ "trigger": "WaitTillEndOnThreaded\t#using scripts\\shared\\util_shared;", "contents": "util::WaitTillEndOnThreaded(${1:waitCondition}, ${2:callback}, ${3:endCondition1}, ${4:endCondition2}, ${5:endCondition3})"},
	{ "trigger": "new_timer\t#using scripts\\shared\\util_shared;", "contents": "util::new_timer(${1:n_timer_length})"},
	{ "trigger": "get_time\t#using scripts\\shared\\util_shared;", "contents": "util::get_time()"},
	{ "trigger": "get_time_in_seconds\t#using scripts\\shared\\util_shared;", "contents": "util::get_time_in_seconds()"},
	{ "trigger": "get_time_frac\t#using scripts\\shared\\util_shared;", "contents": "util::get_time_frac(${1:n_end_time})"},
	{ "trigger": "get_time_left\t#using scripts\\shared\\util_shared;", "contents": "util::get_time_left()"},
	{ "trigger": "is_time_left\t#using scripts\\shared\\util_shared;", "contents": "util::is_time_left()"},
	{ "trigger": "timer_wait\t#using scripts\\shared\\util_shared;", "contents": "util::timer_wait(${1:n_wait})"},
	{ "trigger": "is_primary_damage\t#using scripts\\shared\\util_shared;", "contents": "util::is_primary_damage(${1:meansofdeath})"},
	{ "trigger": "delete_on_death\t#using scripts\\shared\\util_shared;", "contents": "util::delete_on_death(${1:ent})"},
	{ "trigger": "delete_on_death_or_notify\t#using scripts\\shared\\util_shared;", "contents": "util::delete_on_death_or_notify(${1:e_to_delete}, ${2:str_notify}, ${3:str_clientfield = undefined})"},
	{ "trigger": "wait_till_not_touching\t#using scripts\\shared\\util_shared;", "contents": "util::wait_till_not_touching(${1:e_to_check}, ${2:e_to_touch})"},
	{ "trigger": "any_player_is_touching\t#using scripts\\shared\\util_shared;", "contents": "util::any_player_is_touching(${1:ent}, ${2:str_team})"},
	{ "trigger": "waittill_notify_or_timeout\t#using scripts\\shared\\util_shared;", "contents": "util::waittill_notify_or_timeout(${1:msg}, ${2:timer})"},
	{ "trigger": "set_console_status\t#using scripts\\shared\\util_shared;", "contents": "util::set_console_status()"},
	{ "trigger": "waittill_asset_loaded\t#using scripts\\shared\\util_shared;", "contents": "util::waittill_asset_loaded(${1:str_type}, ${2:str_name})"},
	{ "trigger": "script_wait\t#using scripts\\shared\\util_shared;", "contents": "util::script_wait(${1:called_from_spawner = false})"},
	{ "trigger": "is_killstreaks_enabled\t#using scripts\\shared\\util_shared;", "contents": "util::is_killstreaks_enabled()"},
	{ "trigger": "is_flashbanged\t#using scripts\\shared\\util_shared;", "contents": "util::is_flashbanged()"},
	{ "trigger": "magic_bullet_shield\t#using scripts\\shared\\util_shared;", "contents": "util::magic_bullet_shield(${1:ent})"},
	{ "trigger": "spawn_player_clone\t#using scripts\\shared\\util_shared;", "contents": "util::spawn_player_clone(${1:player}, ${2:animname})"},
	{ "trigger": "stop_magic_bullet_shield\t#using scripts\\shared\\util_shared;", "contents": "util::stop_magic_bullet_shield(${1:ent})"},
	{ "trigger": "is_one_round\t#using scripts\\shared\\util_shared;", "contents": "util::is_one_round()"},
	{ "trigger": "is_first_round\t#using scripts\\shared\\util_shared;", "contents": "util::is_first_round()"},
	{ "trigger": "is_lastround\t#using scripts\\shared\\util_shared;", "contents": "util::is_lastround()"},
	{ "trigger": "get_rounds_won\t#using scripts\\shared\\util_shared;", "contents": "util::get_rounds_won(${1:team})"},
	{ "trigger": "get_other_teams_rounds_won\t#using scripts\\shared\\util_shared;", "contents": "util::get_other_teams_rounds_won(${1:skip_team})"},
	{ "trigger": "get_rounds_played\t#using scripts\\shared\\util_shared;", "contents": "util::get_rounds_played()"},
	{ "trigger": "is_round_based\t#using scripts\\shared\\util_shared;", "contents": "util::is_round_based()"},
	{ "trigger": "within_fov\t#using scripts\\shared\\util_shared;", "contents": "util::within_fov(${1:start_origin}, ${2:start_angles}, ${3:end_origin}, ${4:fov})"},
	{ "trigger": "button_held_think\t#using scripts\\shared\\util_shared;", "contents": "util::button_held_think(${1:which_button})"},
	{ "trigger": "use_button_held\t#using scripts\\shared\\util_shared;", "contents": "util::use_button_held()"},
	{ "trigger": "stance_button_held\t#using scripts\\shared\\util_shared;", "contents": "util::stance_button_held()"},
	{ "trigger": "ads_button_held\t#using scripts\\shared\\util_shared;", "contents": "util::ads_button_held()"},
	{ "trigger": "attack_button_held\t#using scripts\\shared\\util_shared;", "contents": "util::attack_button_held()"},
	{ "trigger": "button_right_held\t#using scripts\\shared\\util_shared;", "contents": "util::button_right_held()"},
	{ "trigger": "waittill_use_button_pressed\t#using scripts\\shared\\util_shared;", "contents": "util::waittill_use_button_pressed()"},
	{ "trigger": "waittill_use_button_held\t#using scripts\\shared\\util_shared;", "contents": "util::waittill_use_button_held()"},
	{ "trigger": "waittill_stance_button_pressed\t#using scripts\\shared\\util_shared;", "contents": "util::waittill_stance_button_pressed()"},
	{ "trigger": "waittill_stance_button_held\t#using scripts\\shared\\util_shared;", "contents": "util::waittill_stance_button_held()"},
	{ "trigger": "waittill_attack_button_pressed\t#using scripts\\shared\\util_shared;", "contents": "util::waittill_attack_button_pressed()"},
	{ "trigger": "waittill_ads_button_pressed\t#using scripts\\shared\\util_shared;", "contents": "util::waittill_ads_button_pressed()"},
	{ "trigger": "waittill_vehicle_move_up_button_pressed\t#using scripts\\shared\\util_shared;", "contents": "util::waittill_vehicle_move_up_button_pressed()"},
	{ "trigger": "freeze_player_controls\t#using scripts\\shared\\util_shared;", "contents": "util::freeze_player_controls(${1:b_frozen = true})"},
	{ "trigger": "is_bot\t#using scripts\\shared\\util_shared;", "contents": "util::is_bot()"},
	{ "trigger": "isHacked\t#using scripts\\shared\\util_shared;", "contents": "util::isHacked()"},
	{ "trigger": "getLastWeapon\t#using scripts\\shared\\util_shared;", "contents": "util::getLastWeapon()"},
	{ "trigger": "IsEnemyPlayer\t#using scripts\\shared\\util_shared;", "contents": "util::IsEnemyPlayer(${1:player})"},
	{ "trigger": "WaitTillSlowProcessAllowed\t#using scripts\\shared\\util_shared;", "contents": "util::WaitTillSlowProcessAllowed()"},
	{ "trigger": "get_start_time\t#using scripts\\shared\\util_shared; in microseconds", "contents": "util::get_start_time()"},
	{ "trigger": "note_elapsed_time\t#using scripts\\shared\\util_shared; in microseconds", "contents": "util::note_elapsed_time(${1:start_time}, ${2:label = \"unknown\"})"},
	{ "trigger": "get_elapsed_time\t#using scripts\\shared\\util_shared;", "contents": "util::get_elapsed_time(${1:start_time}, ${2:end_time})"},
	{ "trigger": "mayApplyScreenEffect\t#using scripts\\shared\\util_shared;", "contents": "util::mayApplyScreenEffect()"},
	{ "trigger": "waitTillNotMoving\t#using scripts\\shared\\util_shared;", "contents": "util::waitTillNotMoving()"},
	{ "trigger": "waitTillRollingOrNotMoving\t#using scripts\\shared\\util_shared;", "contents": "util::waitTillRollingOrNotMoving()"},
	{ "trigger": "getStatsTableName\t#using scripts\\shared\\util_shared;", "contents": "util::getStatsTableName()"},
	{ "trigger": "getWeaponClass\t#using scripts\\shared\\util_shared;", "contents": "util::getWeaponClass(${1:weapon})"},
	{ "trigger": "isUsingRemote\t#using scripts\\shared\\util_shared;", "contents": "util::isUsingRemote()"},
	{ "trigger": "deleteAfterTime\t#using scripts\\shared\\util_shared;", "contents": "util::deleteAfterTime(${1:time})"},
	{ "trigger": "deleteAfterTimeThread\t#using scripts\\shared\\util_shared;", "contents": "util::deleteAfterTimeThread(${1:time})"},
	{ "trigger": "waitForTime\t#using scripts\\shared\\util_shared;", "contents": "util::waitForTime(${1:time})"},
	{ "trigger": "waitForTimeAndNetworkFrame\t#using scripts\\shared\\util_shared;", "contents": "util::waitForTimeAndNetworkFrame(${1:time})"},
	{ "trigger": "deleteAfterTimeAndNetworkFrame\t#using scripts\\shared\\util_shared;", "contents": "util::deleteAfterTimeAndNetworkFrame(${1:time})"},
	{ "trigger": "drawcylinder\t#using scripts\\shared\\util_shared;", "contents": "util::drawcylinder(${1:pos}, ${2:rad}, ${3:height}, ${4:duration}, ${5:stop_notify}, ${6:color}, ${7:alpha})"},
	{ "trigger": "drawcylinder_think\t#using scripts\\shared\\util_shared;", "contents": "util::drawcylinder_think(${1:pos}, ${2:rad}, ${3:height}, ${4:seconds}, ${5:stop_notify}, ${6:color}, ${7:alpha})"},
	{ "trigger": "get_team_alive_players_s\t#using scripts\\shared\\util_shared;", "contents": "util::get_team_alive_players_s(${1:teamName})"},
	{ "trigger": "get_other_teams_alive_players_s\t#using scripts\\shared\\util_shared;", "contents": "util::get_other_teams_alive_players_s(${1:teamNameToIgnore})"},
	{ "trigger": "get_all_alive_players_s\t#using scripts\\shared\\util_shared;", "contents": "util::get_all_alive_players_s()"},
	{ "trigger": "spawn_array_struct\t#using scripts\\shared\\util_shared;", "contents": "util::spawn_array_struct()"},
	{ "trigger": "getHostPlayer\t#using scripts\\shared\\util_shared;", "contents": "util::getHostPlayer()"},
	{ "trigger": "getHostPlayerForBots\t#using scripts\\shared\\util_shared;", "contents": "util::getHostPlayerForBots()"},
	{ "trigger": "get_array_of_closest\t#using scripts\\shared\\util_shared;", "contents": "util::get_array_of_closest(${1:org}, ${2:array}, ${3:excluders}, ${4:max}, ${5:maxdist})"},
	{ "trigger": "set_lighting_state\t#using scripts\\shared\\util_shared;", "contents": "util::set_lighting_state(${1:n_state})"},
	{ "trigger": "set_sun_shadow_split_distance\t#using scripts\\shared\\util_shared;", "contents": "util::set_sun_shadow_split_distance(${1:f_distance})"},
	{ "trigger": "auto_delete\t#using scripts\\shared\\util_shared;", "contents": "util::auto_delete(${1:n_mode = DELETE_SAFE}, ${2:n_min_time_alive = 0}, ${3:n_dist_horizontal = 0}, ${4:n_dist_vertical = 0})"},
	{ "trigger": "query_ents\t#using scripts\\shared\\util_shared;", "contents": "util::query_ents(${1:&a_kvps_match}, ${2:b_match_all = true}, ${3:&a_kvps_ingnore}, ${4:b_ignore_spawners = false}, ${5:b_match_substrings = false})"},
	{ "trigger": "_query_ents_by_substring_helper\t#using scripts\\shared\\util_shared;", "contents": "util::_query_ents_by_substring_helper(${1:&a_ents}, ${2:str_value}, ${3:str_key = \"targetname\"}, ${4:b_ignore_spawners = false})"},
	{ "trigger": "get_weapon_by_name\t#using scripts\\shared\\util_shared;", "contents": "util::get_weapon_by_name(${1:weapon_name})"},
	{ "trigger": "is_female\t#using scripts\\shared\\util_shared;", "contents": "util::is_female()"},
	{ "trigger": "PositionQuery_PointArray\t#using scripts\\shared\\util_shared;", "contents": "util::PositionQuery_PointArray(${1:origin}, ${2:minSearchRadius}, ${3:maxSearchRadius}, ${4:halfHeight}, ${5:innerSpacing}, ${6:reachableBy_Ent})"},
	{ "trigger": "totalPlayerCount\t#using scripts\\shared\\util_shared;", "contents": "util::totalPlayerCount()"},
	{ "trigger": "isRankEnabled\t#using scripts\\shared\\util_shared;", "contents": "util::isRankEnabled()"},
	{ "trigger": "isOneRound\t#using scripts\\shared\\util_shared;", "contents": "util::isOneRound()"},
	{ "trigger": "isFirstRound\t#using scripts\\shared\\util_shared;", "contents": "util::isFirstRound()"},
	{ "trigger": "isLastRound\t#using scripts\\shared\\util_shared;", "contents": "util::isLastRound()"},
	{ "trigger": "wasLastRound\t#using scripts\\shared\\util_shared;", "contents": "util::wasLastRound()"},
	{ "trigger": "hitRoundLimit\t#using scripts\\shared\\util_shared;", "contents": "util::hitRoundLimit()"},
	{ "trigger": "anyTeamHitRoundWinLimit\t#using scripts\\shared\\util_shared;", "contents": "util::anyTeamHitRoundWinLimit()"},
	{ "trigger": "anyTeamHitRoundLimitWithDraws\t#using scripts\\shared\\util_shared;", "contents": "util::anyTeamHitRoundLimitWithDraws()"},
	{ "trigger": "getRoundWinLimitWinningTeam\t#using scripts\\shared\\util_shared;", "contents": "util::getRoundWinLimitWinningTeam()"},
	{ "trigger": "hitRoundWinLimit\t#using scripts\\shared\\util_shared;", "contents": "util::hitRoundWinLimit()"},
	{ "trigger": "any_team_hit_score_limit\t#using scripts\\shared\\util_shared;", "contents": "util::any_team_hit_score_limit()"},
	{ "trigger": "hitScoreLimit\t#using scripts\\shared\\util_shared;", "contents": "util::hitScoreLimit()"},
	{ "trigger": "get_current_round_score_limit\t#using scripts\\shared\\util_shared;", "contents": "util::get_current_round_score_limit()"},
	{ "trigger": "any_team_hit_round_score_limit\t#using scripts\\shared\\util_shared;", "contents": "util::any_team_hit_round_score_limit()"},
	{ "trigger": "hitRoundScoreLimit\t#using scripts\\shared\\util_shared;", "contents": "util::hitRoundScoreLimit()"},
	{ "trigger": "getRoundsWon\t#using scripts\\shared\\util_shared;", "contents": "util::getRoundsWon(${1:team})"},
	{ "trigger": "getOtherTeamsRoundsWon\t#using scripts\\shared\\util_shared;", "contents": "util::getOtherTeamsRoundsWon(${1:skip_team})"},
	{ "trigger": "getRoundsPlayed\t#using scripts\\shared\\util_shared;", "contents": "util::getRoundsPlayed()"},
	{ "trigger": "isRoundBased\t#using scripts\\shared\\util_shared;", "contents": "util::isRoundBased()"},
	{ "trigger": "GetCurrentGameMode\t#using scripts\\shared\\util_shared;", "contents": "util::GetCurrentGameMode()"},
	{ "trigger": "ground_position\t#using scripts\\shared\\util_shared;", "contents": "util::ground_position(${1:v_start}, ${2:n_max_dist = 5000}, ${3:n_ground_offset = 0}, ${4:e_ignore}, ${5:b_ignore_water = false}, ${6:b_ignore_glass = false})"},
	{ "trigger": "delayed_notify\t#using scripts\\shared\\util_shared;", "contents": "util::delayed_notify(${1:str_notify}, ${2:f_delay_seconds})"},
	{ "trigger": "delayed_delete\t#using scripts\\shared\\util_shared;", "contents": "util::delayed_delete(${1:str_notify}, ${2:f_delay_seconds})"},
	{ "trigger": "do_chyron_text\t#using scripts\\shared\\util_shared;", "contents": "util::do_chyron_text(${1:str_1_full}, ${2:str_1_short}, ${3:str_2_full}, ${4:str_2_short}, ${5:str_3_full}, ${6:str_3_short}, ${7:str_4_full}, ${8:str_4_short}, ${9:str_5_full = \"\"}, ${10:str_5_short = \"\"}, ${11:n_duration})"},
	{ "trigger": "player_set_chyron_menu\t#using scripts\\shared\\util_shared; self = player", "contents": "util::player_set_chyron_menu(${1:str_1_full}, ${2:str_1_short}, ${3:str_2_full}, ${4:str_2_short}, ${5:str_3_full}, ${6:str_3_short}, ${7:str_4_full}, ${8:str_4_short}, ${9:str_5_full = \"\"}, ${10:str_5_short = \"\"}, ${11:n_duration})"},
	{ "trigger": "get_next_safehouse\t#using scripts\\shared\\util_shared;", "contents": "util::get_next_safehouse(${1:str_next_map})"},
	{ "trigger": "is_safehouse\t#using scripts\\shared\\util_shared;", "contents": "util::is_safehouse()"},
	{ "trigger": "is_new_cp_map\t#using scripts\\shared\\util_shared;", "contents": "util::is_new_cp_map()"},
	{ "trigger": "player_lock_control\t#using scripts\\shared\\util_shared;", "contents": "util::player_lock_control()"},
	{ "trigger": "player_unlock_control\t#using scripts\\shared\\util_shared;", "contents": "util::player_unlock_control()"},
	{ "trigger": "show_hud\t#using scripts\\shared\\util_shared; self == player", "contents": "util::show_hud(${1:b_show})"},
	{ "trigger": "array_copy_if_array\t#using scripts\\shared\\util_shared;", "contents": "util::array_copy_if_array(${1:any_var})"},
	{ "trigger": "is_item_purchased\t#using scripts\\shared\\util_shared;", "contents": "util::is_item_purchased(${1:ref})"},
	{ "trigger": "has_purchased_perk_equipped\t#using scripts\\shared\\util_shared;", "contents": "util::has_purchased_perk_equipped(${1:ref})"},
	{ "trigger": "has_purchased_perk_equipped_with_specific_stat\t#using scripts\\shared\\util_shared;", "contents": "util::has_purchased_perk_equipped_with_specific_stat(${1:single_perk_ref}, ${2:stats_table_ref})"},
	{ "trigger": "has_flak_jacket_perk_purchased_and_equipped\t#using scripts\\shared\\util_shared;", "contents": "util::has_flak_jacket_perk_purchased_and_equipped()"},
	{ "trigger": "has_blind_eye_perk_purchased_and_equipped\t#using scripts\\shared\\util_shared;", "contents": "util::has_blind_eye_perk_purchased_and_equipped()"},
	{ "trigger": "has_ghost_perk_purchased_and_equipped\t#using scripts\\shared\\util_shared;", "contents": "util::has_ghost_perk_purchased_and_equipped()"},
	{ "trigger": "has_tactical_mask_purchased_and_equipped\t#using scripts\\shared\\util_shared;", "contents": "util::has_tactical_mask_purchased_and_equipped()"},
	{ "trigger": "has_hacker_perk_purchased_and_equipped\t#using scripts\\shared\\util_shared; aka engineering perk", "contents": "util::has_hacker_perk_purchased_and_equipped()"},
	{ "trigger": "has_cold_blooded_perk_purchased_and_equipped\t#using scripts\\shared\\util_shared;", "contents": "util::has_cold_blooded_perk_purchased_and_equipped()"},
	{ "trigger": "has_hard_wired_perk_purchased_and_equipped\t#using scripts\\shared\\util_shared;", "contents": "util::has_hard_wired_perk_purchased_and_equipped()"},
	{ "trigger": "has_gung_ho_perk_purchased_and_equipped\t#using scripts\\shared\\util_shared;", "contents": "util::has_gung_ho_perk_purchased_and_equipped()"},
	{ "trigger": "has_fast_hands_perk_purchased_and_equipped\t#using scripts\\shared\\util_shared;", "contents": "util::has_fast_hands_perk_purchased_and_equipped()"},
	{ "trigger": "has_scavenger_perk_purchased_and_equipped\t#using scripts\\shared\\util_shared;", "contents": "util::has_scavenger_perk_purchased_and_equipped()"},
	{ "trigger": "has_jetquiet_perk_purchased_and_equipped\t#using scripts\\shared\\util_shared; aka blast suppressor", "contents": "util::has_jetquiet_perk_purchased_and_equipped()"},
	{ "trigger": "has_awareness_perk_purchased_and_equipped\t#using scripts\\shared\\util_shared;", "contents": "util::has_awareness_perk_purchased_and_equipped()"},
	{ "trigger": "has_ninja_perk_purchased_and_equipped\t#using scripts\\shared\\util_shared; aka dead silence", "contents": "util::has_ninja_perk_purchased_and_equipped()"},
	{ "trigger": "has_toughness_perk_purchased_and_equipped\t#using scripts\\shared\\util_shared;", "contents": "util::has_toughness_perk_purchased_and_equipped()"},
	{ "trigger": "str_strip_lh\t#using scripts\\shared\\util_shared;", "contents": "util::str_strip_lh(${1:str})"},
	{ "trigger": "trackWallRunningDistance\t#using scripts\\shared\\util_shared; self == player", "contents": "util::trackWallRunningDistance()"},
	{ "trigger": "trackSprintDistance\t#using scripts\\shared\\util_shared; self == player", "contents": "util::trackSprintDistance()"},
	{ "trigger": "trackDoubleJumpDistance\t#using scripts\\shared\\util_shared; self == player", "contents": "util::trackDoubleJumpDistance()"},
	{ "trigger": "GetPlaySpaceCenter\t#using scripts\\shared\\util_shared;", "contents": "util::GetPlaySpaceCenter()"},
	{ "trigger": "GetPlaySpaceMaxWidth\t#using scripts\\shared\\util_shared;", "contents": "util::GetPlaySpaceMaxWidth()"},
	{ "trigger": "camo_on_connect\t#using scripts\\shared\\abilities\\gadgets\\_gadget_active_camo;", "contents": "_gadget_active_camo::camo_on_connect()"},
	{ "trigger": "camo_on_disconnect\t#using scripts\\shared\\abilities\\gadgets\\_gadget_active_camo;", "contents": "_gadget_active_camo::camo_on_disconnect()"},
	{ "trigger": "camo_on_spawn\t#using scripts\\shared\\abilities\\gadgets\\_gadget_active_camo;", "contents": "_gadget_active_camo::camo_on_spawn()"},
	{ "trigger": "camo_is_inuse\t#using scripts\\shared\\abilities\\gadgets\\_gadget_active_camo;", "contents": "_gadget_active_camo::camo_is_inuse(${1:slot})"},
	{ "trigger": "camo_is_flickering\t#using scripts\\shared\\abilities\\gadgets\\_gadget_active_camo;", "contents": "_gadget_active_camo::camo_is_flickering(${1:slot})"},
	{ "trigger": "camo_on_give\t#using scripts\\shared\\abilities\\gadgets\\_gadget_active_camo;", "contents": "_gadget_active_camo::camo_on_give(${1:slot}, ${2:weapon})"},
	{ "trigger": "camo_on_take\t#using scripts\\shared\\abilities\\gadgets\\_gadget_active_camo;", "contents": "_gadget_active_camo::camo_on_take(${1:slot}, ${2:weapon})"},
	{ "trigger": "camo_on_flicker\t#using scripts\\shared\\abilities\\gadgets\\_gadget_active_camo;", "contents": "_gadget_active_camo::camo_on_flicker(${1:slot}, ${2:weapon})"},
	{ "trigger": "camo_gadget_on\t#using scripts\\shared\\abilities\\gadgets\\_gadget_active_camo;", "contents": "_gadget_active_camo::camo_gadget_on(${1:slot}, ${2:weapon})"},
	{ "trigger": "camo_gadget_off\t#using scripts\\shared\\abilities\\gadgets\\_gadget_active_camo;", "contents": "_gadget_active_camo::camo_gadget_off(${1:slot}, ${2:weapon})"},
	{ "trigger": "suspend_camo_suit\t#using scripts\\shared\\abilities\\gadgets\\_gadget_active_camo;", "contents": "_gadget_active_camo::suspend_camo_suit(${1:slot}, ${2:weapon})"},
	{ "trigger": "suspend_camo_suit_wait\t#using scripts\\shared\\abilities\\gadgets\\_gadget_active_camo;", "contents": "_gadget_active_camo::suspend_camo_suit_wait(${1:slot}, ${2:weapon})"},
	{ "trigger": "convert_color_to_short_string\t#using scripts\\shared\\colors_shared;", "contents": "colors::convert_color_to_short_string()"},
	{ "trigger": "goto_current_ColorIndex\t#using scripts\\shared\\colors_shared;", "contents": "colors::goto_current_ColorIndex()"},
	{ "trigger": "get_color_list\t#using scripts\\shared\\colors_shared;", "contents": "colors::get_color_list()"},
	{ "trigger": "get_colorcodes_from_trigger\t#using scripts\\shared\\colors_shared;", "contents": "colors::get_colorcodes_from_trigger(${1:color_team}, ${2:team})"},
	{ "trigger": "trigger_issues_orders\t#using scripts\\shared\\colors_shared;", "contents": "colors::trigger_issues_orders(${1:color_team}, ${2:team})"},
	{ "trigger": "trigger_auto_disable\t#using scripts\\shared\\colors_shared;", "contents": "colors::trigger_auto_disable()"},
	{ "trigger": "activate_color_trigger\t#using scripts\\shared\\colors_shared;", "contents": "colors::activate_color_trigger(${1:team})"},
	{ "trigger": "get_colorcodes_and_activate_trigger\t#using scripts\\shared\\colors_shared;", "contents": "colors::get_colorcodes_and_activate_trigger(${1:color_team}, ${2:team})"},
	{ "trigger": "hero_catch_up_teleport\t#using scripts\\shared\\colors_shared;", "contents": "colors::hero_catch_up_teleport(${1:s_teleport}, ${2:n_min_dist_from_player = 400.0}, ${3:b_disable_colors = false}, ${4:func_callback})"},
	{ "trigger": "activate_color_trigger_internal\t#using scripts\\shared\\colors_shared;", "contents": "colors::activate_color_trigger_internal(${1:colorCodes}, ${2:colors}, ${3:team}, ${4:colorCodesByColorIndex})"},
	{ "trigger": "same_color_code_as_last_time\t#using scripts\\shared\\colors_shared;", "contents": "colors::same_color_code_as_last_time(${1:team}, ${2:color})"},
	{ "trigger": "process_cover_node_with_last_in_mind_allies\t#using scripts\\shared\\colors_shared;", "contents": "colors::process_cover_node_with_last_in_mind_allies(${1:node}, ${2:lastColor})"},
	{ "trigger": "process_cover_node_with_last_in_mind_axis\t#using scripts\\shared\\colors_shared;", "contents": "colors::process_cover_node_with_last_in_mind_axis(${1:node}, ${2:lastColor})"},
	{ "trigger": "process_cover_node\t#using scripts\\shared\\colors_shared;", "contents": "colors::process_cover_node(${1:node}, ${2:null})"},
	{ "trigger": "process_path_node\t#using scripts\\shared\\colors_shared;", "contents": "colors::process_path_node(${1:node}, ${2:null})"},
	{ "trigger": "prioritize_colorCoded_nodes\t#using scripts\\shared\\colors_shared;", "contents": "colors::prioritize_colorCoded_nodes(${1:team}, ${2:colorCode}, ${3:color})"},
	{ "trigger": "get_prioritized_colorCoded_nodes\t#using scripts\\shared\\colors_shared;", "contents": "colors::get_prioritized_colorCoded_nodes(${1:team}, ${2:colorCode}, ${3:color})"},
	{ "trigger": "issue_leave_node_order_to_ai_and_get_ai\t#using scripts\\shared\\colors_shared;", "contents": "colors::issue_leave_node_order_to_ai_and_get_ai(${1:colorCode}, ${2:color}, ${3:team})"},
	{ "trigger": "issue_color_order_to_ai\t#using scripts\\shared\\colors_shared;", "contents": "colors::issue_color_order_to_ai(${1:colorCode}, ${2:color}, ${3:team}, ${4:ai})"},
	{ "trigger": "take_color_node\t#using scripts\\shared\\colors_shared;", "contents": "colors::take_color_node(${1:node}, ${2:colorCode}, ${3:trigger}, ${4:counter})"},
	{ "trigger": "player_color_node\t#using scripts\\shared\\colors_shared;", "contents": "colors::player_color_node()"},
	{ "trigger": "color_node_finds_a_user\t#using scripts\\shared\\colors_shared;", "contents": "colors::color_node_finds_a_user()"},
	{ "trigger": "color_node_finds_user_from_colorcodes\t#using scripts\\shared\\colors_shared;", "contents": "colors::color_node_finds_user_from_colorcodes(${1:colorCodeString}, ${2:team})"},
	{ "trigger": "color_node_finds_user_for_colorCode\t#using scripts\\shared\\colors_shared;", "contents": "colors::color_node_finds_user_for_colorCode(${1:colorCode}, ${2:team})"},
	{ "trigger": "occupies_colorCode\t#using scripts\\shared\\colors_shared;", "contents": "colors::occupies_colorCode(${1:colorCode})"},
	{ "trigger": "ai_sets_goal_with_delay\t#using scripts\\shared\\colors_shared;", "contents": "colors::ai_sets_goal_with_delay(${1:node})"},
	{ "trigger": "ai_sets_goal\t#using scripts\\shared\\colors_shared;", "contents": "colors::ai_sets_goal(${1:node})"},
	{ "trigger": "set_goal_and_volume\t#using scripts\\shared\\colors_shared;", "contents": "colors::set_goal_and_volume(${1:node})"},
	{ "trigger": "color_force_goal\t#using scripts\\shared\\colors_shared;", "contents": "colors::color_force_goal(${1:node})"},
	{ "trigger": "careful_logic\t#using scripts\\shared\\colors_shared;", "contents": "colors::careful_logic(${1:node}, ${2:volume})"},
	{ "trigger": "recover_from_careful_disable\t#using scripts\\shared\\colors_shared;", "contents": "colors::recover_from_careful_disable(${1:node})"},
	{ "trigger": "use_big_goal_until_goal_is_safe\t#using scripts\\shared\\colors_shared;", "contents": "colors::use_big_goal_until_goal_is_safe(${1:node}, ${2:volume})"},
	{ "trigger": "wait_until_an_enemy_is_in_safe_area\t#using scripts\\shared\\colors_shared;", "contents": "colors::wait_until_an_enemy_is_in_safe_area(${1:node}, ${2:volume})"},
	{ "trigger": "my_current_node_delays\t#using scripts\\shared\\colors_shared;", "contents": "colors::my_current_node_delays()"},
	{ "trigger": "process_color_order_to_ai\t#using scripts\\shared\\colors_shared;", "contents": "colors::process_color_order_to_ai(${1:node}, ${2:trigger}, ${3:counter})"},
	{ "trigger": "get_best_available_colored_node\t#using scripts\\shared\\colors_shared;", "contents": "colors::get_best_available_colored_node()"},
	{ "trigger": "get_best_available_new_colored_node\t#using scripts\\shared\\colors_shared;", "contents": "colors::get_best_available_new_colored_node()"},
	{ "trigger": "process_stop_short_of_node\t#using scripts\\shared\\colors_shared;", "contents": "colors::process_stop_short_of_node(${1:node})"},
	{ "trigger": "wait_for_killanimscript_or_time\t#using scripts\\shared\\colors_shared;", "contents": "colors::wait_for_killanimscript_or_time(${1:timer})"},
	{ "trigger": "reached_node_but_could_not_claim_it\t#using scripts\\shared\\colors_shared;", "contents": "colors::reached_node_but_could_not_claim_it(${1:node})"},
	{ "trigger": "decrementColorUsers\t#using scripts\\shared\\colors_shared;", "contents": "colors::decrementColorUsers(${1:node})"},
	{ "trigger": "colorIsLegit\t#using scripts\\shared\\colors_shared;", "contents": "colors::colorIsLegit(${1:color})"},
	{ "trigger": "add_volume_to_global_arrays\t#using scripts\\shared\\colors_shared;", "contents": "colors::add_volume_to_global_arrays(${1:colorCode}, ${2:team})"},
	{ "trigger": "add_node_to_global_arrays\t#using scripts\\shared\\colors_shared;", "contents": "colors::add_node_to_global_arrays(${1:colorCode}, ${2:team})"},
	{ "trigger": "left_color_node\t#using scripts\\shared\\colors_shared;", "contents": "colors::left_color_node()"},
	{ "trigger": "GetColorNumberArray\t#using scripts\\shared\\colors_shared;", "contents": "colors::GetColorNumberArray()"},
	{ "trigger": "removeSpawnerFromColorNumberArray\t#using scripts\\shared\\colors_shared;", "contents": "colors::removeSpawnerFromColorNumberArray()"},
	{ "trigger": "add_cover_node\t#using scripts\\shared\\colors_shared;", "contents": "colors::add_cover_node(${1:type})"},
	{ "trigger": "add_path_node\t#using scripts\\shared\\colors_shared;", "contents": "colors::add_path_node(${1:type})"},
	{ "trigger": "colorNode_spawn_reinforcement\t#using scripts\\shared\\colors_shared;", "contents": "colors::colorNode_spawn_reinforcement(${1:classname}, ${2:fromColor})"},
	{ "trigger": "colorNode_replace_on_death\t#using scripts\\shared\\colors_shared;", "contents": "colors::colorNode_replace_on_death()"},
	{ "trigger": "get_color_from_order\t#using scripts\\shared\\colors_shared;", "contents": "colors::get_color_from_order(${1:color}, ${2:color_order})"},
	{ "trigger": "friendly_spawner_vision_checker\t#using scripts\\shared\\colors_shared;", "contents": "colors::friendly_spawner_vision_checker()"},
	{ "trigger": "get_color_spawner\t#using scripts\\shared\\colors_shared;", "contents": "colors::get_color_spawner(${1:classname}, ${2:fromColor})"},
	{ "trigger": "getClassColorHash\t#using scripts\\shared\\colors_shared;", "contents": "colors::getClassColorHash(${1:classname}, ${2:fromcolor})"},
	{ "trigger": "lock_spawner_for_awhile\t#using scripts\\shared\\colors_shared;", "contents": "colors::lock_spawner_for_awhile()"},
	{ "trigger": "player_sees_spawner\t#using scripts\\shared\\colors_shared;", "contents": "colors::player_sees_spawner()"},
	{ "trigger": "kill_color_replacements\t#using scripts\\shared\\colors_shared;", "contents": "colors::kill_color_replacements()"},
	{ "trigger": "remove_replace_on_death\t#using scripts\\shared\\colors_shared;", "contents": "colors::remove_replace_on_death()"},
	{ "trigger": "set_force_color\t#using scripts\\shared\\colors_shared;", "contents": "colors::set_force_color(${1:_color})"},
	{ "trigger": "remove_colorForced_ai_when_dead\t#using scripts\\shared\\colors_shared;", "contents": "colors::remove_colorForced_ai_when_dead(${1:ai})"},
	{ "trigger": "shortenColor\t#using scripts\\shared\\colors_shared;", "contents": "colors::shortenColor(${1:color})"},
	{ "trigger": "set_force_color_spawner\t#using scripts\\shared\\colors_shared;", "contents": "colors::set_force_color_spawner(${1:color})"},
	{ "trigger": "new_color_being_set\t#using scripts\\shared\\colors_shared;", "contents": "colors::new_color_being_set(${1:color})"},
	{ "trigger": "update_debug_friendlycolor_on_death\t#using scripts\\shared\\colors_shared;", "contents": "colors::update_debug_friendlycolor_on_death()"},
	{ "trigger": "update_debug_friendlycolor\t#using scripts\\shared\\colors_shared;", "contents": "colors::update_debug_friendlycolor()"},
	{ "trigger": "has_color\t#using scripts\\shared\\colors_shared;", "contents": "colors::has_color()"},
	{ "trigger": "get_force_color\t#using scripts\\shared\\colors_shared;", "contents": "colors::get_force_color()"},
	{ "trigger": "get_force_color_guys\t#using scripts\\shared\\colors_shared;", "contents": "colors::get_force_color_guys(${1:team}, ${2:color})"},
	{ "trigger": "get_all_force_color_friendlies\t#using scripts\\shared\\colors_shared;", "contents": "colors::get_all_force_color_friendlies()"},
	{ "trigger": "disable\t#using scripts\\shared\\colors_shared;", "contents": "colors::disable(${1:stop_being_careful})"},
	{ "trigger": "enable\t#using scripts\\shared\\colors_shared;", "contents": "colors::enable()"},
	{ "trigger": "is_color_ai\t#using scripts\\shared\\colors_shared;", "contents": "colors::is_color_ai()"},
	{ "trigger": "autoexec ignore_systems\t#using scripts\\zm\\_zm;", "contents": "zm::autoexec ignore_systems()"},
	{ "trigger": "cheat_enabled\t#using scripts\\zm\\_zm;", "contents": "zm::cheat_enabled(${1:val})"},
	{ "trigger": "startUnitriggers\t#using scripts\\zm\\_zm;", "contents": "zm::startUnitriggers()"},
	{ "trigger": "drive_client_connected_notifies\t#using scripts\\zm\\_zm;", "contents": "zm::drive_client_connected_notifies()"},
	{ "trigger": "fade_out_intro_screen_zm\t#using scripts\\zm\\_zm;", "contents": "zm::fade_out_intro_screen_zm(${1:hold_black_time}, ${2:fade_out_time}, ${3:destroyed_afterwards})"},
	{ "trigger": "onAllPlayersReady\t#using scripts\\zm\\_zm;", "contents": "zm::onAllPlayersReady()"},
	{ "trigger": "start_zombie_logic_in_x_sec\t#using scripts\\zm\\_zm;", "contents": "zm::start_zombie_logic_in_x_sec(${1:time_to_wait})"},
	{ "trigger": "getAllOtherPlayers\t#using scripts\\zm\\_zm;", "contents": "zm::getAllOtherPlayers()"},
	{ "trigger": "getFreeSpawnpoint\t#using scripts\\zm\\_zm;", "contents": "zm::getFreeSpawnpoint(${1:spawnpoints}, ${2:player})"},
	{ "trigger": "delete_in_createfx\t#using scripts\\zm\\_zm;", "contents": "zm::delete_in_createfx()"},
	{ "trigger": "add_bots\t#using scripts\\zm\\_zm;", "contents": "zm::add_bots()"},
	{ "trigger": "zbot_spawn\t#using scripts\\zm\\_zm;", "contents": "zm::zbot_spawn()"},
	{ "trigger": "post_all_players_connected\t#using scripts\\zm\\_zm;", "contents": "zm::post_all_players_connected()"},
	{ "trigger": "zombiemode_melee_miss\t#using scripts\\zm\\_zm;", "contents": "zm::zombiemode_melee_miss()"},
	{ "trigger": "player_track_ammo_count\t#using scripts\\zm\\_zm;", "contents": "zm::player_track_ammo_count()"},
	{ "trigger": "spawn_vo\t#using scripts\\zm\\_zm;", "contents": "zm::spawn_vo()"},
	{ "trigger": "spawn_vo_player\t#using scripts\\zm\\_zm;", "contents": "zm::spawn_vo_player(${1:index}, ${2:num})"},
	{ "trigger": "precache_models\t#using scripts\\zm\\_zm;", "contents": "zm::precache_models()"},
	{ "trigger": "Callback_PlayerLastStand\t#using scripts\\zm\\_zm;", "contents": "zm::Callback_PlayerLastStand(${1:eInflictor}, ${2:eAttacker}, ${3:iDamage}, ${4:sMeansOfDeath}, ${5:weapon}, ${6:vDir}, ${7:sHitLoc}, ${8:psOffsetTime}, ${9:deathAnimDuration})"},
	{ "trigger": "CodeCallback_DestructibleEvent\t#using scripts\\zm\\_zm;", "contents": "zm::CodeCallback_DestructibleEvent(${1:event}, ${2:param1}, ${3:param2}, ${4:param3})"},
	{ "trigger": "breakAfter\t#using scripts\\zm\\_zm;", "contents": "zm::breakAfter(${1:time}, ${2:damage}, ${3:piece})"},
	{ "trigger": "Callback_PlayerDamage\t#using scripts\\zm\\_zm;", "contents": "zm::Callback_PlayerDamage(${1:eInflictor}, ${2:eAttacker}, ${3:iDamage}, ${4:iDFlags}, ${5:sMeansOfDeath}, ${6:weapon}, ${7:vPoint}, ${8:vDir}, ${9:sHitLoc}, ${10:vDamageOrigin}, ${11:psOffsetTime}, ${12:boneIndex}, ${13:vSurfaceNormal})"},
	{ "trigger": "finishPlayerDamageWrapper\t#using scripts\\zm\\_zm;", "contents": "zm::finishPlayerDamageWrapper(${1:eInflictor}, ${2:eAttacker}, ${3:iDamage}, ${4:iDFlags}, ${5:sMeansOfDeath}, ${6:weapon}, ${7:vPoint}, ${8:vDir}, ${9:sHitLoc}, ${10:vDamageOrigin}, ${11:psOffsetTime}, ${12:boneIndex}, ${13:vSurfaceNormal})"},
	{ "trigger": "register_player_friendly_fire_callback\t#using scripts\\zm\\_zm;", "contents": "zm::register_player_friendly_fire_callback(${1:callback})"},
	{ "trigger": "process_friendly_fire_callbacks\t#using scripts\\zm\\_zm;", "contents": "zm::process_friendly_fire_callbacks(${1:eInflictor}, ${2:eAttacker}, ${3:iDamage}, ${4:iDFlags}, ${5:sMeansOfDeath}, ${6:weapon}, ${7:vPoint}, ${8:vDir}, ${9:sHitLoc}, ${10:psOffsetTime}, ${11:boneIndex})"},
	{ "trigger": "zombie_intro_screen\t#using scripts\\zm\\_zm;", "contents": "zm::zombie_intro_screen(${1:string1}, ${2:string2}, ${3:string3}, ${4:string4}, ${5:string5})"},
	{ "trigger": "players_playing\t#using scripts\\zm\\_zm;", "contents": "zm::players_playing()"},
	{ "trigger": "onPlayerConnect_clientDvars\t#using scripts\\zm\\_zm;", "contents": "zm::onPlayerConnect_clientDvars()"},
	{ "trigger": "checkForAllDead\t#using scripts\\zm\\_zm;", "contents": "zm::checkForAllDead(${1:excluded_player})"},
	{ "trigger": "onPlayerSpawned\t#using scripts\\zm\\_zm;", "contents": "zm::onPlayerSpawned()"},
	{ "trigger": "player_spawn_protection\t#using scripts\\zm\\_zm;", "contents": "zm::player_spawn_protection()"},
	{ "trigger": "spawn_life_brush\t#using scripts\\zm\\_zm;", "contents": "zm::spawn_life_brush(${1:origin}, ${2:radius}, ${3:height})"},
	{ "trigger": "in_life_brush\t#using scripts\\zm\\_zm;", "contents": "zm::in_life_brush()"},
	{ "trigger": "spawn_kill_brush\t#using scripts\\zm\\_zm;", "contents": "zm::spawn_kill_brush(${1:origin}, ${2:radius}, ${3:height})"},
	{ "trigger": "in_kill_brush\t#using scripts\\zm\\_zm;", "contents": "zm::in_kill_brush()"},
	{ "trigger": "in_enabled_playable_area\t#using scripts\\zm\\_zm;", "contents": "zm::in_enabled_playable_area()"},
	{ "trigger": "get_player_out_of_playable_area_monitor_wait_time\t#using scripts\\zm\\_zm;", "contents": "zm::get_player_out_of_playable_area_monitor_wait_time()"},
	{ "trigger": "player_out_of_playable_area_monitor\t#using scripts\\zm\\_zm;", "contents": "zm::player_out_of_playable_area_monitor()"},
	{ "trigger": "get_player_too_many_weapons_monitor_wait_time\t#using scripts\\zm\\_zm;", "contents": "zm::get_player_too_many_weapons_monitor_wait_time()"},
	{ "trigger": "player_too_many_weapons_monitor_takeaway_simultaneous\t#using scripts\\zm\\_zm;", "contents": "zm::player_too_many_weapons_monitor_takeaway_simultaneous(${1:primary_weapons_to_take})"},
	{ "trigger": "player_too_many_weapons_monitor_takeaway_sequence\t#using scripts\\zm\\_zm;", "contents": "zm::player_too_many_weapons_monitor_takeaway_sequence(${1:primary_weapons_to_take})"},
	{ "trigger": "player_too_many_weapons_monitor\t#using scripts\\zm\\_zm;", "contents": "zm::player_too_many_weapons_monitor()"},
	{ "trigger": "player_monitor_travel_dist\t#using scripts\\zm\\_zm;", "contents": "zm::player_monitor_travel_dist()"},
	{ "trigger": "player_monitor_time_played\t#using scripts\\zm\\_zm;", "contents": "zm::player_monitor_time_played()"},
	{ "trigger": "player_grenade_multiattack_bookmark_watcher\t#using scripts\\zm\\_zm;", "contents": "zm::player_grenade_multiattack_bookmark_watcher(${1:grenade})"},
	{ "trigger": "player_grenade_watcher\t#using scripts\\zm\\_zm;", "contents": "zm::player_grenade_watcher()"},
	{ "trigger": "player_prevent_damage\t#using scripts\\zm\\_zm;", "contents": "zm::player_prevent_damage(${1:eInflictor}, ${2:eAttacker}, ${3:iDamage}, ${4:iDFlags}, ${5:sMeansOfDeath}, ${6:weapon}, ${7:vPoint}, ${8:vDir}, ${9:sHitLoc}, ${10:psOffsetTime})"},
	{ "trigger": "player_revive_monitor\t#using scripts\\zm\\_zm;", "contents": "zm::player_revive_monitor()"},
	{ "trigger": "laststand_giveback_player_perks\t#using scripts\\zm\\_zm;", "contents": "zm::laststand_giveback_player_perks()"},
	{ "trigger": "remote_revive_watch\t#using scripts\\zm\\_zm;", "contents": "zm::remote_revive_watch()"},
	{ "trigger": "player_laststand\t#using scripts\\zm\\_zm;", "contents": "zm::player_laststand(${1:eInflictor}, ${2:attacker}, ${3:iDamage}, ${4:sMeansOfDeath}, ${5:weapon}, ${6:vDir}, ${7:sHitLoc}, ${8:psOffsetTime}, ${9:deathAnimDuration})"},
	{ "trigger": "failsafe_revive_give_back_weapons\t#using scripts\\zm\\_zm;", "contents": "zm::failsafe_revive_give_back_weapons(${1:excluded_player})"},
	{ "trigger": "set_intermission_point\t#using scripts\\zm\\_zm;", "contents": "zm::set_intermission_point()"},
	{ "trigger": "spawnSpectator\t#using scripts\\zm\\_zm;", "contents": "zm::spawnSpectator()"},
	{ "trigger": "setSpectatePermissions\t#using scripts\\zm\\_zm;", "contents": "zm::setSpectatePermissions(${1:isOn})"},
	{ "trigger": "spectator_thread\t#using scripts\\zm\\_zm;", "contents": "zm::spectator_thread()"},
	{ "trigger": "spectator_toggle_3rd_person\t#using scripts\\zm\\_zm;", "contents": "zm::spectator_toggle_3rd_person()"},
	{ "trigger": "set_third_person\t#using scripts\\zm\\_zm;", "contents": "zm::set_third_person(${1:value})"},
	{ "trigger": "last_stand_revive\t#using scripts\\zm\\_zm;", "contents": "zm::last_stand_revive()"},
	{ "trigger": "last_stand_pistol_swap\t#using scripts\\zm\\_zm;", "contents": "zm::last_stand_pistol_swap()"},
	{ "trigger": "last_stand_minimum_pistol_override\t#using scripts\\zm\\_zm;", "contents": "zm::last_stand_minimum_pistol_override()"},
	{ "trigger": "last_stand_best_pistol\t#using scripts\\zm\\_zm;", "contents": "zm::last_stand_best_pistol()"},
	{ "trigger": "last_stand_compare_pistols\t#using scripts\\zm\\_zm;", "contents": "zm::last_stand_compare_pistols(${1:struct_array})"},
	{ "trigger": "last_stand_save_pistol_ammo\t#using scripts\\zm\\_zm;", "contents": "zm::last_stand_save_pistol_ammo()"},
	{ "trigger": "last_stand_restore_pistol_ammo\t#using scripts\\zm\\_zm;", "contents": "zm::last_stand_restore_pistol_ammo()"},
	{ "trigger": "last_stand_take_thrown_grenade\t#using scripts\\zm\\_zm;", "contents": "zm::last_stand_take_thrown_grenade()"},
	{ "trigger": "last_stand_grenade_save_and_return\t#using scripts\\zm\\_zm;", "contents": "zm::last_stand_grenade_save_and_return()"},
	{ "trigger": "spectators_respawn\t#using scripts\\zm\\_zm;", "contents": "zm::spectators_respawn()"},
	{ "trigger": "spectator_respawn_player\t#using scripts\\zm\\_zm;", "contents": "zm::spectator_respawn_player()"},
	{ "trigger": "spectator_respawn\t#using scripts\\zm\\_zm;", "contents": "zm::spectator_respawn()"},
	{ "trigger": "check_for_valid_spawn_near_team\t#using scripts\\zm\\_zm;", "contents": "zm::check_for_valid_spawn_near_team(${1:revivee}, ${2:return_struct})"},
	{ "trigger": "get_valid_spawn_location\t#using scripts\\zm\\_zm;", "contents": "zm::get_valid_spawn_location(${1:revivee}, ${2:spawn_points}, ${3:closest_group}, ${4:return_struct})"},
	{ "trigger": "check_for_valid_spawn_near_position\t#using scripts\\zm\\_zm;", "contents": "zm::check_for_valid_spawn_near_position(${1:revivee}, ${2:v_position}, ${3:return_struct})"},
	{ "trigger": "check_for_valid_spawn_within_range\t#using scripts\\zm\\_zm;", "contents": "zm::check_for_valid_spawn_within_range(${1:revivee}, ${2:v_position}, ${3:return_struct}, ${4:min_distance}, ${5:max_distance})"},
	{ "trigger": "get_players_on_team\t#using scripts\\zm\\_zm;", "contents": "zm::get_players_on_team(${1:exclude})"},
	{ "trigger": "get_safe_breadcrumb_pos\t#using scripts\\zm\\_zm;", "contents": "zm::get_safe_breadcrumb_pos(${1:player})"},
	{ "trigger": "round_spawning\t#using scripts\\zm\\_zm;", "contents": "zm::round_spawning()"},
	{ "trigger": "get_zombie_count_for_round\t#using scripts\\zm\\_zm;", "contents": "zm::get_zombie_count_for_round(${1:n_round}, ${2:n_player_count})"},
	{ "trigger": "run_custom_ai_spawn_checks\t#using scripts\\zm\\_zm;", "contents": "zm::run_custom_ai_spawn_checks()"},
	{ "trigger": "register_custom_ai_spawn_check\t#using scripts\\zm\\_zm;", "contents": "zm::register_custom_ai_spawn_check(${1:str_id}, ${2:func_check}, ${3:func_get_spawners}, ${4:func_get_locations})"},
	{ "trigger": "round_spawning_test\t#using scripts\\zm\\_zm;", "contents": "zm::round_spawning_test()"},
	{ "trigger": "round_pause\t#using scripts\\zm\\_zm;", "contents": "zm::round_pause(${1:delay})"},
	{ "trigger": "round_start\t#using scripts\\zm\\_zm;", "contents": "zm::round_start()"},
	{ "trigger": "play_door_dialog\t#using scripts\\zm\\_zm;", "contents": "zm::play_door_dialog()"},
	{ "trigger": "wait_until_first_player\t#using scripts\\zm\\_zm;", "contents": "zm::wait_until_first_player()"},
	{ "trigger": "round_one_up\t#using scripts\\zm\\_zm;", "contents": "zm::round_one_up()"},
	{ "trigger": "round_over\t#using scripts\\zm\\_zm;", "contents": "zm::round_over()"},
	{ "trigger": "get_delay_between_rounds\t#using scripts\\zm\\_zm;", "contents": "zm::get_delay_between_rounds()"},
	{ "trigger": "recordPlayerRoundWeapon\t#using scripts\\zm\\_zm;", "contents": "zm::recordPlayerRoundWeapon(${1:weapon}, ${2:statname})"},
	{ "trigger": "recordPrimaryWeaponsStats\t#using scripts\\zm\\_zm;", "contents": "zm::recordPrimaryWeaponsStats(${1:base_stat_name}, ${2:max_weapons})"},
	{ "trigger": "recordRoundStartStats\t#using scripts\\zm\\_zm; self == player", "contents": "zm::recordRoundStartStats()"},
	{ "trigger": "recordRoundEndStats\t#using scripts\\zm\\_zm; self == player", "contents": "zm::recordRoundEndStats()"},
	{ "trigger": "round_think\t#using scripts\\zm\\_zm;", "contents": "zm::round_think(${1:restart = false})"},
	{ "trigger": "award_grenades_for_survivors\t#using scripts\\zm\\_zm;", "contents": "zm::award_grenades_for_survivors()"},
	{ "trigger": "get_zombie_spawn_delay\t#using scripts\\zm\\_zm;", "contents": "zm::get_zombie_spawn_delay(${1:n_round})"},
	{ "trigger": "round_wait\t#using scripts\\zm\\_zm;", "contents": "zm::round_wait()"},
	{ "trigger": "sndMusicOnKillRound\t#using scripts\\zm\\_zm;", "contents": "zm::sndMusicOnKillRound()"},
	{ "trigger": "zombify_player\t#using scripts\\zm\\_zm; self = player", "contents": "zm::zombify_player()"},
	{ "trigger": "playerzombie_player_damage\t#using scripts\\zm\\_zm;", "contents": "zm::playerzombie_player_damage()"},
	{ "trigger": "playerzombie_downed_state\t#using scripts\\zm\\_zm;", "contents": "zm::playerzombie_downed_state()"},
	{ "trigger": "playerzombie_downed_hud\t#using scripts\\zm\\_zm;", "contents": "zm::playerzombie_downed_hud()"},
	{ "trigger": "playerzombie_soundboard\t#using scripts\\zm\\_zm;", "contents": "zm::playerzombie_soundboard()"},
	{ "trigger": "can_do_input\t#using scripts\\zm\\_zm;", "contents": "zm::can_do_input(${1:inputType})"},
	{ "trigger": "playerzombie_play_sound\t#using scripts\\zm\\_zm;", "contents": "zm::playerzombie_play_sound(${1:alias})"},
	{ "trigger": "playerzombie_waitfor_buttonrelease\t#using scripts\\zm\\_zm;", "contents": "zm::playerzombie_waitfor_buttonrelease(${1:inputType})"},
	{ "trigger": "remove_ignore_attacker\t#using scripts\\zm\\_zm;", "contents": "zm::remove_ignore_attacker()"},
	{ "trigger": "player_damage_override_cheat\t#using scripts\\zm\\_zm;", "contents": "zm::player_damage_override_cheat(${1:eInflictor}, ${2:eAttacker}, ${3:iDamage}, ${4:iDFlags}, ${5:sMeansOfDeath}, ${6:weapon}, ${7:vPoint}, ${8:vDir}, ${9:sHitLoc}, ${10:psOffsetTime})"},
	{ "trigger": "player_damage_override\t#using scripts\\zm\\_zm;", "contents": "zm::player_damage_override(${1:eInflictor}, ${2:eAttacker}, ${3:iDamage}, ${4:iDFlags}, ${5:sMeansOfDeath}, ${6:weapon}, ${7:vPoint}, ${8:vDir}, ${9:sHitLoc}, ${10:psOffsetTime})"},
	{ "trigger": "clear_path_timers\t#using scripts\\zm\\_zm;", "contents": "zm::clear_path_timers()"},
	{ "trigger": "check_player_damage_callbacks\t#using scripts\\zm\\_zm;", "contents": "zm::check_player_damage_callbacks(${1:eInflictor}, ${2:eAttacker}, ${3:iDamage}, ${4:iDFlags}, ${5:sMeansOfDeath}, ${6:weapon}, ${7:vPoint}, ${8:vDir}, ${9:sHitLoc}, ${10:psOffsetTime})"},
	{ "trigger": "register_player_damage_callback\t#using scripts\\zm\\_zm;", "contents": "zm::register_player_damage_callback(${1:func})"},
	{ "trigger": "wait_and_revive\t#using scripts\\zm\\_zm;", "contents": "zm::wait_and_revive()"},
	{ "trigger": "register_vehicle_damage_callback\t#using scripts\\zm\\_zm;", "contents": "zm::register_vehicle_damage_callback(${1:func})"},
	{ "trigger": "vehicle_damage_override\t#using scripts\\zm\\_zm;", "contents": "zm::vehicle_damage_override(${1:eInflictor}, ${2:eAttacker}, ${3:iDamage}, ${4:iDFlags}, ${5:sMeansOfDeath}, ${6:weapon}, ${7:vPoint}, ${8:vDir}, ${9:sHitLoc}, ${10:vDamageOrigin}, ${11:psOffsetTime}, ${12:damageFromUnderneath}, ${13:modelIndex}, ${14:partName}, ${15:vSurfaceNormal})"},
	{ "trigger": "actor_damage_override\t#using scripts\\zm\\_zm;", "contents": "zm::actor_damage_override(${1:inflictor}, ${2:attacker}, ${3:damage}, ${4:flags}, ${5:meansofdeath}, ${6:weapon}, ${7:vpoint}, ${8:vdir}, ${9:sHitLoc}, ${10:psOffsetTime}, ${11:boneIndex}, ${12:surfaceType})"},
	{ "trigger": "check_actor_damage_callbacks\t#using scripts\\zm\\_zm;", "contents": "zm::check_actor_damage_callbacks(${1:inflictor}, ${2:attacker}, ${3:damage}, ${4:flags}, ${5:meansofdeath}, ${6:weapon}, ${7:vpoint}, ${8:vdir}, ${9:sHitLoc}, ${10:psOffsetTime}, ${11:boneIndex}, ${12:surfaceType})"},
	{ "trigger": "register_actor_damage_callback\t#using scripts\\zm\\_zm;", "contents": "zm::register_actor_damage_callback(${1:func})"},
	{ "trigger": "actor_damage_override_wrapper\t#using scripts\\zm\\_zm;", "contents": "zm::actor_damage_override_wrapper(${1:inflictor}, ${2:attacker}, ${3:damage}, ${4:flags}, ${5:meansofdeath}, ${6:weapon}, ${7:vpoint}, ${8:vdir}, ${9:sHitLoc}, ${10:vDamageOrigin}, ${11:psOffsetTime}, ${12:boneIndex}, ${13:modelIndex}, ${14:surfaceType}, ${15:vSurfaceNormal})"},
	{ "trigger": "register_zombie_damage_override_callback\t#using scripts\\zm\\_zm;", "contents": "zm::register_zombie_damage_override_callback(${1:func})"},
	{ "trigger": "actor_killed_override\t#using scripts\\zm\\_zm;", "contents": "zm::actor_killed_override(${1:eInflictor}, ${2:attacker}, ${3:iDamage}, ${4:sMeansOfDeath}, ${5:weapon}, ${6:vDir}, ${7:sHitLoc}, ${8:psOffsetTime})"},
	{ "trigger": "round_end_monitor\t#using scripts\\zm\\_zm;", "contents": "zm::round_end_monitor()"},
	{ "trigger": "end_game\t#using scripts\\zm\\_zm;", "contents": "zm::end_game()"},
	{ "trigger": "end_game_player_was_spectator\t#using scripts\\zm\\_zm;", "contents": "zm::end_game_player_was_spectator()"},
	{ "trigger": "disable_end_game_intermission\t#using scripts\\zm\\_zm;", "contents": "zm::disable_end_game_intermission(${1:delay})"},
	{ "trigger": "check_end_game_intermission_delay\t#using scripts\\zm\\_zm;", "contents": "zm::check_end_game_intermission_delay()"},
	{ "trigger": "upload_leaderboards\t#using scripts\\zm\\_zm;", "contents": "zm::upload_leaderboards()"},
	{ "trigger": "uploadGlobalStatCounters\t#using scripts\\zm\\_zm;", "contents": "zm::uploadGlobalStatCounters()"},
	{ "trigger": "player_fake_death\t#using scripts\\zm\\_zm;", "contents": "zm::player_fake_death()"},
	{ "trigger": "player_exit_level\t#using scripts\\zm\\_zm;", "contents": "zm::player_exit_level()"},
	{ "trigger": "player_killed_override\t#using scripts\\zm\\_zm;", "contents": "zm::player_killed_override(${1:eInflictor}, ${2:attacker}, ${3:iDamage}, ${4:sMeansOfDeath}, ${5:weapon}, ${6:vDir}, ${7:sHitLoc}, ${8:psOffsetTime}, ${9:deathAnimDuration})"},
	{ "trigger": "player_zombie_breadcrumb\t#using scripts\\zm\\_zm;", "contents": "zm::player_zombie_breadcrumb()"},
	{ "trigger": "store_crumb\t#using scripts\\zm\\_zm;", "contents": "zm::store_crumb(${1:origin})"},
	{ "trigger": "to_mins\t#using scripts\\zm\\_zm;", "contents": "zm::to_mins(${1:seconds})"},
	{ "trigger": "intermission\t#using scripts\\zm\\_zm;", "contents": "zm::intermission()"},
	{ "trigger": "zombie_game_over_death\t#using scripts\\zm\\_zm;", "contents": "zm::zombie_game_over_death()"},
	{ "trigger": "screen_fade_in\t#using scripts\\zm\\_zm;", "contents": "zm::screen_fade_in(${1:n_time}, ${2:v_color}, ${3:str_menu_id})"},
	{ "trigger": "player_intermission\t#using scripts\\zm\\_zm;", "contents": "zm::player_intermission()"},
	{ "trigger": "fade_up_over_time\t#using scripts\\zm\\_zm;", "contents": "zm::fade_up_over_time(${1:t})"},
	{ "trigger": "default_exit_level\t#using scripts\\zm\\_zm;", "contents": "zm::default_exit_level()"},
	{ "trigger": "default_delayed_exit\t#using scripts\\zm\\_zm;", "contents": "zm::default_delayed_exit()"},
	{ "trigger": "default_find_exit_point\t#using scripts\\zm\\_zm;", "contents": "zm::default_find_exit_point()"},
	{ "trigger": "play_level_start_vox_delayed\t#using scripts\\zm\\_zm;", "contents": "zm::play_level_start_vox_delayed()"},
	{ "trigger": "register_sidequest\t#using scripts\\zm\\_zm;", "contents": "zm::register_sidequest(${1:id}, ${2:sidequest_stat})"},
	{ "trigger": "is_sidequest_previously_completed\t#using scripts\\zm\\_zm;", "contents": "zm::is_sidequest_previously_completed(${1:id})"},
	{ "trigger": "set_sidequest_completed\t#using scripts\\zm\\_zm;", "contents": "zm::set_sidequest_completed(${1:id})"},
	{ "trigger": "playSwipeSound\t#using scripts\\zm\\_zm;", "contents": "zm::playSwipeSound(${1:mod}, ${2:attacker})"},
	{ "trigger": "precache_zombie_leaderboards\t#using scripts\\zm\\_zm;", "contents": "zm::precache_zombie_leaderboards()"},
	{ "trigger": "zm_on_player_connect\t#using scripts\\zm\\_zm;", "contents": "zm::zm_on_player_connect()"},
	{ "trigger": "zm_on_player_disconnect\t#using scripts\\zm\\_zm;", "contents": "zm::zm_on_player_disconnect()"},
	{ "trigger": "watchDisconnect\t#using scripts\\zm\\_zm;", "contents": "zm::watchDisconnect()"},
	{ "trigger": "increment_dog_round_stat\t#using scripts\\zm\\_zm;", "contents": "zm::increment_dog_round_stat(${1:stat})"},
	{ "trigger": "setup_player_navcard_hud\t#using scripts\\zm\\_zm;", "contents": "zm::setup_player_navcard_hud()"},
	{ "trigger": "refresh_player_navcard_hud\t#using scripts\\zm\\_zm;", "contents": "zm::refresh_player_navcard_hud()"},
	{ "trigger": "set_default_laststand_pistol\t#using scripts\\zm\\_zm;", "contents": "zm::set_default_laststand_pistol(${1:solo_mode})"},
	{ "trigger": "player_too_many_players_check\t#using scripts\\zm\\_zm;", "contents": "zm::player_too_many_players_check()"},
	{ "trigger": "is_idgun_damage\t#using scripts\\zm\\_zm;", "contents": "zm::is_idgun_damage(${1:weapon})"},
	{ "trigger": "zm_on_player_spawned\t#using scripts\\zm\\_zm;", "contents": "zm::zm_on_player_spawned()"},
	{ "trigger": "update_is_player_valid\t#using scripts\\zm\\_zm;", "contents": "zm::update_is_player_valid()"},
	{ "trigger": "update_zone_name\t#using scripts\\zm\\_zm;", "contents": "zm::update_zone_name()"},
	{ "trigger": "walk_floor_watcher\t#using scripts\\shared\\floor_collapse_shared;", "contents": "floor_collapse_shared::walk_floor_watcher()"},
	{ "trigger": "damage_floor_watcher\t#using scripts\\shared\\floor_collapse_shared;", "contents": "floor_collapse_shared::damage_floor_watcher()"},
	{ "trigger": "precache_destruct_fx\t#using scripts\\shared\\floor_collapse_shared;", "contents": "floor_collapse_shared::precache_destruct_fx()"},
	{ "trigger": "isInWater\t#using scripts\\shared\\vehicles\\_croc;", "contents": "croc::isInWater()"},
	{ "trigger": "isOnLand\t#using scripts\\shared\\vehicles\\_croc;", "contents": "croc::isOnLand()"},
	{ "trigger": "croc_requestASMState\t#using scripts\\shared\\vehicles\\_croc;", "contents": "croc::croc_requestASMState(${1:statename})"},
	{ "trigger": "croc_think\t#using scripts\\shared\\vehicles\\_croc;", "contents": "croc::croc_think()"},
	{ "trigger": "croc_off\t#using scripts\\shared\\vehicles\\_croc;", "contents": "croc::croc_off()"},
	{ "trigger": "croc_on\t#using scripts\\shared\\vehicles\\_croc;", "contents": "croc::croc_on()"},
	{ "trigger": "bootup\t#using scripts\\shared\\vehicles\\_croc;", "contents": "croc::bootup()"},
	{ "trigger": "aim_at_best_shoot_location\t#using scripts\\shared\\vehicles\\_croc;", "contents": "croc::aim_at_best_shoot_location()"},
	{ "trigger": "croc_start_ai\t#using scripts\\shared\\vehicles\\_croc;", "contents": "croc::croc_start_ai(${1:state})"},
	{ "trigger": "croc_stop_ai\t#using scripts\\shared\\vehicles\\_croc;", "contents": "croc::croc_stop_ai()"},
	{ "trigger": "check_melee\t#using scripts\\shared\\vehicles\\_croc;", "contents": "croc::check_melee()"},
	{ "trigger": "path_update_interrupt\t#using scripts\\shared\\vehicles\\_croc;", "contents": "croc::path_update_interrupt()"},
	{ "trigger": "waittill_pathing_done\t#using scripts\\shared\\vehicles\\_croc;", "contents": "croc::waittill_pathing_done()"},
	{ "trigger": "goal_flag_monitor\t#using scripts\\shared\\vehicles\\_croc;", "contents": "croc::goal_flag_monitor()"},
	{ "trigger": "croc_set_swim_depth\t#using scripts\\shared\\vehicles\\_croc;", "contents": "croc::croc_set_swim_depth(${1:swimDepth})"},
	{ "trigger": "croc_testBuoyancy\t#using scripts\\shared\\vehicles\\_croc;", "contents": "croc::croc_testBuoyancy()"},
	{ "trigger": "croc_movementupdate\t#using scripts\\shared\\vehicles\\_croc;", "contents": "croc::croc_movementupdate()"},
	{ "trigger": "canSeeEnemyFromPosition\t#using scripts\\shared\\vehicles\\_croc;", "contents": "croc::canSeeEnemyFromPosition(${1:position}, ${2:enemy})"},
	{ "trigger": "croc_find_next_patrol_node\t#using scripts\\shared\\vehicles\\_croc;", "contents": "croc::croc_find_next_patrol_node()"},
	{ "trigger": "croc_find_new_position\t#using scripts\\shared\\vehicles\\_croc;", "contents": "croc::croc_find_new_position()"},
	{ "trigger": "croc_exit_vehicle\t#using scripts\\shared\\vehicles\\_croc;", "contents": "croc::croc_exit_vehicle()"},
	{ "trigger": "croc_scripted\t#using scripts\\shared\\vehicles\\_croc;", "contents": "croc::croc_scripted()"},
	{ "trigger": "croc_update_damage_fx\t#using scripts\\shared\\vehicles\\_croc;", "contents": "croc::croc_update_damage_fx()"},
	{ "trigger": "get_damage_fx_ent\t#using scripts\\shared\\vehicles\\_croc;", "contents": "croc::get_damage_fx_ent()"},
	{ "trigger": "cleanup_fx_ents\t#using scripts\\shared\\vehicles\\_croc;", "contents": "croc::cleanup_fx_ents()"},
	{ "trigger": "croc_death\t#using scripts\\shared\\vehicles\\_croc;", "contents": "croc::croc_death()"},
	{ "trigger": "death_fx\t#using scripts\\shared\\vehicles\\_croc;", "contents": "croc::death_fx()"},
	{ "trigger": "croc_crash_movement\t#using scripts\\shared\\vehicles\\_croc;", "contents": "croc::croc_crash_movement(${1:attacker})"},
	{ "trigger": "croc_emped\t#using scripts\\shared\\vehicles\\_croc;", "contents": "croc::croc_emped()"},
	{ "trigger": "crocCallback_VehicleDamage\t#using scripts\\shared\\vehicles\\_croc;", "contents": "croc::crocCallback_VehicleDamage(${1:eInflictor}, ${2:eAttacker}, ${3:iDamage}, ${4:iDFlags}, ${5:sMeansOfDeath}, ${6:weapon}, ${7:vPoint}, ${8:vDir}, ${9:sHitLoc}, ${10:psOffsetTime}, ${11:damageFromUnderneath}, ${12:modelIndex}, ${13:partName})"},
	{ "trigger": "croc_set_team\t#using scripts\\shared\\vehicles\\_croc;", "contents": "croc::croc_set_team(${1:team})"},
	{ "trigger": "croc_blink_lights\t#using scripts\\shared\\vehicles\\_croc;", "contents": "croc::croc_blink_lights()"},
	{ "trigger": "croc_player_bullet_shake\t#using scripts\\shared\\vehicles\\_croc;", "contents": "croc::croc_player_bullet_shake(${1:player})"},
	{ "trigger": "croc_player_rocket_recoil\t#using scripts\\shared\\vehicles\\_croc;", "contents": "croc::croc_player_rocket_recoil(${1:player})"},
	{ "trigger": "NO_SWITCH_ON\t#using scripts\\shared\\vehicles\\_spider;", "contents": "spider::NO_SWITCH_ON()"},
	{ "trigger": "defaultRole\t#using scripts\\shared\\vehicles\\_spider;", "contents": "spider::defaultRole()"},
	{ "trigger": "state_death_update\t#using scripts\\shared\\vehicles\\_spider;", "contents": "spider::state_death_update(${1:params})"},
	{ "trigger": "state_driving_update\t#using scripts\\shared\\vehicles\\_spider;", "contents": "spider::state_driving_update(${1:params})"},
	{ "trigger": "GetNextMovePosition_ranged\t#using scripts\\shared\\vehicles\\_spider;", "contents": "spider::GetNextMovePosition_ranged(${1:enemy})"},
	{ "trigger": "state_range_combat_update\t#using scripts\\shared\\vehicles\\_spider;", "contents": "spider::state_range_combat_update(${1:params})"},
	{ "trigger": "state_range_combat_attack\t#using scripts\\shared\\vehicles\\_spider;", "contents": "spider::state_range_combat_attack()"},
	{ "trigger": "do_ranged_attack\t#using scripts\\shared\\vehicles\\_spider;", "contents": "spider::do_ranged_attack(${1:enemy})"},
	{ "trigger": "switch_to_melee\t#using scripts\\shared\\vehicles\\_spider;", "contents": "spider::switch_to_melee()"},
	{ "trigger": "should_switch_to_melee\t#using scripts\\shared\\vehicles\\_spider;", "contents": "spider::should_switch_to_melee(${1:from_state}, ${2:to_state}, ${3:connection})"},
	{ "trigger": "state_melee_combat_update\t#using scripts\\shared\\vehicles\\_spider;", "contents": "spider::state_melee_combat_update(${1:params})"},
	{ "trigger": "state_melee_combat_attack\t#using scripts\\shared\\vehicles\\_spider;", "contents": "spider::state_melee_combat_attack()"},
	{ "trigger": "do_melee_attack\t#using scripts\\shared\\vehicles\\_spider;", "contents": "spider::do_melee_attack(${1:enemy})"},
	{ "trigger": "should_switch_to_range\t#using scripts\\shared\\vehicles\\_spider;", "contents": "spider::should_switch_to_range(${1:from_state}, ${2:to_state}, ${3:connection})"},
	{ "trigger": "prevent_stuck\t#using scripts\\shared\\vehicles\\_spider;", "contents": "spider::prevent_stuck()"},
	{ "trigger": "spider_get_target_position\t#using scripts\\shared\\vehicles\\_spider;", "contents": "spider::spider_get_target_position()"},
	{ "trigger": "path_update_interrupt_melee\t#using scripts\\shared\\vehicles\\_spider;", "contents": "spider::path_update_interrupt_melee()"},
	{ "trigger": "nudge_collision\t#using scripts\\shared\\vehicles\\_spider;", "contents": "spider::nudge_collision()"},
	{ "trigger": "force_get_enemies\t#using scripts\\shared\\vehicles\\_spider;", "contents": "spider::force_get_enemies()"},
	{ "trigger": "spider_callback_damage\t#using scripts\\shared\\vehicles\\_spider;", "contents": "spider::spider_callback_damage(${1:eInflictor}, ${2:eAttacker}, ${3:iDamage}, ${4:iDFlags}, ${5:sMeansOfDeath}, ${6:weapon}, ${7:vPoint}, ${8:vDir}, ${9:sHitLoc}, ${10:vDamageOrigin}, ${11:psOffsetTime}, ${12:damageFromUnderneath}, ${13:modelIndex}, ${14:partName}, ${15:vSurfaceNormal})"},
	{ "trigger": "autoexec opt_in\t#using scripts\\zm\\zm_usermap;", "contents": "zm_usermap::autoexec opt_in()"},
	{ "trigger": "offhand_weapon_overrride\t#using scripts\\zm\\zm_usermap;", "contents": "zm_usermap::offhand_weapon_overrride()"},
	{ "trigger": "offhand_weapon_give_override\t#using scripts\\zm\\zm_usermap;", "contents": "zm_usermap::offhand_weapon_give_override(${1:weapon})"},
	{ "trigger": "include_weapons\t#using scripts\\zm\\zm_usermap;", "contents": "zm_usermap::include_weapons()"},
	{ "trigger": "precacheCustomCharacters\t#using scripts\\zm\\zm_usermap;", "contents": "zm_usermap::precacheCustomCharacters()"},
	{ "trigger": "selectCharacterIndexToUse\t#using scripts\\zm\\zm_usermap;", "contents": "zm_usermap::selectCharacterIndexToUse()"},
	{ "trigger": "assign_lowest_unused_character_index\t#using scripts\\zm\\zm_usermap;", "contents": "zm_usermap::assign_lowest_unused_character_index()"},
	{ "trigger": "giveCustomCharacters\t#using scripts\\zm\\zm_usermap;", "contents": "zm_usermap::giveCustomCharacters()"},
	{ "trigger": "set_exert_id\t#using scripts\\zm\\zm_usermap;", "contents": "zm_usermap::set_exert_id()"},
	{ "trigger": "setup_personality_character_exerts\t#using scripts\\zm\\zm_usermap;", "contents": "zm_usermap::setup_personality_character_exerts()"},
	{ "trigger": "giveCustomLoadout\t#using scripts\\zm\\zm_usermap;", "contents": "zm_usermap::giveCustomLoadout(${1:takeAllWeapons}, ${2:alreadySpawned})"},
	{ "trigger": "custom_add_weapons\t#using scripts\\zm\\zm_usermap;", "contents": "zm_usermap::custom_add_weapons()"},
	{ "trigger": "sndFunctions\t#using scripts\\zm\\zm_usermap;", "contents": "zm_usermap::sndFunctions()"},
	{ "trigger": "setupMusic\t#using scripts\\zm\\zm_usermap;", "contents": "zm_usermap::setupMusic()"},
	{ "trigger": "force_check_now\t#using scripts\\zm\\zm_giant_cleanup_mgr;", "contents": "giant_cleanup::force_check_now()"},
	{ "trigger": "do_cleanup_check\t#using scripts\\zm\\zm_giant_cleanup_mgr;", "contents": "giant_cleanup::do_cleanup_check(${1:n_override_cleanup_dist})"},
	{ "trigger": "get_escape_position\t#using scripts\\zm\\zm_giant_cleanup_mgr; self = AI", "contents": "giant_cleanup::get_escape_position()"},
	{ "trigger": "get_adjacencies_to_zone\t#using scripts\\zm\\zm_giant_cleanup_mgr;", "contents": "giant_cleanup::get_adjacencies_to_zone(${1:str_zone})"},
	{ "trigger": "get_escape_position_in_current_zone\t#using scripts\\zm\\zm_giant_cleanup_mgr;", "contents": "giant_cleanup::get_escape_position_in_current_zone()"},
	{ "trigger": "trap_activate_electric\t#using scripts\\zm\\_zm_trap_electric;", "contents": "zm_trap_electric::trap_activate_electric()"},
	{ "trigger": "trap_audio\t#using scripts\\zm\\_zm_trap_electric;", "contents": "zm_trap_electric::trap_audio(${1:trap})"},
	{ "trigger": "play_electrical_sound\t#using scripts\\zm\\_zm_trap_electric;", "contents": "zm_trap_electric::play_electrical_sound(${1:trap})"},
	{ "trigger": "player_damage\t#using scripts\\zm\\_zm_trap_electric;", "contents": "zm_trap_electric::player_damage()"},
	{ "trigger": "damage\t#using scripts\\zm\\_zm_trap_electric;", "contents": "zm_trap_electric::damage(${1:trap})"},
	{ "trigger": "trap_use_think\t#using scripts\\zm\\_zm_traps;", "contents": "zm_traps::trap_use_think(${1:trap})"},
	{ "trigger": "trap_lights_red\t#using scripts\\zm\\_zm_traps;", "contents": "zm_traps::trap_lights_red()"},
	{ "trigger": "trap_lights_green\t#using scripts\\zm\\_zm_traps;", "contents": "zm_traps::trap_lights_green()"},
	{ "trigger": "trap_set_string\t#using scripts\\zm\\_zm_traps;", "contents": "zm_traps::trap_set_string(${1:string}, ${2:param1}, ${3:param2})"},
	{ "trigger": "trap_move_switches\t#using scripts\\zm\\_zm_traps;", "contents": "zm_traps::trap_move_switches()"},
	{ "trigger": "trap_activate_fire\t#using scripts\\zm\\_zm_traps;", "contents": "zm_traps::trap_activate_fire()"},
	{ "trigger": "trap_activate_rotating\t#using scripts\\zm\\_zm_traps;", "contents": "zm_traps::trap_activate_rotating()"},
	{ "trigger": "trap_activate_flipper\t#using scripts\\zm\\_zm_traps;", "contents": "zm_traps::trap_activate_flipper()"},
	{ "trigger": "trap_audio_fx\t#using scripts\\zm\\_zm_traps;", "contents": "zm_traps::trap_audio_fx(${1:trap})"},
	{ "trigger": "trap_damage\t#using scripts\\zm\\_zm_traps;", "contents": "zm_traps::trap_damage()"},
	{ "trigger": "trig_update\t#using scripts\\zm\\_zm_traps;", "contents": "zm_traps::trig_update(${1:parent})"},
	{ "trigger": "player_elec_damage\t#using scripts\\zm\\_zm_traps;", "contents": "zm_traps::player_elec_damage()"},
	{ "trigger": "player_fire_damage\t#using scripts\\zm\\_zm_traps;", "contents": "zm_traps::player_fire_damage()"},
	{ "trigger": "zombie_trap_death\t#using scripts\\zm\\_zm_traps;", "contents": "zm_traps::zombie_trap_death(${1:trap}, ${2:param})"},
	{ "trigger": "zombie_flame_watch\t#using scripts\\zm\\_zm_traps;", "contents": "zm_traps::zombie_flame_watch()"},
	{ "trigger": "play_elec_vocals\t#using scripts\\zm\\_zm_traps;", "contents": "zm_traps::play_elec_vocals()"},
	{ "trigger": "electroctute_death_fx\t#using scripts\\zm\\_zm_traps;", "contents": "zm_traps::electroctute_death_fx()"},
	{ "trigger": "electrocute_timeout\t#using scripts\\zm\\_zm_traps;", "contents": "zm_traps::electrocute_timeout()"},
	{ "trigger": "trap_dialog\t#using scripts\\zm\\_zm_traps;", "contents": "zm_traps::trap_dialog()"},
	{ "trigger": "get_trap_array\t#using scripts\\zm\\_zm_traps;", "contents": "zm_traps::get_trap_array(${1:trap_type})"},
	{ "trigger": "trap_disable\t#using scripts\\zm\\_zm_traps;", "contents": "zm_traps::trap_disable()"},
	{ "trigger": "trap_enable\t#using scripts\\zm\\_zm_traps;", "contents": "zm_traps::trap_enable()"},
	{ "trigger": "is_trap_registered\t#using scripts\\zm\\_zm_traps; self = struct", "contents": "zm_traps::is_trap_registered(${1:a_registered_traps})"},
	{ "trigger": "register_trap_basic_info\t#using scripts\\zm\\_zm_traps;", "contents": "zm_traps::register_trap_basic_info(${1:str_trap}, ${2:func_activate}, ${3:func_audio})"},
	{ "trigger": "_register_undefined_trap\t#using scripts\\zm\\_zm_traps;", "contents": "zm_traps::_register_undefined_trap(${1:str_trap})"},
	{ "trigger": "register_trap_damage\t#using scripts\\zm\\_zm_traps;", "contents": "zm_traps::register_trap_damage(${1:str_trap}, ${2:func_player_damage}, ${3:func_damage})"},
	{ "trigger": "grab_full_ammo\t#using scripts\\zm\\_zm_powerup_full_ammo;", "contents": "zm_powerup_full_ammo::grab_full_ammo(${1:player})"},
	{ "trigger": "full_ammo_powerup\t#using scripts\\zm\\_zm_powerup_full_ammo;", "contents": "zm_powerup_full_ammo::full_ammo_powerup(${1:drop_item}, ${2:player})"},
	{ "trigger": "full_ammo_on_hud\t#using scripts\\zm\\_zm_powerup_full_ammo;", "contents": "zm_powerup_full_ammo::full_ammo_on_hud(${1:drop_item}, ${2:player_team})"},
	{ "trigger": "placeWeaponOn\t#using scripts\\shared\\ai\\systems\\shared;", "contents": "shared::placeWeaponOn(${1:weapon}, ${2:position})"},
	{ "trigger": "ThrowWeapon\t#using scripts\\shared\\ai\\systems\\shared;", "contents": "shared::ThrowWeapon(${1:weapon}, ${2:positionTag}, ${3:scavenger})"},
	{ "trigger": "on_player_spawned\t#using scripts\\shared\\weapons\\_hacker_tool;", "contents": "hacker_tool::on_player_spawned()"},
	{ "trigger": "clearHackerTarget\t#using scripts\\shared\\weapons\\_hacker_tool; self == player", "contents": "hacker_tool::clearHackerTarget(${1:weapon}, ${2:successfulHack}, ${3:spawned})"},
	{ "trigger": "watchHackerToolFired\t#using scripts\\shared\\weapons\\_hacker_tool; self == player", "contents": "hacker_tool::watchHackerToolFired()"},
	{ "trigger": "watchHackerToolUse\t#using scripts\\shared\\weapons\\_hacker_tool; self == player", "contents": "hacker_tool::watchHackerToolUse()"},
	{ "trigger": "watchHackerToolInterrupt\t#using scripts\\shared\\weapons\\_hacker_tool; self == player", "contents": "hacker_tool::watchHackerToolInterrupt(${1:weapon})"},
	{ "trigger": "watchHackerToolEnd\t#using scripts\\shared\\weapons\\_hacker_tool; self == player", "contents": "hacker_tool::watchHackerToolEnd(${1:weapon})"},
	{ "trigger": "watchForGrenadeFire\t#using scripts\\shared\\weapons\\_hacker_tool; self == player", "contents": "hacker_tool::watchForGrenadeFire(${1:weapon})"},
	{ "trigger": "playHackerToolSoundLoop\t#using scripts\\shared\\weapons\\_hacker_tool; self == player", "contents": "hacker_tool::playHackerToolSoundLoop()"},
	{ "trigger": "stopHackerToolSoundLoop\t#using scripts\\shared\\weapons\\_hacker_tool; self == player", "contents": "hacker_tool::stopHackerToolSoundLoop()"},
	{ "trigger": "hackerToolTargetLoop\t#using scripts\\shared\\weapons\\_hacker_tool; self == player", "contents": "hacker_tool::hackerToolTargetLoop(${1:weapon})"},
	{ "trigger": "watchTargetEntityUpdate\t#using scripts\\shared\\weapons\\_hacker_tool;", "contents": "hacker_tool::watchTargetEntityUpdate(${1:bestTarget})"},
	{ "trigger": "getBestHackerToolTarget\t#using scripts\\shared\\weapons\\_hacker_tool;", "contents": "hacker_tool::getBestHackerToolTarget(${1:weapon})"},
	{ "trigger": "canTargetEntity\t#using scripts\\shared\\weapons\\_hacker_tool;", "contents": "hacker_tool::canTargetEntity(${1:target}, ${2:weapon})"},
	{ "trigger": "isWithinHackerToolReticle\t#using scripts\\shared\\weapons\\_hacker_tool;", "contents": "hacker_tool::isWithinHackerToolReticle(${1:target}, ${2:weapon})"},
	{ "trigger": "hackingTimeScale\t#using scripts\\shared\\weapons\\_hacker_tool;", "contents": "hacker_tool::hackingTimeScale(${1:target})"},
	{ "trigger": "hackingTimeNoLineOfSightScale\t#using scripts\\shared\\weapons\\_hacker_tool;", "contents": "hacker_tool::hackingTimeNoLineOfSightScale(${1:target})"},
	{ "trigger": "isEntityHackableWeaponObject\t#using scripts\\shared\\weapons\\_hacker_tool;", "contents": "hacker_tool::isEntityHackableWeaponObject(${1:entity})"},
	{ "trigger": "getWeaponObjectHackerRadius\t#using scripts\\shared\\weapons\\_hacker_tool;", "contents": "hacker_tool::getWeaponObjectHackerRadius(${1:entity})"},
	{ "trigger": "getWeaponObjectHackTimeMs\t#using scripts\\shared\\weapons\\_hacker_tool;", "contents": "hacker_tool::getWeaponObjectHackTimeMs(${1:entity})"},
	{ "trigger": "isEntityHackableCarePackage\t#using scripts\\shared\\weapons\\_hacker_tool;", "contents": "hacker_tool::isEntityHackableCarePackage(${1:entity})"},
	{ "trigger": "isValidHackerToolTarget\t#using scripts\\shared\\weapons\\_hacker_tool; self == hacking player", "contents": "hacker_tool::isValidHackerToolTarget(${1:ent}, ${2:weapon}, ${3:allowHacked})"},
	{ "trigger": "isEntityPreviouslyHacked\t#using scripts\\shared\\weapons\\_hacker_tool;", "contents": "hacker_tool::isEntityPreviouslyHacked(${1:entity})"},
	{ "trigger": "hackerSoftSightTest\t#using scripts\\shared\\weapons\\_hacker_tool; self == player", "contents": "hacker_tool::hackerSoftSightTest(${1:weapon})"},
	{ "trigger": "registerWithHackerTool\t#using scripts\\shared\\weapons\\_hacker_tool; self == some hackable entity", "contents": "hacker_tool::registerWithHackerTool(${1:radius}, ${2:hackTimeMs})"},
	{ "trigger": "watchHackableEntityDeath\t#using scripts\\shared\\weapons\\_hacker_tool;", "contents": "hacker_tool::watchHackableEntityDeath()"},
	{ "trigger": "getHackerToolInnerRadius\t#using scripts\\shared\\weapons\\_hacker_tool;", "contents": "hacker_tool::getHackerToolInnerRadius(${1:target})"},
	{ "trigger": "getHackerToolOuterRadius\t#using scripts\\shared\\weapons\\_hacker_tool;", "contents": "hacker_tool::getHackerToolOuterRadius(${1:target})"},
	{ "trigger": "getHackTime\t#using scripts\\shared\\weapons\\_hacker_tool; self == player", "contents": "hacker_tool::getHackTime(${1:target})"},
	{ "trigger": "getHackOuterTime\t#using scripts\\shared\\weapons\\_hacker_tool; self == player", "contents": "hacker_tool::getHackOuterTime(${1:target})"},
	{ "trigger": "getLockOnTime\t#using scripts\\shared\\weapons\\_hacker_tool; self is the player, weapon is the hacker tool", "contents": "hacker_tool::getLockOnTime(${1:target}, ${2:weapon})"},
	{ "trigger": "Initialize\t#using scripts\\shared\\throttle_shared;", "contents": "Throttle::Initialize(${1:processLimit = 1}, ${2:updateRate = SERVER_FRAME})"},
	{ "trigger": "WaitInQueue\t#using scripts\\shared\\throttle_shared;", "contents": "Throttle::WaitInQueue(${1:entity})"},
	{ "trigger": "riotshield_craftable\t#using scripts\\zm\\craftables\\_zm_craft_shield;", "contents": "zm_craft_shield::riotshield_craftable()"},
	{ "trigger": "show_infotext_for_duration\t#using scripts\\zm\\craftables\\_zm_craft_shield;", "contents": "zm_craft_shield::show_infotext_for_duration(${1:str_infotext}, ${2:n_duration})"},
	{ "trigger": "on_pickup_common\t#using scripts\\zm\\craftables\\_zm_craft_shield;", "contents": "zm_craft_shield::on_pickup_common(${1:player})"},
	{ "trigger": "on_drop_common\t#using scripts\\zm\\craftables\\_zm_craft_shield;", "contents": "zm_craft_shield::on_drop_common(${1:player})"},
	{ "trigger": "pickup_from_mover\t#using scripts\\zm\\craftables\\_zm_craft_shield;", "contents": "zm_craft_shield::pickup_from_mover()"},
	{ "trigger": "on_fully_crafted\t#using scripts\\zm\\craftables\\_zm_craft_shield;", "contents": "zm_craft_shield::on_fully_crafted()"},
	{ "trigger": "drop_on_mover\t#using scripts\\zm\\craftables\\_zm_craft_shield;", "contents": "zm_craft_shield::drop_on_mover(${1:player})"},
	{ "trigger": "on_buy_weapon_riotshield\t#using scripts\\zm\\craftables\\_zm_craft_shield;", "contents": "zm_craft_shield::on_buy_weapon_riotshield(${1:player})"},
	{ "trigger": "SetupCallbacks\t#using scripts\\zm\\gametypes\\_globallogic_ui;", "contents": "globallogic_ui::SetupCallbacks()"},
	{ "trigger": "freeGameplayHudElems\t#using scripts\\zm\\gametypes\\_globallogic_ui;", "contents": "globallogic_ui::freeGameplayHudElems()"},
	{ "trigger": "teamPlayerCountsEqual\t#using scripts\\zm\\gametypes\\_globallogic_ui;", "contents": "globallogic_ui::teamPlayerCountsEqual(${1:playerCounts})"},
	{ "trigger": "teamWithLowestPlayerCount\t#using scripts\\zm\\gametypes\\_globallogic_ui;", "contents": "globallogic_ui::teamWithLowestPlayerCount(${1:playerCounts}, ${2:ignore_team})"},
	{ "trigger": "menuAutoAssign\t#using scripts\\zm\\gametypes\\_globallogic_ui;", "contents": "globallogic_ui::menuAutoAssign(${1:comingFromMenu})"},
	{ "trigger": "teamScoresEqual\t#using scripts\\zm\\gametypes\\_globallogic_ui;", "contents": "globallogic_ui::teamScoresEqual()"},
	{ "trigger": "teamWithLowestScore\t#using scripts\\zm\\gametypes\\_globallogic_ui;", "contents": "globallogic_ui::teamWithLowestScore()"},
	{ "trigger": "pickTeamFromScores\t#using scripts\\zm\\gametypes\\_globallogic_ui;", "contents": "globallogic_ui::pickTeamFromScores(${1:teams})"},
	{ "trigger": "getSplitscreenTeam\t#using scripts\\zm\\gametypes\\_globallogic_ui;", "contents": "globallogic_ui::getSplitscreenTeam()"},
	{ "trigger": "updateObjectiveText\t#using scripts\\zm\\gametypes\\_globallogic_ui;", "contents": "globallogic_ui::updateObjectiveText()"},
	{ "trigger": "closeMenus\t#using scripts\\zm\\gametypes\\_globallogic_ui;", "contents": "globallogic_ui::closeMenus()"},
	{ "trigger": "beginClassChoice\t#using scripts\\zm\\gametypes\\_globallogic_ui;", "contents": "globallogic_ui::beginClassChoice(${1:forceNewChoice})"},
	{ "trigger": "showMainMenuForTeam\t#using scripts\\zm\\gametypes\\_globallogic_ui;", "contents": "globallogic_ui::showMainMenuForTeam()"},
	{ "trigger": "menuTeam\t#using scripts\\zm\\gametypes\\_globallogic_ui;", "contents": "globallogic_ui::menuTeam(${1:team})"},
	{ "trigger": "menuSpectator\t#using scripts\\zm\\gametypes\\_globallogic_ui;", "contents": "globallogic_ui::menuSpectator()"},
	{ "trigger": "menuClass\t#using scripts\\zm\\gametypes\\_globallogic_ui;", "contents": "globallogic_ui::menuClass(${1:response})"},
	{ "trigger": "showSafeSpawnMessage\t#using scripts\\zm\\gametypes\\_globallogic_ui;", "contents": "globallogic_ui::showSafeSpawnMessage()"},
	{ "trigger": "hideSafeSpawnMessage\t#using scripts\\zm\\gametypes\\_globallogic_ui;", "contents": "globallogic_ui::hideSafeSpawnMessage()"},
	{ "trigger": "removeSpawnMessageShortly\t#using scripts\\zm\\gametypes\\_globallogic_ui;", "contents": "globallogic_ui::removeSpawnMessageShortly(${1:delay})"},
	{ "trigger": "gadget_iff_override_is_inuse\t#using scripts\\shared\\abilities\\gadgets\\_gadget_iff_override;", "contents": "_gadget_iff_override::gadget_iff_override_is_inuse(${1:slot})"},
	{ "trigger": "gadget_iff_override_is_flickering\t#using scripts\\shared\\abilities\\gadgets\\_gadget_iff_override;", "contents": "_gadget_iff_override::gadget_iff_override_is_flickering(${1:slot})"},
	{ "trigger": "gadget_iff_override_on_flicker\t#using scripts\\shared\\abilities\\gadgets\\_gadget_iff_override;", "contents": "_gadget_iff_override::gadget_iff_override_on_flicker(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_iff_override_on_give\t#using scripts\\shared\\abilities\\gadgets\\_gadget_iff_override;", "contents": "_gadget_iff_override::gadget_iff_override_on_give(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_iff_override_on_take\t#using scripts\\shared\\abilities\\gadgets\\_gadget_iff_override;", "contents": "_gadget_iff_override::gadget_iff_override_on_take(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_iff_override_on_connect\t#using scripts\\shared\\abilities\\gadgets\\_gadget_iff_override;", "contents": "_gadget_iff_override::gadget_iff_override_on_connect()"},
	{ "trigger": "gadget_iff_override_on\t#using scripts\\shared\\abilities\\gadgets\\_gadget_iff_override;", "contents": "_gadget_iff_override::gadget_iff_override_on(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_iff_override_off\t#using scripts\\shared\\abilities\\gadgets\\_gadget_iff_override;", "contents": "_gadget_iff_override::gadget_iff_override_off(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_iff_override_is_primed\t#using scripts\\shared\\abilities\\gadgets\\_gadget_iff_override;", "contents": "_gadget_iff_override::gadget_iff_override_is_primed(${1:slot}, ${2:weapon})"},
	{ "trigger": "tap_attack_button\t#using scripts\\shared\\bots\\bot_buttons;", "contents": "bot::tap_attack_button()"},
	{ "trigger": "press_attack_button\t#using scripts\\shared\\bots\\bot_buttons;", "contents": "bot::press_attack_button()"},
	{ "trigger": "release_attack_button\t#using scripts\\shared\\bots\\bot_buttons;", "contents": "bot::release_attack_button()"},
	{ "trigger": "tap_melee_button\t#using scripts\\shared\\bots\\bot_buttons;", "contents": "bot::tap_melee_button()"},
	{ "trigger": "tap_reload_button\t#using scripts\\shared\\bots\\bot_buttons;", "contents": "bot::tap_reload_button()"},
	{ "trigger": "tap_use_button\t#using scripts\\shared\\bots\\bot_buttons;", "contents": "bot::tap_use_button()"},
	{ "trigger": "press_crouch_button\t#using scripts\\shared\\bots\\bot_buttons;", "contents": "bot::press_crouch_button()"},
	{ "trigger": "press_use_button\t#using scripts\\shared\\bots\\bot_buttons;", "contents": "bot::press_use_button()"},
	{ "trigger": "release_use_button\t#using scripts\\shared\\bots\\bot_buttons;", "contents": "bot::release_use_button()"},
	{ "trigger": "press_sprint_button\t#using scripts\\shared\\bots\\bot_buttons;", "contents": "bot::press_sprint_button()"},
	{ "trigger": "release_sprint_button\t#using scripts\\shared\\bots\\bot_buttons;", "contents": "bot::release_sprint_button()"},
	{ "trigger": "press_frag_button\t#using scripts\\shared\\bots\\bot_buttons;", "contents": "bot::press_frag_button()"},
	{ "trigger": "release_frag_button\t#using scripts\\shared\\bots\\bot_buttons;", "contents": "bot::release_frag_button()"},
	{ "trigger": "tap_frag_button\t#using scripts\\shared\\bots\\bot_buttons;", "contents": "bot::tap_frag_button()"},
	{ "trigger": "press_offhand_button\t#using scripts\\shared\\bots\\bot_buttons;", "contents": "bot::press_offhand_button()"},
	{ "trigger": "release_offhand_button\t#using scripts\\shared\\bots\\bot_buttons;", "contents": "bot::release_offhand_button()"},
	{ "trigger": "tap_offhand_button\t#using scripts\\shared\\bots\\bot_buttons;", "contents": "bot::tap_offhand_button()"},
	{ "trigger": "press_throw_button\t#using scripts\\shared\\bots\\bot_buttons;", "contents": "bot::press_throw_button()"},
	{ "trigger": "release_throw_button\t#using scripts\\shared\\bots\\bot_buttons;", "contents": "bot::release_throw_button()"},
	{ "trigger": "tap_jump_button\t#using scripts\\shared\\bots\\bot_buttons;", "contents": "bot::tap_jump_button()"},
	{ "trigger": "press_jump_button\t#using scripts\\shared\\bots\\bot_buttons;", "contents": "bot::press_jump_button()"},
	{ "trigger": "release_jump_button\t#using scripts\\shared\\bots\\bot_buttons;", "contents": "bot::release_jump_button()"},
	{ "trigger": "tap_ads_button\t#using scripts\\shared\\bots\\bot_buttons;", "contents": "bot::tap_ads_button()"},
	{ "trigger": "press_ads_button\t#using scripts\\shared\\bots\\bot_buttons;", "contents": "bot::press_ads_button()"},
	{ "trigger": "release_ads_button\t#using scripts\\shared\\bots\\bot_buttons;", "contents": "bot::release_ads_button()"},
	{ "trigger": "tap_doublejump_button\t#using scripts\\shared\\bots\\bot_buttons;", "contents": "bot::tap_doublejump_button()"},
	{ "trigger": "press_doublejump_button\t#using scripts\\shared\\bots\\bot_buttons;", "contents": "bot::press_doublejump_button()"},
	{ "trigger": "release_doublejump_button\t#using scripts\\shared\\bots\\bot_buttons;", "contents": "bot::release_doublejump_button()"},
	{ "trigger": "tap_offhand_special_button\t#using scripts\\shared\\bots\\bot_buttons;", "contents": "bot::tap_offhand_special_button()"},
	{ "trigger": "press_swim_up\t#using scripts\\shared\\bots\\bot_buttons;", "contents": "bot::press_swim_up()"},
	{ "trigger": "release_swim_up\t#using scripts\\shared\\bots\\bot_buttons;", "contents": "bot::release_swim_up()"},
	{ "trigger": "press_swim_down\t#using scripts\\shared\\bots\\bot_buttons;", "contents": "bot::press_swim_down()"},
	{ "trigger": "release_swim_down\t#using scripts\\shared\\bots\\bot_buttons;", "contents": "bot::release_swim_down()"},
	{ "trigger": "Callback_BotEnteredUserEdge\t#using scripts\\shared\\bots\\bot_traversals;", "contents": "bot::Callback_BotEnteredUserEdge(${1:startNode}, ${2:endNode})"},
	{ "trigger": "climb_traversal\t#using scripts\\shared\\bots\\bot_traversals;", "contents": "bot::climb_traversal(${1:start}, ${2:end}, ${3:startDir}, ${4:endDir})"},
	{ "trigger": "traversing\t#using scripts\\shared\\bots\\bot_traversals;", "contents": "bot::traversing()"},
	{ "trigger": "leave_water_traversal\t#using scripts\\shared\\bots\\bot_traversals;", "contents": "bot::leave_water_traversal(${1:startNode}, ${2:endNode})"},
	{ "trigger": "swim_traversal\t#using scripts\\shared\\bots\\bot_traversals;", "contents": "bot::swim_traversal(${1:startNode}, ${2:endNode})"},
	{ "trigger": "jump_up_traversal\t#using scripts\\shared\\bots\\bot_traversals;", "contents": "bot::jump_up_traversal(${1:startNode}, ${2:endNode})"},
	{ "trigger": "jump_down_traversal\t#using scripts\\shared\\bots\\bot_traversals;", "contents": "bot::jump_down_traversal(${1:startNode}, ${2:endNode})"},
	{ "trigger": "wallrun_traversal\t#using scripts\\shared\\bots\\bot_traversals;", "contents": "bot::wallrun_traversal(${1:startNode}, ${2:endNode}, ${3:vector})"},
	{ "trigger": "wait_wallrun_begin\t#using scripts\\shared\\bots\\bot_traversals;", "contents": "bot::wait_wallrun_begin(${1:startNode}, ${2:endNode}, ${3:wallNormal}, ${4:runDir})"},
	{ "trigger": "exit_wallrun\t#using scripts\\shared\\bots\\bot_traversals;", "contents": "bot::exit_wallrun(${1:startNode}, ${2:endNode}, ${3:wallNormal}, ${4:runNormal})"},
	{ "trigger": "jump_to\t#using scripts\\shared\\bots\\bot_traversals;", "contents": "bot::jump_to(${1:target}, ${2:vector})"},
	{ "trigger": "bot_update_move_angle\t#using scripts\\shared\\bots\\bot_traversals;", "contents": "bot::bot_update_move_angle(${1:target})"},
	{ "trigger": "bot_hit_target\t#using scripts\\shared\\bots\\bot_traversals;", "contents": "bot::bot_hit_target(${1:target})"},
	{ "trigger": "bot_speed2D\t#using scripts\\shared\\bots\\bot_traversals;", "contents": "bot::bot_speed2D()"},
	{ "trigger": "watch_traversal_end\t#using scripts\\shared\\bots\\bot_traversals;", "contents": "bot::watch_traversal_end()"},
	{ "trigger": "watch_start_swimming\t#using scripts\\shared\\bots\\bot_traversals;", "contents": "bot::watch_start_swimming()"},
	{ "trigger": "wait_traversal_timeout\t#using scripts\\shared\\bots\\bot_traversals;", "contents": "bot::wait_traversal_timeout()"},
	{ "trigger": "traversal_end\t#using scripts\\shared\\bots\\bot_traversals;", "contents": "bot::traversal_end()"},
	{ "trigger": "is_bot_ranked_match\t#using scripts\\shared\\bots\\_bot;", "contents": "bot::is_bot_ranked_match()"},
	{ "trigger": "bot_void\t#using scripts\\shared\\bots\\_bot;", "contents": "bot::bot_void()"},
	{ "trigger": "bot_unhandled\t#using scripts\\shared\\bots\\_bot;", "contents": "bot::bot_unhandled()"},
	{ "trigger": "add_bots\t#using scripts\\shared\\bots\\_bot;", "contents": "bot::add_bots(${1:count}, ${2:team})"},
	{ "trigger": "add_bot\t#using scripts\\shared\\bots\\_bot;", "contents": "bot::add_bot(${1:team})"},
	{ "trigger": "remove_bots\t#using scripts\\shared\\bots\\_bot;", "contents": "bot::remove_bots(${1:count}, ${2:team})"},
	{ "trigger": "remove_bot\t#using scripts\\shared\\bots\\_bot;", "contents": "bot::remove_bot(${1:bot})"},
	{ "trigger": "filter_bots\t#using scripts\\shared\\bots\\_bot;", "contents": "bot::filter_bots(${1:players})"},
	{ "trigger": "on_player_connect\t#using scripts\\shared\\bots\\_bot;", "contents": "bot::on_player_connect()"},
	{ "trigger": "on_player_spawned\t#using scripts\\shared\\bots\\_bot; self == player", "contents": "bot::on_player_spawned()"},
	{ "trigger": "on_player_killed\t#using scripts\\shared\\bots\\_bot;", "contents": "bot::on_player_killed()"},
	{ "trigger": "bot_think_loop\t#using scripts\\shared\\bots\\_bot;", "contents": "bot::bot_think_loop()"},
	{ "trigger": "bot_think\t#using scripts\\shared\\bots\\_bot;", "contents": "bot::bot_think()"},
	{ "trigger": "bot_update\t#using scripts\\shared\\bots\\_bot;", "contents": "bot::bot_update()"},
	{ "trigger": "update_swim\t#using scripts\\shared\\bots\\_bot;", "contents": "bot::update_swim()"},
	{ "trigger": "wait_release_swim_buttons\t#using scripts\\shared\\bots\\_bot;", "contents": "bot::wait_release_swim_buttons(${1:waitTime})"},
	{ "trigger": "get_bot_default_settings\t#using scripts\\shared\\bots\\_bot;", "contents": "bot::get_bot_default_settings()"},
	{ "trigger": "sprint_to_goal\t#using scripts\\shared\\bots\\_bot;", "contents": "bot::sprint_to_goal()"},
	{ "trigger": "end_sprint_to_goal\t#using scripts\\shared\\bots\\_bot;", "contents": "bot::end_sprint_to_goal()"},
	{ "trigger": "sprint_think\t#using scripts\\shared\\bots\\_bot;", "contents": "bot::sprint_think()"},
	{ "trigger": "goal_in_trigger\t#using scripts\\shared\\bots\\_bot;", "contents": "bot::goal_in_trigger(${1:trigger})"},
	{ "trigger": "point_in_goal\t#using scripts\\shared\\bots\\_bot;", "contents": "bot::point_in_goal(${1:point})"},
	{ "trigger": "path_to_trigger\t#using scripts\\shared\\bots\\_bot;", "contents": "bot::path_to_trigger(${1:trigger}, ${2:radius})"},
	{ "trigger": "path_to_point_in_trigger\t#using scripts\\shared\\bots\\_bot;", "contents": "bot::path_to_point_in_trigger(${1:trigger})"},
	{ "trigger": "get_trigger_radius\t#using scripts\\shared\\bots\\_bot;", "contents": "bot::get_trigger_radius(${1:trigger})"},
	{ "trigger": "get_trigger_height\t#using scripts\\shared\\bots\\_bot;", "contents": "bot::get_trigger_height(${1:trigger})"},
	{ "trigger": "check_stuck\t#using scripts\\shared\\bots\\_bot;", "contents": "bot::check_stuck()"},
	{ "trigger": "check_stuck_position\t#using scripts\\shared\\bots\\_bot;", "contents": "bot::check_stuck_position()"},
	{ "trigger": "stuck_resolution\t#using scripts\\shared\\bots\\_bot;", "contents": "bot::stuck_resolution()"},
	{ "trigger": "clear_stuck\t#using scripts\\shared\\bots\\_bot;", "contents": "bot::clear_stuck()"},
	{ "trigger": "camp\t#using scripts\\shared\\bots\\_bot;", "contents": "bot::camp()"},
	{ "trigger": "wait_bot_path_failed_loop\t#using scripts\\shared\\bots\\_bot;", "contents": "bot::wait_bot_path_failed_loop()"},
	{ "trigger": "wait_bot_goal_reached_loop\t#using scripts\\shared\\bots\\_bot;", "contents": "bot::wait_bot_goal_reached_loop()"},
	{ "trigger": "stow_gun_gadget\t#using scripts\\shared\\bots\\_bot;", "contents": "bot::stow_gun_gadget()"},
	{ "trigger": "get_ready_gadget\t#using scripts\\shared\\bots\\_bot;", "contents": "bot::get_ready_gadget()"},
	{ "trigger": "get_ready_gun_gadget\t#using scripts\\shared\\bots\\_bot;", "contents": "bot::get_ready_gun_gadget()"},
	{ "trigger": "is_gun_gadget\t#using scripts\\shared\\bots\\_bot;", "contents": "bot::is_gun_gadget(${1:weapon})"},
	{ "trigger": "activate_hero_gadget\t#using scripts\\shared\\bots\\_bot;", "contents": "bot::activate_hero_gadget(${1:weapon})"},
	{ "trigger": "coop_pre_combat\t#using scripts\\shared\\bots\\_bot;", "contents": "bot::coop_pre_combat()"},
	{ "trigger": "coop_post_combat\t#using scripts\\shared\\bots\\_bot;", "contents": "bot::coop_post_combat()"},
	{ "trigger": "follow_coop_players\t#using scripts\\shared\\bots\\_bot;", "contents": "bot::follow_coop_players()"},
	{ "trigger": "lead_player\t#using scripts\\shared\\bots\\_bot;", "contents": "bot::lead_player(${1:player}, ${2:followMin})"},
	{ "trigger": "follow_entity\t#using scripts\\shared\\bots\\_bot;", "contents": "bot::follow_entity(${1:entity}, ${2:radiusMin}, ${3:radiusMax})"},
	{ "trigger": "navmesh_wander\t#using scripts\\shared\\bots\\_bot;", "contents": "bot::navmesh_wander(${1:fwd}, ${2:radiusMin}, ${3:radiusMax}, ${4:spacing}, ${5:fwdDot})"},
	{ "trigger": "approach_goal_trigger\t#using scripts\\shared\\bots\\_bot;", "contents": "bot::approach_goal_trigger(${1:trigger}, ${2:radiusMax}, ${3:spacing})"},
	{ "trigger": "approach_point\t#using scripts\\shared\\bots\\_bot;", "contents": "bot::approach_point(${1:point}, ${2:radiusMin}, ${3:radiusMax}, ${4:spacing})"},
	{ "trigger": "revive_players\t#using scripts\\shared\\bots\\_bot;", "contents": "bot::revive_players()"},
	{ "trigger": "get_team_players_in_laststand\t#using scripts\\shared\\bots\\_bot;", "contents": "bot::get_team_players_in_laststand()"},
	{ "trigger": "revive_player\t#using scripts\\shared\\bots\\_bot;", "contents": "bot::revive_player(${1:player})"},
	{ "trigger": "watch_bot_corner\t#using scripts\\shared\\bots\\_bot;", "contents": "bot::watch_bot_corner(${1:startCornerDist}, ${2:cornerDist})"},
	{ "trigger": "wait_corner_radius\t#using scripts\\shared\\bots\\_bot;", "contents": "bot::wait_corner_radius(${1:startCornerDistSq}, ${2:centerPoint}, ${3:enterPoint}, ${4:leavePoint}, ${5:angle}, ${6:nextEnterPoint})"},
	{ "trigger": "finish_corner\t#using scripts\\shared\\bots\\_bot;", "contents": "bot::finish_corner()"},
	{ "trigger": "get_host_player\t#using scripts\\shared\\bots\\_bot;", "contents": "bot::get_host_player()"},
	{ "trigger": "fwd_dot\t#using scripts\\shared\\bots\\_bot;", "contents": "bot::fwd_dot(${1:point})"},
	{ "trigger": "has_launcher\t#using scripts\\shared\\bots\\_bot;", "contents": "bot::has_launcher()"},
	{ "trigger": "kill_bot\t#using scripts\\shared\\bots\\_bot;", "contents": "bot::kill_bot()"},
	{ "trigger": "gadget_resurrect_is_inuse\t#using scripts\\shared\\abilities\\gadgets\\_gadget_resurrect;", "contents": "resurrect::gadget_resurrect_is_inuse(${1:slot})"},
	{ "trigger": "gadget_resurrect_is_flickering\t#using scripts\\shared\\abilities\\gadgets\\_gadget_resurrect;", "contents": "resurrect::gadget_resurrect_is_flickering(${1:slot})"},
	{ "trigger": "gadget_resurrect_on_flicker\t#using scripts\\shared\\abilities\\gadgets\\_gadget_resurrect;", "contents": "resurrect::gadget_resurrect_on_flicker(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_resurrect_on_give\t#using scripts\\shared\\abilities\\gadgets\\_gadget_resurrect;", "contents": "resurrect::gadget_resurrect_on_give(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_resurrect_on_take\t#using scripts\\shared\\abilities\\gadgets\\_gadget_resurrect;", "contents": "resurrect::gadget_resurrect_on_take(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_resurrect_on_spawned\t#using scripts\\shared\\abilities\\gadgets\\_gadget_resurrect;", "contents": "resurrect::gadget_resurrect_on_spawned()"},
	{ "trigger": "resurrect_drain_power\t#using scripts\\shared\\abilities\\gadgets\\_gadget_resurrect;", "contents": "resurrect::resurrect_drain_power(${1:amount})"},
	{ "trigger": "gadget_resurrect_on_connect\t#using scripts\\shared\\abilities\\gadgets\\_gadget_resurrect;", "contents": "resurrect::gadget_resurrect_on_connect()"},
	{ "trigger": "gadget_resurrect_on\t#using scripts\\shared\\abilities\\gadgets\\_gadget_resurrect;", "contents": "resurrect::gadget_resurrect_on(${1:slot}, ${2:weapon})"},
	{ "trigger": "watch_smoke_detonate\t#using scripts\\shared\\abilities\\gadgets\\_gadget_resurrect;", "contents": "resurrect::watch_smoke_detonate()"},
	{ "trigger": "watch_smoke_death\t#using scripts\\shared\\abilities\\gadgets\\_gadget_resurrect; self is effect", "contents": "resurrect::watch_smoke_death(${1:player})"},
	{ "trigger": "watch_smoke_effect_watch_suicide\t#using scripts\\shared\\abilities\\gadgets\\_gadget_resurrect; self is effect", "contents": "resurrect::watch_smoke_effect_watch_suicide(${1:player})"},
	{ "trigger": "watch_smoke_effect_watch_resurrect\t#using scripts\\shared\\abilities\\gadgets\\_gadget_resurrect; self is effect", "contents": "resurrect::watch_smoke_effect_watch_resurrect(${1:player})"},
	{ "trigger": "gadget_resurrect_is_primed\t#using scripts\\shared\\abilities\\gadgets\\_gadget_resurrect; self == player", "contents": "resurrect::gadget_resurrect_is_primed(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_resurrect_is_ready\t#using scripts\\shared\\abilities\\gadgets\\_gadget_resurrect;", "contents": "resurrect::gadget_resurrect_is_ready(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_resurrect_start\t#using scripts\\shared\\abilities\\gadgets\\_gadget_resurrect;", "contents": "resurrect::gadget_resurrect_start(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_resurrect_off\t#using scripts\\shared\\abilities\\gadgets\\_gadget_resurrect;", "contents": "resurrect::gadget_resurrect_off(${1:slot}, ${2:weapon})"},
	{ "trigger": "resurrect_delay\t#using scripts\\shared\\abilities\\gadgets\\_gadget_resurrect;", "contents": "resurrect::resurrect_delay(${1:weapon})"},
	{ "trigger": "overrideSpawn\t#using scripts\\shared\\abilities\\gadgets\\_gadget_resurrect;", "contents": "resurrect::overrideSpawn(${1:isPredictedSpawn})"},
	{ "trigger": "is_jumping\t#using scripts\\shared\\abilities\\gadgets\\_gadget_resurrect;", "contents": "resurrect::is_jumping()"},
	{ "trigger": "player_position_valid\t#using scripts\\shared\\abilities\\gadgets\\_gadget_resurrect;", "contents": "resurrect::player_position_valid()"},
	{ "trigger": "resurrect_breadcrumbs\t#using scripts\\shared\\abilities\\gadgets\\_gadget_resurrect;", "contents": "resurrect::resurrect_breadcrumbs(${1:slot})"},
	{ "trigger": "glow_for_time\t#using scripts\\shared\\abilities\\gadgets\\_gadget_resurrect;", "contents": "resurrect::glow_for_time(${1:time})"},
	{ "trigger": "wait_for_time\t#using scripts\\shared\\abilities\\gadgets\\_gadget_resurrect;", "contents": "resurrect::wait_for_time(${1:time}, ${2:msg})"},
	{ "trigger": "wait_for_activate\t#using scripts\\shared\\abilities\\gadgets\\_gadget_resurrect;", "contents": "resurrect::wait_for_activate(${1:msg})"},
	{ "trigger": "bot_wait_for_activate\t#using scripts\\shared\\abilities\\gadgets\\_gadget_resurrect;", "contents": "resurrect::bot_wait_for_activate(${1:msg}, ${2:time})"},
	{ "trigger": "do_resurrect_hint_fx\t#using scripts\\shared\\abilities\\gadgets\\_gadget_resurrect;", "contents": "resurrect::do_resurrect_hint_fx()"},
	{ "trigger": "do_resurrected_on_dead_body_fx\t#using scripts\\shared\\abilities\\gadgets\\_gadget_resurrect;", "contents": "resurrect::do_resurrected_on_dead_body_fx()"},
	{ "trigger": "do_resurrected_on_spawned_player_fx\t#using scripts\\shared\\abilities\\gadgets\\_gadget_resurrect;", "contents": "resurrect::do_resurrected_on_spawned_player_fx()"},
	{ "trigger": "resurrect_watch_for_death\t#using scripts\\shared\\abilities\\gadgets\\_gadget_resurrect;", "contents": "resurrect::resurrect_watch_for_death(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_resurrect_delay_updateTeamStatus\t#using scripts\\shared\\abilities\\gadgets\\_gadget_resurrect;", "contents": "resurrect::gadget_resurrect_delay_updateTeamStatus()"},
	{ "trigger": "gadget_resurrect_is_player_predead\t#using scripts\\shared\\abilities\\gadgets\\_gadget_resurrect;", "contents": "resurrect::gadget_resurrect_is_player_predead()"},
	{ "trigger": "gadget_resurrect_secondary_deathcam_time\t#using scripts\\shared\\abilities\\gadgets\\_gadget_resurrect;", "contents": "resurrect::gadget_resurrect_secondary_deathcam_time()"},
	{ "trigger": "enter_rejack_standby\t#using scripts\\shared\\abilities\\gadgets\\_gadget_resurrect; self == player", "contents": "resurrect::enter_rejack_standby()"},
	{ "trigger": "rejack_suicide\t#using scripts\\shared\\abilities\\gadgets\\_gadget_resurrect;", "contents": "resurrect::rejack_suicide()"},
	{ "trigger": "watch_bad_trigger_touch\t#using scripts\\shared\\abilities\\gadgets\\_gadget_resurrect;", "contents": "resurrect::watch_bad_trigger_touch()"},
	{ "trigger": "watch_rejack_timeout\t#using scripts\\shared\\abilities\\gadgets\\_gadget_resurrect; self == player", "contents": "resurrect::watch_rejack_timeout()"},
	{ "trigger": "watch_rejack_suicide\t#using scripts\\shared\\abilities\\gadgets\\_gadget_resurrect; self == player", "contents": "resurrect::watch_rejack_suicide()"},
	{ "trigger": "reload_clip_on_stand\t#using scripts\\shared\\abilities\\gadgets\\_gadget_resurrect;", "contents": "resurrect::reload_clip_on_stand()"},
	{ "trigger": "watch_rejack_activate_requested\t#using scripts\\shared\\abilities\\gadgets\\_gadget_resurrect;", "contents": "resurrect::watch_rejack_activate_requested()"},
	{ "trigger": "watch_rejack_activate\t#using scripts\\shared\\abilities\\gadgets\\_gadget_resurrect; self == player", "contents": "resurrect::watch_rejack_activate()"},
	{ "trigger": "remove_rejack_ui\t#using scripts\\shared\\abilities\\gadgets\\_gadget_resurrect;", "contents": "resurrect::remove_rejack_ui()"},
	{ "trigger": "rejack_ui_activate\t#using scripts\\shared\\abilities\\gadgets\\_gadget_resurrect;", "contents": "resurrect::rejack_ui_activate()"},
	{ "trigger": "player_suicide\t#using scripts\\shared\\abilities\\gadgets\\_gadget_resurrect; self == player", "contents": "resurrect::player_suicide()"},
	{ "trigger": "is_Classic\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::is_Classic()"},
	{ "trigger": "is_Standard\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::is_Standard()"},
	{ "trigger": "ConvertSecondsToMilliseconds\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::ConvertSecondsToMilliseconds(${1:seconds})"},
	{ "trigger": "is_player\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::is_player()"},
	{ "trigger": "lerp\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::lerp(${1:chunk})"},
	{ "trigger": "recalc_zombie_array\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::recalc_zombie_array()"},
	{ "trigger": "change_zombie_run_cycle\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::change_zombie_run_cycle()"},
	{ "trigger": "make_supersprinter\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::make_supersprinter()"},
	{ "trigger": "speed_change_watcher\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::speed_change_watcher()"},
	{ "trigger": "move_zombie_spawn_location\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::move_zombie_spawn_location(${1:spot})"},
	{ "trigger": "anchor_delete_failsafe\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::anchor_delete_failsafe(${1:ai_zombie})"},
	{ "trigger": "run_spawn_functions\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::run_spawn_functions()"},
	{ "trigger": "create_simple_hud\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::create_simple_hud(${1:client}, ${2:team})"},
	{ "trigger": "destroy_hud\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::destroy_hud()"},
	{ "trigger": "all_chunks_intact\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::all_chunks_intact(${1:barrier}, ${2:barrier_chunks})"},
	{ "trigger": "no_valid_repairable_boards\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::no_valid_repairable_boards(${1:barrier}, ${2:barrier_chunks})"},
	{ "trigger": "is_Survival\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::is_Survival()"},
	{ "trigger": "is_Encounter\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::is_Encounter()"},
	{ "trigger": "all_chunks_destroyed\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::all_chunks_destroyed(${1:barrier}, ${2:barrier_chunks})"},
	{ "trigger": "check_point_in_playable_area\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::check_point_in_playable_area(${1:origin})"},
	{ "trigger": "check_point_in_enabled_zone\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::check_point_in_enabled_zone(${1:origin}, ${2:zone_is_active}, ${3:player_zones})"},
	{ "trigger": "round_up_to_ten\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::round_up_to_ten(${1:score})"},
	{ "trigger": "round_up_score\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::round_up_score(${1:score}, ${2:value})"},
	{ "trigger": "halve_score\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::halve_score(${1:n_score})"},
	{ "trigger": "random_tan\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::random_tan()"},
	{ "trigger": "places_before_decimal\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::places_before_decimal(${1:num})"},
	{ "trigger": "watch_for_poi_death\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::watch_for_poi_death()"},
	{ "trigger": "create_zombie_point_of_interest_attractor_positions\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::create_zombie_point_of_interest_attractor_positions(${1:num_attract_dists}, ${2:attract_dist})"},
	{ "trigger": "generated_radius_attract_positions\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::generated_radius_attract_positions(${1:forward}, ${2:offset}, ${3:num_positions}, ${4:attract_radius})"},
	{ "trigger": "debug_draw_attractor_positions\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::debug_draw_attractor_positions()"},
	{ "trigger": "debug_draw_claimed_attractor_positions\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::debug_draw_claimed_attractor_positions()"},
	{ "trigger": "get_zombie_point_of_interest\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::get_zombie_point_of_interest(${1:origin}, ${2:poi_array})"},
	{ "trigger": "activate_zombie_point_of_interest\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::activate_zombie_point_of_interest()"},
	{ "trigger": "deactivate_zombie_point_of_interest\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::deactivate_zombie_point_of_interest()"},
	{ "trigger": "assign_zombie_point_of_interest\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::assign_zombie_point_of_interest(${1:origin}, ${2:poi})"},
	{ "trigger": "remove_poi_attractor\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::remove_poi_attractor(${1:zombie_poi})"},
	{ "trigger": "array_check_for_dupes_using_compare\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::array_check_for_dupes_using_compare(${1:array}, ${2:single}, ${3:is_equal_fn})"},
	{ "trigger": "poi_locations_equal\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::poi_locations_equal(${1:loc1}, ${2:loc2})"},
	{ "trigger": "add_poi_attractor\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::add_poi_attractor(${1:zombie_poi})"},
	{ "trigger": "can_attract\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::can_attract(${1:attractor})"},
	{ "trigger": "update_poi_on_death\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::update_poi_on_death(${1:zombie_poi})"},
	{ "trigger": "update_on_poi_removal\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::update_on_poi_removal(${1:zombie_poi})"},
	{ "trigger": "invalidate_attractor_pos\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::invalidate_attractor_pos(${1:attractor_pos}, ${2:zombie})"},
	{ "trigger": "remove_poi_from_ignore_list\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::remove_poi_from_ignore_list(${1:poi})"},
	{ "trigger": "add_poi_to_ignore_list\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::add_poi_to_ignore_list(${1:poi})"},
	{ "trigger": "default_validate_enemy_path_length\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::default_validate_enemy_path_length(${1:player})"},
	{ "trigger": "get_closest_valid_player\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::get_closest_valid_player(${1:origin}, ${2:ignore_player})"},
	{ "trigger": "update_valid_players\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::update_valid_players(${1:origin}, ${2:ignore_player})"},
	{ "trigger": "is_player_valid\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::is_player_valid(${1:player}, ${2:checkIgnoreMeFlag}, ${3:ignore_laststand_players})"},
	{ "trigger": "get_number_of_valid_players\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::get_number_of_valid_players()"},
	{ "trigger": "in_revive_trigger\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::in_revive_trigger()"},
	{ "trigger": "get_closest_node\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::get_closest_node(${1:org}, ${2:nodes})"},
	{ "trigger": "non_destroyed_bar_board_order\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::non_destroyed_bar_board_order(${1:origin}, ${2:chunks})"},
	{ "trigger": "non_destroyed_grate_order\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::non_destroyed_grate_order(${1:origin}, ${2:chunks_grate})"},
	{ "trigger": "non_destroyed_variant1_order\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::non_destroyed_variant1_order(${1:origin}, ${2:chunks_variant1})"},
	{ "trigger": "non_destroyed_variant2_order\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::non_destroyed_variant2_order(${1:origin}, ${2:chunks_variant2})"},
	{ "trigger": "non_destroyed_variant4_order\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::non_destroyed_variant4_order(${1:origin}, ${2:chunks_variant4})"},
	{ "trigger": "non_destroyed_variant5_order\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::non_destroyed_variant5_order(${1:origin}, ${2:chunks_variant5})"},
	{ "trigger": "show_grate_pull\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::show_grate_pull()"},
	{ "trigger": "get_closest_2d\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::get_closest_2d(${1:origin}, ${2:ents})"},
	{ "trigger": "in_playable_area\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::in_playable_area()"},
	{ "trigger": "get_closest_non_destroyed_chunk\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::get_closest_non_destroyed_chunk(${1:origin}, ${2:barrier}, ${3:barrier_chunks})"},
	{ "trigger": "get_random_destroyed_chunk\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::get_random_destroyed_chunk(${1:barrier}, ${2:barrier_chunks})"},
	{ "trigger": "get_destroyed_repair_grates\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::get_destroyed_repair_grates(${1:barrier_chunks})"},
	{ "trigger": "get_non_destroyed_chunks\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::get_non_destroyed_chunks(${1:barrier}, ${2:barrier_chunks})"},
	{ "trigger": "get_non_destroyed_chunks_grate\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::get_non_destroyed_chunks_grate(${1:barrier}, ${2:barrier_chunks})"},
	{ "trigger": "get_non_destroyed_variant1\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::get_non_destroyed_variant1(${1:barrier_chunks})"},
	{ "trigger": "get_non_destroyed_variant2\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::get_non_destroyed_variant2(${1:barrier_chunks})"},
	{ "trigger": "get_non_destroyed_variant4\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::get_non_destroyed_variant4(${1:barrier_chunks})"},
	{ "trigger": "get_non_destroyed_variant5\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::get_non_destroyed_variant5(${1:barrier_chunks})"},
	{ "trigger": "get_destroyed_chunks\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::get_destroyed_chunks(${1:barrier_chunks})"},
	{ "trigger": "grate_order_destroyed\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::grate_order_destroyed(${1:chunks_repair_grate})"},
	{ "trigger": "show_grate_repair\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::show_grate_repair()"},
	{ "trigger": "get_chunk_state\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::get_chunk_state()"},
	{ "trigger": "array_limiter\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::array_limiter(${1:array}, ${2:total})"},
	{ "trigger": "fake_physicslaunch\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::fake_physicslaunch(${1:target_pos}, ${2:power})"},
	{ "trigger": "add_zombie_hint\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::add_zombie_hint(${1:ref}, ${2:text})"},
	{ "trigger": "get_zombie_hint\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::get_zombie_hint(${1:ref})"},
	{ "trigger": "set_hint_string\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::set_hint_string(${1:ent}, ${2:default_ref}, ${3:cost})"},
	{ "trigger": "get_hint_string\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::get_hint_string(${1:ent}, ${2:default_ref}, ${3:cost})"},
	{ "trigger": "unitrigger_set_hint_string\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::unitrigger_set_hint_string(${1:ent}, ${2:default_ref}, ${3:cost})"},
	{ "trigger": "add_sound\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::add_sound(${1:ref}, ${2:alias})"},
	{ "trigger": "play_sound_at_pos\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::play_sound_at_pos(${1:ref}, ${2:pos}, ${3:ent})"},
	{ "trigger": "play_sound_on_ent\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::play_sound_on_ent(${1:ref})"},
	{ "trigger": "play_loopsound_on_ent\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::play_loopsound_on_ent(${1:ref})"},
	{ "trigger": "string_to_float\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::string_to_float(${1:string})"},
	{ "trigger": "set_zombie_var\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::set_zombie_var(${1:zvar}, ${2:value}, ${3:is_float}, ${4:column}, ${5:is_team_based})"},
	{ "trigger": "get_table_var\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::get_table_var(${1:table}, ${2:var_name}, ${3:value}, ${4:is_float}, ${5:column})"},
	{ "trigger": "hudelem_count\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::hudelem_count()"},
	{ "trigger": "debug_round_advancer\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::debug_round_advancer()"},
	{ "trigger": "print_run_speed\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::print_run_speed(${1:speed})"},
	{ "trigger": "draw_line_ent_to_ent\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::draw_line_ent_to_ent(${1:ent1}, ${2:ent2})"},
	{ "trigger": "draw_line_ent_to_pos\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::draw_line_ent_to_pos(${1:ent}, ${2:pos}, ${3:end_on})"},
	{ "trigger": "debug_print\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::debug_print(${1:msg})"},
	{ "trigger": "debug_blocker\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::debug_blocker(${1:pos}, ${2:rad}, ${3:height})"},
	{ "trigger": "drawcylinder\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::drawcylinder(${1:pos}, ${2:rad}, ${3:height})"},
	{ "trigger": "print3d_at_pos\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::print3d_at_pos(${1:msg}, ${2:pos}, ${3:thread_endon}, ${4:offset})"},
	{ "trigger": "debug_breadcrumbs\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::debug_breadcrumbs()"},
	{ "trigger": "float_print3d\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::float_print3d(${1:msg}, ${2:time})"},
	{ "trigger": "do_player_vo\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::do_player_vo(${1:snd}, ${2:variation_count})"},
	{ "trigger": "is_magic_bullet_shield_enabled\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::is_magic_bullet_shield_enabled(${1:ent})"},
	{ "trigger": "really_play_2D_sound\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::really_play_2D_sound(${1:sound})"},
	{ "trigger": "play_sound_2D\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::play_sound_2D(${1:sound})"},
	{ "trigger": "include_weapon\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::include_weapon(${1:weapon_name}, ${2:in_box})"},
	{ "trigger": "trigger_invisible\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::trigger_invisible(${1:enable})"},
	{ "trigger": "print3d_ent\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::print3d_ent(${1:text}, ${2:color}, ${3:scale}, ${4:offset}, ${5:end_msg}, ${6:overwrite})"},
	{ "trigger": "create_counter_hud\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::create_counter_hud(${1:x})"},
	{ "trigger": "get_current_zone\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::get_current_zone(${1:return_zone})"},
	{ "trigger": "remove_mod_from_methodofdeath\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::remove_mod_from_methodofdeath(${1:mod})"},
	{ "trigger": "clear_fog_threads\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::clear_fog_threads()"},
	{ "trigger": "display_message\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::display_message(${1:titleText}, ${2:notifyText}, ${3:duration})"},
	{ "trigger": "is_quad\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::is_quad()"},
	{ "trigger": "is_leaper\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::is_leaper()"},
	{ "trigger": "shock_onpain\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::shock_onpain()"},
	{ "trigger": "shock_onexplosion\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::shock_onexplosion(${1:damage}, ${2:shockType}, ${3:shockLight})"},
	{ "trigger": "increment_ignoreme\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::increment_ignoreme()"},
	{ "trigger": "decrement_ignoreme\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::decrement_ignoreme()"},
	{ "trigger": "increment_is_drinking\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::increment_is_drinking()"},
	{ "trigger": "is_multiple_drinking\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::is_multiple_drinking()"},
	{ "trigger": "decrement_is_drinking\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::decrement_is_drinking()"},
	{ "trigger": "clear_is_drinking\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::clear_is_drinking()"},
	{ "trigger": "increment_no_end_game_check\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::increment_no_end_game_check()"},
	{ "trigger": "decrement_no_end_game_check\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::decrement_no_end_game_check()"},
	{ "trigger": "fade_out\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::fade_out(${1:time})"},
	{ "trigger": "fade_in\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::fade_in(${1:hold_black_time})"},
	{ "trigger": "getWeaponClassZM\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::getWeaponClassZM(${1:weapon})"},
	{ "trigger": "spawn_weapon_model\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::spawn_weapon_model(${1:weapon}, ${2:model}, ${3:origin}, ${4:angles}, ${5:options})"},
	{ "trigger": "spawn_buildkit_weapon_model\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::spawn_buildkit_weapon_model(${1:player}, ${2:weapon}, ${3:camo}, ${4:origin}, ${5:angles})"},
	{ "trigger": "is_player_revive_tool\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::is_player_revive_tool(${1:weapon})"},
	{ "trigger": "is_limited_weapon\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::is_limited_weapon(${1:weapon})"},
	{ "trigger": "register_lethal_grenade_for_level\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::register_lethal_grenade_for_level(${1:weaponname})"},
	{ "trigger": "is_lethal_grenade\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::is_lethal_grenade(${1:weapon})"},
	{ "trigger": "is_player_lethal_grenade\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::is_player_lethal_grenade(${1:weapon})"},
	{ "trigger": "get_player_lethal_grenade\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::get_player_lethal_grenade()"},
	{ "trigger": "set_player_lethal_grenade\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::set_player_lethal_grenade(${1:weapon})"},
	{ "trigger": "register_tactical_grenade_for_level\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::register_tactical_grenade_for_level(${1:weaponname})"},
	{ "trigger": "is_tactical_grenade\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::is_tactical_grenade(${1:weapon})"},
	{ "trigger": "is_player_tactical_grenade\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::is_player_tactical_grenade(${1:weapon})"},
	{ "trigger": "get_player_tactical_grenade\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::get_player_tactical_grenade()"},
	{ "trigger": "set_player_tactical_grenade\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::set_player_tactical_grenade(${1:weapon})"},
	{ "trigger": "is_placeable_mine\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::is_placeable_mine(${1:weapon})"},
	{ "trigger": "is_player_placeable_mine\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::is_player_placeable_mine(${1:weapon})"},
	{ "trigger": "get_player_placeable_mine\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::get_player_placeable_mine()"},
	{ "trigger": "set_player_placeable_mine\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::set_player_placeable_mine(${1:weapon})"},
	{ "trigger": "register_melee_weapon_for_level\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::register_melee_weapon_for_level(${1:weaponname})"},
	{ "trigger": "is_melee_weapon\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::is_melee_weapon(${1:weapon})"},
	{ "trigger": "is_player_melee_weapon\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::is_player_melee_weapon(${1:weapon})"},
	{ "trigger": "get_player_melee_weapon\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::get_player_melee_weapon()"},
	{ "trigger": "set_player_melee_weapon\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::set_player_melee_weapon(${1:weapon})"},
	{ "trigger": "register_hero_weapon_for_level\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::register_hero_weapon_for_level(${1:weaponname})"},
	{ "trigger": "is_hero_weapon\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::is_hero_weapon(${1:weapon})"},
	{ "trigger": "is_player_hero_weapon\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::is_player_hero_weapon(${1:weapon})"},
	{ "trigger": "get_player_hero_weapon\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::get_player_hero_weapon()"},
	{ "trigger": "set_player_hero_weapon\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::set_player_hero_weapon(${1:weapon})"},
	{ "trigger": "has_player_hero_weapon\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::has_player_hero_weapon()"},
	{ "trigger": "should_watch_for_emp\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::should_watch_for_emp()"},
	{ "trigger": "register_offhand_weapons_for_level_defaults\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::register_offhand_weapons_for_level_defaults()"},
	{ "trigger": "is_offhand_weapon\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::is_offhand_weapon(${1:weapon})"},
	{ "trigger": "is_player_offhand_weapon\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::is_player_offhand_weapon(${1:weapon})"},
	{ "trigger": "has_powerup_weapon\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::has_powerup_weapon()"},
	{ "trigger": "has_hero_weapon\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::has_hero_weapon()"},
	{ "trigger": "give_start_weapon\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::give_start_weapon(${1:b_switch_weapon})"},
	{ "trigger": "array_flag_wait_any\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::array_flag_wait_any(${1:flag_array})"},
	{ "trigger": "array_flag_wait_any_thread\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::array_flag_wait_any_thread(${1:flag_name}, ${2:condition})"},
	{ "trigger": "groundpos\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::groundpos(${1:origin})"},
	{ "trigger": "groundpos_ignore_water\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::groundpos_ignore_water(${1:origin})"},
	{ "trigger": "groundpos_ignore_water_new\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::groundpos_ignore_water_new(${1:origin})"},
	{ "trigger": "self_delete\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::self_delete()"},
	{ "trigger": "ignore_triggers\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::ignore_triggers(${1:timer})"},
	{ "trigger": "giveachievement_wrapper\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::giveachievement_wrapper(${1:achievement}, ${2:all_players})"},
	{ "trigger": "GetYaw\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::GetYaw(${1:org})"},
	{ "trigger": "GetYawToSpot\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::GetYawToSpot(${1:spot})"},
	{ "trigger": "disable_react\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::disable_react()"},
	{ "trigger": "enable_react\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::enable_react()"},
	{ "trigger": "bullet_attack\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::bullet_attack(${1:type})"},
	{ "trigger": "pick_up\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::pick_up()"},
	{ "trigger": "destroy_ent\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::destroy_ent()"},
	{ "trigger": "waittill_not_moving\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::waittill_not_moving()"},
	{ "trigger": "get_closest_player\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::get_closest_player(${1:org})"},
	{ "trigger": "ent_flag_wait_ai_standards\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::ent_flag_wait_ai_standards(${1:message})"},
	{ "trigger": "flat_angle\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::flat_angle(${1:angle})"},
	{ "trigger": "clear_run_anim\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::clear_run_anim()"},
	{ "trigger": "track_players_intersection_tracker\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::track_players_intersection_tracker()"},
	{ "trigger": "is_player_looking_at\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::is_player_looking_at(${1:origin}, ${2:dot}, ${3:do_trace}, ${4:ignore_ent})"},
	{ "trigger": "add_gametype\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::add_gametype(${1:gt}, ${2:dummy1}, ${3:name}, ${4:dummy2})"},
	{ "trigger": "add_gameloc\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::add_gameloc(${1:gl}, ${2:dummy1}, ${3:name}, ${4:dummy2})"},
	{ "trigger": "get_closest_index\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::get_closest_index(${1:org}, ${2:array}, ${3:dist})"},
	{ "trigger": "is_valid_zombie_spawn_point\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::is_valid_zombie_spawn_point(${1:point})"},
	{ "trigger": "get_closest_index_to_entity\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::get_closest_index_to_entity(${1:entity}, ${2:array}, ${3:dist}, ${4:extra_check})"},
	{ "trigger": "set_gamemode_var\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::set_gamemode_var(${1:gvar}, ${2:val})"},
	{ "trigger": "set_gamemode_var_once\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::set_gamemode_var_once(${1:gvar}, ${2:val})"},
	{ "trigger": "set_game_var\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::set_game_var(${1:gvar}, ${2:val})"},
	{ "trigger": "set_game_var_once\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::set_game_var_once(${1:gvar}, ${2:val})"},
	{ "trigger": "get_game_var\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::get_game_var(${1:gvar})"},
	{ "trigger": "get_gamemode_var\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::get_gamemode_var(${1:gvar})"},
	{ "trigger": "waittill_subset\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::waittill_subset(${1:min_num}, ${2:string1}, ${3:string2}, ${4:string3}, ${5:string4}, ${6:string5})"},
	{ "trigger": "is_headshot\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::is_headshot(${1:weapon}, ${2:sHitLoc}, ${3:sMeansOfDeath})"},
	{ "trigger": "is_jumping\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::is_jumping()"},
	{ "trigger": "is_explosive_damage\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::is_explosive_damage(${1:mod})"},
	{ "trigger": "sndSwitchAnnouncerVox\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::sndSwitchAnnouncerVox(${1:who})"},
	{ "trigger": "do_player_general_vox\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::do_player_general_vox(${1:category}, ${2:type}, ${3:timer}, ${4:chance})"},
	{ "trigger": "general_vox_timer\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::general_vox_timer(${1:timer}, ${2:type})"},
	{ "trigger": "create_vox_timer\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::create_vox_timer(${1:type})"},
	{ "trigger": "play_vox_to_player\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::play_vox_to_player(${1:category}, ${2:type}, ${3:force_variant})"},
	{ "trigger": "is_favorite_weapon\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::is_favorite_weapon(${1:weapon_to_check})"},
	{ "trigger": "add_vox_response_chance\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::add_vox_response_chance(${1:event}, ${2:chance})"},
	{ "trigger": "set_demo_intermission_point\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::set_demo_intermission_point()"},
	{ "trigger": "register_map_navcard\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::register_map_navcard(${1:navcard_on_map}, ${2:navcard_needed_for_computer})"},
	{ "trigger": "does_player_have_map_navcard\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::does_player_have_map_navcard(${1:player})"},
	{ "trigger": "does_player_have_correct_navcard\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::does_player_have_correct_navcard(${1:player})"},
	{ "trigger": "place_navcard\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::place_navcard(${1:str_model}, ${2:str_stat}, ${3:org}, ${4:angles})"},
	{ "trigger": "sq_refresh_player_navcard_hud\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::sq_refresh_player_navcard_hud()"},
	{ "trigger": "sq_refresh_player_navcard_hud_internal\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::sq_refresh_player_navcard_hud_internal()"},
	{ "trigger": "disable_player_move_states\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::disable_player_move_states(${1:forceStanceChange})"},
	{ "trigger": "enable_player_move_states\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::enable_player_move_states()"},
	{ "trigger": "check_and_create_node_lists\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::check_and_create_node_lists()"},
	{ "trigger": "link_nodes\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::link_nodes(${1:a}, ${2:b}, ${3:bDontUnlinkOnMigrate = false})"},
	{ "trigger": "unlink_nodes\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::unlink_nodes(${1:a}, ${2:b}, ${3:bDontLinkOnMigrate = false})"},
	{ "trigger": "spawn_path_node\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::spawn_path_node(${1:origin}, ${2:angles}, ${3:k1}, ${4:v1}, ${5:k2}, ${6:v2})"},
	{ "trigger": "spawn_path_node_internal\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::spawn_path_node_internal(${1:origin}, ${2:angles}, ${3:k1}, ${4:v1}, ${5:k2}, ${6:v2})"},
	{ "trigger": "delete_spawned_path_nodes\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::delete_spawned_path_nodes()"},
	{ "trigger": "respawn_path_nodes\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::respawn_path_nodes()"},
	{ "trigger": "link_changes_internal_internal\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::link_changes_internal_internal(${1:list}, ${2:func})"},
	{ "trigger": "link_changes_internal\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::link_changes_internal(${1:func_for_link_list}, ${2:func_for_unlink_list})"},
	{ "trigger": "link_nodes_wrapper\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::link_nodes_wrapper(${1:a}, ${2:b})"},
	{ "trigger": "unlink_nodes_wrapper\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::unlink_nodes_wrapper(${1:a}, ${2:b})"},
	{ "trigger": "undo_link_changes\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::undo_link_changes()"},
	{ "trigger": "redo_link_changes\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::redo_link_changes()"},
	{ "trigger": "is_gametype_active\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::is_gametype_active(${1:a_gametypes})"},
	{ "trigger": "register_custom_spawner_entry\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::register_custom_spawner_entry(${1:spot_noteworthy}, ${2:func})"},
	{ "trigger": "get_player_weapon_limit\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::get_player_weapon_limit(${1:player})"},
	{ "trigger": "get_player_perk_purchase_limit\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::get_player_perk_purchase_limit()"},
	{ "trigger": "can_player_purchase_perk\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::can_player_purchase_perk()"},
	{ "trigger": "give_player_all_perks\t#using scripts\\zm\\_zm_utility; self == player", "contents": "zm_utility::give_player_all_perks(${1:b_exclude_quick_revive = false})"},
	{ "trigger": "wait_for_attractor_positions_complete\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::wait_for_attractor_positions_complete()"},
	{ "trigger": "get_player_index\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::get_player_index(${1:player})"},
	{ "trigger": "get_specific_character\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::get_specific_character(${1:n_character_index})"},
	{ "trigger": "zombie_goto_round\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::zombie_goto_round(${1:n_target_round})"},
	{ "trigger": "is_point_inside_enabled_zone\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::is_point_inside_enabled_zone(${1:v_origin}, ${2:ignore_zone})"},
	{ "trigger": "clear_streamer_hint\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::clear_streamer_hint()"},
	{ "trigger": "wait_clear_streamer_hint\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::wait_clear_streamer_hint(${1:lifetime})"},
	{ "trigger": "create_streamer_hint\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::create_streamer_hint(${1:origin}, ${2:angles}, ${3:value}, ${4:lifetime})"},
	{ "trigger": "approximate_path_dist\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::approximate_path_dist(${1:player})"},
	{ "trigger": "register_slowdown\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::register_slowdown(${1:str_type}, ${2:n_rate}, ${3:n_duration})"},
	{ "trigger": "slowdown_ai\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::slowdown_ai(${1:str_type})"},
	{ "trigger": "get_player_closest_to\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::get_player_closest_to(${1:e_target})"},
	{ "trigger": "is_facing\t#using scripts\\zm\\_zm_utility;", "contents": "zm_utility::is_facing(${1:facee}, ${2:requiredDot = 0.5}, ${3:b_2d = true})"},
	{ "trigger": "zombieSpawnSetup\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::zombieSpawnSetup()"},
	{ "trigger": "get_closest_valid_player\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::get_closest_valid_player(${1:origin}, ${2:ignore_player}, ${3:ignore_laststand_players = false})"},
	{ "trigger": "is_player_valid\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::is_player_valid(${1:player}, ${2:checkIgnoreMeFlag}, ${3:ignore_laststand_players})"},
	{ "trigger": "append_missing_legs_suffix\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::append_missing_legs_suffix(${1:animstate})"},
	{ "trigger": "UpdateAnimPose\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::UpdateAnimPose()"},
	{ "trigger": "GetNodeYawToOrigin\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::GetNodeYawToOrigin(${1:pos})"},
	{ "trigger": "GetNodeYawToEnemy\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::GetNodeYawToEnemy()"},
	{ "trigger": "GetCoverNodeYawToEnemy\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::GetCoverNodeYawToEnemy()"},
	{ "trigger": "GetYawToSpot\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::GetYawToSpot(${1:spot})"},
	{ "trigger": "GetYawToEnemy\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::GetYawToEnemy()"},
	{ "trigger": "GetYaw\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::GetYaw(${1:org})"},
	{ "trigger": "GetYaw2d\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::GetYaw2d(${1:org})"},
	{ "trigger": "AbsYawToEnemy\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::AbsYawToEnemy()"},
	{ "trigger": "AbsYawToEnemy2d\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::AbsYawToEnemy2d()"},
	{ "trigger": "AbsYawToOrigin\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::AbsYawToOrigin(${1:org})"},
	{ "trigger": "AbsYawToAngles\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::AbsYawToAngles(${1:angles})"},
	{ "trigger": "GetYawFromOrigin\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::GetYawFromOrigin(${1:org}, ${2:start})"},
	{ "trigger": "GetYawToTag\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::GetYawToTag(${1:tag}, ${2:org})"},
	{ "trigger": "GetYawToOrigin\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::GetYawToOrigin(${1:org})"},
	{ "trigger": "GetEyeYawToOrigin\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::GetEyeYawToOrigin(${1:org})"},
	{ "trigger": "GetCoverNodeYawToOrigin\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::GetCoverNodeYawToOrigin(${1:org})"},
	{ "trigger": "isStanceAllowedWrapper\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::isStanceAllowedWrapper(${1:stance})"},
	{ "trigger": "GetClaimedNode\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::GetClaimedNode()"},
	{ "trigger": "GetNodeType\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::GetNodeType()"},
	{ "trigger": "GetNodeDirection\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::GetNodeDirection()"},
	{ "trigger": "GetNodeForward\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::GetNodeForward()"},
	{ "trigger": "GetNodeOrigin\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::GetNodeOrigin()"},
	{ "trigger": "safemod\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::safemod(${1:a}, ${2:b})"},
	{ "trigger": "AngleClamp\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::AngleClamp(${1:angle})"},
	{ "trigger": "QuadrantAnimWeights\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::QuadrantAnimWeights(${1:yaw})"},
	{ "trigger": "getQuadrant\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::getQuadrant(${1:angle})"},
	{ "trigger": "IsInSet\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::IsInSet(${1:input}, ${2:set})"},
	{ "trigger": "NotifyAfterTime\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::NotifyAfterTime(${1:notifyString}, ${2:killmestring}, ${3:time})"},
	{ "trigger": "drawStringTime\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::drawStringTime(${1:msg}, ${2:org}, ${3:color}, ${4:timer})"},
	{ "trigger": "showLastEnemySightPos\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::showLastEnemySightPos(${1:string})"},
	{ "trigger": "debugTimeout\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::debugTimeout()"},
	{ "trigger": "debugPosInternal\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::debugPosInternal(${1:org}, ${2:string}, ${3:size})"},
	{ "trigger": "debugPos\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::debugPos(${1:org}, ${2:string})"},
	{ "trigger": "debugPosSize\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::debugPosSize(${1:org}, ${2:string}, ${3:size})"},
	{ "trigger": "showDebugProc\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::showDebugProc(${1:fromPoint}, ${2:toPoint}, ${3:color}, ${4:printTime})"},
	{ "trigger": "showDebugLine\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::showDebugLine(${1:fromPoint}, ${2:toPoint}, ${3:color}, ${4:printTime})"},
	{ "trigger": "getNodeOffset\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::getNodeOffset(${1:node})"},
	{ "trigger": "calculateNodeOffset\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::calculateNodeOffset(${1:right}, ${2:forward}, ${3:baseoffset})"},
	{ "trigger": "checkPitchVisibility\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::checkPitchVisibility(${1:fromPoint}, ${2:toPoint}, ${3:atNode})"},
	{ "trigger": "showLines\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::showLines(${1:start}, ${2:end}, ${3:end2})"},
	{ "trigger": "anim_array\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::anim_array(${1:animArray}, ${2:animWeights})"},
	{ "trigger": "notForcedCover\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::notForcedCover()"},
	{ "trigger": "forcedCover\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::forcedCover(${1:msg})"},
	{ "trigger": "print3dtime\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::print3dtime(${1:timer}, ${2:org}, ${3:msg}, ${4:color}, ${5:alpha}, ${6:scale})"},
	{ "trigger": "print3drise\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::print3drise(${1:org}, ${2:msg}, ${3:color}, ${4:alpha}, ${5:scale})"},
	{ "trigger": "crossproduct\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::crossproduct(${1:vec1}, ${2:vec2})"},
	{ "trigger": "scriptChange\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::scriptChange()"},
	{ "trigger": "delayedScriptChange\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::delayedScriptChange()"},
	{ "trigger": "sawEnemyMove\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::sawEnemyMove(${1:timer})"},
	{ "trigger": "canThrowGrenade\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::canThrowGrenade()"},
	{ "trigger": "random_weight\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::random_weight(${1:array})"},
	{ "trigger": "setFootstepEffect\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::setFootstepEffect(${1:name}, ${2:fx})"},
	{ "trigger": "persistentDebugLine\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::persistentDebugLine(${1:start}, ${2:end})"},
	{ "trigger": "isNodeDontStand\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::isNodeDontStand()"},
	{ "trigger": "isNodeDontCrouch\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::isNodeDontCrouch()"},
	{ "trigger": "doesNodeAllowStance\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::doesNodeAllowStance(${1:stance})"},
	{ "trigger": "animArray\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::animArray(${1:animname ) /* string */})"},
	{ "trigger": "animArrayAnyExist\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::animArrayAnyExist(${1:animname})"},
	{ "trigger": "animArrayPickRandom\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::animArrayPickRandom(${1:animname})"},
	{ "trigger": "getAnimEndPos\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::getAnimEndPos(${1:theanim})"},
	{ "trigger": "isValidEnemy\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::isValidEnemy(${1:enemy})"},
	{ "trigger": "damageLocationIsAny\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::damageLocationIsAny(${1:a}, ${2:b}, ${3:c}, ${4:d}, ${5:e}, ${6:f}, ${7:g}, ${8:h}, ${9:i}, ${10:j}, ${11:k}, ${12:ovr})"},
	{ "trigger": "ragdollDeath\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::ragdollDeath(${1:moveAnim})"},
	{ "trigger": "isCQBWalking\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::isCQBWalking()"},
	{ "trigger": "squared\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::squared(${1:value})"},
	{ "trigger": "randomizeIdleSet\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::randomizeIdleSet()"},
	{ "trigger": "getRandomIntFromSeed\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::getRandomIntFromSeed(${1:intSeed}, ${2:intMax})"},
	{ "trigger": "is_banzai\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::is_banzai()"},
	{ "trigger": "is_heavy_machine_gun\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::is_heavy_machine_gun()"},
	{ "trigger": "is_zombie\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::is_zombie()"},
	{ "trigger": "is_civilian\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::is_civilian()"},
	{ "trigger": "is_skeleton\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::is_skeleton(${1:skeleton})"},
	{ "trigger": "get_skeleton\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::get_skeleton()"},
	{ "trigger": "set_orient_mode\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::set_orient_mode(${1:mode}, ${2:val1})"},
	{ "trigger": "debug_anim_print\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::debug_anim_print(${1:text})"},
	{ "trigger": "debug_turn_print\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::debug_turn_print(${1:text}, ${2:line})"},
	{ "trigger": "debug_allow_combat\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::debug_allow_combat()"},
	{ "trigger": "debug_allow_movement\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::debug_allow_movement()"},
	{ "trigger": "set_zombie_var\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::set_zombie_var(${1:zvar}, ${2:value}, ${3:is_float = false}, ${4:column = 1}, ${5:is_team_based = false})"},
	{ "trigger": "spawn_zombie\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::spawn_zombie(${1:spawner}, ${2:target_name}, ${3:spawn_point}, ${4:round_number})"},
	{ "trigger": "zombie_spawn_failed\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::zombie_spawn_failed(${1:spawn})"},
	{ "trigger": "get_desired_origin\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::get_desired_origin()"},
	{ "trigger": "hide_pop\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::hide_pop()"},
	{ "trigger": "handle_rise_notetracks\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::handle_rise_notetracks(${1:note}, ${2:spot})"},
	{ "trigger": "finish_rise_notetracks\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::finish_rise_notetracks(${1:note}, ${2:spot})"},
	{ "trigger": "zombie_rise_death\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::zombie_rise_death(${1:zombie}, ${2:spot})"},
	{ "trigger": "get_rise_death_anim\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::get_rise_death_anim()"},
	{ "trigger": "reset_attack_spot\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::reset_attack_spot()"},
	{ "trigger": "zombie_gut_explosion\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::zombie_gut_explosion()"},
	{ "trigger": "delayed_zombie_eye_glow\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::delayed_zombie_eye_glow()"},
	{ "trigger": "zombie_eye_glow\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::zombie_eye_glow()"},
	{ "trigger": "zombie_eye_glow_stop\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::zombie_eye_glow_stop()"},
	{ "trigger": "round_spawn_failsafe_debug_draw\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::round_spawn_failsafe_debug_draw()"},
	{ "trigger": "round_spawn_failsafe\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::round_spawn_failsafe()"},
	{ "trigger": "ai_calculate_health\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::ai_calculate_health(${1:round_number})"},
	{ "trigger": "default_max_zombie_func\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::default_max_zombie_func(${1:max_num}, ${2:n_round})"},
	{ "trigger": "zombie_speed_up\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::zombie_speed_up()"},
	{ "trigger": "get_current_zombie_count\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::get_current_zombie_count()"},
	{ "trigger": "get_round_enemy_array\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::get_round_enemy_array()"},
	{ "trigger": "get_zombie_array\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::get_zombie_array()"},
	{ "trigger": "set_zombie_run_cycle_override_value\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::set_zombie_run_cycle_override_value(${1:new_move_speed})"},
	{ "trigger": "set_zombie_run_cycle_restore_from_override\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::set_zombie_run_cycle_restore_from_override()"},
	{ "trigger": "set_zombie_run_cycle\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::set_zombie_run_cycle(${1:new_move_speed})"},
	{ "trigger": "set_run_speed\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::set_run_speed()"},
	{ "trigger": "set_run_speed_easy\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::set_run_speed_easy()"},
	{ "trigger": "setup_zombie_knockdown\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::setup_zombie_knockdown(${1:entity})"},
	{ "trigger": "clear_all_corpses\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::clear_all_corpses()"},
	{ "trigger": "get_current_actor_count\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::get_current_actor_count()"},
	{ "trigger": "get_current_corpse_count\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::get_current_corpse_count()"},
	{ "trigger": "zombie_gib_on_damage\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::zombie_gib_on_damage()"},
	{ "trigger": "add_zombie_gib_weapon_callback\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::add_zombie_gib_weapon_callback(${1:weapon_name}, ${2:gib_callback}, ${3:gib_head_callback})"},
	{ "trigger": "have_zombie_weapon_gib_callback\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::have_zombie_weapon_gib_callback(${1:weapon})"},
	{ "trigger": "get_zombie_weapon_gib_callback\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::get_zombie_weapon_gib_callback(${1:weapon}, ${2:damage_percent})"},
	{ "trigger": "have_zombie_weapon_gib_head_callback\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::have_zombie_weapon_gib_head_callback(${1:weapon})"},
	{ "trigger": "get_zombie_weapon_gib_head_callback\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::get_zombie_weapon_gib_head_callback(${1:weapon}, ${2:damage_location})"},
	{ "trigger": "zombie_should_gib\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::zombie_should_gib(${1:amount}, ${2:attacker}, ${3:type})"},
	{ "trigger": "head_should_gib\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::head_should_gib(${1:attacker}, ${2:type}, ${3:point})"},
	{ "trigger": "zombie_hat_gib\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::zombie_hat_gib(${1:attacker}, ${2:means_of_death})"},
	{ "trigger": "damage_over_time\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::damage_over_time(${1:dmg}, ${2:delay}, ${3:attacker}, ${4:means_of_death})"},
	{ "trigger": "derive_damage_refs\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::derive_damage_refs(${1:point})"},
	{ "trigger": "getAnimDirection\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::getAnimDirection(${1:damageyaw})"},
	{ "trigger": "anim_get_dvar_int\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::anim_get_dvar_int(${1:dvar}, ${2:def})"},
	{ "trigger": "anim_get_dvar\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::anim_get_dvar(${1:dvar}, ${2:def})"},
	{ "trigger": "makeZombieCrawler\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::makeZombieCrawler(${1:b_both_legs})"},
	{ "trigger": "zombie_head_gib\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::zombie_head_gib(${1:attacker}, ${2:means_of_death})"},
	{ "trigger": "gib_random_parts\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::gib_random_parts()"},
	{ "trigger": "register_ignore_player_handler\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::register_ignore_player_handler(${1:archetype}, ${2:ignore_player_func})"},
	{ "trigger": "run_ignore_player_handler\t#using scripts\\shared\\ai\\zombie_utility;", "contents": "zombie_utility::run_ignore_player_handler()"},
	{ "trigger": "show_hit_marker\t#using scripts\\shared\\ai\\zombie_utility; self = player", "contents": "zombie_utility::show_hit_marker()"},
	{ "trigger": "gadget_surge_is_inuse\t#using scripts\\shared\\abilities\\gadgets\\_gadget_surge;", "contents": "_gadget_surge::gadget_surge_is_inuse(${1:slot})"},
	{ "trigger": "gadget_surge_is_flickering\t#using scripts\\shared\\abilities\\gadgets\\_gadget_surge;", "contents": "_gadget_surge::gadget_surge_is_flickering(${1:slot})"},
	{ "trigger": "gadget_surge_on_flicker\t#using scripts\\shared\\abilities\\gadgets\\_gadget_surge;", "contents": "_gadget_surge::gadget_surge_on_flicker(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_surge_on_give\t#using scripts\\shared\\abilities\\gadgets\\_gadget_surge;", "contents": "_gadget_surge::gadget_surge_on_give(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_surge_on_take\t#using scripts\\shared\\abilities\\gadgets\\_gadget_surge;", "contents": "_gadget_surge::gadget_surge_on_take(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_surge_on_connect\t#using scripts\\shared\\abilities\\gadgets\\_gadget_surge;", "contents": "_gadget_surge::gadget_surge_on_connect()"},
	{ "trigger": "gadget_surge_on\t#using scripts\\shared\\abilities\\gadgets\\_gadget_surge;", "contents": "_gadget_surge::gadget_surge_on(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_surge_off\t#using scripts\\shared\\abilities\\gadgets\\_gadget_surge;", "contents": "_gadget_surge::gadget_surge_off(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_surge_is_primed\t#using scripts\\shared\\abilities\\gadgets\\_gadget_surge;", "contents": "_gadget_surge::gadget_surge_is_primed(${1:slot}, ${2:weapon})"},
	{ "trigger": "update_nav_triggers\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::update_nav_triggers()"},
	{ "trigger": "global_ai_array\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::global_ai_array()"},
	{ "trigger": "spawn_throttle_reset\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::spawn_throttle_reset()"},
	{ "trigger": "global_spawn_throttle\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::global_spawn_throttle(${1:n_count_per_network_frame})"},
	{ "trigger": "callback_Track_Dead_NPCs_By_Type\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::callback_Track_Dead_NPCs_By_Type()"},
	{ "trigger": "precache_player_weapon_drops\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::precache_player_weapon_drops(${1:weapon_names})"},
	{ "trigger": "process_deathflags\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::process_deathflags()"},
	{ "trigger": "spawn_guys_until_death_or_no_count\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::spawn_guys_until_death_or_no_count()"},
	{ "trigger": "flood_spawner_scripted\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::flood_spawner_scripted(${1:spawners})"},
	{ "trigger": "reincrement_count_if_deleted\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::reincrement_count_if_deleted(${1:spawner})"},
	{ "trigger": "kill_trigger\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::kill_trigger(${1:trigger})"},
	{ "trigger": "waittillDeathOrPainDeath\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::waittillDeathOrPainDeath()"},
	{ "trigger": "drop_gear\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::drop_gear()"},
	{ "trigger": "random_tire\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::random_tire(${1:start}, ${2:end})"},
	{ "trigger": "spawn_grenade_bag\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::spawn_grenade_bag(${1:origin}, ${2:angles}, ${3:team})"},
	{ "trigger": "spawn_prethink\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::spawn_prethink()"},
	{ "trigger": "update_nav_triggers_for_actor\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::update_nav_triggers_for_actor()"},
	{ "trigger": "spawn_think\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::spawn_think(${1:spawner})"},
	{ "trigger": "run_spawn_functions\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::run_spawn_functions()"},
	{ "trigger": "living_ai_prethink\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::living_ai_prethink()"},
	{ "trigger": "remove_spawner_values\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::remove_spawner_values()"},
	{ "trigger": "spawn_think_action\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::spawn_think_action(${1:spawner})"},
	{ "trigger": "set_goal_volume\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::set_goal_volume()"},
	{ "trigger": "get_target_ents\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::get_target_ents(${1:target})"},
	{ "trigger": "get_target_nodes\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::get_target_nodes(${1:target})"},
	{ "trigger": "get_target_structs\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::get_target_structs(${1:target})"},
	{ "trigger": "node_has_radius\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::node_has_radius(${1:node})"},
	{ "trigger": "go_to_origin\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::go_to_origin(${1:node}, ${2:optional_arrived_at_node_func})"},
	{ "trigger": "go_to_struct\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::go_to_struct(${1:node}, ${2:optional_arrived_at_node_func})"},
	{ "trigger": "go_to_node\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::go_to_node(${1:node}, ${2:goal_type}, ${3:optional_arrived_at_node_func})"},
	{ "trigger": "go_to_spawner_target\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::go_to_spawner_target(${1:target_names})"},
	{ "trigger": "release_spawner_target_node\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::release_spawner_target_node(${1:node})"},
	{ "trigger": "get_spawner_target_nodes\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::get_spawner_target_nodes(${1:group})"},
	{ "trigger": "get_least_used_from_array\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::get_least_used_from_array(${1:array})"},
	{ "trigger": "go_to_node_using_funcs\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::go_to_node_using_funcs(${1:node}, ${2:get_target_func}, ${3:set_goal_func_quits}, ${4:optional_arrived_at_node_func}, ${5:require_player_dist})"},
	{ "trigger": "go_to_node_wait_for_player\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::go_to_node_wait_for_player(${1:node}, ${2:get_target_func}, ${3:dist})"},
	{ "trigger": "go_to_node_set_goal_pos\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::go_to_node_set_goal_pos(${1:ent})"},
	{ "trigger": "go_to_node_set_goal_node\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::go_to_node_set_goal_node(${1:node})"},
	{ "trigger": "remove_crawled\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::remove_crawled(${1:ent})"},
	{ "trigger": "get_node_funcs_based_on_target\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::get_node_funcs_based_on_target(${1:node}, ${2:goal_type})"},
	{ "trigger": "update_target_array\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::update_target_array(${1:str_target})"},
	{ "trigger": "set_goalradius_based_on_settings\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::set_goalradius_based_on_settings(${1:node})"},
	{ "trigger": "get_goal\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::get_goal(${1:str_goal}, ${2:str_key = \"targetname\"})"},
	{ "trigger": "fallback_spawner_think\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::fallback_spawner_think(${1:num}, ${2:node_array}, ${3:ignoreWhileFallingBack})"},
	{ "trigger": "fallback_ai_think_death\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::fallback_ai_think_death(${1:ai}, ${2:num})"},
	{ "trigger": "fallback_ai_think\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::fallback_ai_think(${1:num}, ${2:node_array}, ${3:spawner}, ${4:ignoreWhileFallingBack})"},
	{ "trigger": "fallback_death\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::fallback_death(${1:ai}, ${2:num})"},
	{ "trigger": "fallback_goal\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::fallback_goal(${1:ignoreWhileFallingBack})"},
	{ "trigger": "fallback_interrupt\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::fallback_interrupt()"},
	{ "trigger": "fallback_ai\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::fallback_ai(${1:num}, ${2:node_array}, ${3:ignoreWhileFallingBack})"},
	{ "trigger": "fallback_overmind\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::fallback_overmind(${1:num}, ${2:group}, ${3:ignoreWhileFallingBack}, ${4:percent})"},
	{ "trigger": "fallback_overmind_internal\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::fallback_overmind_internal(${1:num}, ${2:group}, ${3:fallback_nodes}, ${4:ignoreWhileFallingBack}, ${5:percent})"},
	{ "trigger": "fallback_text\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::fallback_text(${1:fallbackers}, ${2:start}, ${3:end})"},
	{ "trigger": "fallback_wait\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::fallback_wait(${1:num}, ${2:group}, ${3:ignoreWhileFallingBack}, ${4:percent})"},
	{ "trigger": "fallback_think\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::fallback_think(${1:trigger})"},
	{ "trigger": "fallback_add_previous_group\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::fallback_add_previous_group(${1:num}, ${2:node_array})"},
	{ "trigger": "delete_me\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::delete_me()"},
	{ "trigger": "waitframe\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::waitframe()"},
	{ "trigger": "friendly_mg42_death_notify\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::friendly_mg42_death_notify(${1:guy}, ${2:mg42})"},
	{ "trigger": "friendly_mg42_wait_for_use\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::friendly_mg42_wait_for_use(${1:mg42})"},
	{ "trigger": "friendly_mg42_useable\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::friendly_mg42_useable(${1:mg42}, ${2:node})"},
	{ "trigger": "friendly_mg42_endtrigger\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::friendly_mg42_endtrigger(${1:mg42}, ${2:guy})"},
	{ "trigger": "noFour\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::noFour()"},
	{ "trigger": "friendly_mg42_think\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::friendly_mg42_think(${1:mg42}, ${2:node})"},
	{ "trigger": "friendly_mg42_cleanup\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::friendly_mg42_cleanup(${1:mg42})"},
	{ "trigger": "friendly_mg42_doneUsingTurret\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::friendly_mg42_doneUsingTurret()"},
	{ "trigger": "spawnWaypointFriendlies\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::spawnWaypointFriendlies()"},
	{ "trigger": "aigroup_spawner_death\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::aigroup_spawner_death(${1:tracker})"},
	{ "trigger": "aigroup_think\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::aigroup_think(${1:tracker})"},
	{ "trigger": "set_ai_group_cleared_flag\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::set_ai_group_cleared_flag(${1:tracker})"},
	{ "trigger": "flood_trigger_think\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::flood_trigger_think(${1:trigger})"},
	{ "trigger": "trigger_requires_player\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::trigger_requires_player(${1:trigger})"},
	{ "trigger": "flood_spawner_think\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::flood_spawner_think(${1:trigger})"},
	{ "trigger": "player_saw_kill\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::player_saw_kill(${1:guy}, ${2:attacker})"},
	{ "trigger": "show_bad_path\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::show_bad_path()"},
	{ "trigger": "watches_for_friendly_fire\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::watches_for_friendly_fire()"},
	{ "trigger": "spawn\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::spawn(${1:b_force = false}, ${2:str_targetname}, ${3:v_origin}, ${4:v_angles}, ${5:bIgnoreSpawningLimit})"},
	{ "trigger": "teleport_spawned\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::teleport_spawned(${1:v_origin}, ${2:v_angles}, ${3:b_reset_entity = true})"},
	{ "trigger": "check_player_requirements\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::check_player_requirements()"},
	{ "trigger": "spawn_failed\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::spawn_failed(${1:spawn})"},
	{ "trigger": "kill_spawnernum\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::kill_spawnernum(${1:number})"},
	{ "trigger": "disable_replace_on_death\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::disable_replace_on_death()"},
	{ "trigger": "replace_on_death\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::replace_on_death()"},
	{ "trigger": "set_ai_group_cleared_count\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::set_ai_group_cleared_count(${1:aigroup}, ${2:count})"},
	{ "trigger": "waittill_ai_group_cleared\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::waittill_ai_group_cleared(${1:aigroup})"},
	{ "trigger": "waittill_ai_group_count\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::waittill_ai_group_count(${1:aigroup}, ${2:count})"},
	{ "trigger": "waittill_ai_group_ai_count\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::waittill_ai_group_ai_count(${1:aigroup}, ${2:count})"},
	{ "trigger": "waittill_ai_group_spawner_count\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::waittill_ai_group_spawner_count(${1:aigroup}, ${2:count})"},
	{ "trigger": "waittill_ai_group_amount_killed\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::waittill_ai_group_amount_killed(${1:aigroup}, ${2:amount_killed})"},
	{ "trigger": "get_ai_group_count\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::get_ai_group_count(${1:aigroup})"},
	{ "trigger": "get_ai_group_sentient_count\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::get_ai_group_sentient_count(${1:aigroup})"},
	{ "trigger": "get_ai_group_spawner_count\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::get_ai_group_spawner_count(${1:aigroup})"},
	{ "trigger": "get_ai_group_ai\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::get_ai_group_ai(${1:aigroup})"},
	{ "trigger": "add_global_spawn_function\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::add_global_spawn_function(${1:team}, ${2:spawn_func}, ${3:param1}, ${4:param2}, ${5:param3}, ${6:param4}, ${7:param5})"},
	{ "trigger": "add_archetype_spawn_function\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::add_archetype_spawn_function(${1:archetype}, ${2:spawn_func}, ${3:param1}, ${4:param2}, ${5:param3}, ${6:param4}, ${7:param5})"},
	{ "trigger": "remove_global_spawn_function\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::remove_global_spawn_function(${1:team}, ${2:func})"},
	{ "trigger": "add_spawn_function\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::add_spawn_function(${1:spawn_func}, ${2:param1}, ${3:param2}, ${4:param3}, ${5:param4}, ${6:param5})"},
	{ "trigger": "remove_spawn_function\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::remove_spawn_function(${1:func})"},
	{ "trigger": "add_spawn_function_group\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::add_spawn_function_group(${1:str_value}, ${2:str_key = \"targetname\"}, ${3:func_spawn}, ${4:param_1}, ${5:param_2}, ${6:param_3}, ${7:param_4}, ${8:param_5})"},
	{ "trigger": "add_spawn_function_ai_group\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::add_spawn_function_ai_group(${1:str_aigroup}, ${2:func_spawn}, ${3:param_1}, ${4:param_2}, ${5:param_3}, ${6:param_4}, ${7:param_5})"},
	{ "trigger": "remove_spawn_function_ai_group\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::remove_spawn_function_ai_group(${1:str_aigroup}, ${2:func_spawn}, ${3:param_1}, ${4:param_2}, ${5:param_3}, ${6:param_4}, ${7:param_5})"},
	{ "trigger": "simple_flood_spawn\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::simple_flood_spawn(${1:name}, ${2:spawn_func}, ${3:spawn_func_2})"},
	{ "trigger": "simple_spawn\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::simple_spawn(${1:name_or_spawners}, ${2:spawn_func}, ${3:param1}, ${4:param2}, ${5:param3}, ${6:param4}, ${7:param5}, ${8:bForce})"},
	{ "trigger": "simple_spawn_single\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::simple_spawn_single(${1:name_or_spawner}, ${2:spawn_func}, ${3:param1}, ${4:param2}, ${5:param3}, ${6:param4}, ${7:param5}, ${8:bforce})"},
	{ "trigger": "set_targets\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::set_targets(${1:spawner_targets})"},
	{ "trigger": "set_female_percent\t#using scripts\\shared\\spawner_shared;", "contents": "spawner::set_female_percent(${1:percent})"},
	{ "trigger": "updateServerSettings\t#using scripts\\zm\\gametypes\\_serversettings;", "contents": "serversettings::updateServerSettings()"},
	{ "trigger": "constrainGameType\t#using scripts\\zm\\gametypes\\_serversettings;", "contents": "serversettings::constrainGameType(${1:gametype})"},
	{ "trigger": "constrainMapSize\t#using scripts\\zm\\gametypes\\_serversettings;", "contents": "serversettings::constrainMapSize(${1:mapsize})"},
	{ "trigger": "gadget_es_strike_is_inuse\t#using scripts\\shared\\abilities\\gadgets\\_gadget_es_strike;", "contents": "_gadget_es_strike::gadget_es_strike_is_inuse(${1:slot})"},
	{ "trigger": "gadget_es_strike_is_flickering\t#using scripts\\shared\\abilities\\gadgets\\_gadget_es_strike;", "contents": "_gadget_es_strike::gadget_es_strike_is_flickering(${1:slot})"},
	{ "trigger": "gadget_es_strike_on_flicker\t#using scripts\\shared\\abilities\\gadgets\\_gadget_es_strike;", "contents": "_gadget_es_strike::gadget_es_strike_on_flicker(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_es_strike_on_give\t#using scripts\\shared\\abilities\\gadgets\\_gadget_es_strike;", "contents": "_gadget_es_strike::gadget_es_strike_on_give(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_es_strike_on_take\t#using scripts\\shared\\abilities\\gadgets\\_gadget_es_strike;", "contents": "_gadget_es_strike::gadget_es_strike_on_take(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_es_strike_on_connect\t#using scripts\\shared\\abilities\\gadgets\\_gadget_es_strike;", "contents": "_gadget_es_strike::gadget_es_strike_on_connect()"},
	{ "trigger": "gadget_es_strike_on\t#using scripts\\shared\\abilities\\gadgets\\_gadget_es_strike;", "contents": "_gadget_es_strike::gadget_es_strike_on(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_es_strike_off\t#using scripts\\shared\\abilities\\gadgets\\_gadget_es_strike;", "contents": "_gadget_es_strike::gadget_es_strike_off(${1:slot}, ${2:weapon})"},
	{ "trigger": "get_weapon\t#using scripts\\shared\\turret_shared;", "contents": "turret::get_weapon(${1:n_index = 0})"},
	{ "trigger": "get_parent\t#using scripts\\shared\\turret_shared;", "contents": "turret::get_parent(${1:n_index})"},
	{ "trigger": "laser_death_watcher\t#using scripts\\shared\\turret_shared;", "contents": "turret::laser_death_watcher()"},
	{ "trigger": "enable_laser\t#using scripts\\shared\\turret_shared;", "contents": "turret::enable_laser(${1:b_enable}, ${2:n_index})"},
	{ "trigger": "watch_for_flash\t#using scripts\\shared\\turret_shared;", "contents": "turret::watch_for_flash()"},
	{ "trigger": "watch_for_flash_and_stun\t#using scripts\\shared\\turret_shared;", "contents": "turret::watch_for_flash_and_stun(${1:n_index})"},
	{ "trigger": "emp_watcher\t#using scripts\\shared\\turret_shared;", "contents": "turret::emp_watcher(${1:n_index})"},
	{ "trigger": "enable_emp\t#using scripts\\shared\\turret_shared;", "contents": "turret::enable_emp(${1:b_enable}, ${2:n_index})"},
	{ "trigger": "set_team\t#using scripts\\shared\\turret_shared;", "contents": "turret::set_team(${1:str_team}, ${2:n_index})"},
	{ "trigger": "get_team\t#using scripts\\shared\\turret_shared;", "contents": "turret::get_team(${1:n_index})"},
	{ "trigger": "is_turret_enabled\t#using scripts\\shared\\turret_shared;", "contents": "turret::is_turret_enabled(${1:n_index})"},
	{ "trigger": "does_need_user\t#using scripts\\shared\\turret_shared;", "contents": "turret::does_need_user(${1:n_index})"},
	{ "trigger": "does_have_user\t#using scripts\\shared\\turret_shared;", "contents": "turret::does_have_user(${1:n_index})"},
	{ "trigger": "get_user\t#using scripts\\shared\\turret_shared;", "contents": "turret::get_user(${1:n_index})"},
	{ "trigger": "_set_turret_needs_user\t#using scripts\\shared\\turret_shared;", "contents": "turret::_set_turret_needs_user(${1:n_index}, ${2:b_needs_user})"},
	{ "trigger": "set_target_ent_array\t#using scripts\\shared\\turret_shared;", "contents": "turret::set_target_ent_array(${1:a_ents}, ${2:n_index})"},
	{ "trigger": "add_priority_target\t#using scripts\\shared\\turret_shared;", "contents": "turret::add_priority_target(${1:ent_or_ent_array}, ${2:n_index})"},
	{ "trigger": "clear_target_ent_array\t#using scripts\\shared\\turret_shared;", "contents": "turret::clear_target_ent_array(${1:n_index})"},
	{ "trigger": "set_ignore_ent_array\t#using scripts\\shared\\turret_shared;", "contents": "turret::set_ignore_ent_array(${1:a_ents}, ${2:n_index})"},
	{ "trigger": "clear_ignore_ent_array\t#using scripts\\shared\\turret_shared;", "contents": "turret::clear_ignore_ent_array(${1:n_index})"},
	{ "trigger": "_wait_for_current_user_to_finish\t#using scripts\\shared\\turret_shared;", "contents": "turret::_wait_for_current_user_to_finish(${1:n_index})"},
	{ "trigger": "is_current_user\t#using scripts\\shared\\turret_shared;", "contents": "turret::is_current_user(${1:ai_user}, ${2:n_index})"},
	{ "trigger": "set_burst_parameters\t#using scripts\\shared\\turret_shared;", "contents": "turret::set_burst_parameters(${1:n_fire_min}, ${2:n_fire_max}, ${3:n_wait_min}, ${4:n_wait_max}, ${5:n_index})"},
	{ "trigger": "set_torso_targetting\t#using scripts\\shared\\turret_shared;", "contents": "turret::set_torso_targetting(${1:n_index}, ${2:n_torso_targetting_offset = ( -12 )})"},
	{ "trigger": "set_target_leading\t#using scripts\\shared\\turret_shared;", "contents": "turret::set_target_leading(${1:n_index}, ${2:n_target_leading_factor = 0.1})"},
	{ "trigger": "set_on_target_angle\t#using scripts\\shared\\turret_shared;", "contents": "turret::set_on_target_angle(${1:n_angle}, ${2:n_index})"},
	{ "trigger": "set_target\t#using scripts\\shared\\turret_shared;", "contents": "turret::set_target(${1:e_target}, ${2:v_offset}, ${3:n_index})"},
	{ "trigger": "_get_default_target_offset\t#using scripts\\shared\\turret_shared;", "contents": "turret::_get_default_target_offset(${1:e_target}, ${2:n_index})"},
	{ "trigger": "get_target\t#using scripts\\shared\\turret_shared;", "contents": "turret::get_target(${1:n_index})"},
	{ "trigger": "is_target\t#using scripts\\shared\\turret_shared;", "contents": "turret::is_target(${1:e_target}, ${2:n_index})"},
	{ "trigger": "clear_target\t#using scripts\\shared\\turret_shared;", "contents": "turret::clear_target(${1:n_index})"},
	{ "trigger": "set_target_flags\t#using scripts\\shared\\turret_shared;", "contents": "turret::set_target_flags(${1:n_flags}, ${2:n_index})"},
	{ "trigger": "_has_target_flags\t#using scripts\\shared\\turret_shared;", "contents": "turret::_has_target_flags(${1:n_flags}, ${2:n_index})"},
	{ "trigger": "set_max_target_distance\t#using scripts\\shared\\turret_shared;", "contents": "turret::set_max_target_distance(${1:n_distance}, ${2:n_index})"},
	{ "trigger": "set_min_target_distance\t#using scripts\\shared\\turret_shared;", "contents": "turret::set_min_target_distance(${1:n_distance}, ${2:n_index})"},
	{ "trigger": "set_min_target_distance_squared\t#using scripts\\shared\\turret_shared;", "contents": "turret::set_min_target_distance_squared(${1:n_distance_squared}, ${2:n_index})"},
	{ "trigger": "fire\t#using scripts\\shared\\turret_shared;", "contents": "turret::fire(${1:n_index})"},
	{ "trigger": "stop\t#using scripts\\shared\\turret_shared;", "contents": "turret::stop(${1:n_index}, ${2:b_clear_target = false})"},
	{ "trigger": "fire_for_time\t#using scripts\\shared\\turret_shared;", "contents": "turret::fire_for_time(${1:n_time}, ${2:n_index = 0})"},
	{ "trigger": "shoot_at_target\t#using scripts\\shared\\turret_shared;", "contents": "turret::shoot_at_target(${1:e_target}, ${2:n_time}, ${3:v_offset}, ${4:n_index}, ${5:b_just_once})"},
	{ "trigger": "_shoot_turret_at_target\t#using scripts\\shared\\turret_shared;", "contents": "turret::_shoot_turret_at_target(${1:e_target}, ${2:n_time}, ${3:v_offset}, ${4:n_index}, ${5:b_just_once})"},
	{ "trigger": "_waittill_turret_on_target\t#using scripts\\shared\\turret_shared;", "contents": "turret::_waittill_turret_on_target(${1:e_target}, ${2:n_index})"},
	{ "trigger": "shoot_at_target_once\t#using scripts\\shared\\turret_shared;", "contents": "turret::shoot_at_target_once(${1:e_target}, ${2:v_offset}, ${3:n_index})"},
	{ "trigger": "enable\t#using scripts\\shared\\turret_shared;", "contents": "turret::enable(${1:n_index}, ${2:b_user_required}, ${3:v_offset})"},
	{ "trigger": "enable_auto_use\t#using scripts\\shared\\turret_shared;", "contents": "turret::enable_auto_use(${1:b_enable = true})"},
	{ "trigger": "disable_ai_getoff\t#using scripts\\shared\\turret_shared;", "contents": "turret::disable_ai_getoff(${1:n_index}, ${2:b_disable = true})"},
	{ "trigger": "disable\t#using scripts\\shared\\turret_shared;", "contents": "turret::disable(${1:n_index})"},
	{ "trigger": "pause\t#using scripts\\shared\\turret_shared;", "contents": "turret::pause(${1:time}, ${2:n_index})"},
	{ "trigger": "unpause\t#using scripts\\shared\\turret_shared;", "contents": "turret::unpause(${1:n_index})"},
	{ "trigger": "_turret_think\t#using scripts\\shared\\turret_shared;", "contents": "turret::_turret_think(${1:n_index}, ${2:v_offset})"},
	{ "trigger": "_has_nearby_player_enemy\t#using scripts\\shared\\turret_shared;", "contents": "turret::_has_nearby_player_enemy(${1:index}, ${2:turret})"},
	{ "trigger": "_did_turret_lose_target\t#using scripts\\shared\\turret_shared;", "contents": "turret::_did_turret_lose_target(${1:n_time_now})"},
	{ "trigger": "_turret_user_think\t#using scripts\\shared\\turret_shared;", "contents": "turret::_turret_user_think(${1:n_index})"},
	{ "trigger": "_listen_for_damage_on_actor\t#using scripts\\shared\\turret_shared;", "contents": "turret::_listen_for_damage_on_actor(${1:ai_user}, ${2:n_index})"},
	{ "trigger": "_waittill_user_change\t#using scripts\\shared\\turret_shared;", "contents": "turret::_waittill_user_change(${1:n_index})"},
	{ "trigger": "_check_for_paused\t#using scripts\\shared\\turret_shared;", "contents": "turret::_check_for_paused(${1:n_index})"},
	{ "trigger": "_drop_turret\t#using scripts\\shared\\turret_shared;", "contents": "turret::_drop_turret(${1:n_index}, ${2:bExitIfAutomatedOnly})"},
	{ "trigger": "_turret_new_user_think\t#using scripts\\shared\\turret_shared;", "contents": "turret::_turret_new_user_think(${1:n_index})"},
	{ "trigger": "does_have_target\t#using scripts\\shared\\turret_shared;", "contents": "turret::does_have_target(${1:n_index})"},
	{ "trigger": "_user_check\t#using scripts\\shared\\turret_shared;", "contents": "turret::_user_check(${1:n_index})"},
	{ "trigger": "_get_turret_data\t#using scripts\\shared\\turret_shared;", "contents": "turret::_get_turret_data(${1:n_index})"},
	{ "trigger": "has_turret\t#using scripts\\shared\\turret_shared;", "contents": "turret::has_turret(${1:n_index})"},
	{ "trigger": "_update_turret_arcs\t#using scripts\\shared\\turret_shared;", "contents": "turret::_update_turret_arcs(${1:n_index})"},
	{ "trigger": "set_best_target_func_from_weapon_type\t#using scripts\\shared\\turret_shared;", "contents": "turret::set_best_target_func_from_weapon_type(${1:n_index})"},
	{ "trigger": "set_best_target_func\t#using scripts\\shared\\turret_shared;", "contents": "turret::set_best_target_func(${1:func_get_best_target}, ${2:n_index})"},
	{ "trigger": "_burst_fire\t#using scripts\\shared\\turret_shared;", "contents": "turret::_burst_fire(${1:n_max_time}, ${2:n_index})"},
	{ "trigger": "_get_burst_fire_time\t#using scripts\\shared\\turret_shared;", "contents": "turret::_get_burst_fire_time(${1:n_index})"},
	{ "trigger": "_get_burst_wait_time\t#using scripts\\shared\\turret_shared;", "contents": "turret::_get_burst_wait_time(${1:n_index})"},
	{ "trigger": "_index\t#using scripts\\shared\\turret_shared;", "contents": "turret::_index(${1:n_index})"},
	{ "trigger": "_get_potential_targets\t#using scripts\\shared\\turret_shared;", "contents": "turret::_get_potential_targets(${1:n_index})"},
	{ "trigger": "_is_target_within_range\t#using scripts\\shared\\turret_shared;", "contents": "turret::_is_target_within_range(${1:e_target}, ${2:s_turret})"},
	{ "trigger": "_get_any_priority_targets\t#using scripts\\shared\\turret_shared;", "contents": "turret::_get_any_priority_targets(${1:n_index})"},
	{ "trigger": "_get_best_target_from_potential\t#using scripts\\shared\\turret_shared;", "contents": "turret::_get_best_target_from_potential(${1:a_potential_targets}, ${2:n_index})"},
	{ "trigger": "_get_best_target_bullet\t#using scripts\\shared\\turret_shared;", "contents": "turret::_get_best_target_bullet(${1:a_potential_targets}, ${2:n_index})"},
	{ "trigger": "_get_best_target_gas\t#using scripts\\shared\\turret_shared;", "contents": "turret::_get_best_target_gas(${1:a_potential_targets}, ${2:n_index})"},
	{ "trigger": "_get_best_target_grenade\t#using scripts\\shared\\turret_shared;", "contents": "turret::_get_best_target_grenade(${1:a_potential_targets}, ${2:n_index})"},
	{ "trigger": "_get_best_target_projectile\t#using scripts\\shared\\turret_shared;", "contents": "turret::_get_best_target_projectile(${1:a_potential_targets}, ${2:n_index})"},
	{ "trigger": "can_hit_target\t#using scripts\\shared\\turret_shared;", "contents": "turret::can_hit_target(${1:e_target}, ${2:n_index})"},
	{ "trigger": "is_target_in_view\t#using scripts\\shared\\turret_shared;", "contents": "turret::is_target_in_view(${1:v_target}, ${2:n_index})"},
	{ "trigger": "trace_test\t#using scripts\\shared\\turret_shared;", "contents": "turret::trace_test(${1:e_target}, ${2:v_offset = (0}, ${3:0}, ${4:0)}, ${5:n_index})"},
	{ "trigger": "set_ignore_line_of_sight\t#using scripts\\shared\\turret_shared;", "contents": "turret::set_ignore_line_of_sight(${1:b_ignore}, ${2:n_index})"},
	{ "trigger": "set_occupy_no_target_time\t#using scripts\\shared\\turret_shared;", "contents": "turret::set_occupy_no_target_time(${1:time}, ${2:n_index})"},
	{ "trigger": "toggle_lensflare\t#using scripts\\shared\\turret_shared;", "contents": "turret::toggle_lensflare(${1:bool})"},
	{ "trigger": "track_lens_flare\t#using scripts\\shared\\turret_shared;", "contents": "turret::track_lens_flare()"},
	{ "trigger": "_get_gunner_tag_for_turret_index\t#using scripts\\shared\\turret_shared;", "contents": "turret::_get_gunner_tag_for_turret_index(${1:n_index})"},
	{ "trigger": "_get_turret_index_for_tag\t#using scripts\\shared\\turret_shared;", "contents": "turret::_get_turret_index_for_tag(${1:str_tag})"},
	{ "trigger": "setMusicState\t#using scripts\\shared\\music_shared;", "contents": "music::setMusicState(${1:state}, ${2:player})"},
	{ "trigger": "on_player_spawned\t#using scripts\\shared\\music_shared; self == player", "contents": "music::on_player_spawned()"},
	{ "trigger": "on_vehicle_spawned\t#using scripts\\shared\\vehicleriders_shared;", "contents": "vehicle::on_vehicle_spawned()"},
	{ "trigger": "on_ai_spawned\t#using scripts\\shared\\vehicleriders_shared;", "contents": "vehicle::on_ai_spawned()"},
	{ "trigger": "claim_position\t#using scripts\\shared\\vehicleriders_shared;", "contents": "vehicle::claim_position(${1:vh}, ${2:str_pos})"},
	{ "trigger": "unclaim_position\t#using scripts\\shared\\vehicleriders_shared;", "contents": "vehicle::unclaim_position(${1:vh}, ${2:str_pos})"},
	{ "trigger": "find_next_open_position\t#using scripts\\shared\\vehicleriders_shared;", "contents": "vehicle::find_next_open_position(${1:ai})"},
	{ "trigger": "spawn_riders\t#using scripts\\shared\\vehicleriders_shared;", "contents": "vehicle::spawn_riders()"},
	{ "trigger": "get_bundle_for_ai\t#using scripts\\shared\\vehicleriders_shared;", "contents": "vehicle::get_bundle_for_ai(${1:ai})"},
	{ "trigger": "get_rider_info\t#using scripts\\shared\\vehicleriders_shared;", "contents": "vehicle::get_rider_info(${1:vh}, ${2:str_pos = \"driver\"})"},
	{ "trigger": "get_in\t#using scripts\\shared\\vehicleriders_shared;", "contents": "vehicle::get_in(${1:vh}, ${2:str_pos}, ${3:b_teleport = false})"},
	{ "trigger": "handle_rider_death\t#using scripts\\shared\\vehicleriders_shared;", "contents": "vehicle::handle_rider_death()"},
	{ "trigger": "delete_rider_asap\t#using scripts\\shared\\vehicleriders_shared;", "contents": "vehicle::delete_rider_asap(${1:entity})"},
	{ "trigger": "kill_rider\t#using scripts\\shared\\vehicleriders_shared;", "contents": "vehicle::kill_rider(${1:entity})"},
	{ "trigger": "on_vehicle_killed\t#using scripts\\shared\\vehicleriders_shared;", "contents": "vehicle::on_vehicle_killed(${1:params})"},
	{ "trigger": "can_get_in\t#using scripts\\shared\\vehicleriders_shared;", "contents": "vehicle::can_get_in(${1:vh}, ${2:str_pos})"},
	{ "trigger": "get_out\t#using scripts\\shared\\vehicleriders_shared;", "contents": "vehicle::get_out(${1:str_mode})"},
	{ "trigger": "set_goal\t#using scripts\\shared\\vehicleriders_shared;", "contents": "vehicle::set_goal()"},
	{ "trigger": "unload\t#using scripts\\shared\\vehicleriders_shared;", "contents": "vehicle::unload(${1:str_group = \"all\"}, ${2:str_mode}, ${3:remove_rider_before_unloading}, ${4:remove_riders_wait_time})"},
	{ "trigger": "remove_riders_after_wait\t#using scripts\\shared\\vehicleriders_shared;", "contents": "vehicle::remove_riders_after_wait(${1:wait_time}, ${2:a_riders_to_remove})"},
	{ "trigger": "ragdoll_dead_exit_rider\t#using scripts\\shared\\vehicleriders_shared;", "contents": "vehicle::ragdoll_dead_exit_rider()"},
	{ "trigger": "exit_ground\t#using scripts\\shared\\vehicleriders_shared;", "contents": "vehicle::exit_ground()"},
	{ "trigger": "exit_low\t#using scripts\\shared\\vehicleriders_shared;", "contents": "vehicle::exit_low()"},
	{ "trigger": "exit_variable\t#using scripts\\shared\\vehicleriders_shared;", "contents": "vehicle::exit_variable()"},
	{ "trigger": "exit_high_loop_anim\t#using scripts\\shared\\vehicleriders_shared;", "contents": "vehicle::exit_high_loop_anim(${1:e_parent})"},
	{ "trigger": "get_height\t#using scripts\\shared\\vehicleriders_shared;", "contents": "vehicle::get_height(${1:e_ignore})"},
	{ "trigger": "get_bundle\t#using scripts\\shared\\vehicleriders_shared;", "contents": "vehicle::get_bundle()"},
	{ "trigger": "get_robot_bundle\t#using scripts\\shared\\vehicleriders_shared;", "contents": "vehicle::get_robot_bundle()"},
	{ "trigger": "get_rider\t#using scripts\\shared\\vehicleriders_shared; self = vehicle", "contents": "vehicle::get_rider(${1:str_pos})"},
	{ "trigger": "setup_script_gatetrigger\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::setup_script_gatetrigger(${1:trigger})"},
	{ "trigger": "trigger_process\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::trigger_process(${1:trigger})"},
	{ "trigger": "path_detour_get_detourpath\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::path_detour_get_detourpath(${1:detournode})"},
	{ "trigger": "path_detour_script_origin\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::path_detour_script_origin(${1:detournode})"},
	{ "trigger": "crash_detour_check\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::crash_detour_check(${1:detourpath})"},
	{ "trigger": "crash_derailed_check\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::crash_derailed_check(${1:detourpath})"},
	{ "trigger": "path_detour\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::path_detour(${1:node})"},
	{ "trigger": "levelstuff\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::levelstuff(${1:vehicle/*}, ${2:trigger*/})"},
	{ "trigger": "_spawn_array\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::_spawn_array(${1:spawners})"},
	{ "trigger": "_remove_non_riders_from_array\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::_remove_non_riders_from_array(${1:ai})"},
	{ "trigger": "ai_should_be_added\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::ai_should_be_added(${1:ai})"},
	{ "trigger": "sort_by_startingpos\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::sort_by_startingpos(${1:guysarray})"},
	{ "trigger": "rider_walk_setup\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::rider_walk_setup(${1:vehicle})"},
	{ "trigger": "setup_groundnode_detour\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::setup_groundnode_detour(${1:node})"},
	{ "trigger": "add_proccess_trigger\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::add_proccess_trigger(${1:trigger})"},
	{ "trigger": "islastnode\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::islastnode(${1:node})"},
	{ "trigger": "paths\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::paths(${1:node})"},
	{ "trigger": "pause_path\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::pause_path()"},
	{ "trigger": "resume_path\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::resume_path()"},
	{ "trigger": "get_on_path\t#using scripts\\shared\\vehicle_shared; self == vehicle", "contents": "vehicle::get_on_path(${1:path_start}, ${2:str_key = \"targetname\"})"},
	{ "trigger": "get_off_path\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::get_off_path()"},
	{ "trigger": "create_from_spawngroup_and_go_path\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::create_from_spawngroup_and_go_path(${1:spawnGroup})"},
	{ "trigger": "get_on_and_go_path\t#using scripts\\shared\\vehicle_shared; self == vehicle", "contents": "vehicle::get_on_and_go_path(${1:path_start})"},
	{ "trigger": "go_path\t#using scripts\\shared\\vehicle_shared; self == vehicle", "contents": "vehicle::go_path()"},
	{ "trigger": "path_gate_open\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::path_gate_open(${1:node})"},
	{ "trigger": "path_gate_wait_till_open\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::path_gate_wait_till_open(${1:pathspot})"},
	{ "trigger": "_spawn_group\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::_spawn_group(${1:spawngroup})"},
	{ "trigger": "_scripted_spawn\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::_scripted_spawn(${1:group})"},
	{ "trigger": "_scripted_spawn_go\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::_scripted_spawn_go(${1:group})"},
	{ "trigger": "set_variables\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::set_variables(${1:vehicle})"},
	{ "trigger": "_vehicle_spawn\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::_vehicle_spawn(${1:vspawner}, ${2:from})"},
	{ "trigger": "detach_getoutrigs\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::detach_getoutrigs()"},
	{ "trigger": "enable_turrets\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::enable_turrets(${1:veh})"},
	{ "trigger": "enable_auto_disconnect_path\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::enable_auto_disconnect_path()"},
	{ "trigger": "_disconnect_paths_when_stopped\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::_disconnect_paths_when_stopped()"},
	{ "trigger": "set_speed\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::set_speed(${1:speed}, ${2:rate}, ${3:msg})"},
	{ "trigger": "script_resume_speed\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::script_resume_speed(${1:msg}, ${2:rate})"},
	{ "trigger": "print_resume_speed\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::print_resume_speed(${1:timer})"},
	{ "trigger": "god_on\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::god_on()"},
	{ "trigger": "god_off\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::god_off()"},
	{ "trigger": "get_normal_anim_time\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::get_normal_anim_time(${1:animation})"},
	{ "trigger": "setup_dynamic_detour\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::setup_dynamic_detour(${1:pathnode}, ${2:get_func})"},
	{ "trigger": "setup_origins\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::setup_origins()"},
	{ "trigger": "array_2d_add\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::array_2d_add(${1:array}, ${2:firstelem}, ${3:newelem})"},
	{ "trigger": "is_node_script_origin\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::is_node_script_origin(${1:pathnode})"},
	{ "trigger": "node_trigger_process\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::node_trigger_process()"},
	{ "trigger": "setup_triggers\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::setup_triggers()"},
	{ "trigger": "setup_nodes\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::setup_nodes()"},
	{ "trigger": "is_node_script_struct\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::is_node_script_struct(${1:node})"},
	{ "trigger": "setup_spawners\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::setup_spawners(${1:a_veh_spawners})"},
	{ "trigger": "_vehicle_life\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::_vehicle_life()"},
	{ "trigger": "_vehicle_load_assets\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::_vehicle_load_assets()"},
	{ "trigger": "is_cheap\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::is_cheap()"},
	{ "trigger": "has_helicopter_dust_kickup\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::has_helicopter_dust_kickup()"},
	{ "trigger": "play_looped_fx_on_tag\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::play_looped_fx_on_tag(${1:effect}, ${2:durration}, ${3:tag})"},
	{ "trigger": "_play_looped_fx_on_tag_origin_update\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::_play_looped_fx_on_tag_origin_update(${1:tag}, ${2:effectorigin})"},
	{ "trigger": "setup_dvars\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::setup_dvars()"},
	{ "trigger": "setup_level_vars\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::setup_level_vars()"},
	{ "trigger": "attacker_is_on_my_team\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::attacker_is_on_my_team(${1:attacker})"},
	{ "trigger": "attacker_troop_is_on_my_team\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::attacker_troop_is_on_my_team(${1:attacker})"},
	{ "trigger": "bullet_shielded\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::bullet_shielded(${1:type})"},
	{ "trigger": "friendly_fire_shield\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::friendly_fire_shield()"},
	{ "trigger": "friendly_fire_shield_callback\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::friendly_fire_shield_callback(${1:attacker}, ${2:amount}, ${3:type})"},
	{ "trigger": "_vehicle_bad_place\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::_vehicle_bad_place()"},
	{ "trigger": "get_vehiclenode_any_dynamic\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::get_vehiclenode_any_dynamic(${1:target})"},
	{ "trigger": "resume_path_vehicle\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::resume_path_vehicle()"},
	{ "trigger": "land\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::land()"},
	{ "trigger": "set_goal_pos\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::set_goal_pos(${1:origin}, ${2:bStop})"},
	{ "trigger": "liftoff\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::liftoff(${1:height})"},
	{ "trigger": "wait_till_stable\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::wait_till_stable()"},
	{ "trigger": "unload_node\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::unload_node(${1:node})"},
	{ "trigger": "is_unload_node\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::is_unload_node()"},
	{ "trigger": "unload_node_helicopter\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::unload_node_helicopter(${1:node})"},
	{ "trigger": "detach_path\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::detach_path()"},
	{ "trigger": "setup_targetname_spawners\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::setup_targetname_spawners()"},
	{ "trigger": "simple_spawn\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::simple_spawn(${1:name}, ${2:b_supress_assert=false})"},
	{ "trigger": "simple_spawn_single\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::simple_spawn_single(${1:name}, ${2:b_supress_assert=false})"},
	{ "trigger": "simple_spawn_single_and_drive\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::simple_spawn_single_and_drive(${1:name})"},
	{ "trigger": "simple_spawn_and_drive\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::simple_spawn_and_drive(${1:name})"},
	{ "trigger": "spawn\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::spawn(${1:modelname}, ${2:targetname}, ${3:vehicletype}, ${4:origin}, ${5:angles}, ${6:destructibledef})"},
	{ "trigger": "aircraft_dust_kickup\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::aircraft_dust_kickup(${1:model})"},
	{ "trigger": "impact_fx\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::impact_fx(${1:fxname}, ${2:surfaceTypes})"},
	{ "trigger": "lights_on\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::lights_on(${1:team})"},
	{ "trigger": "lights_off\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::lights_off()"},
	{ "trigger": "toggle_lights_group\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::toggle_lights_group(${1:groupID}, ${2:on})"},
	{ "trigger": "toggle_ambient_anim_group\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::toggle_ambient_anim_group(${1:groupID}, ${2:on})"},
	{ "trigger": "do_death_fx\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::do_death_fx()"},
	{ "trigger": "toggle_emp_fx\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::toggle_emp_fx(${1:on})"},
	{ "trigger": "toggle_burn_fx\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::toggle_burn_fx(${1:on})"},
	{ "trigger": "do_death_dynents\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::do_death_dynents(${1:special_status = 1})"},
	{ "trigger": "do_gib_dynents\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::do_gib_dynents()"},
	{ "trigger": "set_alert_fx_level\t#using scripts\\shared\\vehicle_shared; 0 is off, 1 unaware, 2 alert, 3 combat", "contents": "vehicle::set_alert_fx_level(${1:alert_level})"},
	{ "trigger": "should_update_damage_fx_level\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::should_update_damage_fx_level(${1:currentHealth}, ${2:damage}, ${3:maxHealth})"},
	{ "trigger": "update_damage_fx_level\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::update_damage_fx_level(${1:currentHealth}, ${2:damage}, ${3:maxHealth})"},
	{ "trigger": "set_damage_fx_level\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::set_damage_fx_level(${1:damage_level})"},
	{ "trigger": "build_drive\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::build_drive(${1:forward}, ${2:reverse}, ${3:normalspeed}, ${4:rate})"},
	{ "trigger": "get_from_spawnstruct\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::get_from_spawnstruct(${1:target})"},
	{ "trigger": "get_from_entity\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::get_from_entity(${1:target})"},
	{ "trigger": "get_from_spawnstruct_target\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::get_from_spawnstruct_target(${1:target})"},
	{ "trigger": "get_from_entity_target\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::get_from_entity_target(${1:target})"},
	{ "trigger": "is_destructible\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::is_destructible()"},
	{ "trigger": "attack_group_think\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::attack_group_think()"},
	{ "trigger": "get_nearest_target\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::get_nearest_target(${1:valid_targets})"},
	{ "trigger": "get_dummy\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::get_dummy()"},
	{ "trigger": "vehicle_get_occupant_team\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::vehicle_get_occupant_team()"},
	{ "trigger": "toggle_exhaust_fx\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::toggle_exhaust_fx(${1:on})"},
	{ "trigger": "toggle_tread_fx\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::toggle_tread_fx(${1:on})"},
	{ "trigger": "toggle_sounds\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::toggle_sounds(${1:on})"},
	{ "trigger": "is_corpse\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::is_corpse(${1:veh})"},
	{ "trigger": "is_on\t#using scripts\\shared\\vehicle_shared; self == player", "contents": "vehicle::is_on(${1:vehicle})"},
	{ "trigger": "add_spawn_function\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::add_spawn_function(${1:veh_targetname}, ${2:spawn_func}, ${3:param1}, ${4:param2}, ${5:param3}, ${6:param4})"},
	{ "trigger": "add_spawn_function_by_type\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::add_spawn_function_by_type(${1:veh_type}, ${2:spawn_func}, ${3:param1}, ${4:param2}, ${5:param3}, ${6:param4})"},
	{ "trigger": "add_hijack_function\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::add_hijack_function(${1:veh_targetname}, ${2:spawn_func}, ${3:param1}, ${4:param2}, ${5:param3}, ${6:param4})"},
	{ "trigger": "disconnect_paths\t#using scripts\\shared\\vehicle_shared; self == vehicle", "contents": "vehicle::disconnect_paths(${1:detail_level = 2}, ${2:move_allowed = true})"},
	{ "trigger": "connect_paths\t#using scripts\\shared\\vehicle_shared; self == vehicle", "contents": "vehicle::connect_paths()"},
	{ "trigger": "add_to_target_group\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::add_to_target_group(${1:target_ent})"},
	{ "trigger": "remove_from_target_group\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::remove_from_target_group(${1:target_ent})"},
	{ "trigger": "monitor_missiles_locked_on_to_me\t#using scripts\\shared\\vehicle_shared; self == monitored_entity which holds the target group", "contents": "vehicle::monitor_missiles_locked_on_to_me(${1:player}, ${2:wait_time = 0.1})"},
	{ "trigger": "stop_monitor_missiles_locked_on_to_me\t#using scripts\\shared\\vehicle_shared; self == player", "contents": "vehicle::stop_monitor_missiles_locked_on_to_me()"},
	{ "trigger": "get_closest_attacker_with_missile_locked_on_to_me\t#using scripts\\shared\\vehicle_shared; self == entity that holds target group", "contents": "vehicle::get_closest_attacker_with_missile_locked_on_to_me(${1:monitored_entity})"},
	{ "trigger": "set_vehicle_drivable_time_starting_now\t#using scripts\\shared\\vehicle_shared; self == player", "contents": "vehicle::set_vehicle_drivable_time_starting_now(${1:duration_ms})"},
	{ "trigger": "set_vehicle_drivable_time\t#using scripts\\shared\\vehicle_shared; self == player", "contents": "vehicle::set_vehicle_drivable_time(${1:duration_ms}, ${2:end_time_ms})"},
	{ "trigger": "update_damage_as_occupant\t#using scripts\\shared\\vehicle_shared; self == player", "contents": "vehicle::update_damage_as_occupant(${1:damage_taken}, ${2:max_health})"},
	{ "trigger": "stop_monitor_damage_as_occupant\t#using scripts\\shared\\vehicle_shared; self == player", "contents": "vehicle::stop_monitor_damage_as_occupant()"},
	{ "trigger": "monitor_damage_as_occupant\t#using scripts\\shared\\vehicle_shared; self == vehicle", "contents": "vehicle::monitor_damage_as_occupant(${1:player})"},
	{ "trigger": "kill_vehicle\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::kill_vehicle(${1:attacker})"},
	{ "trigger": "player_is_driver\t#using scripts\\shared\\vehicle_shared;", "contents": "vehicle::player_is_driver()"},
	{ "trigger": "set_craftable_clientfield\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::set_craftable_clientfield()"},
	{ "trigger": "anystub_update_prompt\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::anystub_update_prompt(${1:player})"},
	{ "trigger": "anystub_get_unitrigger_origin\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::anystub_get_unitrigger_origin()"},
	{ "trigger": "anystub_on_spawn_trigger\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::anystub_on_spawn_trigger(${1:trigger})"},
	{ "trigger": "craftables_watch_swipes\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::craftables_watch_swipes()"},
	{ "trigger": "ExplosionDamage\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::ExplosionDamage(${1:damage}, ${2:pos})"},
	{ "trigger": "make_zombie_craftable_open\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::make_zombie_craftable_open(${1:str_craftable}, ${2:str_model}, ${3:v_angle_offset}, ${4:v_origin_offset})"},
	{ "trigger": "add_zombie_craftable\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::add_zombie_craftable(${1:craftable_name}, ${2:str_to_craft}, ${3:str_crafting}, ${4:str_taken}, ${5:onFullyCrafted}, ${6:need_all_pieces})"},
	{ "trigger": "set_build_time\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::set_build_time(${1:craftable_name}, ${2:build_time})"},
	{ "trigger": "set_piece_count\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::set_piece_count(${1:n_count})"},
	{ "trigger": "add_zombie_craftable_vox_category\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::add_zombie_craftable_vox_category(${1:craftable_name}, ${2:vox_id})"},
	{ "trigger": "include_zombie_craftable\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::include_zombie_craftable(${1:craftableStub})"},
	{ "trigger": "generate_zombie_craftable_piece\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::generate_zombie_craftable_piece(${1:craftablename}, ${2:pieceName}, ${3:radius}, ${4:height}, ${5:drop_offset}, ${6:hud_icon}, ${7:onPickup}, ${8:onDrop}, ${9:onCrafted}, ${10:use_spawn_num}, ${11:tag_name}, ${12:can_reuse}, ${13:client_field_value}, ${14:is_shared = FALSE}, ${15:vox_id}, ${16:b_one_time_vo = false}, ${17:hint_string}, ${18:slot = 0})"},
	{ "trigger": "manage_multiple_pieces\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::manage_multiple_pieces(${1:max_instances})"},
	{ "trigger": "combine_craftable_pieces\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::combine_craftable_pieces(${1:piece1}, ${2:piece2}, ${3:piece3})"},
	{ "trigger": "add_craftable_piece\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::add_craftable_piece(${1:pieceStub}, ${2:tag_name}, ${3:can_reuse})"},
	{ "trigger": "player_drop_piece_on_downed\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::player_drop_piece_on_downed(${1:slot})"},
	{ "trigger": "onPlayerLastStand\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::onPlayerLastStand()"},
	{ "trigger": "piecestub_get_unitrigger_origin\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::piecestub_get_unitrigger_origin()"},
	{ "trigger": "generate_piece_unitrigger\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::generate_piece_unitrigger(${1:classname}, ${2:origin}, ${3:angles}, ${4:flags}, ${5:radius}, ${6:script_height}, ${7:hint_string}, ${8:moving}, ${9:b_nolook})"},
	{ "trigger": "piecetrigger_update_prompt\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::piecetrigger_update_prompt(${1:player})"},
	{ "trigger": "piecestub_update_prompt\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::piecestub_update_prompt(${1:player}, ${2:slot = self.piece.inventory_slot})"},
	{ "trigger": "piece_unitrigger_think\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::piece_unitrigger_think()"},
	{ "trigger": "player_can_take_piece\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::player_can_take_piece(${1:piece})"},
	{ "trigger": "player_throw_piece\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::player_throw_piece(${1:piece}, ${2:origin}, ${3:dir}, ${4:return_to_spawn}, ${5:return_time}, ${6:endangles})"},
	{ "trigger": "watch_hit_players\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::watch_hit_players()"},
	{ "trigger": "piece_wait_and_return\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::piece_wait_and_return(${1:return_time})"},
	{ "trigger": "player_return_piece_to_original_spawn\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::player_return_piece_to_original_spawn(${1:slot = 0})"},
	{ "trigger": "player_drop_piece_on_death\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::player_drop_piece_on_death(${1:slot = 0})"},
	{ "trigger": "player_drop_piece\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::player_drop_piece(${1:piece}, ${2:slot})"},
	{ "trigger": "player_take_piece\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::player_take_piece(${1:pieceSpawn})"},
	{ "trigger": "player_destroy_piece\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::player_destroy_piece(${1:piece}, ${2:slot})"},
	{ "trigger": "claim_location\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::claim_location(${1:location})"},
	{ "trigger": "is_point_in_craft_trigger\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::is_point_in_craft_trigger(${1:point})"},
	{ "trigger": "piece_allocate_spawn\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::piece_allocate_spawn(${1:pieceStub})"},
	{ "trigger": "piece_deallocate_spawn\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::piece_deallocate_spawn()"},
	{ "trigger": "piece_pick_random_spawn\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::piece_pick_random_spawn()"},
	{ "trigger": "piece_set_spawn\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::piece_set_spawn(${1:num})"},
	{ "trigger": "piece_spawn_in\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::piece_spawn_in(${1:pieceStub})"},
	{ "trigger": "piece_spawn_at\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::piece_spawn_at(${1:origin}, ${2:angles}, ${3:use_random_start})"},
	{ "trigger": "piece_unspawn\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::piece_unspawn()"},
	{ "trigger": "piece_hide\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::piece_hide()"},
	{ "trigger": "piece_show\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::piece_show()"},
	{ "trigger": "generate_piece\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::generate_piece(${1:pieceStub})"},
	{ "trigger": "craftable_piece_unitriggers\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::craftable_piece_unitriggers(${1:craftable_name}, ${2:origin})"},
	{ "trigger": "hide_craftable_table_model\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::hide_craftable_table_model(${1:trigger_targetname})"},
	{ "trigger": "setup_unitrigger_craftable\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::setup_unitrigger_craftable(${1:trigger_targetname}, ${2:equipname}, ${3:weaponname}, ${4:trigger_hintstring}, ${5:delete_trigger}, ${6:persistent})"},
	{ "trigger": "setup_unitrigger_craftable_array\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::setup_unitrigger_craftable_array(${1:trigger_targetname}, ${2:equipname}, ${3:weaponname}, ${4:trigger_hintstring}, ${5:delete_trigger}, ${6:persistent})"},
	{ "trigger": "setup_unitrigger_craftable_internal\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::setup_unitrigger_craftable_internal(${1:trig}, ${2:equipname}, ${3:weaponname}, ${4:trigger_hintstring}, ${5:delete_trigger}, ${6:persistent})"},
	{ "trigger": "setup_craftable_pieces\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::setup_craftable_pieces()"},
	{ "trigger": "craftable_has_piece\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::craftable_has_piece(${1:piece})"},
	{ "trigger": "get_actual_uts_craftable\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::get_actual_uts_craftable()"},
	{ "trigger": "get_actual_craftableSpawn\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::get_actual_craftableSpawn()"},
	{ "trigger": "craftable_can_use_shared_piece\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::craftable_can_use_shared_piece()"},
	{ "trigger": "craftable_set_piece_crafted\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::craftable_set_piece_crafted(${1:pieceSpawn_check}, ${2:player})"},
	{ "trigger": "craftable_set_piece_crafting\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::craftable_set_piece_crafting(${1:pieceSpawn_check})"},
	{ "trigger": "craftable_clear_piece_crafting\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::craftable_clear_piece_crafting(${1:pieceSpawn_check})"},
	{ "trigger": "craftable_is_piece_crafted\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::craftable_is_piece_crafted(${1:piece})"},
	{ "trigger": "start_crafting_shared_piece\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::start_crafting_shared_piece()"},
	{ "trigger": "finish_crafting_shared_piece\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::finish_crafting_shared_piece()"},
	{ "trigger": "can_craft_shared_piece\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::can_craft_shared_piece(${1:continuing})"},
	{ "trigger": "craftable_is_piece_crafting\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::craftable_is_piece_crafting(${1:pieceSpawn_check})"},
	{ "trigger": "craftable_is_piece_crafted_or_crafting\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::craftable_is_piece_crafted_or_crafting(${1:piece})"},
	{ "trigger": "craftable_all_crafted\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::craftable_all_crafted()"},
	{ "trigger": "waittill_crafted\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::waittill_crafted(${1:craftable_name})"},
	{ "trigger": "player_can_craft\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::player_can_craft(${1:craftableSpawn}, ${2:continuing}, ${3:slot})"},
	{ "trigger": "craftable_transfer_data\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::craftable_transfer_data()"},
	{ "trigger": "player_craft\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::player_craft(${1:craftableSpawn}, ${2:slot = craftableSpawn.inventory_slot})"},
	{ "trigger": "update_open_table_status\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::update_open_table_status()"},
	{ "trigger": "player_finish_craftable\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::player_finish_craftable(${1:craftableSpawn})"},
	{ "trigger": "complete_craftable\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::complete_craftable(${1:str_craftable_name})"},
	{ "trigger": "craftablestub_remove\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::craftablestub_remove()"},
	{ "trigger": "craftabletrigger_update_prompt\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::craftabletrigger_update_prompt(${1:player})"},
	{ "trigger": "craftablestub_update_prompt\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::craftablestub_update_prompt(${1:player}, ${2:unitrigger}, ${3:slot = self.craftableStub.inventory_slot})"},
	{ "trigger": "choose_open_craftable\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::choose_open_craftable(${1:player})"},
	{ "trigger": "open_craftablestub_update_prompt\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::open_craftablestub_update_prompt(${1:player}, ${2:slot = 0})"},
	{ "trigger": "player_continue_crafting\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::player_continue_crafting(${1:craftableSpawn}, ${2:slot})"},
	{ "trigger": "player_progress_bar_update\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::player_progress_bar_update(${1:start_time}, ${2:craft_time})"},
	{ "trigger": "player_progress_bar\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::player_progress_bar(${1:start_time}, ${2:craft_time})"},
	{ "trigger": "craftable_use_hold_think_internal\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::craftable_use_hold_think_internal(${1:player}, ${2:slot = self.stub.craftableSpawn.inventory_slot})"},
	{ "trigger": "craftable_play_craft_fx\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::craftable_play_craft_fx(${1:player})"},
	{ "trigger": "craftable_use_hold_think\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::craftable_use_hold_think(${1:player})"},
	{ "trigger": "craftable_place_think\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::craftable_place_think()"},
	{ "trigger": "model_fly_away\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::model_fly_away(${1:unitrigger})"},
	{ "trigger": "find_craftable_stub\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::find_craftable_stub(${1:equipname})"},
	{ "trigger": "uncraft_craftable\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::uncraft_craftable(${1:equipname}, ${2:return_pieces}, ${3:origin}, ${4:angles})"},
	{ "trigger": "stub_uncraft_craftable\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::stub_uncraft_craftable(${1:stub}, ${2:return_pieces}, ${3:origin}, ${4:angles}, ${5:use_random_start})"},
	{ "trigger": "player_explode_craftable\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::player_explode_craftable(${1:equipname}, ${2:origin}, ${3:speed}, ${4:return_to_spawn}, ${5:return_time})"},
	{ "trigger": "think_craftables\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::think_craftables()"},
	{ "trigger": "openTableCraftable\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::openTableCraftable()"},
	{ "trigger": "craftable_trigger_think\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::craftable_trigger_think(${1:trigger_targetname}, ${2:equipname}, ${3:weaponname}, ${4:trigger_hintstring}, ${5:delete_trigger}, ${6:persistent})"},
	{ "trigger": "craftable_trigger_think_array\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::craftable_trigger_think_array(${1:trigger_targetname}, ${2:equipname}, ${3:weaponname}, ${4:trigger_hintstring}, ${5:delete_trigger}, ${6:persistent})"},
	{ "trigger": "setup_vehicle_unitrigger_craftable\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::setup_vehicle_unitrigger_craftable(${1:parent}, ${2:trigger_targetname}, ${3:equipname}, ${4:weaponname}, ${5:trigger_hintstring}, ${6:delete_trigger}, ${7:persistent})"},
	{ "trigger": "vehicle_craftable_trigger_think\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::vehicle_craftable_trigger_think(${1:vehicle}, ${2:trigger_targetname}, ${3:equipname}, ${4:weaponname}, ${5:trigger_hintstring}, ${6:delete_trigger}, ${7:persistent})"},
	{ "trigger": "onPickupUTS\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::onPickupUTS(${1:player})"},
	{ "trigger": "onDropUTS\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::onDropUTS(${1:player})"},
	{ "trigger": "onBeginUseUTS\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::onBeginUseUTS(${1:player})"},
	{ "trigger": "onEndUseUTS\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::onEndUseUTS(${1:team}, ${2:player}, ${3:result})"},
	{ "trigger": "onCantUseUTS\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::onCantUseUTS(${1:player})"},
	{ "trigger": "onUsePlantObjectUTS\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::onUsePlantObjectUTS(${1:player})"},
	{ "trigger": "is_craftable\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::is_craftable()"},
	{ "trigger": "craftable_crafted\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::craftable_crafted()"},
	{ "trigger": "craftable_complete\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::craftable_complete()"},
	{ "trigger": "get_craftable_hint\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::get_craftable_hint(${1:craftable_name})"},
	{ "trigger": "delete_on_disconnect\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::delete_on_disconnect(${1:craftable}, ${2:self_notify}, ${3:skip_delete})"},
	{ "trigger": "is_holding_part\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::is_holding_part(${1:craftable_name}, ${2:piece_name}, ${3:slot = 0})"},
	{ "trigger": "is_part_crafted\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::is_part_crafted(${1:craftable_name}, ${2:piece_name})"},
	{ "trigger": "track_craftable_piece_pickedup\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::track_craftable_piece_pickedup(${1:piece})"},
	{ "trigger": "track_craftable_pieces_crafted\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::track_craftable_pieces_crafted(${1:craftable})"},
	{ "trigger": "track_craftables_crafted\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::track_craftables_crafted(${1:craftable})"},
	{ "trigger": "track_craftables_pickedup\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::track_craftables_pickedup(${1:craftable})"},
	{ "trigger": "track_craftables_planted\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::track_craftables_planted(${1:equipment})"},
	{ "trigger": "placed_craftable_vo_timer\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::placed_craftable_vo_timer()"},
	{ "trigger": "craftable_pickedup_timer\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::craftable_pickedup_timer()"},
	{ "trigger": "track_planted_craftables_pickedup\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::track_planted_craftables_pickedup(${1:equipment})"},
	{ "trigger": "track_placed_craftables\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::track_placed_craftables(${1:craftable_name})"},
	{ "trigger": "add_map_craftable_stat\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::add_map_craftable_stat(${1:piece_name}, ${2:stat_name}, ${3:value})"},
	{ "trigger": "say_pickup_craftable_vo\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::say_pickup_craftable_vo(${1:craftable_name}, ${2:b_world})"},
	{ "trigger": "get_craftable_vo_name\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::get_craftable_vo_name(${1:craftable_name})"},
	{ "trigger": "get_craftable_stat_name\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::get_craftable_stat_name(${1:craftable_name})"},
	{ "trigger": "get_craftable_model\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::get_craftable_model(${1:str_craftable})"},
	{ "trigger": "get_craftable_piece\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::get_craftable_piece(${1:str_craftable}, ${2:str_piece})"},
	{ "trigger": "player_get_craftable_piece\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::player_get_craftable_piece(${1:str_craftable}, ${2:str_piece})"},
	{ "trigger": "player_remove_craftable_piece\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::player_remove_craftable_piece(${1:str_craftable}, ${2:str_piece})"},
	{ "trigger": "player_remove_piece\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::player_remove_piece(${1:piece_to_remove})"},
	{ "trigger": "get_craftable_piece_model\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::get_craftable_piece_model(${1:str_craftable}, ${2:str_piece})"},
	{ "trigger": "player_show_craftable_parts_ui\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::player_show_craftable_parts_ui(${1:str_crafted_clientuimodel}, ${2:str_widget_clientuimodel}, ${3:b_is_crafted})"},
	{ "trigger": "player_hide_craftable_parts_ui_after_duration\t#using scripts\\zm\\craftables\\_zm_craftables;", "contents": "zm_craftables::player_hide_craftable_parts_ui_after_duration(${1:str_widget_clientuimodel}, ${2:n_show_ui_duration})"},
	{ "trigger": "sentinel_InitBeamLaunchers\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_InitBeamLaunchers()"},
	{ "trigger": "defaultRole\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::defaultRole()"},
	{ "trigger": "get_sentinel_nearest_zombie\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::get_sentinel_nearest_zombie(${1:b_ignore_elemental = true}, ${2:b_outside_playable_area = true}, ${3:radius = 2000})"},
	{ "trigger": "get_sentinel_drone_enemy\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::get_sentinel_drone_enemy()"},
	{ "trigger": "set_sentinel_drone_enemy\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::set_sentinel_drone_enemy(${1:enemy})"},
	{ "trigger": "state_combat_update\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::state_combat_update(${1:params})"},
	{ "trigger": "sentinel_Intro\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_Intro()"},
	{ "trigger": "sentinel_IntroCompleted\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_IntroCompleted()"},
	{ "trigger": "sentinel_DodgeRoll\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_DodgeRoll()"},
	{ "trigger": "sentinel_NavigationStandStill\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_NavigationStandStill()"},
	{ "trigger": "sentinel_NavigateTheWorld\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_NavigateTheWorld()"},
	{ "trigger": "sentinel_GetNextMovePositionTactical\t#using scripts\\shared\\vehicles\\_sentinel_drone; has self.sentinel_droneEnemy", "contents": "sentinel_drone::sentinel_GetNextMovePositionTactical(${1:b_do_not_chase_enemy})"},
	{ "trigger": "sentinel_ChargeAtPlayerNavigation\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_ChargeAtPlayerNavigation(${1:b_charge_at_player}, ${2:time_out}, ${3:charge_at_position})"},
	{ "trigger": "sentinel_PathUpdateInterrupt\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_PathUpdateInterrupt()"},
	{ "trigger": "sentine_RumbleWhenNearPlayer\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentine_RumbleWhenNearPlayer()"},
	{ "trigger": "sentinel_CanSeeEnemy\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_CanSeeEnemy(${1:sentinel_origin}, ${2:prev_enemy_position})"},
	{ "trigger": "sentinel_FireLogic\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_FireLogic()"},
	{ "trigger": "sentinel_FireBeam\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_FireBeam(${1:target_position}, ${2:b_succession})"},
	{ "trigger": "sentinel_FireBeamBurst\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_FireBeamBurst(${1:target_position})"},
	{ "trigger": "sentinel_FireBeamSuccession\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_FireBeamSuccession(${1:target_position})"},
	{ "trigger": "sentinel_DamageBeamTouchingEntity\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_DamageBeamTouchingEntity(${1:player_damage}, ${2:target_position}, ${3:b_succession = false})"},
	{ "trigger": "sentinel_SelfDestruct\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_SelfDestruct(${1:time})"},
	{ "trigger": "sentinel_ChargeAtPlayer\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_ChargeAtPlayer()"},
	{ "trigger": "IsLeftArm\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::IsLeftArm(${1:part_name})"},
	{ "trigger": "IsRightArm\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::IsRightArm(${1:part_name})"},
	{ "trigger": "IsTopArm\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::IsTopArm(${1:part_name})"},
	{ "trigger": "IsCore\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::IsCore(${1:part_name})"},
	{ "trigger": "IsCamera\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::IsCamera(${1:part_name})"},
	{ "trigger": "sentinel_GetArmNumber\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_GetArmNumber(${1:part_name})"},
	{ "trigger": "sentinel_DestroyAllArms\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_DestroyAllArms(${1:b_disable_charge})"},
	{ "trigger": "sentinel_CallbackDamage\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_CallbackDamage(${1:eInflictor}, ${2:eAttacker}, ${3:iDamage}, ${4:iDFlags}, ${5:sMeansOfDeath}, ${6:weapon}, ${7:vPoint}, ${8:vDir}, ${9:sHitLoc}, ${10:vDamageOrigin}, ${11:psOffsetTime}, ${12:damageFromUnderneath}, ${13:modelIndex}, ${14:partName}, ${15:vSurfaceNormal})"},
	{ "trigger": "sentinel_drone_CallbackRadiusDamage\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_drone_CallbackRadiusDamage(${1:eInflictor}, ${2:eAttacker}, ${3:iDamage}, ${4:fInnerDamage}, ${5:fOuterDamage}, ${6:iDFlags}, ${7:sMeansOfDeath}, ${8:weapon}, ${9:vPoint}, ${10:fRadius}, ${11:fConeAngleCos}, ${12:vConeDir}, ${13:psOffsetTime})"},
	{ "trigger": "state_death_update\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::state_death_update(${1:params})"},
	{ "trigger": "sentinel_DeleteDroneDeathFX\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_DeleteDroneDeathFX(${1:explosion_origin})"},
	{ "trigger": "sentinel_ForceGoAndStayInPosition\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_ForceGoAndStayInPosition(${1:b_enable}, ${2:position})"},
	{ "trigger": "sentinel_IsEnemyIndoors\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_IsEnemyIndoors()"},
	{ "trigger": "sentinel_IsEnemyInNarrowPlace\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_IsEnemyInNarrowPlace()"},
	{ "trigger": "sentinel_SetCompactMode\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_SetCompactMode(${1:b_compact})"},
	{ "trigger": "sentinel_HideInitialBrokenParts\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_HideInitialBrokenParts()"},
	{ "trigger": "sentinel_KillMyself\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_KillMyself()"},
	{ "trigger": "sentinel_GetEngagementDistMax\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_GetEngagementDistMax()"},
	{ "trigger": "sentinel_GetEngagementDistMin\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_GetEngagementDistMin()"},
	{ "trigger": "sentinel_GetEngagementHeightMax\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_GetEngagementHeightMax()"},
	{ "trigger": "sentinel_GetEngagementHeightMin\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_GetEngagementHeightMin()"},
	{ "trigger": "sentinel_IsInsideEngagementDistance\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_IsInsideEngagementDistance(${1:origin}, ${2:position}, ${3:b_accept_negative_height})"},
	{ "trigger": "sentinel_Trace\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_Trace(${1:start}, ${2:end}, ${3:ignore_ent}, ${4:b_physics_trace}, ${5:ignore_characters})"},
	{ "trigger": "sentinel_ElectrifyZombie\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_ElectrifyZombie(${1:origin}, ${2:zombie}, ${3:radius})"},
	{ "trigger": "sentinel_DeactivateAllEffects\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_DeactivateAllEffects()"},
	{ "trigger": "sentinel_DamagePlayer\t#using scripts\\shared\\vehicles\\_sentinel_drone; self = player in radius", "contents": "sentinel_drone::sentinel_DamagePlayer(${1:damage}, ${2:eAttacker}, ${3:b_light_damage = false})"},
	{ "trigger": "sentinel_RemoveFromLevelArray\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_RemoveFromLevelArray()"},
	{ "trigger": "sentinel_IsNearAnotherSentinel\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_IsNearAnotherSentinel(${1:point}, ${2:min_distance})"},
	{ "trigger": "sentinel_IsNearAnotherPlayer\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_IsNearAnotherPlayer(${1:origin}, ${2:min_distance})"},
	{ "trigger": "sentinel_play_taunt\t#using scripts\\shared\\vehicles\\_sentinel_drone;", "contents": "sentinel_drone::sentinel_play_taunt(${1:taunt_Arr})"},
	{ "trigger": "register_score_event\t#using scripts\\zm\\_zm_score;", "contents": "zm_score::register_score_event(${1:str_event}, ${2:func_callback})"},
	{ "trigger": "reset_doublexp_timer\t#using scripts\\zm\\_zm_score;", "contents": "zm_score::reset_doublexp_timer()"},
	{ "trigger": "doublexp_timer\t#using scripts\\zm\\_zm_score;", "contents": "zm_score::doublexp_timer()"},
	{ "trigger": "player_on_spawned\t#using scripts\\zm\\_zm_score;", "contents": "zm_score::player_on_spawned()"},
	{ "trigger": "score_cf_register_info\t#using scripts\\zm\\_zm_score;", "contents": "zm_score::score_cf_register_info(${1:name}, ${2:version}, ${3:max_count})"},
	{ "trigger": "score_cf_increment_info\t#using scripts\\zm\\_zm_score;", "contents": "zm_score::score_cf_increment_info(${1:name})"},
	{ "trigger": "wait_score_cf_increment_info\t#using scripts\\zm\\_zm_score;", "contents": "zm_score::wait_score_cf_increment_info(${1:player}, ${2:cf})"},
	{ "trigger": "player_add_points\t#using scripts\\zm\\_zm_score;", "contents": "zm_score::player_add_points(${1:event}, ${2:mod}, ${3:hit_location}, ${4:is_dog}, ${5:zombie_team}, ${6:damage_weapon})"},
	{ "trigger": "get_points_multiplier\t#using scripts\\zm\\_zm_score;", "contents": "zm_score::get_points_multiplier(${1:player})"},
	{ "trigger": "get_zombie_death_player_points\t#using scripts\\zm\\_zm_score;", "contents": "zm_score::get_zombie_death_player_points()"},
	{ "trigger": "get_zombie_death_team_points\t#using scripts\\zm\\_zm_score;", "contents": "zm_score::get_zombie_death_team_points()"},
	{ "trigger": "player_add_points_kill_bonus\t#using scripts\\zm\\_zm_score;", "contents": "zm_score::player_add_points_kill_bonus(${1:mod}, ${2:hit_location}, ${3:weapon}, ${4:player_points = undefined})"},
	{ "trigger": "player_reduce_points\t#using scripts\\zm\\_zm_score;", "contents": "zm_score::player_reduce_points(${1:event}, ${2:n_amount})"},
	{ "trigger": "add_to_player_score\t#using scripts\\zm\\_zm_score;", "contents": "zm_score::add_to_player_score(${1:points}, ${2:b_add_to_total = true}, ${3:str_awarded_by = \"\"})"},
	{ "trigger": "minus_to_player_score\t#using scripts\\zm\\_zm_score;", "contents": "zm_score::minus_to_player_score(${1:points})"},
	{ "trigger": "add_to_team_score\t#using scripts\\zm\\_zm_score;", "contents": "zm_score::add_to_team_score(${1:points})"},
	{ "trigger": "minus_to_team_score\t#using scripts\\zm\\_zm_score;", "contents": "zm_score::minus_to_team_score(${1:points})"},
	{ "trigger": "player_died_penalty\t#using scripts\\zm\\_zm_score;", "contents": "zm_score::player_died_penalty()"},
	{ "trigger": "player_downed_penalty\t#using scripts\\zm\\_zm_score;", "contents": "zm_score::player_downed_penalty()"},
	{ "trigger": "can_player_purchase\t#using scripts\\zm\\_zm_score; self = player", "contents": "zm_score::can_player_purchase(${1:n_cost})"},
	{ "trigger": "run_oob_trigger\t#using scripts\\shared\\_oob;", "contents": "oob::run_oob_trigger()"},
	{ "trigger": "IsOutOfBounds\t#using scripts\\shared\\_oob;", "contents": "oob::IsOutOfBounds()"},
	{ "trigger": "IsTouchingAnyOOBTrigger\t#using scripts\\shared\\_oob;", "contents": "oob::IsTouchingAnyOOBTrigger()"},
	{ "trigger": "ResetOOBTimer\t#using scripts\\shared\\_oob;", "contents": "oob::ResetOOBTimer(${1:is_host_migrating}, ${2:b_disable_timekeep})"},
	{ "trigger": "waitForCloneTouch\t#using scripts\\shared\\_oob; self = trigger", "contents": "oob::waitForCloneTouch()"},
	{ "trigger": "GetAdjusedPlayer\t#using scripts\\shared\\_oob;", "contents": "oob::GetAdjusedPlayer(${1:Player})"},
	{ "trigger": "waitForPlayerTouch\t#using scripts\\shared\\_oob; self = trigger", "contents": "oob::waitForPlayerTouch()"},
	{ "trigger": "GetDistanceFromLastValidPlayerLoc\t#using scripts\\shared\\_oob;", "contents": "oob::GetDistanceFromLastValidPlayerLoc(${1:trigger}, ${2:entity})"},
	{ "trigger": "UpdateVisualEffects\t#using scripts\\shared\\_oob;", "contents": "oob::UpdateVisualEffects(${1:trigger}, ${2:entity})"},
	{ "trigger": "killEntity\t#using scripts\\shared\\_oob;", "contents": "oob::killEntity(${1:entity})"},
	{ "trigger": "watchForLeave\t#using scripts\\shared\\_oob;", "contents": "oob::watchForLeave(${1:trigger}, ${2:entity})"},
	{ "trigger": "watchForDeath\t#using scripts\\shared\\_oob;", "contents": "oob::watchForDeath(${1:trigger}, ${2:entity})"},
	{ "trigger": "watchForHostMigration\t#using scripts\\shared\\_oob;", "contents": "oob::watchForHostMigration(${1:trigger}, ${2:entity})"},
	{ "trigger": "disablePlayerOOB\t#using scripts\\shared\\_oob;", "contents": "oob::disablePlayerOOB(${1:disabled})"},
	{ "trigger": "exists\t#using scripts\\shared\\flag_shared;", "contents": "flag::exists(${1:str_flag})"},
	{ "trigger": "set\t#using scripts\\shared\\flag_shared;", "contents": "flag::set(${1:str_flag})"},
	{ "trigger": "delay_set\t#using scripts\\shared\\flag_shared;", "contents": "flag::delay_set(${1:n_delay}, ${2:str_flag}, ${3:str_cancel})"},
	{ "trigger": "_delay_set\t#using scripts\\shared\\flag_shared;", "contents": "flag::_delay_set(${1:n_delay}, ${2:str_flag}, ${3:str_cancel})"},
	{ "trigger": "set_for_time\t#using scripts\\shared\\flag_shared;", "contents": "flag::set_for_time(${1:n_time}, ${2:str_flag})"},
	{ "trigger": "clear\t#using scripts\\shared\\flag_shared;", "contents": "flag::clear(${1:str_flag})"},
	{ "trigger": "toggle\t#using scripts\\shared\\flag_shared;", "contents": "flag::toggle(${1:str_flag})"},
	{ "trigger": "get\t#using scripts\\shared\\flag_shared;", "contents": "flag::get(${1:str_flag})"},
	{ "trigger": "get_any\t#using scripts\\shared\\flag_shared;", "contents": "flag::get_any(${1:&array})"},
	{ "trigger": "wait_till\t#using scripts\\shared\\flag_shared;", "contents": "flag::wait_till(${1:str_flag})"},
	{ "trigger": "wait_till_timeout\t#using scripts\\shared\\flag_shared;", "contents": "flag::wait_till_timeout(${1:n_timeout}, ${2:str_flag})"},
	{ "trigger": "wait_till_all\t#using scripts\\shared\\flag_shared;", "contents": "flag::wait_till_all(${1:a_flags})"},
	{ "trigger": "wait_till_all_timeout\t#using scripts\\shared\\flag_shared;", "contents": "flag::wait_till_all_timeout(${1:n_timeout}, ${2:a_flags})"},
	{ "trigger": "wait_till_any\t#using scripts\\shared\\flag_shared;", "contents": "flag::wait_till_any(${1:a_flags})"},
	{ "trigger": "wait_till_any_timeout\t#using scripts\\shared\\flag_shared;", "contents": "flag::wait_till_any_timeout(${1:n_timeout}, ${2:a_flags})"},
	{ "trigger": "wait_till_clear\t#using scripts\\shared\\flag_shared;", "contents": "flag::wait_till_clear(${1:str_flag})"},
	{ "trigger": "wait_till_clear_timeout\t#using scripts\\shared\\flag_shared;", "contents": "flag::wait_till_clear_timeout(${1:n_timeout}, ${2:str_flag})"},
	{ "trigger": "wait_till_clear_all\t#using scripts\\shared\\flag_shared;", "contents": "flag::wait_till_clear_all(${1:a_flags})"},
	{ "trigger": "wait_till_clear_all_timeout\t#using scripts\\shared\\flag_shared;", "contents": "flag::wait_till_clear_all_timeout(${1:n_timeout}, ${2:a_flags})"},
	{ "trigger": "wait_till_clear_any\t#using scripts\\shared\\flag_shared;", "contents": "flag::wait_till_clear_any(${1:a_flags})"},
	{ "trigger": "wait_till_clear_any_timeout\t#using scripts\\shared\\flag_shared;", "contents": "flag::wait_till_clear_any_timeout(${1:n_timeout}, ${2:a_flags})"},
	{ "trigger": "delete\t#using scripts\\shared\\flag_shared;", "contents": "flag::delete(${1:str_flag})"},
	{ "trigger": "script_flag_wait\t#using scripts\\shared\\flag_shared;", "contents": "flag::script_flag_wait()"},
	{ "trigger": "activate_player_health_visionset\t#using scripts\\shared\\drown;", "contents": "drown::activate_player_health_visionset()"},
	{ "trigger": "deactivate_player_health_visionset\t#using scripts\\shared\\drown;", "contents": "drown::deactivate_player_health_visionset()"},
	{ "trigger": "on_player_spawned\t#using scripts\\shared\\drown; self == player", "contents": "drown::on_player_spawned()"},
	{ "trigger": "watch_player_drowning\t#using scripts\\shared\\drown;", "contents": "drown::watch_player_drowning()"},
	{ "trigger": "watch_player_drown_death\t#using scripts\\shared\\drown;", "contents": "drown::watch_player_drown_death()"},
	{ "trigger": "watch_game_ended\t#using scripts\\shared\\drown;", "contents": "drown::watch_game_ended()"},
	{ "trigger": "is_player_drowning\t#using scripts\\shared\\drown;", "contents": "drown::is_player_drowning()"},
	{ "trigger": "set_treasure_chest_cost\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::set_treasure_chest_cost(${1:cost})"},
	{ "trigger": "get_chest_pieces\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::get_chest_pieces()"},
	{ "trigger": "boxtrigger_update_prompt\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::boxtrigger_update_prompt(${1:player})"},
	{ "trigger": "boxstub_update_prompt\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::boxstub_update_prompt(${1:player})"},
	{ "trigger": "default_magic_box_check_equipment\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::default_magic_box_check_equipment(${1:weapon})"},
	{ "trigger": "trigger_visible_to_player\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::trigger_visible_to_player(${1:player})"},
	{ "trigger": "magicbox_unitrigger_think\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::magicbox_unitrigger_think()"},
	{ "trigger": "play_crazi_sound\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::play_crazi_sound()"},
	{ "trigger": "show_chest\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::show_chest()"},
	{ "trigger": "hide_chest\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::hide_chest(${1:doBoxLeave})"},
	{ "trigger": "magic_box_zbarrier_leave\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::magic_box_zbarrier_leave()"},
	{ "trigger": "default_pandora_fx_func\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::default_pandora_fx_func()"},
	{ "trigger": "default_pandora_show_func\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::default_pandora_show_func(${1:anchor}, ${2:anchorTarget}, ${3:pieces})"},
	{ "trigger": "unregister_unitrigger_on_kill_think\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::unregister_unitrigger_on_kill_think()"},
	{ "trigger": "treasure_chest_think\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::treasure_chest_think()"},
	{ "trigger": "watch_for_emp_close\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::watch_for_emp_close()"},
	{ "trigger": "can_buy_weapon\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::can_buy_weapon()"},
	{ "trigger": "default_box_move_logic\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::default_box_move_logic()"},
	{ "trigger": "treasure_chest_move\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::treasure_chest_move(${1:player_vox})"},
	{ "trigger": "fire_sale_fix\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::fire_sale_fix()"},
	{ "trigger": "check_for_desirable_chest_location\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::check_for_desirable_chest_location()"},
	{ "trigger": "rotateroll_box\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::rotateroll_box()"},
	{ "trigger": "verify_chest_is_open\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::verify_chest_is_open()"},
	{ "trigger": "treasure_chest_timeout\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::treasure_chest_timeout()"},
	{ "trigger": "treasure_chest_lid_open\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::treasure_chest_lid_open()"},
	{ "trigger": "treasure_chest_lid_close\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::treasure_chest_lid_close(${1:timedOut})"},
	{ "trigger": "treasure_chest_CanPlayerReceiveWeapon\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::treasure_chest_CanPlayerReceiveWeapon(${1:player}, ${2:weapon}, ${3:pap_triggers})"},
	{ "trigger": "treasure_chest_ChooseWeightedRandomWeapon\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::treasure_chest_ChooseWeightedRandomWeapon(${1:player})"},
	{ "trigger": "weapon_show_hint_choke\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::weapon_show_hint_choke()"},
	{ "trigger": "decide_hide_show_hint\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::decide_hide_show_hint(${1:endon_notify}, ${2:second_endon_notify}, ${3:onlyplayer}, ${4:can_buy_weapon_extra_check_func})"},
	{ "trigger": "get_left_hand_weapon_model_name\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::get_left_hand_weapon_model_name(${1:weapon})"},
	{ "trigger": "clean_up_hacked_box\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::clean_up_hacked_box()"},
	{ "trigger": "treasure_chest_firesale_active\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::treasure_chest_firesale_active()"},
	{ "trigger": "treasure_chest_should_move\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::treasure_chest_should_move(${1:chest}, ${2:player})"},
	{ "trigger": "spawn_joker_weapon_model\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::spawn_joker_weapon_model(${1:player}, ${2:model}, ${3:origin}, ${4:angles})"},
	{ "trigger": "treasure_chest_weapon_locking\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::treasure_chest_weapon_locking(${1:player}, ${2:weapon}, ${3:onOff})"},
	{ "trigger": "treasure_chest_weapon_spawn\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::treasure_chest_weapon_spawn(${1:chest}, ${2:player}, ${3:respin})"},
	{ "trigger": "chest_get_min_usage\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::chest_get_min_usage()"},
	{ "trigger": "chest_get_max_usage\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::chest_get_max_usage()"},
	{ "trigger": "timer_til_despawn\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::timer_til_despawn(${1:v_float})"},
	{ "trigger": "treasure_chest_glowfx\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::treasure_chest_glowfx()"},
	{ "trigger": "treasure_chest_give_weapon\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::treasure_chest_give_weapon(${1:weapon})"},
	{ "trigger": "should_upgrade_weapon\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::should_upgrade_weapon(${1:player}, ${2:weapon})"},
	{ "trigger": "magic_box_arrives\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::magic_box_arrives()"},
	{ "trigger": "magic_box_leaves\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::magic_box_leaves()"},
	{ "trigger": "magic_box_opens\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::magic_box_opens()"},
	{ "trigger": "magic_box_closes\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::magic_box_closes()"},
	{ "trigger": "magic_box_do_weapon_rise\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::magic_box_do_weapon_rise()"},
	{ "trigger": "magic_box_do_teddy_flyaway\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::magic_box_do_teddy_flyaway()"},
	{ "trigger": "is_chest_active\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::is_chest_active()"},
	{ "trigger": "get_magic_box_zbarrier_state\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::get_magic_box_zbarrier_state()"},
	{ "trigger": "set_magic_box_zbarrier_state\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::set_magic_box_zbarrier_state(${1:state})"},
	{ "trigger": "process_magic_box_zbarrier_state\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::process_magic_box_zbarrier_state(${1:state})"},
	{ "trigger": "magicbox_host_migration\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::magicbox_host_migration()"},
	{ "trigger": "box_encounter_vo\t#using scripts\\zm\\_zm_magicbox;", "contents": "zm_magicbox::box_encounter_vo()"},
	{ "trigger": "player_vortex_visionset\t#using scripts\\shared\\ai\\zombie_vortex;", "contents": "zombie_vortex::player_vortex_visionset(${1:name})"},
	{ "trigger": "drone_callback_damage\t#using scripts\\shared\\vehicles\\_counteruav;", "contents": "counteruav::drone_callback_damage(${1:eInflictor}, ${2:eAttacker}, ${3:iDamage}, ${4:iDFlags}, ${5:sMeansOfDeath}, ${6:weapon}, ${7:vPoint}, ${8:vDir}, ${9:sHitLoc}, ${10:vDamageOrigin}, ${11:psOffsetTime}, ${12:damageFromUnderneath}, ${13:modelIndex}, ${14:partName}, ${15:vSurfaceNormal})"},
	{ "trigger": "log\t#using scripts\\shared\\scriptbundle_shared;", "contents": "scriptbundle::log(${1:str_msg})"},
	{ "trigger": "error\t#using scripts\\shared\\scriptbundle_shared;", "contents": "scriptbundle::error(${1:condition}, ${2:str_msg})"},
	{ "trigger": "warning\t#using scripts\\shared\\scriptbundle_shared;", "contents": "scriptbundle::warning(${1:condition}, ${2:str_msg})"},
	{ "trigger": "get_ent\t#using scripts\\shared\\scriptbundle_shared;", "contents": "scriptbundle::get_ent()"},
	{ "trigger": "on_error\t#using scripts\\shared\\scriptbundle_shared;", "contents": "scriptbundle::on_error(${1:e})"},
	{ "trigger": "get_type\t#using scripts\\shared\\scriptbundle_shared;", "contents": "scriptbundle::get_type()"},
	{ "trigger": "get_name\t#using scripts\\shared\\scriptbundle_shared;", "contents": "scriptbundle::get_name()"},
	{ "trigger": "get_vm\t#using scripts\\shared\\scriptbundle_shared;", "contents": "scriptbundle::get_vm()"},
	{ "trigger": "get_objects\t#using scripts\\shared\\scriptbundle_shared;", "contents": "scriptbundle::get_objects()"},
	{ "trigger": "is_testing\t#using scripts\\shared\\scriptbundle_shared;", "contents": "scriptbundle::is_testing()"},
	{ "trigger": "add_object\t#using scripts\\shared\\scriptbundle_shared;", "contents": "scriptbundle::add_object(${1:o_object})"},
	{ "trigger": "remove_object\t#using scripts\\shared\\scriptbundle_shared;", "contents": "scriptbundle::remove_object(${1:o_object})"},
	{ "trigger": "log\t#using scripts\\shared\\scriptbundle_shared;", "contents": "scriptbundle::log(${1:str_msg})"},
	{ "trigger": "error\t#using scripts\\shared\\scriptbundle_shared;", "contents": "scriptbundle::error(${1:condition}, ${2:str_msg})"},
	{ "trigger": "warning\t#using scripts\\shared\\scriptbundle_shared;", "contents": "scriptbundle::warning(${1:condition}, ${2:str_msg})"},
	{ "trigger": "error_on_screen\t#using scripts\\shared\\scriptbundle_shared;", "contents": "scriptbundle::error_on_screen(${1:str_msg})"},
	{ "trigger": "_destroy_error_on_screen\t#using scripts\\shared\\scriptbundle_shared;", "contents": "scriptbundle::_destroy_error_on_screen()"},
	{ "trigger": "warning_on_screen\t#using scripts\\shared\\scriptbundle_shared;", "contents": "scriptbundle::warning_on_screen(${1:str_msg})"},
	{ "trigger": "_destroy_warning_on_screen\t#using scripts\\shared\\scriptbundle_shared;", "contents": "scriptbundle::_destroy_warning_on_screen()"},
	{ "trigger": "set_weapon_ignore_max_ammo\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::set_weapon_ignore_max_ammo(${1:weapon})"},
	{ "trigger": "powerup_hud_monitor\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::powerup_hud_monitor()"},
	{ "trigger": "set_clientfield_powerups\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::set_clientfield_powerups(${1:clientfield_name}, ${2:powerup_timer}, ${3:powerup_on}, ${4:flashing_timers}, ${5:flashing_values})"},
	{ "trigger": "randomize_powerups\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::randomize_powerups()"},
	{ "trigger": "get_next_powerup\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::get_next_powerup()"},
	{ "trigger": "get_valid_powerup\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::get_valid_powerup()"},
	{ "trigger": "minigun_no_drop\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::minigun_no_drop()"},
	{ "trigger": "watch_for_drop\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::watch_for_drop()"},
	{ "trigger": "get_random_powerup_name\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::get_random_powerup_name()"},
	{ "trigger": "get_regular_random_powerup_name\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::get_regular_random_powerup_name()"},
	{ "trigger": "add_zombie_powerup\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::add_zombie_powerup(${1:powerup_name}, ${2:model_name}, ${3:hint}, ${4:func_should_drop_with_regular_powerups}, ${5:only_affects_grabber}, ${6:any_team}, ${7:zombie_grabbable}, ${8:fx}, ${9:client_field_name}, ${10:time_name}, ${11:on_name}, ${12:clientfield_version = VERSION_SHIP}, ${13:player_specific = false})"},
	{ "trigger": "powerup_set_can_pick_up_in_last_stand\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::powerup_set_can_pick_up_in_last_stand(${1:powerup_name}, ${2:b_can_pick_up})"},
	{ "trigger": "powerup_set_prevent_pick_up_if_drinking\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::powerup_set_prevent_pick_up_if_drinking(${1:powerup_name}, ${2:b_prevent_pick_up})"},
	{ "trigger": "powerup_set_player_specific\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::powerup_set_player_specific(${1:powerup_name}, ${2:b_player_specific = POWERUP_FOR_SPECIFIC_PLAYER})"},
	{ "trigger": "powerup_set_statless_powerup\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::powerup_set_statless_powerup(${1:powerup_name})"},
	{ "trigger": "add_zombie_special_drop\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::add_zombie_special_drop(${1:powerup_name})"},
	{ "trigger": "include_zombie_powerup\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::include_zombie_powerup(${1:powerup_name})"},
	{ "trigger": "powerup_remove_from_regular_drops\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::powerup_remove_from_regular_drops(${1:powerup_name})"},
	{ "trigger": "powerup_round_start\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::powerup_round_start()"},
	{ "trigger": "powerup_drop\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::powerup_drop(${1:drop_point})"},
	{ "trigger": "specific_powerup_drop\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::specific_powerup_drop(${1:powerup_name}, ${2:drop_spot}, ${3:powerup_team}, ${4:powerup_location}, ${5:pickup_delay}, ${6:powerup_player}, ${7:b_stay_forever})"},
	{ "trigger": "special_powerup_drop\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::special_powerup_drop(${1:drop_point})"},
	{ "trigger": "powerup_setup\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::powerup_setup(${1:powerup_override}, ${2:powerup_team}, ${3:powerup_location}, ${4:powerup_player})"},
	{ "trigger": "special_drop_setup\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::special_drop_setup()"},
	{ "trigger": "powerup_zombie_grab_trigger_cleanup\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::powerup_zombie_grab_trigger_cleanup(${1:trigger})"},
	{ "trigger": "powerup_zombie_grab\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::powerup_zombie_grab(${1:powerup_team})"},
	{ "trigger": "powerup_grab\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::powerup_grab(${1:powerup_team})"},
	{ "trigger": "get_closest_window_repair\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::get_closest_window_repair(${1:windows}, ${2:origin})"},
	{ "trigger": "powerup_vo\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::powerup_vo(${1:type})"},
	{ "trigger": "powerup_wobble_fx\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::powerup_wobble_fx()"},
	{ "trigger": "powerup_wobble\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::powerup_wobble()"},
	{ "trigger": "powerup_show\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::powerup_show(${1:visible})"},
	{ "trigger": "powerup_timeout\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::powerup_timeout()"},
	{ "trigger": "powerup_delete\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::powerup_delete()"},
	{ "trigger": "powerup_delete_delayed\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::powerup_delete_delayed(${1:time})"},
	{ "trigger": "is_insta_kill_active\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::is_insta_kill_active()"},
	{ "trigger": "check_for_instakill\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::check_for_instakill(${1:player}, ${2:mod}, ${3:hit_location})"},
	{ "trigger": "point_doubler_on_hud\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::point_doubler_on_hud(${1:drop_item}, ${2:player_team})"},
	{ "trigger": "devil_dialog_delay\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::devil_dialog_delay()"},
	{ "trigger": "check_for_rare_drop_override\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::check_for_rare_drop_override(${1:pos})"},
	{ "trigger": "tesla_powerup_active\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::tesla_powerup_active()"},
	{ "trigger": "print_powerup_drop\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::print_powerup_drop(${1:powerup}, ${2:type})"},
	{ "trigger": "register_carpenter_node\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::register_carpenter_node(${1:node}, ${2:callback})"},
	{ "trigger": "is_carpenter_boards_upgraded\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::is_carpenter_boards_upgraded()"},
	{ "trigger": "func_should_never_drop\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::func_should_never_drop()"},
	{ "trigger": "func_should_always_drop\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::func_should_always_drop()"},
	{ "trigger": "powerup_move\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::powerup_move()"},
	{ "trigger": "powerup_emp\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::powerup_emp()"},
	{ "trigger": "get_powerups\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::get_powerups(${1:origin}, ${2:radius})"},
	{ "trigger": "should_award_stat\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::should_award_stat(${1:powerup_name})"},
	{ "trigger": "teller_withdrawl\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::teller_withdrawl(${1:powerup}, ${2:player})"},
	{ "trigger": "show_on_hud\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::show_on_hud(${1:player_team}, ${2:str_powerup})"},
	{ "trigger": "weapon_powerup\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::weapon_powerup(${1:ent_player}, ${2:time}, ${3:str_weapon}, ${4:allow_cycling = false})"},
	{ "trigger": "weapon_powerup_change\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::weapon_powerup_change(${1:ent_player}, ${2:str_gun_return_notify}, ${3:str_weapon})"},
	{ "trigger": "weapon_powerup_countdown\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::weapon_powerup_countdown(${1:ent_player}, ${2:str_gun_return_notify}, ${3:time}, ${4:str_weapon})"},
	{ "trigger": "weapon_powerup_replace\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::weapon_powerup_replace(${1:ent_player}, ${2:str_gun_return_notify}, ${3:str_weapon})"},
	{ "trigger": "weapon_powerup_remove\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::weapon_powerup_remove(${1:ent_player}, ${2:str_gun_return_notify}, ${3:str_weapon}, ${4:b_switch_back_weapon = true})"},
	{ "trigger": "weapon_watch_gunner_downed\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::weapon_watch_gunner_downed(${1:str_weapon})"},
	{ "trigger": "register_powerup\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::register_powerup(${1:str_powerup}, ${2:func_grab_powerup}, ${3:func_setup})"},
	{ "trigger": "_register_undefined_powerup\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::_register_undefined_powerup(${1:str_powerup})"},
	{ "trigger": "register_powerup_weapon\t#using scripts\\zm\\_zm_powerups;", "contents": "zm_powerups::register_powerup_weapon(${1:str_powerup}, ${2:func_countdown})"},
	{ "trigger": "register\t#using scripts\\shared\\weapons\\_trophy_system;", "contents": "trophy_system::register()"},
	{ "trigger": "createTrophySystemWatcher\t#using scripts\\shared\\weapons\\_trophy_system; self == player", "contents": "trophy_system::createTrophySystemWatcher()"},
	{ "trigger": "onTrophySystemSpawn\t#using scripts\\shared\\weapons\\_trophy_system; self == trophy system", "contents": "trophy_system::onTrophySystemSpawn(${1:watcher}, ${2:player})"},
	{ "trigger": "setReconModelDeployed\t#using scripts\\shared\\weapons\\_trophy_system; self == trophy system", "contents": "trophy_system::setReconModelDeployed()"},
	{ "trigger": "trophyWatchHack\t#using scripts\\shared\\weapons\\_trophy_system; self == trophy system", "contents": "trophy_system::trophyWatchHack()"},
	{ "trigger": "onTrophySystemSmashed\t#using scripts\\shared\\weapons\\_trophy_system; self == trophy system", "contents": "trophy_system::onTrophySystemSmashed(${1:attacker})"},
	{ "trigger": "trophyActive\t#using scripts\\shared\\weapons\\_trophy_system; self == trophy system", "contents": "trophy_system::trophyActive(${1:owner})"},
	{ "trigger": "projectileExplode\t#using scripts\\shared\\weapons\\_trophy_system; self == trophy owning player", "contents": "trophy_system::projectileExplode(${1:projectile}, ${2:trophy})"},
	{ "trigger": "trophyDestroyTacInsert\t#using scripts\\shared\\weapons\\_trophy_system; self == trophy system owner", "contents": "trophy_system::trophyDestroyTacInsert(${1:tacInsert}, ${2:trophy})"},
	{ "trigger": "trophySystemDetonate\t#using scripts\\shared\\weapons\\_trophy_system;", "contents": "trophy_system::trophySystemDetonate(${1:attacker}, ${2:weapon}, ${3:target})"},
	{ "trigger": "watchTrophySystemDamage\t#using scripts\\shared\\weapons\\_trophy_system; self == trophy system", "contents": "trophy_system::watchTrophySystemDamage(${1:watcher})"},
	{ "trigger": "ammo_scavenger\t#using scripts\\shared\\weapons\\_trophy_system;", "contents": "trophy_system::ammo_scavenger(${1:weapon})"},
	{ "trigger": "ammo_reset\t#using scripts\\shared\\weapons\\_trophy_system;", "contents": "trophy_system::ammo_reset()"},
	{ "trigger": "ammo_get\t#using scripts\\shared\\weapons\\_trophy_system;", "contents": "trophy_system::ammo_get(${1:weapon})"},
	{ "trigger": "ammo_weapon_pickup\t#using scripts\\shared\\weapons\\_trophy_system;", "contents": "trophy_system::ammo_weapon_pickup(${1:ammo})"},
	{ "trigger": "ammo_weapon_hacked\t#using scripts\\shared\\weapons\\_trophy_system;", "contents": "trophy_system::ammo_weapon_hacked(${1:ammo})"},
	{ "trigger": "gadget_servo_shortout_is_inuse\t#using scripts\\shared\\abilities\\gadgets\\_gadget_servo_shortout;", "contents": "_gadget_servo_shortout::gadget_servo_shortout_is_inuse(${1:slot})"},
	{ "trigger": "gadget_servo_shortout_is_flickering\t#using scripts\\shared\\abilities\\gadgets\\_gadget_servo_shortout;", "contents": "_gadget_servo_shortout::gadget_servo_shortout_is_flickering(${1:slot})"},
	{ "trigger": "gadget_servo_shortout_on_flicker\t#using scripts\\shared\\abilities\\gadgets\\_gadget_servo_shortout;", "contents": "_gadget_servo_shortout::gadget_servo_shortout_on_flicker(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_servo_shortout_on_give\t#using scripts\\shared\\abilities\\gadgets\\_gadget_servo_shortout;", "contents": "_gadget_servo_shortout::gadget_servo_shortout_on_give(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_servo_shortout_on_take\t#using scripts\\shared\\abilities\\gadgets\\_gadget_servo_shortout;", "contents": "_gadget_servo_shortout::gadget_servo_shortout_on_take(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_servo_shortout_on_connect\t#using scripts\\shared\\abilities\\gadgets\\_gadget_servo_shortout;", "contents": "_gadget_servo_shortout::gadget_servo_shortout_on_connect()"},
	{ "trigger": "gadget_servo_shortout_on\t#using scripts\\shared\\abilities\\gadgets\\_gadget_servo_shortout;", "contents": "_gadget_servo_shortout::gadget_servo_shortout_on(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_servo_shortout_off\t#using scripts\\shared\\abilities\\gadgets\\_gadget_servo_shortout;", "contents": "_gadget_servo_shortout::gadget_servo_shortout_off(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_servo_shortout_is_primed\t#using scripts\\shared\\abilities\\gadgets\\_gadget_servo_shortout;", "contents": "_gadget_servo_shortout::gadget_servo_shortout_is_primed(${1:slot}, ${2:weapon})"},
	{ "trigger": "checkDvarUpdates\t#using scripts\\shared\\weapons\\_tabun;", "contents": "tabun::checkDvarUpdates()"},
	{ "trigger": "watchTabunGrenadeDetonation\t#using scripts\\shared\\weapons\\_tabun;", "contents": "tabun::watchTabunGrenadeDetonation(${1:owner})"},
	{ "trigger": "damageEffectArea\t#using scripts\\shared\\weapons\\_tabun;", "contents": "tabun::damageEffectArea(${1:owner}, ${2:position}, ${3:radius}, ${4:height}, ${5:killCamEnt})"},
	{ "trigger": "damageInPoisonArea\t#using scripts\\shared\\weapons\\_tabun; self == player in poison area", "contents": "tabun::damageInPoisonArea(${1:gasEffectArea}, ${2:killcament}, ${3:trace}, ${4:position})"},
	{ "trigger": "deleteEntOnOwnerDeath\t#using scripts\\shared\\weapons\\_tabun;", "contents": "tabun::deleteEntOnOwnerDeath(${1:owner})"},
	{ "trigger": "watch_death\t#using scripts\\shared\\weapons\\_tabun; self == player", "contents": "tabun::watch_death()"},
	{ "trigger": "hide_hud\t#using scripts\\shared\\weapons\\_tabun; self == player", "contents": "tabun::hide_hud()"},
	{ "trigger": "show_hud\t#using scripts\\shared\\weapons\\_tabun; self == player", "contents": "tabun::show_hud()"},
	{ "trigger": "generateLocations\t#using scripts\\shared\\weapons\\_tabun;", "contents": "tabun::generateLocations(${1:position}, ${2:owner})"},
	{ "trigger": "singleLocation\t#using scripts\\shared\\weapons\\_tabun;", "contents": "tabun::singleLocation(${1:position}, ${2:owner})"},
	{ "trigger": "hitPos\t#using scripts\\shared\\weapons\\_tabun;", "contents": "tabun::hitPos(${1:start}, ${2:end}, ${3:color})"},
	{ "trigger": "spawnAllLocs\t#using scripts\\shared\\weapons\\_tabun;", "contents": "tabun::spawnAllLocs(${1:owner}, ${2:startPos})"},
	{ "trigger": "playTabunSound\t#using scripts\\shared\\weapons\\_tabun;", "contents": "tabun::playTabunSound(${1:position})"},
	{ "trigger": "setUpTabunFx\t#using scripts\\shared\\weapons\\_tabun;", "contents": "tabun::setUpTabunFx(${1:owner}, ${2:locations}, ${3:count})"},
	{ "trigger": "getCenterOfLocations\t#using scripts\\shared\\weapons\\_tabun;", "contents": "tabun::getCenterOfLocations(${1:locations})"},
	{ "trigger": "getcenter\t#using scripts\\shared\\weapons\\_tabun;", "contents": "tabun::getcenter(${1:locations})"},
	{ "trigger": "grab_fire_sale\t#using scripts\\zm\\_zm_powerup_fire_sale;", "contents": "zm_powerup_fire_sale::grab_fire_sale(${1:player})"},
	{ "trigger": "start_fire_sale\t#using scripts\\zm\\_zm_powerup_fire_sale;", "contents": "zm_powerup_fire_sale::start_fire_sale(${1:item})"},
	{ "trigger": "toggle_fire_sale_on\t#using scripts\\zm\\_zm_powerup_fire_sale;", "contents": "zm_powerup_fire_sale::toggle_fire_sale_on()"},
	{ "trigger": "apply_fire_sale_to_chest\t#using scripts\\zm\\_zm_powerup_fire_sale;", "contents": "zm_powerup_fire_sale::apply_fire_sale_to_chest()"},
	{ "trigger": "remove_temp_chest\t#using scripts\\zm\\_zm_powerup_fire_sale;", "contents": "zm_powerup_fire_sale::remove_temp_chest(${1:chest_index})"},
	{ "trigger": "func_should_drop_fire_sale\t#using scripts\\zm\\_zm_powerup_fire_sale;", "contents": "zm_powerup_fire_sale::func_should_drop_fire_sale()"},
	{ "trigger": "sndFiresaleMusic_Start\t#using scripts\\zm\\_zm_powerup_fire_sale;", "contents": "zm_powerup_fire_sale::sndFiresaleMusic_Start()"},
	{ "trigger": "sndFiresaleMusic_Stop\t#using scripts\\zm\\_zm_powerup_fire_sale;", "contents": "zm_powerup_fire_sale::sndFiresaleMusic_Stop()"},
	{ "trigger": "on_player_connect\t#using scripts\\zm\\gametypes\\_damagefeedback;", "contents": "damagefeedback::on_player_connect()"},
	{ "trigger": "should_play_sound\t#using scripts\\zm\\gametypes\\_damagefeedback;", "contents": "damagefeedback::should_play_sound(${1:mod})"},
	{ "trigger": "updateDamageFeedback\t#using scripts\\zm\\gametypes\\_damagefeedback;", "contents": "damagefeedback::updateDamageFeedback(${1:mod}, ${2:inflictor}, ${3:perkFeedback})"},
	{ "trigger": "playHitSound\t#using scripts\\zm\\gametypes\\_damagefeedback;", "contents": "damagefeedback::playHitSound(${1:mod}, ${2:alert})"},
	{ "trigger": "updateSpecialDamageFeedback\t#using scripts\\zm\\gametypes\\_damagefeedback;", "contents": "damagefeedback::updateSpecialDamageFeedback(${1:hitEnt})"},
	{ "trigger": "sendHitSpecialEventAtFrameEnd\t#using scripts\\zm\\gametypes\\_damagefeedback;", "contents": "damagefeedback::sendHitSpecialEventAtFrameEnd(${1:hitEnt})"},
	{ "trigger": "on_player_connect\t#using scripts\\shared\\damagefeedback_shared;", "contents": "damagefeedback::on_player_connect()"},
	{ "trigger": "should_play_sound\t#using scripts\\shared\\damagefeedback_shared;", "contents": "damagefeedback::should_play_sound(${1:mod})"},
	{ "trigger": "update\t#using scripts\\shared\\damagefeedback_shared;", "contents": "damagefeedback::update(${1:mod}, ${2:inflictor}, ${3:perkFeedback}, ${4:weapon}, ${5:victim}, ${6:psOffsetTime}, ${7:sHitLoc})"},
	{ "trigger": "damage_feedback_get_stage\t#using scripts\\shared\\damagefeedback_shared;", "contents": "damagefeedback::damage_feedback_get_stage(${1:victim})"},
	{ "trigger": "damage_feedback_get_dead\t#using scripts\\shared\\damagefeedback_shared;", "contents": "damagefeedback::damage_feedback_get_dead(${1:victim}, ${2:mod}, ${3:weapon}, ${4:stage})"},
	{ "trigger": "damage_feedback_growth\t#using scripts\\shared\\damagefeedback_shared;", "contents": "damagefeedback::damage_feedback_growth(${1:victim}, ${2:mod}, ${3:weapon})"},
	{ "trigger": "kill_hitmarker_fade\t#using scripts\\shared\\damagefeedback_shared;", "contents": "damagefeedback::kill_hitmarker_fade()"},
	{ "trigger": "update_override\t#using scripts\\shared\\damagefeedback_shared;", "contents": "damagefeedback::update_override(${1:icon}, ${2:sound}, ${3:additional_icon})"},
	{ "trigger": "update_special\t#using scripts\\shared\\damagefeedback_shared;", "contents": "damagefeedback::update_special(${1:hitEnt})"},
	{ "trigger": "send_hit_special_event_at_frame_end\t#using scripts\\shared\\damagefeedback_shared;", "contents": "damagefeedback::send_hit_special_event_at_frame_end(${1:hitEnt})"},
	{ "trigger": "doDamageFeedback\t#using scripts\\shared\\damagefeedback_shared;", "contents": "damagefeedback::doDamageFeedback(${1:weapon}, ${2:eInflictor}, ${3:iDamage}, ${4:sMeansOfDeath})"},
	{ "trigger": "isTacticalHitMarker\t#using scripts\\shared\\damagefeedback_shared;", "contents": "damagefeedback::isTacticalHitMarker(${1:weapon}, ${2:sMeansOfDeath}, ${3:iDamage})"},
	{ "trigger": "defaultRole\t#using scripts\\shared\\vehicles\\_raps;", "contents": "raps::defaultRole()"},
	{ "trigger": "state_scripted_update\t#using scripts\\shared\\vehicles\\_raps;", "contents": "raps::state_scripted_update(${1:params})"},
	{ "trigger": "state_death_update\t#using scripts\\shared\\vehicles\\_raps;", "contents": "raps::state_death_update(${1:params})"},
	{ "trigger": "state_emped_update\t#using scripts\\shared\\vehicles\\_raps;", "contents": "raps::state_emped_update(${1:params})"},
	{ "trigger": "state_combat_update\t#using scripts\\shared\\vehicles\\_raps;", "contents": "raps::state_combat_update(${1:params})"},
	{ "trigger": "prevent_stuck\t#using scripts\\shared\\vehicles\\_raps;", "contents": "raps::prevent_stuck()"},
	{ "trigger": "check_detonation_dist\t#using scripts\\shared\\vehicles\\_raps;", "contents": "raps::check_detonation_dist(${1:origin}, ${2:enemy})"},
	{ "trigger": "jump_detonate\t#using scripts\\shared\\vehicles\\_raps;", "contents": "raps::jump_detonate()"},
	{ "trigger": "detonate\t#using scripts\\shared\\vehicles\\_raps;", "contents": "raps::detonate(${1:attacker})"},
	{ "trigger": "detonate_damage_monitored\t#using scripts\\shared\\vehicles\\_raps;", "contents": "raps::detonate_damage_monitored(${1:enemy}, ${2:weapon})"},
	{ "trigger": "detonation_monitor\t#using scripts\\shared\\vehicles\\_raps;", "contents": "raps::detonation_monitor()"},
	{ "trigger": "raps_audio_cleanup\t#using scripts\\shared\\vehicles\\_raps;", "contents": "raps::raps_audio_cleanup(${1:owner})"},
	{ "trigger": "try_detonate\t#using scripts\\shared\\vehicles\\_raps;", "contents": "raps::try_detonate()"},
	{ "trigger": "raps_get_target_position\t#using scripts\\shared\\vehicles\\_raps;", "contents": "raps::raps_get_target_position()"},
	{ "trigger": "path_update_interrupt\t#using scripts\\shared\\vehicles\\_raps;", "contents": "raps::path_update_interrupt()"},
	{ "trigger": "collision_fx\t#using scripts\\shared\\vehicles\\_raps;", "contents": "raps::collision_fx(${1:normal})"},
	{ "trigger": "nudge_collision\t#using scripts\\shared\\vehicles\\_raps;", "contents": "raps::nudge_collision()"},
	{ "trigger": "raps_AllowFriendlyFireDamage\t#using scripts\\shared\\vehicles\\_raps;", "contents": "raps::raps_AllowFriendlyFireDamage(${1:eInflictor}, ${2:eAttacker}, ${3:sMeansOfDeath}, ${4:weapon})"},
	{ "trigger": "detonate_sides\t#using scripts\\shared\\vehicles\\_raps;", "contents": "raps::detonate_sides(${1:eInflictor})"},
	{ "trigger": "raps_callback_damage\t#using scripts\\shared\\vehicles\\_raps;", "contents": "raps::raps_callback_damage(${1:eInflictor}, ${2:eAttacker}, ${3:iDamage}, ${4:iDFlags}, ${5:sMeansOfDeath}, ${6:weapon}, ${7:vPoint}, ${8:vDir}, ${9:sHitLoc}, ${10:vDamageOrigin}, ${11:psOffsetTime}, ${12:damageFromUnderneath}, ${13:modelIndex}, ${14:partName}, ${15:vSurfaceNormal})"},
	{ "trigger": "slow_raps_trigger\t#using scripts\\shared\\vehicles\\_raps;", "contents": "raps::slow_raps_trigger()"},
	{ "trigger": "slow_raps\t#using scripts\\shared\\vehicles\\_raps;", "contents": "raps::slow_raps(${1:trigger})"},
	{ "trigger": "force_get_enemies\t#using scripts\\shared\\vehicles\\_raps;", "contents": "raps::force_get_enemies()"},
	{ "trigger": "sndFunctions\t#using scripts\\shared\\vehicles\\_raps;", "contents": "raps::sndFunctions()"},
	{ "trigger": "drivableRapsInAir\t#using scripts\\shared\\vehicles\\_raps;", "contents": "raps::drivableRapsInAir()"},
	{ "trigger": "raps_in_air_audio\t#using scripts\\shared\\vehicles\\_raps; need to move to client at some point", "contents": "raps::raps_in_air_audio()"},
	{ "trigger": "raps_spawn_audio\t#using scripts\\shared\\vehicles\\_raps; need to move to client at some point", "contents": "raps::raps_spawn_audio()"},
	{ "trigger": "isDrivablePlayerVehicle\t#using scripts\\shared\\vehicles\\_raps;", "contents": "raps::isDrivablePlayerVehicle()"},
	{ "trigger": "do_death_fx\t#using scripts\\shared\\vehicles\\_raps;", "contents": "raps::do_death_fx()"},
	{ "trigger": "UpdateTimerPausedness\t#using scripts\\zm\\gametypes\\_hostmigration;", "contents": "hostmigration::UpdateTimerPausedness()"},
	{ "trigger": "Callback_HostMigrationSave\t#using scripts\\zm\\gametypes\\_hostmigration;", "contents": "hostmigration::Callback_HostMigrationSave()"},
	{ "trigger": "Callback_PreHostMigrationSave\t#using scripts\\zm\\gametypes\\_hostmigration;", "contents": "hostmigration::Callback_PreHostMigrationSave()"},
	{ "trigger": "pauseTimer\t#using scripts\\zm\\gametypes\\_hostmigration;", "contents": "hostmigration::pauseTimer()"},
	{ "trigger": "resumeTimer\t#using scripts\\zm\\gametypes\\_hostmigration;", "contents": "hostmigration::resumeTimer()"},
	{ "trigger": "lockTimer\t#using scripts\\zm\\gametypes\\_hostmigration;", "contents": "hostmigration::lockTimer()"},
	{ "trigger": "Callback_HostMigration\t#using scripts\\zm\\gametypes\\_hostmigration;", "contents": "hostmigration::Callback_HostMigration()"},
	{ "trigger": "post_migration_become_vulnerable\t#using scripts\\zm\\gametypes\\_hostmigration;", "contents": "hostmigration::post_migration_become_vulnerable()"},
	{ "trigger": "post_migration_invulnerability\t#using scripts\\zm\\gametypes\\_hostmigration;", "contents": "hostmigration::post_migration_invulnerability()"},
	{ "trigger": "host_migration_respawn\t#using scripts\\zm\\gametypes\\_hostmigration;", "contents": "hostmigration::host_migration_respawn()"},
	{ "trigger": "matchStartTimerConsole_Internal\t#using scripts\\zm\\gametypes\\_hostmigration;", "contents": "hostmigration::matchStartTimerConsole_Internal(${1:countTime}, ${2:matchStartTimer})"},
	{ "trigger": "matchStartTimerConsole\t#using scripts\\zm\\gametypes\\_hostmigration;", "contents": "hostmigration::matchStartTimerConsole(${1:type}, ${2:duration})"},
	{ "trigger": "hostMigrationWait\t#using scripts\\zm\\gametypes\\_hostmigration;", "contents": "hostmigration::hostMigrationWait()"},
	{ "trigger": "hostMigrationWaitForPlayers\t#using scripts\\zm\\gametypes\\_hostmigration;", "contents": "hostmigration::hostMigrationWaitForPlayers()"},
	{ "trigger": "hostMigrationTimerThink_Internal\t#using scripts\\zm\\gametypes\\_hostmigration;", "contents": "hostmigration::hostMigrationTimerThink_Internal()"},
	{ "trigger": "hostMigrationTimerThink\t#using scripts\\zm\\gametypes\\_hostmigration;", "contents": "hostmigration::hostMigrationTimerThink()"},
	{ "trigger": "waitTillHostMigrationDone\t#using scripts\\zm\\gametypes\\_hostmigration;", "contents": "hostmigration::waitTillHostMigrationDone()"},
	{ "trigger": "waitTillHostMigrationStarts\t#using scripts\\zm\\gametypes\\_hostmigration;", "contents": "hostmigration::waitTillHostMigrationStarts(${1:duration})"},
	{ "trigger": "waitLongDurationWithHostMigrationPause\t#using scripts\\zm\\gametypes\\_hostmigration;", "contents": "hostmigration::waitLongDurationWithHostMigrationPause(${1:duration})"},
	{ "trigger": "waitLongDurationWithGameEndTimeUpdate\t#using scripts\\zm\\gametypes\\_hostmigration;", "contents": "hostmigration::waitLongDurationWithGameEndTimeUpdate(${1:duration})"},
	{ "trigger": "find_alternate_player_place\t#using scripts\\zm\\gametypes\\_hostmigration;", "contents": "hostmigration::find_alternate_player_place(${1:v_origin}, ${2:min_radius}, ${3:max_radius}, ${4:max_height}, ${5:ignore_targetted_nodes})"},
	{ "trigger": "hostmigration_put_player_in_better_place\t#using scripts\\zm\\gametypes\\_hostmigration;", "contents": "hostmigration::hostmigration_put_player_in_better_place()"},
	{ "trigger": "debug_script_structs\t#using scripts\\shared\\hostmigration_shared;", "contents": "hostmigration::debug_script_structs()"},
	{ "trigger": "UpdateTimerPausedness\t#using scripts\\shared\\hostmigration_shared;", "contents": "hostmigration::UpdateTimerPausedness()"},
	{ "trigger": "pauseTimer\t#using scripts\\shared\\hostmigration_shared;", "contents": "hostmigration::pauseTimer()"},
	{ "trigger": "resumeTimer\t#using scripts\\shared\\hostmigration_shared;", "contents": "hostmigration::resumeTimer()"},
	{ "trigger": "lockTimer\t#using scripts\\shared\\hostmigration_shared;", "contents": "hostmigration::lockTimer()"},
	{ "trigger": "matchStartTimerConsole_Internal\t#using scripts\\shared\\hostmigration_shared;", "contents": "hostmigration::matchStartTimerConsole_Internal(${1:countTime}, ${2:matchStartTimer})"},
	{ "trigger": "matchStartTimerConsole\t#using scripts\\shared\\hostmigration_shared;", "contents": "hostmigration::matchStartTimerConsole(${1:type}, ${2:duration})"},
	{ "trigger": "hostMigrationWait\t#using scripts\\shared\\hostmigration_shared;", "contents": "hostmigration::hostMigrationWait()"},
	{ "trigger": "waittillHostMigrationCountDown\t#using scripts\\shared\\hostmigration_shared;", "contents": "hostmigration::waittillHostMigrationCountDown()"},
	{ "trigger": "hostMigrationWaitForPlayers\t#using scripts\\shared\\hostmigration_shared;", "contents": "hostmigration::hostMigrationWaitForPlayers()"},
	{ "trigger": "hostMigrationTimerThink_Internal\t#using scripts\\shared\\hostmigration_shared;", "contents": "hostmigration::hostMigrationTimerThink_Internal()"},
	{ "trigger": "hostMigrationTimerThink\t#using scripts\\shared\\hostmigration_shared;", "contents": "hostmigration::hostMigrationTimerThink()"},
	{ "trigger": "waitTillHostMigrationDone\t#using scripts\\shared\\hostmigration_shared;", "contents": "hostmigration::waitTillHostMigrationDone()"},
	{ "trigger": "waitTillHostMigrationStarts\t#using scripts\\shared\\hostmigration_shared;", "contents": "hostmigration::waitTillHostMigrationStarts(${1:duration})"},
	{ "trigger": "waitLongDurationWithHostMigrationPause\t#using scripts\\shared\\hostmigration_shared;", "contents": "hostmigration::waitLongDurationWithHostMigrationPause(${1:duration})"},
	{ "trigger": "waitLongDurationWithHostMigrationPauseEMP\t#using scripts\\shared\\hostmigration_shared;", "contents": "hostmigration::waitLongDurationWithHostMigrationPauseEMP(${1:duration})"},
	{ "trigger": "waitLongDurationWithGameEndTimeUpdate\t#using scripts\\shared\\hostmigration_shared;", "contents": "hostmigration::waitLongDurationWithGameEndTimeUpdate(${1:duration})"},
	{ "trigger": "MigrationAwareWait\t#using scripts\\shared\\hostmigration_shared;", "contents": "hostmigration::MigrationAwareWait(${1:durationMs})"},
	{ "trigger": "onSpawn\t#using scripts\\shared\\weapons\\_ballistic_knife;", "contents": "ballistic_knife::onSpawn(${1:watcher}, ${2:player})"},
	{ "trigger": "watch_shutdown\t#using scripts\\shared\\weapons\\_ballistic_knife; self == retrievable_model", "contents": "ballistic_knife::watch_shutdown()"},
	{ "trigger": "onSpawnRetrieveTrigger\t#using scripts\\shared\\weapons\\_ballistic_knife;", "contents": "ballistic_knife::onSpawnRetrieveTrigger(${1:watcher}, ${2:player})"},
	{ "trigger": "watch_use_trigger\t#using scripts\\shared\\weapons\\_ballistic_knife; self == retrievable_model", "contents": "ballistic_knife::watch_use_trigger(${1:trigger}, ${2:model}, ${3:callback}, ${4:playerSoundOnUse}, ${5:npcSoundOnUse})"},
	{ "trigger": "pick_up\t#using scripts\\shared\\weapons\\_ballistic_knife; self == retrievable_model", "contents": "ballistic_knife::pick_up(${1:player})"},
	{ "trigger": "destroy_ent\t#using scripts\\shared\\weapons\\_ballistic_knife;", "contents": "ballistic_knife::destroy_ent()"},
	{ "trigger": "dropKnivesToGround\t#using scripts\\shared\\weapons\\_ballistic_knife;", "contents": "ballistic_knife::dropKnivesToGround()"},
	{ "trigger": "dropToGround\t#using scripts\\shared\\weapons\\_ballistic_knife;", "contents": "ballistic_knife::dropToGround(${1:origin}, ${2:radius})"},
	{ "trigger": "updateRetrieveTrigger\t#using scripts\\shared\\weapons\\_ballistic_knife;", "contents": "ballistic_knife::updateRetrieveTrigger()"},
	{ "trigger": "createBallisticKnifeWatcher\t#using scripts\\shared\\weapons\\_ballistic_knife; self == player", "contents": "ballistic_knife::createBallisticKnifeWatcher()"},
	{ "trigger": "registerDialogGroup\t#using scripts\\zm\\gametypes\\_globallogic_audio;", "contents": "globallogic_audio::registerDialogGroup(${1:group}, ${2:skipIfCurrentlyPlayingGroup})"},
	{ "trigger": "sndStartMusicSystem\t#using scripts\\zm\\gametypes\\_globallogic_audio;", "contents": "globallogic_audio::sndStartMusicSystem()"},
	{ "trigger": "suspenseMusicForPlayer\t#using scripts\\zm\\gametypes\\_globallogic_audio;", "contents": "globallogic_audio::suspenseMusicForPlayer()"},
	{ "trigger": "suspenseMusic\t#using scripts\\zm\\gametypes\\_globallogic_audio;", "contents": "globallogic_audio::suspenseMusic(${1:random})"},
	{ "trigger": "leaderDialogForOtherTeams\t#using scripts\\zm\\gametypes\\_globallogic_audio;", "contents": "globallogic_audio::leaderDialogForOtherTeams(${1:dialog}, ${2:skip_team}, ${3:squad_dialog})"},
	{ "trigger": "announceRoundWinner\t#using scripts\\zm\\gametypes\\_globallogic_audio;", "contents": "globallogic_audio::announceRoundWinner(${1:winner}, ${2:delay})"},
	{ "trigger": "announceGameWinner\t#using scripts\\zm\\gametypes\\_globallogic_audio;", "contents": "globallogic_audio::announceGameWinner(${1:winner}, ${2:delay})"},
	{ "trigger": "doFlameAudio\t#using scripts\\zm\\gametypes\\_globallogic_audio;", "contents": "globallogic_audio::doFlameAudio()"},
	{ "trigger": "leaderDialog\t#using scripts\\zm\\gametypes\\_globallogic_audio;", "contents": "globallogic_audio::leaderDialog(${1:dialog}, ${2:team}, ${3:group}, ${4:excludeList}, ${5:squadDialog})"},
	{ "trigger": "leaderDialogAllTeams\t#using scripts\\zm\\gametypes\\_globallogic_audio;", "contents": "globallogic_audio::leaderDialogAllTeams(${1:dialogs}, ${2:group}, ${3:excludeList})"},
	{ "trigger": "flushDialog\t#using scripts\\zm\\gametypes\\_globallogic_audio;", "contents": "globallogic_audio::flushDialog()"},
	{ "trigger": "flushDialogOnPlayer\t#using scripts\\zm\\gametypes\\_globallogic_audio;", "contents": "globallogic_audio::flushDialogOnPlayer()"},
	{ "trigger": "flushGroupDialog\t#using scripts\\zm\\gametypes\\_globallogic_audio;", "contents": "globallogic_audio::flushGroupDialog(${1:group})"},
	{ "trigger": "flushGroupDialogOnPlayer\t#using scripts\\zm\\gametypes\\_globallogic_audio;", "contents": "globallogic_audio::flushGroupDialogOnPlayer(${1:group})"},
	{ "trigger": "addGroupDialogToPlayer\t#using scripts\\zm\\gametypes\\_globallogic_audio;", "contents": "globallogic_audio::addGroupDialogToPlayer(${1:dialog}, ${2:group})"},
	{ "trigger": "testDialogQueue\t#using scripts\\zm\\gametypes\\_globallogic_audio;", "contents": "globallogic_audio::testDialogQueue(${1:group})"},
	{ "trigger": "leaderDialogOnPlayer\t#using scripts\\zm\\gametypes\\_globallogic_audio;", "contents": "globallogic_audio::leaderDialogOnPlayer(${1:dialog}, ${2:group})"},
	{ "trigger": "waitForSound\t#using scripts\\zm\\gametypes\\_globallogic_audio;", "contents": "globallogic_audio::waitForSound(${1:sound}, ${2:extraTime})"},
	{ "trigger": "playLeaderDialogOnPlayer\t#using scripts\\zm\\gametypes\\_globallogic_audio;", "contents": "globallogic_audio::playLeaderDialogOnPlayer(${1:dialog})"},
	{ "trigger": "isTeamWinning\t#using scripts\\zm\\gametypes\\_globallogic_audio;", "contents": "globallogic_audio::isTeamWinning(${1:checkTeam})"},
	{ "trigger": "announceTeamIsWinning\t#using scripts\\zm\\gametypes\\_globallogic_audio;", "contents": "globallogic_audio::announceTeamIsWinning()"},
	{ "trigger": "musicController\t#using scripts\\zm\\gametypes\\_globallogic_audio;", "contents": "globallogic_audio::musicController()"},
	{ "trigger": "musicTimesOut\t#using scripts\\zm\\gametypes\\_globallogic_audio;", "contents": "globallogic_audio::musicTimesOut()"},
	{ "trigger": "actionMusicSet\t#using scripts\\zm\\gametypes\\_globallogic_audio;", "contents": "globallogic_audio::actionMusicSet()"},
	{ "trigger": "play_2d_on_team\t#using scripts\\zm\\gametypes\\_globallogic_audio;", "contents": "globallogic_audio::play_2d_on_team(${1:alias}, ${2:team})"},
	{ "trigger": "set_music_on_team\t#using scripts\\zm\\gametypes\\_globallogic_audio;", "contents": "globallogic_audio::set_music_on_team(${1:state}, ${2:team}, ${3:save_state}, ${4:return_state}, ${5:wait_time})"},
	{ "trigger": "set_music_on_player\t#using scripts\\zm\\gametypes\\_globallogic_audio;", "contents": "globallogic_audio::set_music_on_player(${1:state}, ${2:save_state}, ${3:return_state}, ${4:wait_time})"},
	{ "trigger": "return_music_state_player\t#using scripts\\zm\\gametypes\\_globallogic_audio;", "contents": "globallogic_audio::return_music_state_player(${1:wait_time})"},
	{ "trigger": "return_music_state_team\t#using scripts\\zm\\gametypes\\_globallogic_audio;", "contents": "globallogic_audio::return_music_state_team(${1:team}, ${2:wait_time})"},
	{ "trigger": "set_next_music_state\t#using scripts\\zm\\gametypes\\_globallogic_audio;", "contents": "globallogic_audio::set_next_music_state(${1:nextstate}, ${2:wait_time})"},
	{ "trigger": "getRoundSwitchDialog\t#using scripts\\zm\\gametypes\\_globallogic_audio;", "contents": "globallogic_audio::getRoundSwitchDialog(${1:switchType})"},
	{ "trigger": "post_match_snapshot_watcher\t#using scripts\\zm\\gametypes\\_globallogic_audio;", "contents": "globallogic_audio::post_match_snapshot_watcher()"},
	{ "trigger": "gadget_forced_malfunction_is_inuse\t#using scripts\\shared\\abilities\\gadgets\\_gadget_forced_malfunction;", "contents": "_gadget_forced_malfunction::gadget_forced_malfunction_is_inuse(${1:slot})"},
	{ "trigger": "gadget_forced_malfunction_is_flickering\t#using scripts\\shared\\abilities\\gadgets\\_gadget_forced_malfunction;", "contents": "_gadget_forced_malfunction::gadget_forced_malfunction_is_flickering(${1:slot})"},
	{ "trigger": "gadget_forced_malfunction_on_flicker\t#using scripts\\shared\\abilities\\gadgets\\_gadget_forced_malfunction;", "contents": "_gadget_forced_malfunction::gadget_forced_malfunction_on_flicker(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_forced_malfunction_on_give\t#using scripts\\shared\\abilities\\gadgets\\_gadget_forced_malfunction;", "contents": "_gadget_forced_malfunction::gadget_forced_malfunction_on_give(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_forced_malfunction_on_take\t#using scripts\\shared\\abilities\\gadgets\\_gadget_forced_malfunction;", "contents": "_gadget_forced_malfunction::gadget_forced_malfunction_on_take(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_forced_malfunction_on_connect\t#using scripts\\shared\\abilities\\gadgets\\_gadget_forced_malfunction;", "contents": "_gadget_forced_malfunction::gadget_forced_malfunction_on_connect()"},
	{ "trigger": "gadget_forced_malfunction_on\t#using scripts\\shared\\abilities\\gadgets\\_gadget_forced_malfunction;", "contents": "_gadget_forced_malfunction::gadget_forced_malfunction_on(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_forced_malfunction_off\t#using scripts\\shared\\abilities\\gadgets\\_gadget_forced_malfunction;", "contents": "_gadget_forced_malfunction::gadget_forced_malfunction_off(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_forced_malfunction_is_primed\t#using scripts\\shared\\abilities\\gadgets\\_gadget_forced_malfunction;", "contents": "_gadget_forced_malfunction::gadget_forced_malfunction_is_primed(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_security_breach_is_inuse\t#using scripts\\shared\\abilities\\gadgets\\_gadget_security_breach;", "contents": "_gadget_security_breach::gadget_security_breach_is_inuse(${1:slot})"},
	{ "trigger": "gadget_security_breach_is_flickering\t#using scripts\\shared\\abilities\\gadgets\\_gadget_security_breach;", "contents": "_gadget_security_breach::gadget_security_breach_is_flickering(${1:slot})"},
	{ "trigger": "gadget_security_breach_on_flicker\t#using scripts\\shared\\abilities\\gadgets\\_gadget_security_breach;", "contents": "_gadget_security_breach::gadget_security_breach_on_flicker(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_security_breach_on_give\t#using scripts\\shared\\abilities\\gadgets\\_gadget_security_breach;", "contents": "_gadget_security_breach::gadget_security_breach_on_give(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_security_breach_on_take\t#using scripts\\shared\\abilities\\gadgets\\_gadget_security_breach;", "contents": "_gadget_security_breach::gadget_security_breach_on_take(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_security_breach_on_connect\t#using scripts\\shared\\abilities\\gadgets\\_gadget_security_breach;", "contents": "_gadget_security_breach::gadget_security_breach_on_connect()"},
	{ "trigger": "gadget_security_breach_on\t#using scripts\\shared\\abilities\\gadgets\\_gadget_security_breach;", "contents": "_gadget_security_breach::gadget_security_breach_on(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_security_breach_off\t#using scripts\\shared\\abilities\\gadgets\\_gadget_security_breach;", "contents": "_gadget_security_breach::gadget_security_breach_off(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_security_breach_is_primed\t#using scripts\\shared\\abilities\\gadgets\\_gadget_security_breach;", "contents": "_gadget_security_breach::gadget_security_breach_is_primed(${1:slot}, ${2:weapon})"},
	{ "trigger": "watch_bolt_detonation\t#using scripts\\shared\\weapons\\_pineapple_gun; self == explosive_bolt entity", "contents": "pineapple_gun::watch_bolt_detonation(${1:owner})"},
	{ "trigger": "result\t#using scripts\\zm\\aats\\_zm_aat_turned;", "contents": "zm_aat_turned::result(${1:death}, ${2:attacker}, ${3:mod}, ${4:weapon})"},
	{ "trigger": "turned_local_blast\t#using scripts\\zm\\aats\\_zm_aat_turned;", "contents": "zm_aat_turned::turned_local_blast(${1:attacker})"},
	{ "trigger": "turned_zombie_validation\t#using scripts\\zm\\aats\\_zm_aat_turned;", "contents": "zm_aat_turned::turned_zombie_validation()"},
	{ "trigger": "zombie_death_time_limit\t#using scripts\\zm\\aats\\_zm_aat_turned;", "contents": "zm_aat_turned::zombie_death_time_limit(${1:e_attacker})"},
	{ "trigger": "zombie_kill_tracker\t#using scripts\\zm\\aats\\_zm_aat_turned;", "contents": "zm_aat_turned::zombie_kill_tracker(${1:e_attacker})"},
	{ "trigger": "zombie_death_gib\t#using scripts\\zm\\aats\\_zm_aat_turned;", "contents": "zm_aat_turned::zombie_death_gib(${1:e_attacker})"},
	{ "trigger": "check_annihilator_death\t#using scripts\\zm\\_zm_weap_annihilator; self = zombie", "contents": "zm_weap_annihilator::check_annihilator_death(${1:attacker})"},
	{ "trigger": "start_timer\t#using scripts\\zm\\_zm_timer;", "contents": "zm_timer::start_timer(${1:time}, ${2:stop_notify})"},
	{ "trigger": "wait_for_stop_notify\t#using scripts\\zm\\_zm_timer;", "contents": "zm_timer::wait_for_stop_notify(${1:stop_notify})"},
	{ "trigger": "update_hud_position\t#using scripts\\zm\\_zm_timer;", "contents": "zm_timer::update_hud_position()"},
	{ "trigger": "defaultRole\t#using scripts\\shared\\vehicles\\_glaive;", "contents": "glaive::defaultRole()"},
	{ "trigger": "should_go_to_owner\t#using scripts\\shared\\vehicles\\_glaive;", "contents": "glaive::should_go_to_owner()"},
	{ "trigger": "should_go_to_near_owner\t#using scripts\\shared\\vehicles\\_glaive;", "contents": "glaive::should_go_to_near_owner()"},
	{ "trigger": "state_combat_enter\t#using scripts\\shared\\vehicles\\_glaive;", "contents": "glaive::state_combat_enter(${1:params})"},
	{ "trigger": "state_combat_update\t#using scripts\\shared\\vehicles\\_glaive;", "contents": "glaive::state_combat_update(${1:params})"},
	{ "trigger": "check_glaive_playable_area_conditions\t#using scripts\\shared\\vehicles\\_glaive;", "contents": "glaive::check_glaive_playable_area_conditions()"},
	{ "trigger": "go_back_on_navvolume\t#using scripts\\shared\\vehicles\\_glaive;", "contents": "glaive::go_back_on_navvolume()"},
	{ "trigger": "chooseSwordAnim\t#using scripts\\shared\\vehicles\\_glaive;", "contents": "glaive::chooseSwordAnim(${1:enemy})"},
	{ "trigger": "state_slash_update\t#using scripts\\shared\\vehicles\\_glaive;", "contents": "glaive::state_slash_update(${1:params})"},
	{ "trigger": "glaive_ignore_cooldown\t#using scripts\\shared\\vehicles\\_glaive;", "contents": "glaive::glaive_ignore_cooldown(${1:duration})"},
	{ "trigger": "go_to_near_owner\t#using scripts\\shared\\vehicles\\_glaive;", "contents": "glaive::go_to_near_owner()"},
	{ "trigger": "go_to_owner\t#using scripts\\shared\\vehicles\\_glaive;", "contents": "glaive::go_to_owner()"},
	{ "trigger": "back_to_owner_check\t#using scripts\\shared\\vehicles\\_glaive;", "contents": "glaive::back_to_owner_check()"},
	{ "trigger": "back_to_near_owner_check\t#using scripts\\shared\\vehicles\\_glaive;", "contents": "glaive::back_to_near_owner_check()"},
	{ "trigger": "glaive_AllowFriendlyFireDamage\t#using scripts\\shared\\vehicles\\_glaive;", "contents": "glaive::glaive_AllowFriendlyFireDamage(${1:eInflictor}, ${2:eAttacker}, ${3:sMeansOfDeath}, ${4:weapon})"},
	{ "trigger": "glaive_callback_damage\t#using scripts\\shared\\vehicles\\_glaive;", "contents": "glaive::glaive_callback_damage(${1:eInflictor}, ${2:eAttacker}, ${3:iDamage}, ${4:iDFlags}, ${5:sMeansOfDeath}, ${6:weapon}, ${7:vPoint}, ${8:vDir}, ${9:sHitLoc}, ${10:vDamageOrigin}, ${11:psOffsetTime}, ${12:damageFromUnderneath}, ${13:modelIndex}, ${14:partName}, ${15:vSurfaceNormal})"},
	{ "trigger": "turret_gadget_deploy_think\t#using scripts\\shared\\vehicles\\_deploy_turret;", "contents": "turret_gadget_deploy::turret_gadget_deploy_think(${1:player}, ${2:power_callback}, ${3:cutoff_power}, ${4:resume_power})"},
	{ "trigger": "turret_gadget_deploy_start_scripted\t#using scripts\\shared\\vehicles\\_deploy_turret;", "contents": "turret_gadget_deploy::turret_gadget_deploy_start_scripted()"},
	{ "trigger": "turret_gadget_deploy_start_ai\t#using scripts\\shared\\vehicles\\_deploy_turret;", "contents": "turret_gadget_deploy::turret_gadget_deploy_start_ai()"},
	{ "trigger": "turret_gadget_deploy_off\t#using scripts\\shared\\vehicles\\_deploy_turret;", "contents": "turret_gadget_deploy::turret_gadget_deploy_off(${1:angles})"},
	{ "trigger": "turret_gadget_deploy_on\t#using scripts\\shared\\vehicles\\_deploy_turret;", "contents": "turret_gadget_deploy::turret_gadget_deploy_on()"},
	{ "trigger": "turret_gadget_deploy_fireupdate_old\t#using scripts\\shared\\vehicles\\_deploy_turret;", "contents": "turret_gadget_deploy::turret_gadget_deploy_fireupdate_old()"},
	{ "trigger": "has_enough_power\t#using scripts\\shared\\vehicles\\_deploy_turret;", "contents": "turret_gadget_deploy::has_enough_power(${1:min_power})"},
	{ "trigger": "boot_sound\t#using scripts\\shared\\vehicles\\_deploy_turret;", "contents": "turret_gadget_deploy::boot_sound()"},
	{ "trigger": "alert_sound\t#using scripts\\shared\\vehicles\\_deploy_turret;", "contents": "turret_gadget_deploy::alert_sound()"},
	{ "trigger": "scan_sound\t#using scripts\\shared\\vehicles\\_deploy_turret;", "contents": "turret_gadget_deploy::scan_sound()"},
	{ "trigger": "has_visible_target\t#using scripts\\shared\\vehicles\\_deploy_turret;", "contents": "turret_gadget_deploy::has_visible_target()"},
	{ "trigger": "turret_gadget_deploy_fireupdate\t#using scripts\\shared\\vehicles\\_deploy_turret;", "contents": "turret_gadget_deploy::turret_gadget_deploy_fireupdate()"},
	{ "trigger": "hud_marker_create\t#using scripts\\shared\\vehicles\\_deploy_turret; self = TURRET", "contents": "turret_gadget_deploy::hud_marker_create()"},
	{ "trigger": "turret_gadget_deploy_scripted\t#using scripts\\shared\\vehicles\\_deploy_turret;", "contents": "turret_gadget_deploy::turret_gadget_deploy_scripted()"},
	{ "trigger": "turret_gadget_deploy_fire_for_time\t#using scripts\\shared\\vehicles\\_deploy_turret;", "contents": "turret_gadget_deploy::turret_gadget_deploy_fire_for_time(${1:totalFireTime})"},
	{ "trigger": "turret_gadget_deploy_emped\t#using scripts\\shared\\vehicles\\_deploy_turret;", "contents": "turret_gadget_deploy::turret_gadget_deploy_emped()"},
	{ "trigger": "TurretCallback_VehicleDamage\t#using scripts\\shared\\vehicles\\_deploy_turret;", "contents": "turret_gadget_deploy::TurretCallback_VehicleDamage(${1:eInflictor}, ${2:eAttacker}, ${3:iDamage}, ${4:iDFlags}, ${5:sMeansOfDeath}, ${6:weapon}, ${7:vPoint}, ${8:vDir}, ${9:sHitLoc}, ${10:psOffsetTime}, ${11:damageFromUnderneath}, ${12:modelIndex}, ${13:partName})"},
	{ "trigger": "quadtank_update_difficulty\t#using scripts\\shared\\vehicles\\_quadtank;", "contents": "quadtank::quadtank_update_difficulty()"},
	{ "trigger": "defaultRole\t#using scripts\\shared\\vehicles\\_quadtank;", "contents": "quadtank::defaultRole()"},
	{ "trigger": "quadtank_off\t#using scripts\\shared\\vehicles\\_quadtank;", "contents": "quadtank::quadtank_off()"},
	{ "trigger": "quadtank_on\t#using scripts\\shared\\vehicles\\_quadtank;", "contents": "quadtank::quadtank_on()"},
	{ "trigger": "state_off_enter\t#using scripts\\shared\\vehicles\\_quadtank;", "contents": "quadtank::state_off_enter(${1:params})"},
	{ "trigger": "state_off_exit\t#using scripts\\shared\\vehicles\\_quadtank;", "contents": "quadtank::state_off_exit(${1:params})"},
	{ "trigger": "bootup\t#using scripts\\shared\\vehicles\\_quadtank;", "contents": "quadtank::bootup()"},
	{ "trigger": "pain_update\t#using scripts\\shared\\vehicles\\_quadtank;", "contents": "quadtank::pain_update(${1:params})"},
	{ "trigger": "state_scripted_update\t#using scripts\\shared\\vehicles\\_quadtank;", "contents": "quadtank::state_scripted_update(${1:params})"},
	{ "trigger": "state_driving_update\t#using scripts\\shared\\vehicles\\_quadtank;", "contents": "quadtank::state_driving_update(${1:params})"},
	{ "trigger": "quadtank_exit_vehicle\t#using scripts\\shared\\vehicles\\_quadtank;", "contents": "quadtank::quadtank_exit_vehicle()"},
	{ "trigger": "state_combat_update\t#using scripts\\shared\\vehicles\\_quadtank;", "contents": "quadtank::state_combat_update(${1:params})"},
	{ "trigger": "state_combat_exit\t#using scripts\\shared\\vehicles\\_quadtank;", "contents": "quadtank::state_combat_exit(${1:params})"},
	{ "trigger": "quadtank_death\t#using scripts\\shared\\vehicles\\_quadtank;", "contents": "quadtank::quadtank_death(${1:params})"},
	{ "trigger": "quadtank_emped\t#using scripts\\shared\\vehicles\\_quadtank;", "contents": "quadtank::quadtank_emped(${1:params})"},
	{ "trigger": "trophy_disabled\t#using scripts\\shared\\vehicles\\_quadtank;", "contents": "quadtank::trophy_disabled()"},
	{ "trigger": "trophy_destroyed\t#using scripts\\shared\\vehicles\\_quadtank;", "contents": "quadtank::trophy_destroyed()"},
	{ "trigger": "set_trophy_state\t#using scripts\\shared\\vehicles\\_quadtank;", "contents": "quadtank::set_trophy_state(${1:isOn})"},
	{ "trigger": "quadtank_disabletrophy\t#using scripts\\shared\\vehicles\\_quadtank;", "contents": "quadtank::quadtank_disabletrophy()"},
	{ "trigger": "quadtank_enabletrophy\t#using scripts\\shared\\vehicles\\_quadtank;", "contents": "quadtank::quadtank_enabletrophy()"},
	{ "trigger": "quadtank_side_turrets_forward\t#using scripts\\shared\\vehicles\\_quadtank;", "contents": "quadtank::quadtank_side_turrets_forward()"},
	{ "trigger": "quadtank_turret_scan\t#using scripts\\shared\\vehicles\\_quadtank;", "contents": "quadtank::quadtank_turret_scan(${1:scan_forever})"},
	{ "trigger": "set_side_turrets_enabled\t#using scripts\\shared\\vehicles\\_quadtank;", "contents": "quadtank::set_side_turrets_enabled(${1:on})"},
	{ "trigger": "set_detonation_time\t#using scripts\\shared\\vehicles\\_quadtank;", "contents": "quadtank::set_detonation_time(${1:target})"},
	{ "trigger": "quadtank_weapon_think_cannon\t#using scripts\\shared\\vehicles\\_quadtank;", "contents": "quadtank::quadtank_weapon_think_cannon()"},
	{ "trigger": "Attack_Thread_rocket\t#using scripts\\shared\\vehicles\\_quadtank;", "contents": "quadtank::Attack_Thread_rocket()"},
	{ "trigger": "trigger_player_shock_fx\t#using scripts\\shared\\vehicles\\_quadtank;", "contents": "quadtank::trigger_player_shock_fx()"},
	{ "trigger": "path_update_interrupt\t#using scripts\\shared\\vehicles\\_quadtank;", "contents": "quadtank::path_update_interrupt()"},
	{ "trigger": "Movement_Thread_Wander\t#using scripts\\shared\\vehicles\\_quadtank;", "contents": "quadtank::Movement_Thread_Wander()"},
	{ "trigger": "quadtank_movementupdate\t#using scripts\\shared\\vehicles\\_quadtank;", "contents": "quadtank::quadtank_movementupdate()"},
	{ "trigger": "quadtank_player_fireupdate\t#using scripts\\shared\\vehicles\\_quadtank;", "contents": "quadtank::quadtank_player_fireupdate()"},
	{ "trigger": "do_melee\t#using scripts\\shared\\vehicles\\_quadtank;", "contents": "quadtank::do_melee(${1:shouldDoDamage}, ${2:enemy})"},
	{ "trigger": "quadtank_automelee_update\t#using scripts\\shared\\vehicles\\_quadtank;", "contents": "quadtank::quadtank_automelee_update()"},
	{ "trigger": "quadtank_destroyturret\t#using scripts\\shared\\vehicles\\_quadtank;", "contents": "quadtank::quadtank_destroyturret(${1:index})"},
	{ "trigger": "QuadtankCallback_VehicleDamage\t#using scripts\\shared\\vehicles\\_quadtank;", "contents": "quadtank::QuadtankCallback_VehicleDamage(${1:eInflictor}, ${2:eAttacker}, ${3:iDamage}, ${4:iDFlags}, ${5:sMeansOfDeath}, ${6:weapon}, ${7:vPoint}, ${8:vDir}, ${9:sHitLoc}, ${10:vDamageOrigin}, ${11:psOffsetTime}, ${12:damageFromUnderneath}, ${13:modelIndex}, ${14:partName}, ${15:vSurfaceNormal})"},
	{ "trigger": "quadtank_set_team\t#using scripts\\shared\\vehicles\\_quadtank;", "contents": "quadtank::quadtank_set_team(${1:team})"},
	{ "trigger": "remove_repulsor\t#using scripts\\shared\\vehicles\\_quadtank;", "contents": "quadtank::remove_repulsor()"},
	{ "trigger": "repulsor_fx\t#using scripts\\shared\\vehicles\\_quadtank;", "contents": "quadtank::repulsor_fx()"},
	{ "trigger": "quadtank_projectile_watcher\t#using scripts\\shared\\vehicles\\_quadtank;", "contents": "quadtank::quadtank_projectile_watcher()"},
	{ "trigger": "turn_off_laser_after\t#using scripts\\shared\\vehicles\\_quadtank;", "contents": "quadtank::turn_off_laser_after(${1:time})"},
	{ "trigger": "side_turret_is_target_in_view_score\t#using scripts\\shared\\vehicles\\_quadtank;", "contents": "quadtank::side_turret_is_target_in_view_score(${1:v_target}, ${2:n_index})"},
	{ "trigger": "_get_best_target_quadtank_side_turret\t#using scripts\\shared\\vehicles\\_quadtank;", "contents": "quadtank::_get_best_target_quadtank_side_turret(${1:a_potential_targets}, ${2:n_index})"},
	{ "trigger": "quadtank_weakpoint_trigger\t#using scripts\\shared\\vehicles\\_quadtank;", "contents": "quadtank::quadtank_weakpoint_trigger()"},
	{ "trigger": "quadtank_weakpoint_display\t#using scripts\\shared\\vehicles\\_quadtank;", "contents": "quadtank::quadtank_weakpoint_display(${1:state})"},
	{ "trigger": "footstep_handler\t#using scripts\\shared\\vehicles\\_quadtank;", "contents": "quadtank::footstep_handler()"},
	{ "trigger": "javeline_incoming\t#using scripts\\shared\\vehicles\\_quadtank;", "contents": "quadtank::javeline_incoming(${1:projectile})"},
	{ "trigger": "railgun_sound\t#using scripts\\shared\\vehicles\\_quadtank;", "contents": "quadtank::railgun_sound(${1:projectile})"},
	{ "trigger": "set_50cal_vehicle_anims\t#using scripts\\shared\\vehicles\\_civ_pickup;", "contents": "civ_pickup::set_50cal_vehicle_anims(${1:positions})"},
	{ "trigger": "set_50cal_gunner_anims\t#using scripts\\shared\\vehicles\\_civ_pickup;", "contents": "civ_pickup::set_50cal_gunner_anims()"},
	{ "trigger": "set_vehicle_anims\t#using scripts\\shared\\vehicles\\_civ_pickup;", "contents": "civ_pickup::set_vehicle_anims(${1:positions})"},
	{ "trigger": "setanims\t#using scripts\\shared\\vehicles\\_civ_pickup;", "contents": "civ_pickup::setanims()"},
	{ "trigger": "unload_groups\t#using scripts\\shared\\vehicles\\_civ_pickup;", "contents": "civ_pickup::unload_groups()"},
	{ "trigger": "print_org\t#using scripts\\zm\\_fx;", "contents": "fx::print_org(${1:fxcommand}, ${2:fxId}, ${3:fxPos}, ${4:waittime})"},
	{ "trigger": "gunfireloopfx\t#using scripts\\zm\\_fx;", "contents": "fx::gunfireloopfx(${1:fxId}, ${2:fxPos}, ${3:shotsMin}, ${4:shotsMax}, ${5:shotdelayMin}, ${6:shotdelayMax}, ${7:betweenSetsMin}, ${8:betweenSetsMax})"},
	{ "trigger": "gunfireloopfxthread\t#using scripts\\zm\\_fx;", "contents": "fx::gunfireloopfxthread(${1:fxId}, ${2:fxPos}, ${3:shotsMin}, ${4:shotsMax}, ${5:shotdelayMin}, ${6:shotdelayMax}, ${7:betweenSetsMin}, ${8:betweenSetsMax})"},
	{ "trigger": "gunfireloopfxVec\t#using scripts\\zm\\_fx;", "contents": "fx::gunfireloopfxVec(${1:fxId}, ${2:fxPos}, ${3:fxPos2}, ${4:shotsMin}, ${5:shotsMax}, ${6:shotdelayMin}, ${7:shotdelayMax}, ${8:betweenSetsMin}, ${9:betweenSetsMax})"},
	{ "trigger": "gunfireloopfxVecthread\t#using scripts\\zm\\_fx;", "contents": "fx::gunfireloopfxVecthread(${1:fxId}, ${2:fxPos}, ${3:fxPos2}, ${4:shotsMin}, ${5:shotsMax}, ${6:shotdelayMin}, ${7:shotdelayMax}, ${8:betweenSetsMin}, ${9:betweenSetsMax})"},
	{ "trigger": "GrenadeExplosionfx\t#using scripts\\zm\\_fx;", "contents": "fx::GrenadeExplosionfx(${1:pos})"},
	{ "trigger": "set_forward_and_up_vectors\t#using scripts\\shared\\fx_shared;", "contents": "fx::set_forward_and_up_vectors()"},
	{ "trigger": "get\t#using scripts\\shared\\fx_shared;", "contents": "fx::get(${1:fx})"},
	{ "trigger": "create_effect\t#using scripts\\shared\\fx_shared;", "contents": "fx::create_effect(${1:type}, ${2:fxid})"},
	{ "trigger": "create_loop_effect\t#using scripts\\shared\\fx_shared;", "contents": "fx::create_loop_effect(${1:fxid})"},
	{ "trigger": "create_oneshot_effect\t#using scripts\\shared\\fx_shared;", "contents": "fx::create_oneshot_effect(${1:fxid})"},
	{ "trigger": "play\t#using scripts\\shared\\fx_shared;", "contents": "fx::play(${1:str_fx}, ${2:v_origin = ( 0}, ${3:0}, ${4:0 )}, ${5:v_angles = ( 0}, ${6:0}, ${7:0 )}, ${8:time_to_delete_or_notify}, ${9:b_link_to_self = false}, ${10:str_tag}, ${11:b_no_cull}, ${12:b_ignore_pause_world})"},
	{ "trigger": "_play_fx_delete\t#using scripts\\shared\\fx_shared;", "contents": "fx::_play_fx_delete(${1:ent}, ${2:time_to_delete_or_notify = (-1)})"},
	{ "trigger": "add_hackable_object\t#using scripts\\shared\\hackable;", "contents": "hackable::add_hackable_object(${1:obj}, ${2:test_callback}, ${3:start_callback}, ${4:fail_callback}, ${5:complete_callback})"},
	{ "trigger": "remove_hackable_object\t#using scripts\\shared\\hackable;", "contents": "hackable::remove_hackable_object(${1:obj})"},
	{ "trigger": "cleanup_hackable_objects\t#using scripts\\shared\\hackable;", "contents": "hackable::cleanup_hackable_objects()"},
	{ "trigger": "filter_deleted\t#using scripts\\shared\\hackable;", "contents": "hackable::filter_deleted(${1:val})"},
	{ "trigger": "find_hackable_object\t#using scripts\\shared\\hackable;", "contents": "hackable::find_hackable_object()"},
	{ "trigger": "is_object_hackable\t#using scripts\\shared\\hackable;", "contents": "hackable::is_object_hackable(${1:obj}, ${2:origin}, ${3:forward})"},
	{ "trigger": "start_hacking_object\t#using scripts\\shared\\hackable;", "contents": "hackable::start_hacking_object(${1:obj})"},
	{ "trigger": "fail_hacking_object\t#using scripts\\shared\\hackable;", "contents": "hackable::fail_hacking_object(${1:obj})"},
	{ "trigger": "complete_hacking_object\t#using scripts\\shared\\hackable;", "contents": "hackable::complete_hacking_object(${1:obj})"},
	{ "trigger": "watch_timeout\t#using scripts\\shared\\hackable;", "contents": "hackable::watch_timeout(${1:obj}, ${2:time})"},
	{ "trigger": "continue_hacking_object\t#using scripts\\shared\\hackable;", "contents": "hackable::continue_hacking_object(${1:obj})"},
	{ "trigger": "create\t#using scripts\\shared\\statemachine_shared;", "contents": "statemachine::create(${1:name}, ${2:owner}, ${3:change_notify = \"change_state\"})"},
	{ "trigger": "clear\t#using scripts\\shared\\statemachine_shared;", "contents": "statemachine::clear()"},
	{ "trigger": "add_state\t#using scripts\\shared\\statemachine_shared;", "contents": "statemachine::add_state(${1:name}, ${2:enter_func}, ${3:update_func}, ${4:exit_func}, ${5:reenter_func})"},
	{ "trigger": "get_state\t#using scripts\\shared\\statemachine_shared;", "contents": "statemachine::get_state(${1:name})"},
	{ "trigger": "add_interrupt_connection\t#using scripts\\shared\\statemachine_shared;", "contents": "statemachine::add_interrupt_connection(${1:from_state_name}, ${2:to_state_name}, ${3:on_notify}, ${4:checkfunc})"},
	{ "trigger": "add_utility_connection\t#using scripts\\shared\\statemachine_shared;", "contents": "statemachine::add_utility_connection(${1:from_state_name}, ${2:to_state_name}, ${3:checkfunc}, ${4:defaultScore})"},
	{ "trigger": "set_state\t#using scripts\\shared\\statemachine_shared;", "contents": "statemachine::set_state(${1:name}, ${2:state_params})"},
	{ "trigger": "threadNotifyConnections\t#using scripts\\shared\\statemachine_shared;", "contents": "statemachine::threadNotifyConnections(${1:state})"},
	{ "trigger": "connection_on_notify\t#using scripts\\shared\\statemachine_shared;", "contents": "statemachine::connection_on_notify(${1:state_machine}, ${2:notify_name}, ${3:connection})"},
	{ "trigger": "evaluate_connections\t#using scripts\\shared\\statemachine_shared;", "contents": "statemachine::evaluate_connections(${1:eval_func}, ${2:params})"},
	{ "trigger": "debugOn\t#using scripts\\shared\\statemachine_shared;", "contents": "statemachine::debugOn()"},
	{ "trigger": "electric_switch\t#using scripts\\zm\\_zm_power;", "contents": "zm_power::electric_switch(${1:switch_array})"},
	{ "trigger": "watch_global_power\t#using scripts\\zm\\_zm_power;", "contents": "zm_power::watch_global_power()"},
	{ "trigger": "standard_powered_items\t#using scripts\\zm\\_zm_power;", "contents": "zm_power::standard_powered_items()"},
	{ "trigger": "zone_controlled_perk\t#using scripts\\zm\\_zm_power;", "contents": "zm_power::zone_controlled_perk(${1:zone})"},
	{ "trigger": "add_powered_item\t#using scripts\\zm\\_zm_power;", "contents": "zm_power::add_powered_item(${1:power_on_func}, ${2:power_off_func}, ${3:range_func}, ${4:cost_func}, ${5:power_sources}, ${6:self_powered}, ${7:target})"},
	{ "trigger": "remove_powered_item\t#using scripts\\zm\\_zm_power;", "contents": "zm_power::remove_powered_item(${1:powered})"},
	{ "trigger": "add_temp_powered_item\t#using scripts\\zm\\_zm_power;", "contents": "zm_power::add_temp_powered_item(${1:power_on_func}, ${2:power_off_func}, ${3:range_func}, ${4:cost_func}, ${5:power_sources}, ${6:self_powered}, ${7:target})"},
	{ "trigger": "watch_temp_powered_item\t#using scripts\\zm\\_zm_power;", "contents": "zm_power::watch_temp_powered_item(${1:powered})"},
	{ "trigger": "change_power_in_radius\t#using scripts\\zm\\_zm_power;", "contents": "zm_power::change_power_in_radius(${1:delta}, ${2:origin}, ${3:radius})"},
	{ "trigger": "change_power\t#using scripts\\zm\\_zm_power; self == powered item", "contents": "zm_power::change_power(${1:delta}, ${2:origin}, ${3:radius})"},
	{ "trigger": "revert_power_to_list\t#using scripts\\zm\\_zm_power;", "contents": "zm_power::revert_power_to_list(${1:delta}, ${2:origin}, ${3:radius}, ${4:powered_list})"},
	{ "trigger": "revert_power\t#using scripts\\zm\\_zm_power; self == powered item", "contents": "zm_power::revert_power(${1:delta}, ${2:origin}, ${3:radius}, ${4:powered_list})"},
	{ "trigger": "add_local_power\t#using scripts\\zm\\_zm_power;", "contents": "zm_power::add_local_power(${1:origin}, ${2:radius})"},
	{ "trigger": "move_local_power\t#using scripts\\zm\\_zm_power;", "contents": "zm_power::move_local_power(${1:localpower}, ${2:origin})"},
	{ "trigger": "end_local_power\t#using scripts\\zm\\_zm_power;", "contents": "zm_power::end_local_power(${1:localpower})"},
	{ "trigger": "has_local_power\t#using scripts\\zm\\_zm_power;", "contents": "zm_power::has_local_power(${1:origin})"},
	{ "trigger": "get_powered_item_cost\t#using scripts\\zm\\_zm_power;", "contents": "zm_power::get_powered_item_cost()"},
	{ "trigger": "get_local_power_cost\t#using scripts\\zm\\_zm_power;", "contents": "zm_power::get_local_power_cost(${1:localpower})"},
	{ "trigger": "set_global_power\t#using scripts\\zm\\_zm_power;", "contents": "zm_power::set_global_power(${1:on_off})"},
	{ "trigger": "global_power\t#using scripts\\zm\\_zm_power; self == powered item", "contents": "zm_power::global_power(${1:on_off})"},
	{ "trigger": "never_power_on\t#using scripts\\zm\\_zm_power;", "contents": "zm_power::never_power_on(${1:origin}, ${2:radius})"},
	{ "trigger": "never_power_off\t#using scripts\\zm\\_zm_power;", "contents": "zm_power::never_power_off(${1:origin}, ${2:radius})"},
	{ "trigger": "cost_negligible\t#using scripts\\zm\\_zm_power;", "contents": "zm_power::cost_negligible()"},
	{ "trigger": "cost_low_if_local\t#using scripts\\zm\\_zm_power;", "contents": "zm_power::cost_low_if_local()"},
	{ "trigger": "cost_high\t#using scripts\\zm\\_zm_power;", "contents": "zm_power::cost_high()"},
	{ "trigger": "door_range\t#using scripts\\zm\\_zm_power;", "contents": "zm_power::door_range(${1:delta}, ${2:origin}, ${3:radius})"},
	{ "trigger": "door_power_on\t#using scripts\\zm\\_zm_power;", "contents": "zm_power::door_power_on(${1:origin}, ${2:radius})"},
	{ "trigger": "door_power_off\t#using scripts\\zm\\_zm_power;", "contents": "zm_power::door_power_off(${1:origin}, ${2:radius})"},
	{ "trigger": "door_local_power_on\t#using scripts\\zm\\_zm_power;", "contents": "zm_power::door_local_power_on(${1:origin}, ${2:radius})"},
	{ "trigger": "door_local_power_off\t#using scripts\\zm\\_zm_power;", "contents": "zm_power::door_local_power_off(${1:origin}, ${2:radius})"},
	{ "trigger": "cost_door\t#using scripts\\zm\\_zm_power;", "contents": "zm_power::cost_door()"},
	{ "trigger": "zombie_range\t#using scripts\\zm\\_zm_power;", "contents": "zm_power::zombie_range(${1:delta}, ${2:origin}, ${3:radius})"},
	{ "trigger": "zombie_power_off\t#using scripts\\zm\\_zm_power;", "contents": "zm_power::zombie_power_off(${1:origin}, ${2:radius})"},
	{ "trigger": "stun_zombie\t#using scripts\\zm\\_zm_power;", "contents": "zm_power::stun_zombie()"},
	{ "trigger": "perk_range\t#using scripts\\zm\\_zm_power;", "contents": "zm_power::perk_range(${1:delta}, ${2:origin}, ${3:radius})"},
	{ "trigger": "perk_power_on\t#using scripts\\zm\\_zm_power;", "contents": "zm_power::perk_power_on(${1:origin}, ${2:radius})"},
	{ "trigger": "perk_power_off\t#using scripts\\zm\\_zm_power;", "contents": "zm_power::perk_power_off(${1:origin}, ${2:radius})"},
	{ "trigger": "turn_power_on_and_open_doors\t#using scripts\\zm\\_zm_power;", "contents": "zm_power::turn_power_on_and_open_doors(${1:power_zone})"},
	{ "trigger": "turn_power_off_and_close_doors\t#using scripts\\zm\\_zm_power;", "contents": "zm_power::turn_power_off_and_close_doors(${1:power_zone})"},
	{ "trigger": "defaultRole\t#using scripts\\shared\\vehicles\\_dragon_whelp;", "contents": "dragon::defaultRole()"},
	{ "trigger": "state_power_up_update\t#using scripts\\shared\\vehicles\\_dragon_whelp;", "contents": "dragon::state_power_up_update(${1:params})"},
	{ "trigger": "should_go_for_power_up\t#using scripts\\shared\\vehicles\\_dragon_whelp;", "contents": "dragon::should_go_for_power_up(${1:from_state}, ${2:to_state}, ${3:connection})"},
	{ "trigger": "state_combat_update\t#using scripts\\shared\\vehicles\\_dragon_whelp;", "contents": "dragon::state_combat_update(${1:params})"},
	{ "trigger": "attack_thread\t#using scripts\\shared\\vehicles\\_dragon_whelp;", "contents": "dragon::attack_thread()"},
	{ "trigger": "go_back_on_navvolume\t#using scripts\\shared\\vehicles\\_dragon_whelp;", "contents": "dragon::go_back_on_navvolume()"},
	{ "trigger": "dragon_AllowFriendlyFireDamage\t#using scripts\\shared\\vehicles\\_dragon_whelp;", "contents": "dragon::dragon_AllowFriendlyFireDamage(${1:eInflictor}, ${2:eAttacker}, ${3:sMeansOfDeath}, ${4:weapon})"},
	{ "trigger": "dragon_callback_damage\t#using scripts\\shared\\vehicles\\_dragon_whelp;", "contents": "dragon::dragon_callback_damage(${1:eInflictor}, ${2:eAttacker}, ${3:iDamage}, ${4:iDFlags}, ${5:sMeansOfDeath}, ${6:weapon}, ${7:vPoint}, ${8:vDir}, ${9:sHitLoc}, ${10:vDamageOrigin}, ${11:psOffsetTime}, ${12:damageFromUnderneath}, ${13:modelIndex}, ${14:partName}, ${15:vSurfaceNormal})"},
	{ "trigger": "state_death_update\t#using scripts\\shared\\vehicles\\_dragon_whelp;", "contents": "dragon::state_death_update(${1:params})"},
	{ "trigger": "setup_callbacks\t#using scripts\\zm\\_callbacks;", "contents": "callback::setup_callbacks()"},
	{ "trigger": "SetDefaultCallbacks\t#using scripts\\zm\\_callbacks;", "contents": "callback::SetDefaultCallbacks()"},
	{ "trigger": "callback\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::callback(${1:event}, ${2:params})"},
	{ "trigger": "add_callback\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::add_callback(${1:event}, ${2:func}, ${3:obj})"},
	{ "trigger": "remove_callback_on_death\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::remove_callback_on_death(${1:event}, ${2:func})"},
	{ "trigger": "remove_callback\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::remove_callback(${1:event}, ${2:func}, ${3:obj})"},
	{ "trigger": "on_connect\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::on_connect(${1:func}, ${2:obj})"},
	{ "trigger": "remove_on_connect\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::remove_on_connect(${1:func}, ${2:obj})"},
	{ "trigger": "on_connecting\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::on_connecting(${1:func}, ${2:obj})"},
	{ "trigger": "remove_on_connecting\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::remove_on_connecting(${1:func}, ${2:obj})"},
	{ "trigger": "on_disconnect\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::on_disconnect(${1:func}, ${2:obj})"},
	{ "trigger": "remove_on_disconnect\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::remove_on_disconnect(${1:func}, ${2:obj})"},
	{ "trigger": "on_spawned\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::on_spawned(${1:func}, ${2:obj})"},
	{ "trigger": "remove_on_spawned\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::remove_on_spawned(${1:func}, ${2:obj})"},
	{ "trigger": "on_loadout\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::on_loadout(${1:func}, ${2:obj})"},
	{ "trigger": "remove_on_loadout\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::remove_on_loadout(${1:func}, ${2:obj})"},
	{ "trigger": "on_player_damage\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::on_player_damage(${1:func}, ${2:obj})"},
	{ "trigger": "remove_on_player_damage\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::remove_on_player_damage(${1:func}, ${2:obj})"},
	{ "trigger": "on_start_gametype\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::on_start_gametype(${1:func}, ${2:obj})"},
	{ "trigger": "on_joined_team\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::on_joined_team(${1:func}, ${2:obj})"},
	{ "trigger": "on_joined_spectate\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::on_joined_spectate(${1:func}, ${2:obj})"},
	{ "trigger": "on_player_killed\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::on_player_killed(${1:func}, ${2:obj})"},
	{ "trigger": "remove_on_player_killed\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::remove_on_player_killed(${1:func}, ${2:obj})"},
	{ "trigger": "on_ai_killed\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::on_ai_killed(${1:func}, ${2:obj})"},
	{ "trigger": "remove_on_ai_killed\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::remove_on_ai_killed(${1:func}, ${2:obj})"},
	{ "trigger": "on_actor_killed\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::on_actor_killed(${1:func}, ${2:obj})"},
	{ "trigger": "remove_on_actor_killed\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::remove_on_actor_killed(${1:func}, ${2:obj})"},
	{ "trigger": "on_vehicle_spawned\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::on_vehicle_spawned(${1:func}, ${2:obj})"},
	{ "trigger": "remove_on_vehicle_spawned\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::remove_on_vehicle_spawned(${1:func}, ${2:obj})"},
	{ "trigger": "on_vehicle_killed\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::on_vehicle_killed(${1:func}, ${2:obj})"},
	{ "trigger": "remove_on_vehicle_killed\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::remove_on_vehicle_killed(${1:func}, ${2:obj})"},
	{ "trigger": "on_ai_damage\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::on_ai_damage(${1:func}, ${2:obj})"},
	{ "trigger": "remove_on_ai_damage\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::remove_on_ai_damage(${1:func}, ${2:obj})"},
	{ "trigger": "on_ai_spawned\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::on_ai_spawned(${1:func}, ${2:obj})"},
	{ "trigger": "remove_on_ai_spawned\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::remove_on_ai_spawned(${1:func}, ${2:obj})"},
	{ "trigger": "on_actor_damage\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::on_actor_damage(${1:func}, ${2:obj})"},
	{ "trigger": "remove_on_actor_damage\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::remove_on_actor_damage(${1:func}, ${2:obj})"},
	{ "trigger": "on_vehicle_damage\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::on_vehicle_damage(${1:func}, ${2:obj})"},
	{ "trigger": "remove_on_vehicle_damage\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::remove_on_vehicle_damage(${1:func}, ${2:obj})"},
	{ "trigger": "on_laststand\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::on_laststand(${1:func}, ${2:obj})"},
	{ "trigger": "on_challenge_complete\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::on_challenge_complete(${1:func}, ${2:obj})"},
	{ "trigger": "CodeCallback_PreInitialization\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_PreInitialization()"},
	{ "trigger": "CodeCallback_FinalizeInitialization\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_FinalizeInitialization()"},
	{ "trigger": "add_weapon_damage\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::add_weapon_damage(${1:weapontype}, ${2:callback})"},
	{ "trigger": "callback_weapon_damage\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::callback_weapon_damage(${1:eAttacker}, ${2:eInflictor}, ${3:weapon}, ${4:meansOfDeath}, ${5:damage})"},
	{ "trigger": "add_weapon_watcher\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::add_weapon_watcher(${1:callback})"},
	{ "trigger": "callback_weapon_watcher\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::callback_weapon_watcher()"},
	{ "trigger": "CodeCallback_StartGameType\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_StartGameType()"},
	{ "trigger": "CodeCallback_PlayerConnect\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_PlayerConnect()"},
	{ "trigger": "CodeCallback_PlayerDisconnect\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_PlayerDisconnect()"},
	{ "trigger": "CodeCallback_Migration_SetupGameType\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_Migration_SetupGameType()"},
	{ "trigger": "CodeCallback_HostMigration\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_HostMigration()"},
	{ "trigger": "CodeCallback_HostMigrationSave\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_HostMigrationSave()"},
	{ "trigger": "CodeCallback_PreHostMigrationSave\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_PreHostMigrationSave()"},
	{ "trigger": "CodeCallback_PlayerMigrated\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_PlayerMigrated()"},
	{ "trigger": "CodeCallback_PlayerDamage\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_PlayerDamage(${1:eInflictor}, ${2:eAttacker}, ${3:iDamage}, ${4:iDFlags}, ${5:sMeansOfDeath}, ${6:weapon}, ${7:vPoint}, ${8:vDir}, ${9:sHitLoc}, ${10:vDamageOrigin}, ${11:timeOffset}, ${12:boneIndex}, ${13:vSurfaceNormal})"},
	{ "trigger": "CodeCallback_PlayerKilled\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_PlayerKilled(${1:eInflictor}, ${2:eAttacker}, ${3:iDamage}, ${4:sMeansOfDeath}, ${5:weapon}, ${6:vDir}, ${7:sHitLoc}, ${8:timeOffset}, ${9:deathAnimDuration})"},
	{ "trigger": "CodeCallback_PlayerLastStand\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_PlayerLastStand(${1:eInflictor}, ${2:eAttacker}, ${3:iDamage}, ${4:sMeansOfDeath}, ${5:weapon}, ${6:vDir}, ${7:sHitLoc}, ${8:timeOffset}, ${9:delayOverride})"},
	{ "trigger": "CodeCallback_PlayerMelee\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_PlayerMelee(${1:eAttacker}, ${2:iDamage}, ${3:weapon}, ${4:vOrigin}, ${5:vDir}, ${6:boneIndex}, ${7:shieldHit}, ${8:fromBehind})"},
	{ "trigger": "CodeCallback_ActorSpawned\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_ActorSpawned(${1:spawner})"},
	{ "trigger": "CodeCallback_ActorDamage\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_ActorDamage(${1:eInflictor}, ${2:eAttacker}, ${3:iDamage}, ${4:iDFlags}, ${5:sMeansOfDeath}, ${6:weapon}, ${7:vPoint}, ${8:vDir}, ${9:sHitLoc}, ${10:vDamageOrigin}, ${11:timeOffset}, ${12:boneIndex}, ${13:modelIndex}, ${14:surfaceType}, ${15:surfaceNormal})"},
	{ "trigger": "CodeCallback_ActorKilled\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_ActorKilled(${1:eInflictor}, ${2:eAttacker}, ${3:iDamage}, ${4:sMeansOfDeath}, ${5:weapon}, ${6:vDir}, ${7:sHitLoc}, ${8:timeOffset})"},
	{ "trigger": "CodeCallback_ActorCloned\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_ActorCloned(${1:original})"},
	{ "trigger": "CodeCallback_VehicleSpawned\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_VehicleSpawned(${1:spawner})"},
	{ "trigger": "codecallback_vehiclekilled\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::codecallback_vehiclekilled(${1:eInflictor}, ${2:eAttacker}, ${3:iDamage}, ${4:sMeansOfDeath}, ${5:weapon}, ${6:vDir}, ${7:sHitLoc}, ${8:psOffsetTime})"},
	{ "trigger": "CodeCallback_VehicleDamage\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_VehicleDamage(${1:eInflictor}, ${2:eAttacker}, ${3:iDamage}, ${4:iDFlags}, ${5:sMeansOfDeath}, ${6:weapon}, ${7:vPoint}, ${8:vDir}, ${9:sHitLoc}, ${10:vDamageOrigin}, ${11:timeOffset}, ${12:damageFromUnderneath}, ${13:modelIndex}, ${14:partName}, ${15:vSurfaceNormal})"},
	{ "trigger": "CodeCallback_VehicleRadiusDamage\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_VehicleRadiusDamage(${1:eInflictor}, ${2:eAttacker}, ${3:iDamage}, ${4:fInnerDamage}, ${5:fOuterDamage}, ${6:iDFlags}, ${7:sMeansOfDeath}, ${8:weapon}, ${9:vPoint}, ${10:fRadius}, ${11:fConeAngleCos}, ${12:vConeDir}, ${13:timeOffset})"},
	{ "trigger": "finishCustomTraversalListener\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::finishCustomTraversalListener()"},
	{ "trigger": "killedCustomTraversalListener\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::killedCustomTraversalListener()"},
	{ "trigger": "CodeCallback_PlayCustomTraversal\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_PlayCustomTraversal(${1:entity}, ${2:beginParent}, ${3:endParent}, ${4:origin}, ${5:angles}, ${6:animHandle}, ${7:animMode}, ${8:playbackSpeed}, ${9:goalTime}, ${10:lerpTime})"},
	{ "trigger": "CodeCallback_FaceEventNotify\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_FaceEventNotify(${1:notify_msg}, ${2:ent})"},
	{ "trigger": "CodeCallback_MenuResponse\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_MenuResponse(${1:action}, ${2:arg})"},
	{ "trigger": "menu_response_queue_pump\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::menu_response_queue_pump()"},
	{ "trigger": "CodeCallback_CallServerScript\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_CallServerScript(${1:pSelf}, ${2:label}, ${3:param})"},
	{ "trigger": "CodeCallback_CallServerScriptOnLevel\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_CallServerScriptOnLevel(${1:label}, ${2:param})"},
	{ "trigger": "CodeCallback_LaunchSideMission\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_LaunchSideMission(${1:str_mapname}, ${2:str_gametype}, ${3:int_list_index}, ${4:int_lighting})"},
	{ "trigger": "CodeCallback_FadeBlackscreen\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_FadeBlackscreen(${1:duration}, ${2:blendTime})"},
	{ "trigger": "CodeCallback_SetActiveCybercomAbility\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_SetActiveCybercomAbility(${1:new_ability})"},
	{ "trigger": "abort_level\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::abort_level()"},
	{ "trigger": "CodeCallback_GlassSmash\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_GlassSmash(${1:pos}, ${2:dir})"},
	{ "trigger": "CodeCallback_BotEnteredUserEdge\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_BotEnteredUserEdge(${1:startNode}, ${2:endNode})"},
	{ "trigger": "CodeCallback_Decoration\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::CodeCallback_Decoration(${1:name})"},
	{ "trigger": "callback_void\t#using scripts\\shared\\callbacks_shared;", "contents": "callback::callback_void()"},
	{ "trigger": "is_tesla_damage\t#using scripts\\zm\\_zm_weap_tesla;", "contents": "_zm_weap_tesla::is_tesla_damage(${1:mod}, ${2:weapon})"},
	{ "trigger": "enemy_killed_by_tesla\t#using scripts\\zm\\_zm_weap_tesla;", "contents": "_zm_weap_tesla::enemy_killed_by_tesla()"},
	{ "trigger": "on_player_spawned\t#using scripts\\zm\\_zm_weap_tesla;", "contents": "_zm_weap_tesla::on_player_spawned()"},
	{ "trigger": "tesla_sound_thread\t#using scripts\\zm\\_zm_weap_tesla;", "contents": "_zm_weap_tesla::tesla_sound_thread()"},
	{ "trigger": "cleanup_loop_sound\t#using scripts\\zm\\_zm_weap_tesla;", "contents": "_zm_weap_tesla::cleanup_loop_sound(${1:loop_sound})"},
	{ "trigger": "tesla_engine_sweets\t#using scripts\\zm\\_zm_weap_tesla;", "contents": "_zm_weap_tesla::tesla_engine_sweets()"},
	{ "trigger": "tesla_pvp_thread\t#using scripts\\zm\\_zm_weap_tesla;", "contents": "_zm_weap_tesla::tesla_pvp_thread()"},
	{ "trigger": "play_tesla_sound\t#using scripts\\zm\\_zm_weap_tesla;", "contents": "_zm_weap_tesla::play_tesla_sound(${1:emotion})"},
	{ "trigger": "tesla_killstreak_sound\t#using scripts\\zm\\_zm_weap_tesla;", "contents": "_zm_weap_tesla::tesla_killstreak_sound()"},
	{ "trigger": "tesla_network_choke\t#using scripts\\zm\\_zm_weap_tesla;", "contents": "_zm_weap_tesla::tesla_network_choke()"},
	{ "trigger": "tesla_zombie_death_response\t#using scripts\\zm\\_zm_weap_tesla;", "contents": "_zm_weap_tesla::tesla_zombie_death_response()"},
	{ "trigger": "tesla_zombie_damage_response\t#using scripts\\zm\\_zm_weap_tesla;", "contents": "_zm_weap_tesla::tesla_zombie_damage_response(${1:willBeKilled}, ${2:inflictor}, ${3:attacker}, ${4:damage}, ${5:flags}, ${6:meansofdeath}, ${7:weapon}, ${8:vpoint}, ${9:vdir}, ${10:sHitLoc}, ${11:psOffsetTime}, ${12:boneIndex}, ${13:surfaceType})"},
	{ "trigger": "is_slow_raygun\t#using scripts\\zm\\_zm_weap_raygun_mark3;", "contents": "_zm_weap_raygun_mark3::is_slow_raygun(${1:weapon})"},
	{ "trigger": "is_beam_raygun\t#using scripts\\zm\\_zm_weap_raygun_mark3;", "contents": "_zm_weap_raygun_mark3::is_beam_raygun(${1:weapon})"},
	{ "trigger": "raygun_vortex_reposition\t#using scripts\\zm\\_zm_weap_raygun_mark3;", "contents": "_zm_weap_raygun_mark3::raygun_vortex_reposition(${1:v_impact_origin})"},
	{ "trigger": "watch_raygun_impact\t#using scripts\\zm\\_zm_weap_raygun_mark3;", "contents": "_zm_weap_raygun_mark3::watch_raygun_impact()"},
	{ "trigger": "start_slow_vortex\t#using scripts\\zm\\_zm_weap_raygun_mark3;", "contents": "_zm_weap_raygun_mark3::start_slow_vortex(${1:w_weapon}, ${2:v_pos}, ${3:v_pos_final}, ${4:n_radius}, ${5:e_attacker}, ${6:v_normal})"},
	{ "trigger": "pulse_damage\t#using scripts\\zm\\_zm_weap_raygun_mark3;", "contents": "_zm_weap_raygun_mark3::pulse_damage(${1:e_owner}, ${2:w_weapon})"},
	{ "trigger": "player_vortex_visionset\t#using scripts\\zm\\_zm_weap_raygun_mark3;", "contents": "_zm_weap_raygun_mark3::player_vortex_visionset()"},
	{ "trigger": "wait_for_beam_damage\t#using scripts\\zm\\_zm_weap_raygun_mark3;", "contents": "_zm_weap_raygun_mark3::wait_for_beam_damage()"},
	{ "trigger": "raygun_mark3_damage_response\t#using scripts\\zm\\_zm_weap_raygun_mark3;", "contents": "_zm_weap_raygun_mark3::raygun_mark3_damage_response(${1:str_mod}, ${2:str_hit_location}, ${3:v_hit_origin}, ${4:e_player}, ${5:n_amount}, ${6:w_weapon}, ${7:v_direction}, ${8:str_tag}, ${9:str_model}, ${10:str_part}, ${11:n_flags}, ${12:e_inflictor}, ${13:n_chargeLevel})"},
	{ "trigger": "apply_vortex_fx\t#using scripts\\zm\\_zm_weap_raygun_mark3;", "contents": "_zm_weap_raygun_mark3::apply_vortex_fx(${1:n_damage_type}, ${2:n_time})"},
	{ "trigger": "disintegrate_zombie\t#using scripts\\zm\\_zm_weap_raygun_mark3;", "contents": "_zm_weap_raygun_mark3::disintegrate_zombie(${1:e_inflictor}, ${2:e_attacker}, ${3:w_weapon})"},
	{ "trigger": "gadget_other_is_inuse\t#using scripts\\shared\\abilities\\gadgets\\_gadget_other;", "contents": "_gadget_other::gadget_other_is_inuse(${1:slot})"},
	{ "trigger": "gadget_other_is_flickering\t#using scripts\\shared\\abilities\\gadgets\\_gadget_other;", "contents": "_gadget_other::gadget_other_is_flickering(${1:slot})"},
	{ "trigger": "gadget_other_on_flicker\t#using scripts\\shared\\abilities\\gadgets\\_gadget_other;", "contents": "_gadget_other::gadget_other_on_flicker(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_other_on_give\t#using scripts\\shared\\abilities\\gadgets\\_gadget_other;", "contents": "_gadget_other::gadget_other_on_give(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_other_on_take\t#using scripts\\shared\\abilities\\gadgets\\_gadget_other;", "contents": "_gadget_other::gadget_other_on_take(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_other_on_connect\t#using scripts\\shared\\abilities\\gadgets\\_gadget_other;", "contents": "_gadget_other::gadget_other_on_connect()"},
	{ "trigger": "gadget_other_on_spawn\t#using scripts\\shared\\abilities\\gadgets\\_gadget_other;", "contents": "_gadget_other::gadget_other_on_spawn()"},
	{ "trigger": "gadget_other_on_activate\t#using scripts\\shared\\abilities\\gadgets\\_gadget_other;", "contents": "_gadget_other::gadget_other_on_activate(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_other_on_off\t#using scripts\\shared\\abilities\\gadgets\\_gadget_other;", "contents": "_gadget_other::gadget_other_on_off(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_other_ready\t#using scripts\\shared\\abilities\\gadgets\\_gadget_other;", "contents": "_gadget_other::gadget_other_ready(${1:slot}, ${2:weapon})"},
	{ "trigger": "set_gadget_other_status\t#using scripts\\shared\\abilities\\gadgets\\_gadget_other;", "contents": "_gadget_other::set_gadget_other_status(${1:weapon}, ${2:status}, ${3:time})"},
	{ "trigger": "grab_double_points\t#using scripts\\zm\\_zm_powerup_double_points;", "contents": "zm_powerup_double_points::grab_double_points(${1:player})"},
	{ "trigger": "double_points_powerup\t#using scripts\\zm\\_zm_powerup_double_points;", "contents": "zm_powerup_double_points::double_points_powerup(${1:drop_item}, ${2:player})"},
	{ "trigger": "goal_wait_notify_lase\t#using scripts\\shared\\ai_sniper_shared;", "contents": "ai_sniper::goal_wait_notify_lase(${1:node})"},
	{ "trigger": "goal_watcher_patrol\t#using scripts\\shared\\ai_sniper_shared;", "contents": "ai_sniper::goal_watcher_patrol()"},
	{ "trigger": "goal_watcher_target\t#using scripts\\shared\\ai_sniper_shared;", "contents": "ai_sniper::goal_watcher_target()"},
	{ "trigger": "patrol_lase_goal_waiter\t#using scripts\\shared\\ai_sniper_shared;", "contents": "ai_sniper::patrol_lase_goal_waiter()"},
	{ "trigger": "actor_lase_points_behavior\t#using scripts\\shared\\ai_sniper_shared;", "contents": "ai_sniper::actor_lase_points_behavior(${1:entity_or_point_array})"},
	{ "trigger": "actor_lase_stop\t#using scripts\\shared\\ai_sniper_shared;", "contents": "ai_sniper::actor_lase_stop()"},
	{ "trigger": "actor_lase_force_laser_on\t#using scripts\\shared\\ai_sniper_shared;", "contents": "ai_sniper::actor_lase_force_laser_on()"},
	{ "trigger": "actor_lase_laser_off_on_death\t#using scripts\\shared\\ai_sniper_shared;", "contents": "ai_sniper::actor_lase_laser_off_on_death()"},
	{ "trigger": "lase_point\t#using scripts\\shared\\ai_sniper_shared;", "contents": "ai_sniper::lase_point(${1:entity_or_point})"},
	{ "trigger": "target_lase_points_ally_track\t#using scripts\\shared\\ai_sniper_shared;", "contents": "ai_sniper::target_lase_points_ally_track(${1:v_eye}, ${2:entity_or_point_array}, ${3:a_owner})"},
	{ "trigger": "target_lase_fire_at\t#using scripts\\shared\\ai_sniper_shared; self = laser targeting ent", "contents": "ai_sniper::target_lase_fire_at(${1:v_eye}, ${2:entity_or_point}, ${3:a_owner}, ${4:allow_interrupts = true})"},
	{ "trigger": "target_lase_points\t#using scripts\\shared\\ai_sniper_shared;", "contents": "ai_sniper::target_lase_points(${1:entity_or_point_array}, ${2:e_owner})"},
	{ "trigger": "velocity_approach\t#using scripts\\shared\\ai_sniper_shared; self = object with velocity and origin", "contents": "ai_sniper::velocity_approach(${1:endPosition}, ${2:totalTime}, ${3:b_early_out})"},
	{ "trigger": "target_lase_next\t#using scripts\\shared\\ai_sniper_shared;", "contents": "ai_sniper::target_lase_next(${1:node})"},
	{ "trigger": "target_lase_transition\t#using scripts\\shared\\ai_sniper_shared;", "contents": "ai_sniper::target_lase_transition(${1:entity_or_point}, ${2:owner})"},
	{ "trigger": "target_lase_override\t#using scripts\\shared\\ai_sniper_shared;", "contents": "ai_sniper::target_lase_override(${1:v_eye}, ${2:entity_or_point}, ${3:sight_timeout}, ${4:a_owner}, ${5:fire_weapon}, ${6:allow_interrupts = true})"},
	{ "trigger": "is_firing\t#using scripts\\shared\\ai_sniper_shared;", "contents": "ai_sniper::is_firing(${1:a_owner})"},
	{ "trigger": "player_give_octobomb_upgraded\t#using scripts\\zm\\_zm_weap_octobomb;", "contents": "_zm_weap_octobomb::player_give_octobomb_upgraded()"},
	{ "trigger": "player_give_octobomb\t#using scripts\\zm\\_zm_weap_octobomb;", "contents": "_zm_weap_octobomb::player_give_octobomb(${1:str_weapon = STR_WEAP_OCTOBOMB})"},
	{ "trigger": "player_handle_octobomb\t#using scripts\\zm\\_zm_weap_octobomb;", "contents": "_zm_weap_octobomb::player_handle_octobomb()"},
	{ "trigger": "show_briefly\t#using scripts\\zm\\_zm_weap_octobomb;", "contents": "_zm_weap_octobomb::show_briefly(${1:showtime})"},
	{ "trigger": "show_owner_on_attack\t#using scripts\\zm\\_zm_weap_octobomb;", "contents": "_zm_weap_octobomb::show_owner_on_attack(${1:owner})"},
	{ "trigger": "hide_owner\t#using scripts\\zm\\_zm_weap_octobomb;", "contents": "_zm_weap_octobomb::hide_owner(${1:owner})"},
	{ "trigger": "FakeLinkto\t#using scripts\\zm\\_zm_weap_octobomb;", "contents": "_zm_weap_octobomb::FakeLinkto(${1:linkee})"},
	{ "trigger": "grenade_planted\t#using scripts\\zm\\_zm_weap_octobomb;", "contents": "_zm_weap_octobomb::grenade_planted(${1:grenade}, ${2:model})"},
	{ "trigger": "check_octobomb_on_train\t#using scripts\\zm\\_zm_weap_octobomb;", "contents": "_zm_weap_octobomb::check_octobomb_on_train()"},
	{ "trigger": "player_throw_octobomb\t#using scripts\\zm\\_zm_weap_octobomb;", "contents": "_zm_weap_octobomb::player_throw_octobomb(${1:e_grenade}, ${2:num_attractors}, ${3:max_attract_dist}, ${4:attract_dist_custom})"},
	{ "trigger": "is_on_navmesh\t#using scripts\\zm\\_zm_weap_octobomb;", "contents": "_zm_weap_octobomb::is_on_navmesh()"},
	{ "trigger": "animate_octobomb\t#using scripts\\zm\\_zm_weap_octobomb;", "contents": "_zm_weap_octobomb::animate_octobomb(${1:is_upgraded})"},
	{ "trigger": "move_away_from_edges\t#using scripts\\zm\\_zm_weap_octobomb;", "contents": "_zm_weap_octobomb::move_away_from_edges()"},
	{ "trigger": "grenade_stolen_by_sam\t#using scripts\\zm\\_zm_weap_octobomb;", "contents": "_zm_weap_octobomb::grenade_stolen_by_sam(${1:e_grenade})"},
	{ "trigger": "octobomb_cleanup\t#using scripts\\zm\\_zm_weap_octobomb;", "contents": "_zm_weap_octobomb::octobomb_cleanup()"},
	{ "trigger": "do_octobomb_sound\t#using scripts\\zm\\_zm_weap_octobomb;", "contents": "_zm_weap_octobomb::do_octobomb_sound()"},
	{ "trigger": "do_tentacle_burst\t#using scripts\\zm\\_zm_weap_octobomb;", "contents": "_zm_weap_octobomb::do_tentacle_burst(${1:e_player}, ${2:is_upgraded})"},
	{ "trigger": "zombie_spore_infect\t#using scripts\\zm\\_zm_weap_octobomb;", "contents": "_zm_weap_octobomb::zombie_spore_infect(${1:e_player}, ${2:e_grenade}, ${3:is_upgraded})"},
	{ "trigger": "zombie_explodes\t#using scripts\\zm\\_zm_weap_octobomb;", "contents": "_zm_weap_octobomb::zombie_explodes()"},
	{ "trigger": "do_tentacle_grab\t#using scripts\\zm\\_zm_weap_octobomb; Randomly grabs farthest zombie with a time range of n_wait_grab", "contents": "_zm_weap_octobomb::do_tentacle_grab(${1:e_player}, ${2:is_upgraded})"},
	{ "trigger": "octo_gib\t#using scripts\\zm\\_zm_weap_octobomb;", "contents": "_zm_weap_octobomb::octo_gib()"},
	{ "trigger": "special_attractor_spawn\t#using scripts\\zm\\_zm_weap_octobomb;", "contents": "_zm_weap_octobomb::special_attractor_spawn(${1:e_player}, ${2:max_attract_dist})"},
	{ "trigger": "vehicle_attractor\t#using scripts\\zm\\_zm_weap_octobomb;", "contents": "_zm_weap_octobomb::vehicle_attractor(${1:e_grenade})"},
	{ "trigger": "vehicle_attractor_damage\t#using scripts\\zm\\_zm_weap_octobomb;", "contents": "_zm_weap_octobomb::vehicle_attractor_damage(${1:e_player})"},
	{ "trigger": "parasite_variables\t#using scripts\\zm\\_zm_weap_octobomb;", "contents": "_zm_weap_octobomb::parasite_variables(${1:e_grenade})"},
	{ "trigger": "parasite_attractor\t#using scripts\\zm\\_zm_weap_octobomb;", "contents": "_zm_weap_octobomb::parasite_attractor(${1:e_grenade})"},
	{ "trigger": "parasite_attractor_grab\t#using scripts\\zm\\_zm_weap_octobomb;", "contents": "_zm_weap_octobomb::parasite_attractor_grab(${1:e_grenade})"},
	{ "trigger": "sndAttackVox\t#using scripts\\zm\\_zm_weap_octobomb;", "contents": "_zm_weap_octobomb::sndAttackVox()"},
	{ "trigger": "get_thrown_octobomb\t#using scripts\\zm\\_zm_weap_octobomb;", "contents": "_zm_weap_octobomb::get_thrown_octobomb()"},
	{ "trigger": "octobomb_exists\t#using scripts\\zm\\_zm_weap_octobomb;", "contents": "_zm_weap_octobomb::octobomb_exists()"},
	{ "trigger": "octobomb_give\t#using scripts\\zm\\_zm_weap_octobomb;", "contents": "_zm_weap_octobomb::octobomb_give(${1:player})"},
	{ "trigger": "move_ring\t#using scripts\\zm\\_zm_game_module_utility;", "contents": "zm_game_module_utility::move_ring(${1:ring})"},
	{ "trigger": "rotate_ring\t#using scripts\\zm\\_zm_game_module_utility;", "contents": "zm_game_module_utility::rotate_ring(${1:forward})"},
	{ "trigger": "isPistol\t#using scripts\\shared\\weapons\\_weapon_utils;", "contents": "weapon_utils::isPistol(${1:weapon})"},
	{ "trigger": "isFlashOrStunWeapon\t#using scripts\\shared\\weapons\\_weapon_utils;", "contents": "weapon_utils::isFlashOrStunWeapon(${1:weapon})"},
	{ "trigger": "isFlashOrStunDamage\t#using scripts\\shared\\weapons\\_weapon_utils;", "contents": "weapon_utils::isFlashOrStunDamage(${1:weapon}, ${2:meansofdeath})"},
	{ "trigger": "isMeleeMOD\t#using scripts\\shared\\weapons\\_weapon_utils;", "contents": "weapon_utils::isMeleeMOD(${1:mod})"},
	{ "trigger": "isPunch\t#using scripts\\shared\\weapons\\_weapon_utils;", "contents": "weapon_utils::isPunch(${1:weapon})"},
	{ "trigger": "isKnife\t#using scripts\\shared\\weapons\\_weapon_utils;", "contents": "weapon_utils::isKnife(${1:weapon})"},
	{ "trigger": "isNonBareHandsMelee\t#using scripts\\shared\\weapons\\_weapon_utils;", "contents": "weapon_utils::isNonBareHandsMelee(${1:weapon})"},
	{ "trigger": "getBaseWeaponParam\t#using scripts\\zm\\gametypes\\_weapon_utils;", "contents": "weapon_utils::getBaseWeaponParam(${1:weapon})"},
	{ "trigger": "gadget_combat_efficiency_is_inuse\t#using scripts\\shared\\abilities\\gadgets\\_gadget_combat_efficiency;", "contents": "_gadget_combat_efficiency::gadget_combat_efficiency_is_inuse(${1:slot})"},
	{ "trigger": "gadget_combat_efficiency_is_flickering\t#using scripts\\shared\\abilities\\gadgets\\_gadget_combat_efficiency;", "contents": "_gadget_combat_efficiency::gadget_combat_efficiency_is_flickering(${1:slot})"},
	{ "trigger": "gadget_combat_efficiency_on_flicker\t#using scripts\\shared\\abilities\\gadgets\\_gadget_combat_efficiency;", "contents": "_gadget_combat_efficiency::gadget_combat_efficiency_on_flicker(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_combat_efficiency_on_give\t#using scripts\\shared\\abilities\\gadgets\\_gadget_combat_efficiency;", "contents": "_gadget_combat_efficiency::gadget_combat_efficiency_on_give(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_combat_efficiency_on_take\t#using scripts\\shared\\abilities\\gadgets\\_gadget_combat_efficiency;", "contents": "_gadget_combat_efficiency::gadget_combat_efficiency_on_take(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_combat_efficiency_on_connect\t#using scripts\\shared\\abilities\\gadgets\\_gadget_combat_efficiency;", "contents": "_gadget_combat_efficiency::gadget_combat_efficiency_on_connect()"},
	{ "trigger": "gadget_combat_efficiency_on_spawn\t#using scripts\\shared\\abilities\\gadgets\\_gadget_combat_efficiency;", "contents": "_gadget_combat_efficiency::gadget_combat_efficiency_on_spawn()"},
	{ "trigger": "gadget_combat_efficiency_on_activate\t#using scripts\\shared\\abilities\\gadgets\\_gadget_combat_efficiency;", "contents": "_gadget_combat_efficiency::gadget_combat_efficiency_on_activate(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_combat_efficiency_on_off\t#using scripts\\shared\\abilities\\gadgets\\_gadget_combat_efficiency;", "contents": "_gadget_combat_efficiency::gadget_combat_efficiency_on_off(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_combat_efficiency_ready\t#using scripts\\shared\\abilities\\gadgets\\_gadget_combat_efficiency;", "contents": "_gadget_combat_efficiency::gadget_combat_efficiency_ready(${1:slot}, ${2:weapon})"},
	{ "trigger": "set_gadget_combat_efficiency_status\t#using scripts\\shared\\abilities\\gadgets\\_gadget_combat_efficiency;", "contents": "_gadget_combat_efficiency::set_gadget_combat_efficiency_status(${1:weapon}, ${2:status}, ${3:time})"},
	{ "trigger": "watch_transform\t#using scripts\\shared\\vehicles\\_prowler;", "contents": "prowler::watch_transform(${1:driver})"},
	{ "trigger": "update\t#using scripts\\shared\\vehicles\\_prowler;", "contents": "prowler::update()"},
	{ "trigger": "ProwlerCallback_VehicleDamage\t#using scripts\\shared\\vehicles\\_prowler;", "contents": "prowler::ProwlerCallback_VehicleDamage(${1:eInflictor}, ${2:eAttacker}, ${3:iDamage}, ${4:iDFlags}, ${5:sMeansOfDeath}, ${6:sWeapon}, ${7:vPoint}, ${8:vDir}, ${9:sHitLoc}, ${10:psOffsetTime}, ${11:damageFromUnderneath}, ${12:modelIndex}, ${13:partName})"},
	{ "trigger": "testMenu\t#using scripts\\zm\\gametypes\\_globallogic_utils;", "contents": "globallogic_utils::testMenu()"},
	{ "trigger": "testShock\t#using scripts\\zm\\gametypes\\_globallogic_utils;", "contents": "globallogic_utils::testShock()"},
	{ "trigger": "testHPs\t#using scripts\\zm\\gametypes\\_globallogic_utils;", "contents": "globallogic_utils::testHPs()"},
	{ "trigger": "timeUntilRoundEnd\t#using scripts\\zm\\gametypes\\_globallogic_utils;", "contents": "globallogic_utils::timeUntilRoundEnd()"},
	{ "trigger": "registerPostRoundEvent\t#using scripts\\zm\\gametypes\\_globallogic_utils;", "contents": "globallogic_utils::registerPostRoundEvent(${1:eventFunc})"},
	{ "trigger": "executePostRoundEvents\t#using scripts\\zm\\gametypes\\_globallogic_utils;", "contents": "globallogic_utils::executePostRoundEvents()"},
	{ "trigger": "getValueInRange\t#using scripts\\zm\\gametypes\\_globallogic_utils;", "contents": "globallogic_utils::getValueInRange(${1:value}, ${2:minValue}, ${3:maxValue})"},
	{ "trigger": "isValidClass\t#using scripts\\zm\\gametypes\\_globallogic_utils;", "contents": "globallogic_utils::isValidClass(${1:vclass})"},
	{ "trigger": "playTickingSound\t#using scripts\\zm\\gametypes\\_globallogic_utils;", "contents": "globallogic_utils::playTickingSound(${1:gametype_tick_sound})"},
	{ "trigger": "stopTickingSound\t#using scripts\\zm\\gametypes\\_globallogic_utils;", "contents": "globallogic_utils::stopTickingSound()"},
	{ "trigger": "gameTimer\t#using scripts\\zm\\gametypes\\_globallogic_utils;", "contents": "globallogic_utils::gameTimer()"},
	{ "trigger": "getTimePassed\t#using scripts\\zm\\gametypes\\_globallogic_utils;", "contents": "globallogic_utils::getTimePassed()"},
	{ "trigger": "pauseTimer\t#using scripts\\zm\\gametypes\\_globallogic_utils;", "contents": "globallogic_utils::pauseTimer()"},
	{ "trigger": "resumeTimer\t#using scripts\\zm\\gametypes\\_globallogic_utils;", "contents": "globallogic_utils::resumeTimer()"},
	{ "trigger": "getScorePerMinute\t#using scripts\\zm\\gametypes\\_globallogic_utils;", "contents": "globallogic_utils::getScorePerMinute(${1:team})"},
	{ "trigger": "getEstimatedTimeUntilScoreLimit\t#using scripts\\zm\\gametypes\\_globallogic_utils;", "contents": "globallogic_utils::getEstimatedTimeUntilScoreLimit(${1:team})"},
	{ "trigger": "rumbler\t#using scripts\\zm\\gametypes\\_globallogic_utils;", "contents": "globallogic_utils::rumbler()"},
	{ "trigger": "waitForTimeOrNotify\t#using scripts\\zm\\gametypes\\_globallogic_utils;", "contents": "globallogic_utils::waitForTimeOrNotify(${1:time}, ${2:notifyname})"},
	{ "trigger": "waitForTimeOrNotifyNoArtillery\t#using scripts\\zm\\gametypes\\_globallogic_utils;", "contents": "globallogic_utils::waitForTimeOrNotifyNoArtillery(${1:time}, ${2:notifyname})"},
	{ "trigger": "isHeadShot\t#using scripts\\zm\\gametypes\\_globallogic_utils;", "contents": "globallogic_utils::isHeadShot(${1:weapon}, ${2:sHitLoc}, ${3:sMeansOfDeath}, ${4:eInflictor})"},
	{ "trigger": "getHitLocHeight\t#using scripts\\zm\\gametypes\\_globallogic_utils;", "contents": "globallogic_utils::getHitLocHeight(${1:sHitLoc})"},
	{ "trigger": "debugLine\t#using scripts\\zm\\gametypes\\_globallogic_utils;", "contents": "globallogic_utils::debugLine(${1:start}, ${2:end})"},
	{ "trigger": "isExcluded\t#using scripts\\zm\\gametypes\\_globallogic_utils;", "contents": "globallogic_utils::isExcluded(${1:entity}, ${2:entityList})"},
	{ "trigger": "waitForTimeOrNotifies\t#using scripts\\zm\\gametypes\\_globallogic_utils;", "contents": "globallogic_utils::waitForTimeOrNotifies(${1:desiredDelay})"},
	{ "trigger": "logTeamWinString\t#using scripts\\zm\\gametypes\\_globallogic_utils;", "contents": "globallogic_utils::logTeamWinString(${1:wintype}, ${2:winner})"},
	{ "trigger": "on_player_spawned\t#using scripts\\shared\\weapons\\multilockapguidance;", "contents": "multilockap_guidance::on_player_spawned()"},
	{ "trigger": "ClearAPTarget\t#using scripts\\shared\\weapons\\multilockapguidance;", "contents": "multilockap_guidance::ClearAPTarget(${1:weapon}, ${2:whom})"},
	{ "trigger": "APFiredNotify\t#using scripts\\shared\\weapons\\multilockapguidance;", "contents": "multilockap_guidance::APFiredNotify()"},
	{ "trigger": "APToggleLoop\t#using scripts\\shared\\weapons\\multilockapguidance;", "contents": "multilockap_guidance::APToggleLoop()"},
	{ "trigger": "APLockLoop\t#using scripts\\shared\\weapons\\multilockapguidance;", "contents": "multilockap_guidance::APLockLoop(${1:weapon})"},
	{ "trigger": "DestroyLockOnCanceledMessage\t#using scripts\\shared\\weapons\\multilockapguidance;", "contents": "multilockap_guidance::DestroyLockOnCanceledMessage()"},
	{ "trigger": "DisplayLockOnCanceledMessage\t#using scripts\\shared\\weapons\\multilockapguidance;", "contents": "multilockap_guidance::DisplayLockOnCanceledMessage()"},
	{ "trigger": "GetBestTarget\t#using scripts\\shared\\weapons\\multilockapguidance;", "contents": "multilockap_guidance::GetBestTarget(${1:weapon})"},
	{ "trigger": "TargetInsertionSortCompare\t#using scripts\\shared\\weapons\\multilockapguidance;", "contents": "multilockap_guidance::TargetInsertionSortCompare(${1:a}, ${2:b})"},
	{ "trigger": "InsideAPReticleNoLock\t#using scripts\\shared\\weapons\\multilockapguidance;", "contents": "multilockap_guidance::InsideAPReticleNoLock(${1:target})"},
	{ "trigger": "InsideAPReticleLocked\t#using scripts\\shared\\weapons\\multilockapguidance;", "contents": "multilockap_guidance::InsideAPReticleLocked(${1:target})"},
	{ "trigger": "IsStillValidTarget\t#using scripts\\shared\\weapons\\multilockapguidance;", "contents": "multilockap_guidance::IsStillValidTarget(${1:weapon}, ${2:ent})"},
	{ "trigger": "SeekerSound\t#using scripts\\shared\\weapons\\multilockapguidance;", "contents": "multilockap_guidance::SeekerSound(${1:alias}, ${2:looping}, ${3:id})"},
	{ "trigger": "LockSightTest\t#using scripts\\shared\\weapons\\multilockapguidance;", "contents": "multilockap_guidance::LockSightTest(${1:target})"},
	{ "trigger": "func_drop_when_players_own\t#using scripts\\zm\\_zm_powerup_shield_charge;", "contents": "zm_powerup_shield_charge::func_drop_when_players_own()"},
	{ "trigger": "grab_shield_charge\t#using scripts\\zm\\_zm_powerup_shield_charge;", "contents": "zm_powerup_shield_charge::grab_shield_charge(${1:player})"},
	{ "trigger": "shield_charge_powerup\t#using scripts\\zm\\_zm_powerup_shield_charge;", "contents": "zm_powerup_shield_charge::shield_charge_powerup(${1:item}, ${2:player})"},
	{ "trigger": "shield_on_hud\t#using scripts\\zm\\_zm_powerup_shield_charge;", "contents": "zm_powerup_shield_charge::shield_on_hud(${1:drop_item}, ${2:player_team})"},
	{ "trigger": "full_ammo_move_hud\t#using scripts\\zm\\_zm_powerup_shield_charge;", "contents": "zm_powerup_shield_charge::full_ammo_move_hud(${1:player_team})"},
	{ "trigger": "RegisterInterfaceAttributes\t#using scripts\\shared\\vehicles\\_hunter;", "contents": "hunter::RegisterInterfaceAttributes(${1:archetype})"},
	{ "trigger": "hunter_SpawnDrones\t#using scripts\\shared\\vehicles\\_hunter;", "contents": "hunter::hunter_SpawnDrones()"},
	{ "trigger": "defaultRole\t#using scripts\\shared\\vehicles\\_hunter;", "contents": "hunter::defaultRole()"},
	{ "trigger": "shut_off_fx\t#using scripts\\shared\\vehicles\\_hunter;", "contents": "hunter::shut_off_fx()"},
	{ "trigger": "kill_drones\t#using scripts\\shared\\vehicles\\_hunter;", "contents": "hunter::kill_drones()"},
	{ "trigger": "state_death_enter\t#using scripts\\shared\\vehicles\\_hunter;", "contents": "hunter::state_death_enter(${1:params})"},
	{ "trigger": "state_death_update\t#using scripts\\shared\\vehicles\\_hunter;", "contents": "hunter::state_death_update(${1:params})"},
	{ "trigger": "state_unaware_enter\t#using scripts\\shared\\vehicles\\_hunter;", "contents": "hunter::state_unaware_enter(${1:params})"},
	{ "trigger": "state_unaware_update\t#using scripts\\shared\\vehicles\\_hunter;", "contents": "hunter::state_unaware_update(${1:params})"},
	{ "trigger": "state_unaware_exit\t#using scripts\\shared\\vehicles\\_hunter;", "contents": "hunter::state_unaware_exit(${1:params})"},
	{ "trigger": "Movement_Thread_Wander\t#using scripts\\shared\\vehicles\\_hunter;", "contents": "hunter::Movement_Thread_Wander()"},
	{ "trigger": "enable_turrets\t#using scripts\\shared\\vehicles\\_hunter;", "contents": "hunter::enable_turrets()"},
	{ "trigger": "disable_turrets\t#using scripts\\shared\\vehicles\\_hunter;", "contents": "hunter::disable_turrets()"},
	{ "trigger": "side_turrets_forward\t#using scripts\\shared\\vehicles\\_hunter;", "contents": "hunter::side_turrets_forward()"},
	{ "trigger": "state_combat_enter\t#using scripts\\shared\\vehicles\\_hunter;", "contents": "hunter::state_combat_enter(${1:params})"},
	{ "trigger": "state_combat_update\t#using scripts\\shared\\vehicles\\_hunter;", "contents": "hunter::state_combat_update(${1:params})"},
	{ "trigger": "state_combat_exit\t#using scripts\\shared\\vehicles\\_hunter;", "contents": "hunter::state_combat_exit(${1:params})"},
	{ "trigger": "state_strafe_enter\t#using scripts\\shared\\vehicles\\_hunter;", "contents": "hunter::state_strafe_enter(${1:params})"},
	{ "trigger": "state_strafe_update\t#using scripts\\shared\\vehicles\\_hunter;", "contents": "hunter::state_strafe_update(${1:params})"},
	{ "trigger": "state_strafe_exit\t#using scripts\\shared\\vehicles\\_hunter;", "contents": "hunter::state_strafe_exit(${1:params})"},
	{ "trigger": "GetNextMovePosition_tactical\t#using scripts\\shared\\vehicles\\_hunter;", "contents": "hunter::GetNextMovePosition_tactical(${1:enemy})"},
	{ "trigger": "Movement_Thread_StayInDistance\t#using scripts\\shared\\vehicles\\_hunter;", "contents": "hunter::Movement_Thread_StayInDistance()"},
	{ "trigger": "Delay_Target_ToEnemy_Thread\t#using scripts\\shared\\vehicles\\_hunter;", "contents": "hunter::Delay_Target_ToEnemy_Thread(${1:point}, ${2:enemy}, ${3:timeToHit})"},
	{ "trigger": "Attack_Thread_MainTurret\t#using scripts\\shared\\vehicles\\_hunter;", "contents": "hunter::Attack_Thread_MainTurret()"},
	{ "trigger": "Attack_Thread_rocket\t#using scripts\\shared\\vehicles\\_hunter;", "contents": "hunter::Attack_Thread_rocket()"},
	{ "trigger": "side_turret_get_best_target\t#using scripts\\shared\\vehicles\\_hunter;", "contents": "hunter::side_turret_get_best_target(${1:a_potential_targets}, ${2:n_index})"},
	{ "trigger": "hunter_fire_one_missile\t#using scripts\\shared\\vehicles\\_hunter;", "contents": "hunter::hunter_fire_one_missile(${1:launcher_index}, ${2:target}, ${3:offset}, ${4:blinkLights}, ${5:waittimeAfterBlinkLights})"},
	{ "trigger": "remote_missile_life\t#using scripts\\shared\\vehicles\\_hunter;", "contents": "hunter::remote_missile_life()"},
	{ "trigger": "hunter_lockon_fx\t#using scripts\\shared\\vehicles\\_hunter;", "contents": "hunter::hunter_lockon_fx()"},
	{ "trigger": "getEnemyArray\t#using scripts\\shared\\vehicles\\_hunter;", "contents": "hunter::getEnemyArray(${1:include_ai}, ${2:include_player})"},
	{ "trigger": "is_point_in_view\t#using scripts\\shared\\vehicles\\_hunter;", "contents": "hunter::is_point_in_view(${1:point}, ${2:do_trace})"},
	{ "trigger": "is_valid_target\t#using scripts\\shared\\vehicles\\_hunter;", "contents": "hunter::is_valid_target(${1:target}, ${2:do_trace})"},
	{ "trigger": "get_enemies_in_view\t#using scripts\\shared\\vehicles\\_hunter;", "contents": "hunter::get_enemies_in_view(${1:do_trace})"},
	{ "trigger": "hunter_scanner_SetTargetEntity\t#using scripts\\shared\\vehicles\\_hunter;", "contents": "hunter::hunter_scanner_SetTargetEntity(${1:targetEnt}, ${2:offset})"},
	{ "trigger": "hunter_scanner_ClearLookTarget\t#using scripts\\shared\\vehicles\\_hunter;", "contents": "hunter::hunter_scanner_ClearLookTarget()"},
	{ "trigger": "hunter_scanner_SetTargetPosition\t#using scripts\\shared\\vehicles\\_hunter;", "contents": "hunter::hunter_scanner_SetTargetPosition(${1:targetPos})"},
	{ "trigger": "hunter_frontScanning\t#using scripts\\shared\\vehicles\\_hunter;", "contents": "hunter::hunter_frontScanning()"},
	{ "trigger": "hunter_exit_vehicle\t#using scripts\\shared\\vehicles\\_hunter;", "contents": "hunter::hunter_exit_vehicle()"},
	{ "trigger": "hunter_scripted\t#using scripts\\shared\\vehicles\\_hunter;", "contents": "hunter::hunter_scripted(${1:params})"},
	{ "trigger": "player_fire_update_side_turret_1\t#using scripts\\shared\\vehicles\\_hunter;", "contents": "hunter::player_fire_update_side_turret_1()"},
	{ "trigger": "player_fire_update_side_turret_2\t#using scripts\\shared\\vehicles\\_hunter;", "contents": "hunter::player_fire_update_side_turret_2()"},
	{ "trigger": "player_fire_update_rocket\t#using scripts\\shared\\vehicles\\_hunter;", "contents": "hunter::player_fire_update_rocket()"},
	{ "trigger": "hunter_collision_player\t#using scripts\\shared\\vehicles\\_hunter;", "contents": "hunter::hunter_collision_player()"},
	{ "trigger": "hunter_update_rumble\t#using scripts\\shared\\vehicles\\_hunter;", "contents": "hunter::hunter_update_rumble()"},
	{ "trigger": "hunter_self_destruct\t#using scripts\\shared\\vehicles\\_hunter;", "contents": "hunter::hunter_self_destruct()"},
	{ "trigger": "hunter_level_out_for_landing\t#using scripts\\shared\\vehicles\\_hunter;", "contents": "hunter::hunter_level_out_for_landing()"},
	{ "trigger": "hunter_emped\t#using scripts\\shared\\vehicles\\_hunter;", "contents": "hunter::hunter_emped(${1:params})"},
	{ "trigger": "hunter_pain_for_time\t#using scripts\\shared\\vehicles\\_hunter;", "contents": "hunter::hunter_pain_for_time(${1:time}, ${2:velocityStablizeParam}, ${3:rotationStablizeParam}, ${4:restoreLookPoint})"},
	{ "trigger": "hunter_pain_small\t#using scripts\\shared\\vehicles\\_hunter;", "contents": "hunter::hunter_pain_small(${1:eAttacker}, ${2:damageType}, ${3:hitPoint}, ${4:hitDirection}, ${5:hitLocationInfo}, ${6:partName})"},
	{ "trigger": "HunterCallback_VehicleDamage\t#using scripts\\shared\\vehicles\\_hunter;", "contents": "hunter::HunterCallback_VehicleDamage(${1:eInflictor}, ${2:eAttacker}, ${3:iDamage}, ${4:iDFlags}, ${5:sMeansOfDeath}, ${6:weapon}, ${7:vPoint}, ${8:vDir}, ${9:sHitLoc}, ${10:vDamageOrigin}, ${11:psOffsetTime}, ${12:damageFromUnderneath}, ${13:modelIndex}, ${14:partName}, ${15:vSurfaceNormal})"},
	{ "trigger": "register\t#using scripts\\shared\\weapons\\_hive_gun;", "contents": "hive_gun::register()"},
	{ "trigger": "createFireflyPodWatcher\t#using scripts\\shared\\weapons\\_hive_gun; self == player", "contents": "hive_gun::createFireflyPodWatcher()"},
	{ "trigger": "on_spawn_firefly_pod\t#using scripts\\shared\\weapons\\_hive_gun; self == betty ent", "contents": "hive_gun::on_spawn_firefly_pod(${1:watcher}, ${2:owner})"},
	{ "trigger": "start_damage_effects\t#using scripts\\shared\\weapons\\_hive_gun;", "contents": "hive_gun::start_damage_effects()"},
	{ "trigger": "end_damage_effects\t#using scripts\\shared\\weapons\\_hive_gun;", "contents": "hive_gun::end_damage_effects()"},
	{ "trigger": "on_damage_firefly_pod\t#using scripts\\shared\\weapons\\_hive_gun;", "contents": "hive_gun::on_damage_firefly_pod(${1:eAttacker}, ${2:eInflictor}, ${3:weapon}, ${4:meansOfDeath}, ${5:damage})"},
	{ "trigger": "spawn_firefly_mover\t#using scripts\\shared\\weapons\\_hive_gun; self == betty ent", "contents": "hive_gun::spawn_firefly_mover()"},
	{ "trigger": "firefly_mover_damage\t#using scripts\\shared\\weapons\\_hive_gun;", "contents": "hive_gun::firefly_mover_damage()"},
	{ "trigger": "kill_firefly_mover\t#using scripts\\shared\\weapons\\_hive_gun; self == betty ent", "contents": "hive_gun::kill_firefly_mover()"},
	{ "trigger": "firefly_pod_detonate\t#using scripts\\shared\\weapons\\_hive_gun; self == betty", "contents": "hive_gun::firefly_pod_detonate(${1:attacker}, ${2:weapon}, ${3:target})"},
	{ "trigger": "firefly_pod_destroyed\t#using scripts\\shared\\weapons\\_hive_gun; self == betty", "contents": "hive_gun::firefly_pod_destroyed()"},
	{ "trigger": "firefly_killcam_move\t#using scripts\\shared\\weapons\\_hive_gun; self == script mover spawned at weaponobject location", "contents": "hive_gun::firefly_killcam_move(${1:position}, ${2:time})"},
	{ "trigger": "firefly_killcam_stop\t#using scripts\\shared\\weapons\\_hive_gun;", "contents": "hive_gun::firefly_killcam_stop()"},
	{ "trigger": "firefly_move\t#using scripts\\shared\\weapons\\_hive_gun; self == script mover spawned at weaponobject location", "contents": "hive_gun::firefly_move(${1:position}, ${2:time})"},
	{ "trigger": "firefly_partial_move\t#using scripts\\shared\\weapons\\_hive_gun; self == script mover spawned at weaponobject location", "contents": "hive_gun::firefly_partial_move(${1:target}, ${2:position}, ${3:time}, ${4:percent})"},
	{ "trigger": "firefly_rotate\t#using scripts\\shared\\weapons\\_hive_gun; self == script mover spawned at weaponobject location", "contents": "hive_gun::firefly_rotate(${1:angles}, ${2:time})"},
	{ "trigger": "firefly_check_for_collisions\t#using scripts\\shared\\weapons\\_hive_gun; self == script mover spawned at weaponobject location", "contents": "hive_gun::firefly_check_for_collisions(${1:target}, ${2:move_to}, ${3:time})"},
	{ "trigger": "firefly_pod_rotated_point\t#using scripts\\shared\\weapons\\_hive_gun;", "contents": "hive_gun::firefly_pod_rotated_point(${1:degrees}, ${2:radius}, ${3:height})"},
	{ "trigger": "firefly_pod_random_point\t#using scripts\\shared\\weapons\\_hive_gun;", "contents": "hive_gun::firefly_pod_random_point()"},
	{ "trigger": "firefly_pod_random_movement\t#using scripts\\shared\\weapons\\_hive_gun; self == script mover spawned at weaponobject location", "contents": "hive_gun::firefly_pod_random_movement()"},
	{ "trigger": "firefly_spyrograph_patrol\t#using scripts\\shared\\weapons\\_hive_gun; self == script mover spawned at weaponobject location", "contents": "hive_gun::firefly_spyrograph_patrol(${1:degrees}, ${2:increment}, ${3:radius})"},
	{ "trigger": "firefly_damage_target\t#using scripts\\shared\\weapons\\_hive_gun; self == script mover spawned at weaponobject location", "contents": "hive_gun::firefly_damage_target(${1:target})"},
	{ "trigger": "firefly_watch_for_target_death\t#using scripts\\shared\\weapons\\_hive_gun;", "contents": "hive_gun::firefly_watch_for_target_death(${1:target})"},
	{ "trigger": "firefly_watch_for_game_ended\t#using scripts\\shared\\weapons\\_hive_gun;", "contents": "hive_gun::firefly_watch_for_game_ended(${1:target})"},
	{ "trigger": "firefly_death\t#using scripts\\shared\\weapons\\_hive_gun;", "contents": "hive_gun::firefly_death()"},
	{ "trigger": "cleanup_killcam_entity\t#using scripts\\shared\\weapons\\_hive_gun;", "contents": "hive_gun::cleanup_killcam_entity(${1:killcamEnt})"},
	{ "trigger": "get_attack_speed\t#using scripts\\shared\\weapons\\_hive_gun;", "contents": "hive_gun::get_attack_speed(${1:target})"},
	{ "trigger": "firefly_attack\t#using scripts\\shared\\weapons\\_hive_gun;", "contents": "hive_gun::firefly_attack(${1:target}, ${2:state})"},
	{ "trigger": "get_crumb_position\t#using scripts\\shared\\weapons\\_hive_gun;", "contents": "hive_gun::get_crumb_position(${1:target})"},
	{ "trigger": "target_bread_crumbs\t#using scripts\\shared\\weapons\\_hive_gun;", "contents": "hive_gun::target_bread_crumbs(${1:target})"},
	{ "trigger": "get_target_bread_crumb\t#using scripts\\shared\\weapons\\_hive_gun;", "contents": "hive_gun::get_target_bread_crumb(${1:target})"},
	{ "trigger": "firefly_check_move\t#using scripts\\shared\\weapons\\_hive_gun;", "contents": "hive_gun::firefly_check_move(${1:position}, ${2:target})"},
	{ "trigger": "firefly_chase\t#using scripts\\shared\\weapons\\_hive_gun; self == script mover spawned at weaponobject location", "contents": "hive_gun::firefly_chase(${1:target})"},
	{ "trigger": "firefly_pod_start\t#using scripts\\shared\\weapons\\_hive_gun; self == script mover spawned at weaponobject location", "contents": "hive_gun::firefly_pod_start(${1:start_pos}, ${2:target}, ${3:linked})"},
	{ "trigger": "firefly_pod_release_fireflies\t#using scripts\\shared\\weapons\\_hive_gun; self == script mover spawned at weaponobject location", "contents": "hive_gun::firefly_pod_release_fireflies(${1:attacker}, ${2:target})"},
	{ "trigger": "firefly_pod_should_damage\t#using scripts\\shared\\weapons\\_hive_gun;", "contents": "hive_gun::firefly_pod_should_damage(${1:watcher}, ${2:attacker}, ${3:weapon}, ${4:damage})"},
	{ "trigger": "setup\t#using scripts\\shared\\name_shared;", "contents": "name::setup()"},
	{ "trigger": "add_nationality_names\t#using scripts\\shared\\name_shared;", "contents": "name::add_nationality_names(${1:str_nationality})"},
	{ "trigger": "american_names\t#using scripts\\shared\\name_shared;", "contents": "name::american_names()"},
	{ "trigger": "egyptian_names\t#using scripts\\shared\\name_shared;", "contents": "name::egyptian_names()"},
	{ "trigger": "sing_police_names\t#using scripts\\shared\\name_shared;", "contents": "name::sing_police_names()"},
	{ "trigger": "russian_names\t#using scripts\\shared\\name_shared;", "contents": "name::russian_names()"},
	{ "trigger": "agent_names\t#using scripts\\shared\\name_shared;", "contents": "name::agent_names()"},
	{ "trigger": "chinese_names\t#using scripts\\shared\\name_shared;", "contents": "name::chinese_names()"},
	{ "trigger": "navy_names\t#using scripts\\shared\\name_shared;", "contents": "name::navy_names()"},
	{ "trigger": "police_names\t#using scripts\\shared\\name_shared;", "contents": "name::police_names()"},
	{ "trigger": "security_names\t#using scripts\\shared\\name_shared;", "contents": "name::security_names()"},
	{ "trigger": "seal_names\t#using scripts\\shared\\name_shared;", "contents": "name::seal_names()"},
	{ "trigger": "add_name\t#using scripts\\shared\\name_shared;", "contents": "name::add_name(${1:nationality}, ${2:thename})"},
	{ "trigger": "randomize_name_list\t#using scripts\\shared\\name_shared;", "contents": "name::randomize_name_list(${1:nationality})"},
	{ "trigger": "get\t#using scripts\\shared\\name_shared;", "contents": "name::get(${1:override})"},
	{ "trigger": "get_ai_classname\t#using scripts\\shared\\name_shared;", "contents": "name::get_ai_classname()"},
	{ "trigger": "add_override_name_func\t#using scripts\\shared\\name_shared;", "contents": "name::add_override_name_func(${1:nationality}, ${2:func})"},
	{ "trigger": "get_name_for_nationality\t#using scripts\\shared\\name_shared;", "contents": "name::get_name_for_nationality(${1:nationality})"},
	{ "trigger": "is_seal_member\t#using scripts\\shared\\name_shared;", "contents": "name::is_seal_member(${1:str_classname})"},
	{ "trigger": "is_navy_member\t#using scripts\\shared\\name_shared;", "contents": "name::is_navy_member(${1:str_classname})"},
	{ "trigger": "is_police_member\t#using scripts\\shared\\name_shared;", "contents": "name::is_police_member(${1:str_classname})"},
	{ "trigger": "is_security_member\t#using scripts\\shared\\name_shared;", "contents": "name::is_security_member(${1:str_classname})"},
	{ "trigger": "is_special_agent_member\t#using scripts\\shared\\name_shared;", "contents": "name::is_special_agent_member(${1:str_classname})"},
	{ "trigger": "getRankFromName\t#using scripts\\shared\\name_shared;", "contents": "name::getRankFromName(${1:name})"},
	{ "trigger": "issubstr_match_any\t#using scripts\\shared\\name_shared;", "contents": "name::issubstr_match_any(${1:str_match}, ${2:str_search_array})"},
	{ "trigger": "start_gametype\t#using scripts\\shared\\entityheadicons_shared;", "contents": "entityheadicons::start_gametype()"},
	{ "trigger": "setEntityHeadIcon\t#using scripts\\shared\\entityheadicons_shared; \"allies\", \"axis\", \"team3\", \"all\", \"none\"", "contents": "entityheadicons::setEntityHeadIcon(${1:team}, ${2:owner}, ${3:offset}, ${4:objective}, ${5:constant_size})"},
	{ "trigger": "updateEntityHeadTeamIcon\t#using scripts\\shared\\entityheadicons_shared;", "contents": "entityheadicons::updateEntityHeadTeamIcon(${1:entity}, ${2:team}, ${3:icon}, ${4:constant_size})"},
	{ "trigger": "updateEntityHeadClientIcon\t#using scripts\\shared\\entityheadicons_shared;", "contents": "entityheadicons::updateEntityHeadClientIcon(${1:entity}, ${2:icon}, ${3:constant_size})"},
	{ "trigger": "updateEntityHeadTeamObjective\t#using scripts\\shared\\entityheadicons_shared;", "contents": "entityheadicons::updateEntityHeadTeamObjective(${1:entity}, ${2:team}, ${3:objective}, ${4:constant_size})"},
	{ "trigger": "updateEntityHeadClientObjective\t#using scripts\\shared\\entityheadicons_shared;", "contents": "entityheadicons::updateEntityHeadClientObjective(${1:entity}, ${2:objective}, ${3:constant_size})"},
	{ "trigger": "destroyHeadIconsOnDeath\t#using scripts\\shared\\entityheadicons_shared;", "contents": "entityheadicons::destroyHeadIconsOnDeath()"},
	{ "trigger": "destroyEntityHeadIcons\t#using scripts\\shared\\entityheadicons_shared;", "contents": "entityheadicons::destroyEntityHeadIcons()"},
	{ "trigger": "updateEntityHeadIconPos\t#using scripts\\shared\\entityheadicons_shared;", "contents": "entityheadicons::updateEntityHeadIconPos(${1:headicon})"},
	{ "trigger": "setEntityHeadIconsHiddenWhileControlling\t#using scripts\\shared\\entityheadicons_shared;", "contents": "entityheadicons::setEntityHeadIconsHiddenWhileControlling()"},
	{ "trigger": "perplayer::enable\t#using scripts\\zm\\gametypes\\_perplayer;", "contents": "_perplayer::perplayer::enable(${1:objectiveCreator);})"},
	{ "trigger": "perplayer::disable\t#using scripts\\zm\\gametypes\\_perplayer;", "contents": "_perplayer::perplayer::disable(${1:objectiveCreator);})"},
	{ "trigger": "SetPlayerBurning\t#using scripts\\shared\\_burnplayer;", "contents": "burnplayer::SetPlayerBurning(${1:duration}, ${2:interval}, ${3:damagePerInterval}, ${4:attacker}, ${5:weapon})"},
	{ "trigger": "TakingBurnDamage\t#using scripts\\shared\\_burnplayer;", "contents": "burnplayer::TakingBurnDamage(${1:eAttacker}, ${2:weapon}, ${3:sMeansOfDeath})"},
	{ "trigger": "WatchBurnFinished\t#using scripts\\shared\\_burnplayer;", "contents": "burnplayer::WatchBurnFinished()"},
	{ "trigger": "WatchBurnTimer\t#using scripts\\shared\\_burnplayer;", "contents": "burnplayer::WatchBurnTimer(${1:duration})"},
	{ "trigger": "WatchBurnDamage\t#using scripts\\shared\\_burnplayer;", "contents": "burnplayer::WatchBurnDamage(${1:interval}, ${2:damage}, ${3:attacker}, ${4:weapon})"},
	{ "trigger": "watchForWater\t#using scripts\\shared\\_burnplayer;", "contents": "burnplayer::watchForWater()"},
	{ "trigger": "defend\t#using scripts\\shared\\vehicles\\_scout_drone;", "contents": "scout_drone::defend(${1:s_centerpoint}, ${2:n_radius})"},
	{ "trigger": "guard\t#using scripts\\shared\\vehicles\\_scout_drone;", "contents": "scout_drone::guard(${1:v_centerpoint})"},
	{ "trigger": "loiter\t#using scripts\\shared\\vehicles\\_scout_drone;", "contents": "scout_drone::loiter(${1:v_center}, ${2:n_radius})"},
	{ "trigger": "patrol\t#using scripts\\shared\\vehicles\\_scout_drone;", "contents": "scout_drone::patrol(${1:start_node})"},
	{ "trigger": "set_patrol_path\t#using scripts\\shared\\vehicles\\_scout_drone;", "contents": "scout_drone::set_patrol_path(${1:patrol_path_start_node})"},
	{ "trigger": "state_unaware_enter\t#using scripts\\shared\\vehicles\\_scout_drone;", "contents": "scout_drone::state_unaware_enter()"},
	{ "trigger": "state_unaware_update\t#using scripts\\shared\\vehicles\\_scout_drone; follow a path", "contents": "scout_drone::state_unaware_update()"},
	{ "trigger": "state_lowalert_enter\t#using scripts\\shared\\vehicles\\_scout_drone;", "contents": "scout_drone::state_lowalert_enter()"},
	{ "trigger": "state_highalert_enter\t#using scripts\\shared\\vehicles\\_scout_drone;", "contents": "scout_drone::state_highalert_enter()"},
	{ "trigger": "state_alert_update\t#using scripts\\shared\\vehicles\\_scout_drone;", "contents": "scout_drone::state_alert_update()"},
	{ "trigger": "state_combat_enter\t#using scripts\\shared\\vehicles\\_scout_drone;", "contents": "scout_drone::state_combat_enter()"},
	{ "trigger": "_track_target_position\t#using scripts\\shared\\vehicles\\_scout_drone;", "contents": "scout_drone::_track_target_position(${1:target})"},
	{ "trigger": "state_combat_update\t#using scripts\\shared\\vehicles\\_scout_drone; track player", "contents": "scout_drone::state_combat_update()"},
	{ "trigger": "get_custom_damage_effect\t#using scripts\\shared\\vehicles\\_scout_drone;", "contents": "scout_drone::get_custom_damage_effect(${1:health_pct})"},
	{ "trigger": "scout_callback_damage\t#using scripts\\shared\\vehicles\\_scout_drone;", "contents": "scout_drone::scout_callback_damage(${1:eInflictor}, ${2:eAttacker}, ${3:iDamage}, ${4:iDFlags}, ${5:sMeansOfDeath}, ${6:weapon}, ${7:vPoint}, ${8:vDir}, ${9:sHitLoc}, ${10:psOffsetTime}, ${11:damageFromUnderneath}, ${12:modelIndex}, ${13:partName})"},
	{ "trigger": "scout_find_new_position\t#using scripts\\shared\\vehicles\\_scout_drone;", "contents": "scout_drone::scout_find_new_position()"},
	{ "trigger": "on_player_connect\t#using scripts\\zm\\_zm_weap_rocketshield;", "contents": "rocketshield::on_player_connect()"},
	{ "trigger": "watchFirstUse\t#using scripts\\zm\\_zm_weap_rocketshield;", "contents": "rocketshield::watchFirstUse()"},
	{ "trigger": "on_player_spawned\t#using scripts\\zm\\_zm_weap_rocketshield;", "contents": "rocketshield::on_player_spawned()"},
	{ "trigger": "player_watch_ammo_change\t#using scripts\\zm\\_zm_weap_rocketshield;", "contents": "rocketshield::player_watch_ammo_change()"},
	{ "trigger": "player_watch_max_ammo\t#using scripts\\zm\\_zm_weap_rocketshield;", "contents": "rocketshield::player_watch_max_ammo()"},
	{ "trigger": "check_weapon_ammo\t#using scripts\\zm\\_zm_weap_rocketshield;", "contents": "rocketshield::check_weapon_ammo(${1:weapon})"},
	{ "trigger": "player_watch_upgraded_pickup_from_table\t#using scripts\\zm\\_zm_weap_rocketshield;", "contents": "rocketshield::player_watch_upgraded_pickup_from_table()"},
	{ "trigger": "player_damage_rocketshield\t#using scripts\\zm\\_zm_weap_rocketshield;", "contents": "rocketshield::player_damage_rocketshield(${1:iDamage}, ${2:bHeld}, ${3:fromCode = false}, ${4:smod = \"MOD_UNKNOWN\"})"},
	{ "trigger": "player_watch_shield_juke\t#using scripts\\zm\\_zm_weap_rocketshield; self == player", "contents": "rocketshield::player_watch_shield_juke()"},
	{ "trigger": "riotshield_melee_juke\t#using scripts\\zm\\_zm_weap_rocketshield;", "contents": "rocketshield::riotshield_melee_juke(${1:weapon})"},
	{ "trigger": "riotshield_get_juke_enemies_in_range\t#using scripts\\zm\\_zm_weap_rocketshield;", "contents": "rocketshield::riotshield_get_juke_enemies_in_range()"},
	{ "trigger": "spawn_recharge_tanks\t#using scripts\\zm\\_zm_weap_rocketshield;", "contents": "rocketshield::spawn_recharge_tanks()"},
	{ "trigger": "create_bottle_unitrigger\t#using scripts\\zm\\_zm_weap_rocketshield;", "contents": "rocketshield::create_bottle_unitrigger(${1:v_origin}, ${2:v_angles})"},
	{ "trigger": "bottle_trigger_visibility\t#using scripts\\zm\\_zm_weap_rocketshield;", "contents": "rocketshield::bottle_trigger_visibility(${1:player})"},
	{ "trigger": "shield_recharge_trigger_think\t#using scripts\\zm\\_zm_weap_rocketshield;", "contents": "rocketshield::shield_recharge_trigger_think()"},
	{ "trigger": "bottle_trigger_activate\t#using scripts\\zm\\_zm_weap_rocketshield;", "contents": "rocketshield::bottle_trigger_activate(${1:trig_stub}, ${2:player})"},
	{ "trigger": "pickedUpBallisticKnife\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::pickedUpBallisticKnife()"},
	{ "trigger": "trackAssists\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::trackAssists(${1:attacker}, ${2:damage}, ${3:isFlare})"},
	{ "trigger": "destroyedEquipment\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::destroyedEquipment(${1:weapon})"},
	{ "trigger": "destroyedTacticalInsert\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::destroyedTacticalInsert()"},
	{ "trigger": "addFlySwatterStat\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::addFlySwatterStat(${1:weapon}, ${2:aircraft})"},
	{ "trigger": "destroyNonAirScoreStreak_PostStatsLock\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::destroyNonAirScoreStreak_PostStatsLock(${1:weapon})"},
	{ "trigger": "canProcessChallenges\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::canProcessChallenges()"},
	{ "trigger": "registerChallengesCallback\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::registerChallengesCallback(${1:callback}, ${2:func})"},
	{ "trigger": "doChallengeCallback\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::doChallengeCallback(${1:callback}, ${2:data})"},
	{ "trigger": "on_player_connect\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::on_player_connect()"},
	{ "trigger": "monitorReloads\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::monitorReloads()"},
	{ "trigger": "reloadThenKill\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::reloadThenKill(${1:reloadWeapon})"},
	{ "trigger": "reloadThenKillTimeOut\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::reloadThenKillTimeOut(${1:time})"},
	{ "trigger": "isDamageFromPlayerControlledAITank\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::isDamageFromPlayerControlledAITank(${1:eAttacker}, ${2:eInflictor}, ${3:weapon})"},
	{ "trigger": "isDamageFromPlayerControlledSentry\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::isDamageFromPlayerControlledSentry(${1:eAttacker}, ${2:eInflictor}, ${3:weapon})"},
	{ "trigger": "perkKills\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::perkKills(${1:victim}, ${2:isStunned}, ${3:time})"},
	{ "trigger": "flakjacketProtected\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::flakjacketProtected(${1:weapon}, ${2:attacker})"},
	{ "trigger": "earnedKillstreak\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::earnedKillstreak()"},
	{ "trigger": "genericBulletKill\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::genericBulletKill(${1:data}, ${2:victim}, ${3:weapon})"},
	{ "trigger": "isHighestScoringPlayer\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::isHighestScoringPlayer(${1:player})"},
	{ "trigger": "spawnWatcher\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::spawnWatcher()"},
	{ "trigger": "watchForDTP\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::watchForDTP()"},
	{ "trigger": "watchForMantle\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::watchForMantle()"},
	{ "trigger": "disarmedHackedCarepackage\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::disarmedHackedCarepackage()"},
	{ "trigger": "destroyed_car\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::destroyed_car()"},
	{ "trigger": "killedNemesis\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::killedNemesis()"},
	{ "trigger": "killWhileDamagingWithHPM\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::killWhileDamagingWithHPM()"},
	{ "trigger": "longDistanceHatchetKill\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::longDistanceHatchetKill()"},
	{ "trigger": "blockedSatellite\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::blockedSatellite()"},
	{ "trigger": "longDistanceKill\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::longDistanceKill()"},
	{ "trigger": "challengeRoundEnd\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::challengeRoundEnd(${1:data})"},
	{ "trigger": "roundEnd\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::roundEnd(${1:winner})"},
	{ "trigger": "gameEnd\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::gameEnd(${1:winner})"},
	{ "trigger": "getFinalKill\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::getFinalKill(${1:player})"},
	{ "trigger": "destroyRCBomb\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::destroyRCBomb(${1:weapon})"},
	{ "trigger": "capturedCrate\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::capturedCrate(${1:owner})"},
	{ "trigger": "destroyScoreStreak\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::destroyScoreStreak(${1:weapon}, ${2:playerControlled}, ${3:groundBased}, ${4:countAsKillstreakVehicle = true})"},
	{ "trigger": "watchForRapidDestroy\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::watchForRapidDestroy(${1:weapon})"},
	{ "trigger": "capturedObjective\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::capturedObjective(${1:captureTime}, ${2:objective})"},
	{ "trigger": "hackedOrDestroyedEquipment\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::hackedOrDestroyedEquipment()"},
	{ "trigger": "bladeKill\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::bladeKill()"},
	{ "trigger": "destroyedExplosive\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::destroyedExplosive(${1:weapon})"},
	{ "trigger": "assisted\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::assisted()"},
	{ "trigger": "earnedMicrowaveAssistScore\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::earnedMicrowaveAssistScore(${1:score})"},
	{ "trigger": "earnedCUAVAssistScore\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::earnedCUAVAssistScore(${1:score})"},
	{ "trigger": "earnedUAVAssistScore\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::earnedUAVAssistScore(${1:score})"},
	{ "trigger": "earnedSatelliteAssistScore\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::earnedSatelliteAssistScore(${1:score})"},
	{ "trigger": "earnedEMPAssistScore\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::earnedEMPAssistScore(${1:score})"},
	{ "trigger": "teamCompletedChallenge\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::teamCompletedChallenge(${1:team}, ${2:challenge})"},
	{ "trigger": "endedEarly\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::endedEarly(${1:winner})"},
	{ "trigger": "getLosersTeamScores\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::getLosersTeamScores(${1:winner})"},
	{ "trigger": "didLoserFailChallenge\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::didLoserFailChallenge(${1:winner}, ${2:challenge})"},
	{ "trigger": "challengeGameEnd\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::challengeGameEnd(${1:data})"},
	{ "trigger": "multiKill\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::multiKill(${1:killCount}, ${2:weapon})"},
	{ "trigger": "domAttackerMultiKill\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::domAttackerMultiKill(${1:killCount})"},
	{ "trigger": "totalDomination\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::totalDomination(${1:team})"},
	{ "trigger": "holdFlagEntireMatch\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::holdFlagEntireMatch(${1:team}, ${2:label})"},
	{ "trigger": "capturedBFirstMinute\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::capturedBFirstMinute()"},
	{ "trigger": "controlZoneEntirely\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::controlZoneEntirely(${1:team})"},
	{ "trigger": "multi_LMG_SMG_Kill\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::multi_LMG_SMG_Kill()"},
	{ "trigger": "killedZoneAttacker\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::killedZoneAttacker(${1:weapon})"},
	{ "trigger": "killedDog\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::killedDog()"},
	{ "trigger": "updatezonemultikills\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::updatezonemultikills()"},
	{ "trigger": "multi_RCBomb_Kill\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::multi_RCBomb_Kill()"},
	{ "trigger": "multi_RemoteMissile_Kill\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::multi_RemoteMissile_Kill()"},
	{ "trigger": "multi_MGL_Kill\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::multi_MGL_Kill()"},
	{ "trigger": "immediateCapture\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::immediateCapture()"},
	{ "trigger": "killedLastContester\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::killedLastContester()"},
	{ "trigger": "bothBombsDetonateWithinTime\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::bothBombsDetonateWithinTime()"},
	{ "trigger": "calledInCarePackage\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::calledInCarePackage()"},
	{ "trigger": "destroyedHelicopter\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::destroyedHelicopter(${1:attacker}, ${2:weapon}, ${3:damageType}, ${4:playerControlled})"},
	{ "trigger": "destroyedQRDrone\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::destroyedQRDrone(${1:damageType}, ${2:weapon})"},
	{ "trigger": "destroyedPlayerControlledAircraft\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::destroyedPlayerControlledAircraft()"},
	{ "trigger": "destroyedAircraft\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::destroyedAircraft(${1:attacker}, ${2:weapon}, ${3:playerControlled})"},
	{ "trigger": "killstreakTen\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::killstreakTen()"},
	{ "trigger": "scavengedGrenade\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::scavengedGrenade()"},
	{ "trigger": "stunnedTankWithEMPGrenade\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::stunnedTankWithEMPGrenade(${1:attacker})"},
	{ "trigger": "playerKilled\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::playerKilled(${1:eInflictor}, ${2:attacker}, ${3:iDamage}, ${4:sMeansOfDeath}, ${5:weapon}, ${6:sHitLoc}, ${7:attackerStance}, ${8:bledOut})"},
	{ "trigger": "doScoreEventCallback\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::doScoreEventCallback(${1:callback}, ${2:data})"},
	{ "trigger": "waitAndProcessPlayerKilledCallback\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::waitAndProcessPlayerKilledCallback(${1:data})"},
	{ "trigger": "weaponIsKnife\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::weaponIsKnife(${1:weapon})"},
	{ "trigger": "eventReceived\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::eventReceived(${1:eventName})"},
	{ "trigger": "monitor_player_sprint\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::monitor_player_sprint()"},
	{ "trigger": "isFlashbanged\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::isFlashbanged()"},
	{ "trigger": "isHeatWaveStunned\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::isHeatWaveStunned()"},
	{ "trigger": "trophy_defense\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::trophy_defense(${1:origin}, ${2:radius})"},
	{ "trigger": "waitTillTimeoutOrDeath\t#using scripts\\shared\\challenges_shared;", "contents": "challenges::waitTillTimeoutOrDeath(${1:timeout})"},
	{ "trigger": "gadget_hacker_is_inuse\t#using scripts\\shared\\abilities\\gadgets\\_gadget_hacker;", "contents": "hacker::gadget_hacker_is_inuse(${1:slot})"},
	{ "trigger": "gadget_hacker_is_flickering\t#using scripts\\shared\\abilities\\gadgets\\_gadget_hacker;", "contents": "hacker::gadget_hacker_is_flickering(${1:slot})"},
	{ "trigger": "gadget_hacker_on_flicker\t#using scripts\\shared\\abilities\\gadgets\\_gadget_hacker;", "contents": "hacker::gadget_hacker_on_flicker(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_hacker_on_give\t#using scripts\\shared\\abilities\\gadgets\\_gadget_hacker;", "contents": "hacker::gadget_hacker_on_give(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_hacker_on_take\t#using scripts\\shared\\abilities\\gadgets\\_gadget_hacker;", "contents": "hacker::gadget_hacker_on_take(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_hacker_on_connect\t#using scripts\\shared\\abilities\\gadgets\\_gadget_hacker;", "contents": "hacker::gadget_hacker_on_connect()"},
	{ "trigger": "gadget_hacker_on\t#using scripts\\shared\\abilities\\gadgets\\_gadget_hacker;", "contents": "hacker::gadget_hacker_on(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_hacker_off\t#using scripts\\shared\\abilities\\gadgets\\_gadget_hacker;", "contents": "hacker::gadget_hacker_off(${1:slot}, ${2:weapon})"},
	{ "trigger": "hack_things\t#using scripts\\shared\\abilities\\gadgets\\_gadget_hacker;", "contents": "hacker::hack_things()"},
	{ "trigger": "gadget_hacker_flicker\t#using scripts\\shared\\abilities\\gadgets\\_gadget_hacker;", "contents": "hacker::gadget_hacker_flicker(${1:slot}, ${2:weapon})"},
	{ "trigger": "set_gadget_status\t#using scripts\\shared\\abilities\\gadgets\\_gadget_hacker;", "contents": "hacker::set_gadget_status(${1:status}, ${2:time})"},
	{ "trigger": "on_player_spawned\t#using scripts\\shared\\weapons\\antipersonnelguidance;", "contents": "singlelockap_guidance::on_player_spawned()"},
	{ "trigger": "ClearAPTarget\t#using scripts\\shared\\weapons\\antipersonnelguidance;", "contents": "singlelockap_guidance::ClearAPTarget(${1:weapon}, ${2:whom})"},
	{ "trigger": "APFiredNotify\t#using scripts\\shared\\weapons\\antipersonnelguidance;", "contents": "singlelockap_guidance::APFiredNotify()"},
	{ "trigger": "APToggleLoop\t#using scripts\\shared\\weapons\\antipersonnelguidance;", "contents": "singlelockap_guidance::APToggleLoop()"},
	{ "trigger": "APLockLoop\t#using scripts\\shared\\weapons\\antipersonnelguidance;", "contents": "singlelockap_guidance::APLockLoop(${1:weapon})"},
	{ "trigger": "DestroyLockOnCanceledMessage\t#using scripts\\shared\\weapons\\antipersonnelguidance;", "contents": "singlelockap_guidance::DestroyLockOnCanceledMessage()"},
	{ "trigger": "DisplayLockOnCanceledMessage\t#using scripts\\shared\\weapons\\antipersonnelguidance;", "contents": "singlelockap_guidance::DisplayLockOnCanceledMessage()"},
	{ "trigger": "GetBestTarget\t#using scripts\\shared\\weapons\\antipersonnelguidance;", "contents": "singlelockap_guidance::GetBestTarget(${1:weapon})"},
	{ "trigger": "TargetInsertionSortCompare\t#using scripts\\shared\\weapons\\antipersonnelguidance;", "contents": "singlelockap_guidance::TargetInsertionSortCompare(${1:a}, ${2:b})"},
	{ "trigger": "InsideAPReticleNoLock\t#using scripts\\shared\\weapons\\antipersonnelguidance;", "contents": "singlelockap_guidance::InsideAPReticleNoLock(${1:target})"},
	{ "trigger": "InsideAPReticleLocked\t#using scripts\\shared\\weapons\\antipersonnelguidance;", "contents": "singlelockap_guidance::InsideAPReticleLocked(${1:target})"},
	{ "trigger": "IsStillValidTarget\t#using scripts\\shared\\weapons\\antipersonnelguidance;", "contents": "singlelockap_guidance::IsStillValidTarget(${1:weapon}, ${2:ent})"},
	{ "trigger": "SeekerSound\t#using scripts\\shared\\weapons\\antipersonnelguidance;", "contents": "singlelockap_guidance::SeekerSound(${1:alias}, ${2:looping}, ${3:id})"},
	{ "trigger": "LockSightTest\t#using scripts\\shared\\weapons\\antipersonnelguidance;", "contents": "singlelockap_guidance::LockSightTest(${1:target})"},
	{ "trigger": "gadget_armor_is_inuse\t#using scripts\\shared\\abilities\\gadgets\\_gadget_armor;", "contents": "armor::gadget_armor_is_inuse(${1:slot})"},
	{ "trigger": "gadget_armor_is_flickering\t#using scripts\\shared\\abilities\\gadgets\\_gadget_armor;", "contents": "armor::gadget_armor_is_flickering(${1:slot})"},
	{ "trigger": "gadget_armor_on_flicker\t#using scripts\\shared\\abilities\\gadgets\\_gadget_armor;", "contents": "armor::gadget_armor_on_flicker(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_armor_on_give\t#using scripts\\shared\\abilities\\gadgets\\_gadget_armor;", "contents": "armor::gadget_armor_on_give(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_armor_on_take\t#using scripts\\shared\\abilities\\gadgets\\_gadget_armor;", "contents": "armor::gadget_armor_on_take(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_armor_on_connect\t#using scripts\\shared\\abilities\\gadgets\\_gadget_armor;", "contents": "armor::gadget_armor_on_connect()"},
	{ "trigger": "gadget_armor_on\t#using scripts\\shared\\abilities\\gadgets\\_gadget_armor;", "contents": "armor::gadget_armor_on(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_armor_off\t#using scripts\\shared\\abilities\\gadgets\\_gadget_armor;", "contents": "armor::gadget_armor_off(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_armor_flicker\t#using scripts\\shared\\abilities\\gadgets\\_gadget_armor;", "contents": "armor::gadget_armor_flicker(${1:slot}, ${2:weapon})"},
	{ "trigger": "set_gadget_status\t#using scripts\\shared\\abilities\\gadgets\\_gadget_armor;", "contents": "armor::set_gadget_status(${1:status}, ${2:time})"},
	{ "trigger": "armor_damage_type_multiplier\t#using scripts\\shared\\abilities\\gadgets\\_gadget_armor;", "contents": "armor::armor_damage_type_multiplier(${1:sMeansOfDeath})"},
	{ "trigger": "armor_damage_mod_allowed\t#using scripts\\shared\\abilities\\gadgets\\_gadget_armor;", "contents": "armor::armor_damage_mod_allowed(${1:weapon}, ${2:sMeansOfDeath})"},
	{ "trigger": "armor_should_take_damage\t#using scripts\\shared\\abilities\\gadgets\\_gadget_armor;", "contents": "armor::armor_should_take_damage(${1:eAttacker}, ${2:weapon}, ${3:sMeansOfDeath}, ${4:sHitLoc})"},
	{ "trigger": "armor_player_damage\t#using scripts\\shared\\abilities\\gadgets\\_gadget_armor;", "contents": "armor::armor_player_damage(${1:eInflictor}, ${2:eAttacker}, ${3:iDamage}, ${4:iDFlags}, ${5:sMeansOfDeath}, ${6:weapon}, ${7:vPoint}, ${8:vDir}, ${9:sHitLoc}, ${10:modelIndex}, ${11:psOffsetTime})"},
	{ "trigger": "hitpoints_loss_event\t#using scripts\\shared\\abilities\\gadgets\\_gadget_armor;", "contents": "armor::hitpoints_loss_event(${1:val})"},
	{ "trigger": "gadget_armor_status\t#using scripts\\shared\\abilities\\gadgets\\_gadget_armor;", "contents": "armor::gadget_armor_status(${1:slot}, ${2:weapon})"},
	{ "trigger": "create\t#using scripts\\shared\\objpoints_shared;", "contents": "objpoints::create(${1:name}, ${2:origin}, ${3:team}, ${4:shader}, ${5:alpha}, ${6:scale})"},
	{ "trigger": "delete\t#using scripts\\shared\\objpoints_shared;", "contents": "objpoints::delete(${1:oldObjPoint})"},
	{ "trigger": "update_origin\t#using scripts\\shared\\objpoints_shared;", "contents": "objpoints::update_origin(${1:origin})"},
	{ "trigger": "set_origin_by_name\t#using scripts\\shared\\objpoints_shared;", "contents": "objpoints::set_origin_by_name(${1:name}, ${2:origin})"},
	{ "trigger": "get_by_name\t#using scripts\\shared\\objpoints_shared;", "contents": "objpoints::get_by_name(${1:name})"},
	{ "trigger": "get_by_index\t#using scripts\\shared\\objpoints_shared;", "contents": "objpoints::get_by_index(${1:index})"},
	{ "trigger": "start_flashing\t#using scripts\\shared\\objpoints_shared;", "contents": "objpoints::start_flashing()"},
	{ "trigger": "stop_flashing\t#using scripts\\shared\\objpoints_shared;", "contents": "objpoints::stop_flashing()"},
	{ "trigger": "cointoss\t#using scripts\\shared\\math_shared;", "contents": "math::cointoss()"},
	{ "trigger": "clamp\t#using scripts\\shared\\math_shared;", "contents": "math::clamp(${1:val}, ${2:val_min}, ${3:val_max})"},
	{ "trigger": "linear_map\t#using scripts\\shared\\math_shared;", "contents": "math::linear_map(${1:num}, ${2:min_a}, ${3:max_a}, ${4:min_b}, ${5:max_b})"},
	{ "trigger": "lag\t#using scripts\\shared\\math_shared;", "contents": "math::lag(${1:desired}, ${2:curr}, ${3:k}, ${4:dt})"},
	{ "trigger": "find_box_center\t#using scripts\\shared\\math_shared;", "contents": "math::find_box_center(${1:mins}, ${2:maxs})"},
	{ "trigger": "expand_mins\t#using scripts\\shared\\math_shared;", "contents": "math::expand_mins(${1:mins}, ${2:point})"},
	{ "trigger": "expand_maxs\t#using scripts\\shared\\math_shared;", "contents": "math::expand_maxs(${1:maxs}, ${2:point})"},
	{ "trigger": "vector_compare\t#using scripts\\shared\\math_shared;", "contents": "math::vector_compare(${1:vec1}, ${2:vec2})"},
	{ "trigger": "random_vector\t#using scripts\\shared\\math_shared;", "contents": "math::random_vector(${1:max_length})"},
	{ "trigger": "angle_dif\t#using scripts\\shared\\math_shared;", "contents": "math::angle_dif(${1:oldangle}, ${2:newangle})"},
	{ "trigger": "sign\t#using scripts\\shared\\math_shared;", "contents": "math::sign(${1:x})"},
	{ "trigger": "randomSign\t#using scripts\\shared\\math_shared;", "contents": "math::randomSign()"},
	{ "trigger": "get_dot_direction\t#using scripts\\shared\\math_shared;", "contents": "math::get_dot_direction(${1:v_point}, ${2:b_ignore_z}, ${3:b_normalize}, ${4:str_direction}, ${5:b_use_eye})"},
	{ "trigger": "get_dot_right\t#using scripts\\shared\\math_shared;", "contents": "math::get_dot_right(${1:v_point}, ${2:b_ignore_z}, ${3:b_normalize})"},
	{ "trigger": "get_dot_up\t#using scripts\\shared\\math_shared;", "contents": "math::get_dot_up(${1:v_point}, ${2:b_ignore_z}, ${3:b_normalize})"},
	{ "trigger": "get_dot_forward\t#using scripts\\shared\\math_shared;", "contents": "math::get_dot_forward(${1:v_point}, ${2:b_ignore_z}, ${3:b_normalize})"},
	{ "trigger": "get_dot_from_eye\t#using scripts\\shared\\math_shared;", "contents": "math::get_dot_from_eye(${1:v_point}, ${2:b_ignore_z}, ${3:b_normalize}, ${4:str_direction})"},
	{ "trigger": "array_average\t#using scripts\\shared\\math_shared;", "contents": "math::array_average(${1:array})"},
	{ "trigger": "array_std_deviation\t#using scripts\\shared\\math_shared;", "contents": "math::array_std_deviation(${1:array}, ${2:mean})"},
	{ "trigger": "random_normal_distribution\t#using scripts\\shared\\math_shared;", "contents": "math::random_normal_distribution(${1:mean}, ${2:std_deviation}, ${3:lower_bound}, ${4:upper_bound})"},
	{ "trigger": "closest_point_on_line\t#using scripts\\shared\\math_shared;", "contents": "math::closest_point_on_line(${1:point}, ${2:lineStart}, ${3:lineEnd})"},
	{ "trigger": "get_2d_yaw\t#using scripts\\shared\\math_shared;", "contents": "math::get_2d_yaw(${1:start}, ${2:end})"},
	{ "trigger": "vec_to_angles\t#using scripts\\shared\\math_shared;", "contents": "math::vec_to_angles(${1:vector})"},
	{ "trigger": "pow\t#using scripts\\shared\\math_shared;", "contents": "math::pow(${1:base}, ${2:exp})"},
	{ "trigger": "set_timeout\t#using scripts\\zm\\_zm_pack_a_punch_util;", "contents": "zm_pap_util::set_timeout(${1:n_timeout_s})"},
	{ "trigger": "set_interaction_height\t#using scripts\\zm\\_zm_pack_a_punch_util;", "contents": "zm_pap_util::set_interaction_height(${1:n_height})"},
	{ "trigger": "set_interaction_trigger_radius\t#using scripts\\zm\\_zm_pack_a_punch_util;", "contents": "zm_pap_util::set_interaction_trigger_radius(${1:n_radius})"},
	{ "trigger": "set_interaction_trigger_height\t#using scripts\\zm\\_zm_pack_a_punch_util;", "contents": "zm_pap_util::set_interaction_trigger_height(${1:n_height})"},
	{ "trigger": "set_move_in_func\t#using scripts\\zm\\_zm_pack_a_punch_util;", "contents": "zm_pap_util::set_move_in_func(${1:fn_move_weapon_in})"},
	{ "trigger": "set_move_out_func\t#using scripts\\zm\\_zm_pack_a_punch_util;", "contents": "zm_pap_util::set_move_out_func(${1:fn_move_weapon_out})"},
	{ "trigger": "set_grabbable_by_anyone\t#using scripts\\zm\\_zm_pack_a_punch_util;", "contents": "zm_pap_util::set_grabbable_by_anyone()"},
	{ "trigger": "get_triggers\t#using scripts\\zm\\_zm_pack_a_punch_util;", "contents": "zm_pap_util::get_triggers()"},
	{ "trigger": "is_pap_trigger\t#using scripts\\zm\\_zm_pack_a_punch_util;", "contents": "zm_pap_util::is_pap_trigger()"},
	{ "trigger": "enable_swap_attachments\t#using scripts\\zm\\_zm_pack_a_punch_util;", "contents": "zm_pap_util::enable_swap_attachments()"},
	{ "trigger": "can_swap_attachments\t#using scripts\\zm\\_zm_pack_a_punch_util;", "contents": "zm_pap_util::can_swap_attachments()"},
	{ "trigger": "update_hint_string\t#using scripts\\zm\\_zm_pack_a_punch_util;", "contents": "zm_pap_util::update_hint_string(${1:player})"},
	{ "trigger": "enable_widows_wine_perk_for_level\t#using scripts\\zm\\_zm_perk_widows_wine;", "contents": "zm_perk_widows_wine::enable_widows_wine_perk_for_level()"},
	{ "trigger": "widows_wine_precache\t#using scripts\\zm\\_zm_perk_widows_wine;", "contents": "zm_perk_widows_wine::widows_wine_precache()"},
	{ "trigger": "widows_wine_register_clientfield\t#using scripts\\zm\\_zm_perk_widows_wine;", "contents": "zm_perk_widows_wine::widows_wine_register_clientfield()"},
	{ "trigger": "widows_wine_set_clientfield\t#using scripts\\zm\\_zm_perk_widows_wine;", "contents": "zm_perk_widows_wine::widows_wine_set_clientfield(${1:state})"},
	{ "trigger": "widows_wine_perk_machine_setup\t#using scripts\\zm\\_zm_perk_widows_wine;", "contents": "zm_perk_widows_wine::widows_wine_perk_machine_setup(${1:use_trigger}, ${2:perk_machine}, ${3:bump_trigger}, ${4:collision})"},
	{ "trigger": "widows_wine_perk_activate\t#using scripts\\zm\\_zm_perk_widows_wine;", "contents": "zm_perk_widows_wine::widows_wine_perk_activate()"},
	{ "trigger": "widows_wine_contact_explosion\t#using scripts\\zm\\_zm_perk_widows_wine;", "contents": "zm_perk_widows_wine::widows_wine_contact_explosion()"},
	{ "trigger": "widows_wine_zombie_damage_response\t#using scripts\\zm\\_zm_perk_widows_wine;", "contents": "zm_perk_widows_wine::widows_wine_zombie_damage_response(${1:str_mod}, ${2:str_hit_location}, ${3:v_hit_origin}, ${4:e_player}, ${5:n_amount}, ${6:w_weapon}, ${7:direction_vec}, ${8:tagName}, ${9:modelName}, ${10:partName}, ${11:dFlags}, ${12:inflictor}, ${13:chargeLevel})"},
	{ "trigger": "widows_wine_vehicle_damage_response\t#using scripts\\zm\\_zm_perk_widows_wine;", "contents": "zm_perk_widows_wine::widows_wine_vehicle_damage_response(${1:eInflictor}, ${2:eAttacker}, ${3:iDamage}, ${4:iDFlags}, ${5:sMeansOfDeath}, ${6:weapon}, ${7:vPoint}, ${8:vDir}, ${9:sHitLoc}, ${10:vDamageOrigin}, ${11:psOffsetTime}, ${12:damageFromUnderneath}, ${13:modelIndex}, ${14:partName}, ${15:vSurfaceNormal})"},
	{ "trigger": "widows_wine_damage_callback\t#using scripts\\zm\\_zm_perk_widows_wine;", "contents": "zm_perk_widows_wine::widows_wine_damage_callback(${1:eInflictor}, ${2:eAttacker}, ${3:iDamage}, ${4:iDFlags}, ${5:sMeansOfDeath}, ${6:sWeapon}, ${7:vPoint}, ${8:vDir}, ${9:sHitLoc}, ${10:psOffsetTime})"},
	{ "trigger": "widows_wine_zombie_death_watch\t#using scripts\\zm\\_zm_perk_widows_wine;", "contents": "zm_perk_widows_wine::widows_wine_zombie_death_watch(${1:attacker})"},
	{ "trigger": "powerup_widows_wine_timeout\t#using scripts\\zm\\_zm_perk_widows_wine;", "contents": "zm_perk_widows_wine::powerup_widows_wine_timeout()"},
	{ "trigger": "widows_wine_cocoon_zombie_score\t#using scripts\\zm\\_zm_perk_widows_wine;", "contents": "zm_perk_widows_wine::widows_wine_cocoon_zombie_score(${1:e_player}, ${2:duration}, ${3:max_score})"},
	{ "trigger": "widows_wine_cocoon_zombie\t#using scripts\\zm\\_zm_perk_widows_wine;", "contents": "zm_perk_widows_wine::widows_wine_cocoon_zombie(${1:e_player})"},
	{ "trigger": "widows_wine_slow_zombie\t#using scripts\\zm\\_zm_perk_widows_wine;", "contents": "zm_perk_widows_wine::widows_wine_slow_zombie(${1:e_player})"},
	{ "trigger": "vehicle_stuck_grenade_monitor\t#using scripts\\zm\\_zm_perk_widows_wine;", "contents": "zm_perk_widows_wine::vehicle_stuck_grenade_monitor()"},
	{ "trigger": "grenade_bounce_monitor\t#using scripts\\zm\\_zm_perk_widows_wine;", "contents": "zm_perk_widows_wine::grenade_bounce_monitor()"},
	{ "trigger": "grenade_bounces\t#using scripts\\zm\\_zm_perk_widows_wine;", "contents": "zm_perk_widows_wine::grenade_bounces()"},
	{ "trigger": "widows_wine_vehicle_behavior\t#using scripts\\zm\\_zm_perk_widows_wine;", "contents": "zm_perk_widows_wine::widows_wine_vehicle_behavior(${1:attacker}, ${2:weapon})"},
	{ "trigger": "widows_wine_perk_lost\t#using scripts\\zm\\_zm_perk_widows_wine;", "contents": "zm_perk_widows_wine::widows_wine_perk_lost(${1:b_pause}, ${2:str_perk}, ${3:str_result})"},
	{ "trigger": "widows_wine_override_wallbuy_purchase\t#using scripts\\zm\\_zm_perk_widows_wine;", "contents": "zm_perk_widows_wine::widows_wine_override_wallbuy_purchase(${1:weapon}, ${2:wallbuy})"},
	{ "trigger": "widows_wine_override_melee_wallbuy_purchase\t#using scripts\\zm\\_zm_perk_widows_wine;", "contents": "zm_perk_widows_wine::widows_wine_override_melee_wallbuy_purchase(${1:vo_dialog_id}, ${2:flourish_weapon}, ${3:weapon}, ${4:ballistic_weapon}, ${5:ballistic_upgraded_weapon}, ${6:flourish_fn}, ${7:wallbuy})"},
	{ "trigger": "enable_deadshot_perk_for_level\t#using scripts\\zm\\_zm_perk_deadshot;", "contents": "zm_perk_deadshot::enable_deadshot_perk_for_level()"},
	{ "trigger": "deadshot_precache\t#using scripts\\zm\\_zm_perk_deadshot;", "contents": "zm_perk_deadshot::deadshot_precache()"},
	{ "trigger": "deadshot_register_clientfield\t#using scripts\\zm\\_zm_perk_deadshot;", "contents": "zm_perk_deadshot::deadshot_register_clientfield()"},
	{ "trigger": "deadshot_set_clientfield\t#using scripts\\zm\\_zm_perk_deadshot;", "contents": "zm_perk_deadshot::deadshot_set_clientfield(${1:state})"},
	{ "trigger": "deadshot_perk_machine_setup\t#using scripts\\zm\\_zm_perk_deadshot;", "contents": "zm_perk_deadshot::deadshot_perk_machine_setup(${1:use_trigger}, ${2:perk_machine}, ${3:bump_trigger}, ${4:collision})"},
	{ "trigger": "give_deadshot_perk\t#using scripts\\zm\\_zm_perk_deadshot;", "contents": "zm_perk_deadshot::give_deadshot_perk()"},
	{ "trigger": "take_deadshot_perk\t#using scripts\\zm\\_zm_perk_deadshot;", "contents": "zm_perk_deadshot::take_deadshot_perk(${1:b_pause}, ${2:str_perk}, ${3:str_result})"},
	{ "trigger": "quadrotor_think\t#using scripts\\shared\\vehicles\\_quadrotor;", "contents": "quadrotor::quadrotor_think()"},
	{ "trigger": "quadrotor_start_scripted\t#using scripts\\shared\\vehicles\\_quadrotor;", "contents": "quadrotor::quadrotor_start_scripted()"},
	{ "trigger": "quadrotor_off\t#using scripts\\shared\\vehicles\\_quadrotor;", "contents": "quadrotor::quadrotor_off()"},
	{ "trigger": "quadrotor_on\t#using scripts\\shared\\vehicles\\_quadrotor;", "contents": "quadrotor::quadrotor_on()"},
	{ "trigger": "quadrotor_start_ai\t#using scripts\\shared\\vehicles\\_quadrotor;", "contents": "quadrotor::quadrotor_start_ai()"},
	{ "trigger": "quadrotor_fireupdate\t#using scripts\\shared\\vehicles\\_quadrotor;", "contents": "quadrotor::quadrotor_fireupdate()"},
	{ "trigger": "quadrotor_check_move\t#using scripts\\shared\\vehicles\\_quadrotor;", "contents": "quadrotor::quadrotor_check_move(${1:position})"},
	{ "trigger": "quadrotor_adjust_goal_for_enemy_height\t#using scripts\\shared\\vehicles\\_quadrotor;", "contents": "quadrotor::quadrotor_adjust_goal_for_enemy_height(${1:goalpos})"},
	{ "trigger": "make_sure_goal_is_well_above_ground\t#using scripts\\shared\\vehicles\\_quadrotor;", "contents": "quadrotor::make_sure_goal_is_well_above_ground(${1:pos})"},
	{ "trigger": "waittill_pathing_done\t#using scripts\\shared\\vehicles\\_quadrotor;", "contents": "quadrotor::waittill_pathing_done()"},
	{ "trigger": "goal_flag_monitor\t#using scripts\\shared\\vehicles\\_quadrotor;", "contents": "quadrotor::goal_flag_monitor()"},
	{ "trigger": "quadrotor_movementupdate\t#using scripts\\shared\\vehicles\\_quadrotor;", "contents": "quadrotor::quadrotor_movementupdate()"},
	{ "trigger": "quadrotor_get_closest_node\t#using scripts\\shared\\vehicles\\_quadrotor;", "contents": "quadrotor::quadrotor_get_closest_node()"},
	{ "trigger": "quadrotor_find_new_position\t#using scripts\\shared\\vehicles\\_quadrotor;", "contents": "quadrotor::quadrotor_find_new_position()"},
	{ "trigger": "quadrotor_teleport_to_nearest_node\t#using scripts\\shared\\vehicles\\_quadrotor;", "contents": "quadrotor::quadrotor_teleport_to_nearest_node()"},
	{ "trigger": "quadrotor_exit_vehicle\t#using scripts\\shared\\vehicles\\_quadrotor;", "contents": "quadrotor::quadrotor_exit_vehicle()"},
	{ "trigger": "quadrotor_scripted\t#using scripts\\shared\\vehicles\\_quadrotor;", "contents": "quadrotor::quadrotor_scripted()"},
	{ "trigger": "quadrotor_get_damage_effect\t#using scripts\\shared\\vehicles\\_quadrotor;", "contents": "quadrotor::quadrotor_get_damage_effect(${1:health_pct})"},
	{ "trigger": "quadrotor_play_single_fx_on_tag\t#using scripts\\shared\\vehicles\\_quadrotor;", "contents": "quadrotor::quadrotor_play_single_fx_on_tag(${1:effect}, ${2:tag})"},
	{ "trigger": "quadrotor_update_damage_fx\t#using scripts\\shared\\vehicles\\_quadrotor;", "contents": "quadrotor::quadrotor_update_damage_fx()"},
	{ "trigger": "quadrotor_damage\t#using scripts\\shared\\vehicles\\_quadrotor;", "contents": "quadrotor::quadrotor_damage()"},
	{ "trigger": "quadrotor_cleanup_fx\t#using scripts\\shared\\vehicles\\_quadrotor;", "contents": "quadrotor::quadrotor_cleanup_fx()"},
	{ "trigger": "quadrotor_death\t#using scripts\\shared\\vehicles\\_quadrotor;", "contents": "quadrotor::quadrotor_death()"},
	{ "trigger": "death_fx\t#using scripts\\shared\\vehicles\\_quadrotor;", "contents": "quadrotor::death_fx()"},
	{ "trigger": "quadrotor_crash_movement\t#using scripts\\shared\\vehicles\\_quadrotor;", "contents": "quadrotor::quadrotor_crash_movement(${1:attacker}, ${2:hitdir})"},
	{ "trigger": "qrotor_dmg_snd\t#using scripts\\shared\\vehicles\\_quadrotor;", "contents": "quadrotor::qrotor_dmg_snd()"},
	{ "trigger": "quadrotor_fire_for_time\t#using scripts\\shared\\vehicles\\_quadrotor;", "contents": "quadrotor::quadrotor_fire_for_time(${1:totalFireTime})"},
	{ "trigger": "quadrotor_crash_accel\t#using scripts\\shared\\vehicles\\_quadrotor;", "contents": "quadrotor::quadrotor_crash_accel()"},
	{ "trigger": "quadrotor_predicted_collision\t#using scripts\\shared\\vehicles\\_quadrotor;", "contents": "quadrotor::quadrotor_predicted_collision()"},
	{ "trigger": "quadrotor_collision_player\t#using scripts\\shared\\vehicles\\_quadrotor;", "contents": "quadrotor::quadrotor_collision_player()"},
	{ "trigger": "quadrotor_collision\t#using scripts\\shared\\vehicles\\_quadrotor;", "contents": "quadrotor::quadrotor_collision()"},
	{ "trigger": "death_fire_loop_audio\t#using scripts\\shared\\vehicles\\_quadrotor;", "contents": "quadrotor::death_fire_loop_audio()"},
	{ "trigger": "quadrotor_set_team\t#using scripts\\shared\\vehicles\\_quadrotor;", "contents": "quadrotor::quadrotor_set_team(${1:team})"},
	{ "trigger": "quadrotor_blink_lights\t#using scripts\\shared\\vehicles\\_quadrotor;", "contents": "quadrotor::quadrotor_blink_lights()"},
	{ "trigger": "quadrotor_update_rumble\t#using scripts\\shared\\vehicles\\_quadrotor;", "contents": "quadrotor::quadrotor_update_rumble()"},
	{ "trigger": "quadrotor_self_destruct\t#using scripts\\shared\\vehicles\\_quadrotor;", "contents": "quadrotor::quadrotor_self_destruct()"},
	{ "trigger": "quadrotor_level_out_for_landing\t#using scripts\\shared\\vehicles\\_quadrotor;", "contents": "quadrotor::quadrotor_level_out_for_landing()"},
	{ "trigger": "quadrotor_emped\t#using scripts\\shared\\vehicles\\_quadrotor;", "contents": "quadrotor::quadrotor_emped()"},
	{ "trigger": "quadrotor_temp_bullet_shield\t#using scripts\\shared\\vehicles\\_quadrotor;", "contents": "quadrotor::quadrotor_temp_bullet_shield(${1:invulnerable_time})"},
	{ "trigger": "QuadrotorCallback_VehicleDamage\t#using scripts\\shared\\vehicles\\_quadrotor;", "contents": "quadrotor::QuadrotorCallback_VehicleDamage(${1:eInflictor}, ${2:eAttacker}, ${3:iDamage}, ${4:iDFlags}, ${5:sMeansOfDeath}, ${6:weapon}, ${7:vPoint}, ${8:vDir}, ${9:sHitLoc}, ${10:psOffsetTime}, ${11:damageFromUnderneath}, ${12:modelIndex}, ${13:partName})"},
	{ "trigger": "on_player_connect\t#using scripts\\zm\\_zm_weap_riotshield;", "contents": "riotshield::on_player_connect()"},
	{ "trigger": "player_set_shield_health\t#using scripts\\zm\\_zm_weap_riotshield;", "contents": "riotshield::player_set_shield_health(${1:damage}, ${2:max_damage})"},
	{ "trigger": "player_shield_absorb_damage\t#using scripts\\zm\\_zm_weap_riotshield;", "contents": "riotshield::player_shield_absorb_damage(${1:eAttacker}, ${2:iDamage}, ${3:sHitLoc}, ${4:sMeansOfDeath})"},
	{ "trigger": "player_shield_facing_attacker\t#using scripts\\zm\\_zm_weap_riotshield;", "contents": "riotshield::player_shield_facing_attacker(${1:vDir}, ${2:limit})"},
	{ "trigger": "should_shield_absorb_damage\t#using scripts\\zm\\_zm_weap_riotshield;", "contents": "riotshield::should_shield_absorb_damage(${1:eInflictor}, ${2:eAttacker}, ${3:iDamage}, ${4:iDFlags}, ${5:sMeansOfDeath}, ${6:weapon}, ${7:vPoint}, ${8:vDir}, ${9:sHitLoc}, ${10:psOffsetTime})"},
	{ "trigger": "player_damage_override_callback\t#using scripts\\zm\\_zm_weap_riotshield;", "contents": "riotshield::player_damage_override_callback(${1:eInflictor}, ${2:eAttacker}, ${3:iDamage}, ${4:iDFlags}, ${5:sMeansOfDeath}, ${6:weapon}, ${7:vPoint}, ${8:vDir}, ${9:sHitLoc}, ${10:psOffsetTime})"},
	{ "trigger": "player_damage_shield\t#using scripts\\zm\\_zm_weap_riotshield;", "contents": "riotshield::player_damage_shield(${1:iDamage}, ${2:bHeld}, ${3:fromCode = false}, ${4:smod = \"MOD_UNKNOWN\"})"},
	{ "trigger": "player_watch_weapon_change\t#using scripts\\zm\\_zm_weap_riotshield;", "contents": "riotshield::player_watch_weapon_change()"},
	{ "trigger": "player_watch_shield_melee\t#using scripts\\zm\\_zm_weap_riotshield; self == player", "contents": "riotshield::player_watch_shield_melee()"},
	{ "trigger": "player_watch_shield_melee_power\t#using scripts\\zm\\_zm_weap_riotshield; self == player", "contents": "riotshield::player_watch_shield_melee_power()"},
	{ "trigger": "riotshield_fling_zombie\t#using scripts\\zm\\_zm_weap_riotshield;", "contents": "riotshield::riotshield_fling_zombie(${1:player}, ${2:fling_vec}, ${3:index})"},
	{ "trigger": "zombie_knockdown\t#using scripts\\zm\\_zm_weap_riotshield;", "contents": "riotshield::zombie_knockdown(${1:player}, ${2:gib})"},
	{ "trigger": "riotshield_knockdown_zombie\t#using scripts\\zm\\_zm_weap_riotshield;", "contents": "riotshield::riotshield_knockdown_zombie(${1:player}, ${2:gib})"},
	{ "trigger": "riotshield_get_enemies_in_range\t#using scripts\\zm\\_zm_weap_riotshield;", "contents": "riotshield::riotshield_get_enemies_in_range()"},
	{ "trigger": "riotshield_network_choke\t#using scripts\\zm\\_zm_weap_riotshield;", "contents": "riotshield::riotshield_network_choke()"},
	{ "trigger": "riotshield_melee\t#using scripts\\zm\\_zm_weap_riotshield;", "contents": "riotshield::riotshield_melee(${1:weapon})"},
	{ "trigger": "UpdateRiotShieldModel\t#using scripts\\zm\\_zm_weap_riotshield;", "contents": "riotshield::UpdateRiotShieldModel()"},
	{ "trigger": "player_take_riotshield\t#using scripts\\zm\\_zm_weap_riotshield;", "contents": "riotshield::player_take_riotshield()"},
	{ "trigger": "register\t#using scripts\\shared\\weapons\\_riotshield;", "contents": "riotshield::register()"},
	{ "trigger": "watchPregameClassChange\t#using scripts\\shared\\weapons\\_riotshield;", "contents": "riotshield::watchPregameClassChange()"},
	{ "trigger": "watchRiotshieldPickup\t#using scripts\\shared\\weapons\\_riotshield; self == player", "contents": "riotshield::watchRiotshieldPickup()"},
	{ "trigger": "trackRiotShield\t#using scripts\\shared\\weapons\\_riotshield; self == player", "contents": "riotshield::trackRiotShield()"},
	{ "trigger": "isValidNonShieldWeapon\t#using scripts\\shared\\weapons\\_riotshield;", "contents": "riotshield::isValidNonShieldWeapon(${1:weapon})"},
	{ "trigger": "startRiotshieldDeploy\t#using scripts\\shared\\weapons\\_riotshield; self == player", "contents": "riotshield::startRiotshieldDeploy()"},
	{ "trigger": "resetReconModelVisibility\t#using scripts\\shared\\weapons\\_riotshield; self == recon model", "contents": "riotshield::resetReconModelVisibility(${1:owner})"},
	{ "trigger": "resetReconModelOnEvent\t#using scripts\\shared\\weapons\\_riotshield; self == reconModel", "contents": "riotshield::resetReconModelOnEvent(${1:eventName}, ${2:owner})"},
	{ "trigger": "attachReconModel\t#using scripts\\shared\\weapons\\_riotshield; self == shield model", "contents": "riotshield::attachReconModel(${1:modelName}, ${2:owner})"},
	{ "trigger": "spawnRiotshieldCover\t#using scripts\\shared\\weapons\\_riotshield; self == player", "contents": "riotshield::spawnRiotshieldCover(${1:origin}, ${2:angles})"},
	{ "trigger": "watchRiotshieldDeploy\t#using scripts\\shared\\weapons\\_riotshield; self == player", "contents": "riotshield::watchRiotshieldDeploy()"},
	{ "trigger": "riotshieldDistanceTest\t#using scripts\\shared\\weapons\\_riotshield;", "contents": "riotshield::riotshieldDistanceTest(${1:origin})"},
	{ "trigger": "watchDeployedRiotshieldEnts\t#using scripts\\shared\\weapons\\_riotshield; self == player", "contents": "riotshield::watchDeployedRiotshieldEnts()"},
	{ "trigger": "watchDeployedRiotshieldDamage\t#using scripts\\shared\\weapons\\_riotshield; self == riotshield script_model ent", "contents": "riotshield::watchDeployedRiotshieldDamage()"},
	{ "trigger": "damageThenDestroyRiotshield\t#using scripts\\shared\\weapons\\_riotshield; self == riotshield script_model ent", "contents": "riotshield::damageThenDestroyRiotshield(${1:attacker}, ${2:weapon})"},
	{ "trigger": "deleteShieldOnTriggerDeath\t#using scripts\\shared\\weapons\\_riotshield; self == player", "contents": "riotshield::deleteShieldOnTriggerDeath(${1:shield_trigger})"},
	{ "trigger": "deleteShieldOnPlayerDeathOrDisconnect\t#using scripts\\shared\\weapons\\_riotshield; self == player", "contents": "riotshield::deleteShieldOnPlayerDeathOrDisconnect(${1:shield_ent})"},
	{ "trigger": "watchRiotshieldStuckEntityDeath\t#using scripts\\shared\\weapons\\_riotshield; self == entity stuck with nade", "contents": "riotshield::watchRiotshieldStuckEntityDeath(${1:grenade}, ${2:owner})"},
	{ "trigger": "on_player_spawned\t#using scripts\\shared\\weapons\\_riotshield;", "contents": "riotshield::on_player_spawned()"},
	{ "trigger": "watch_riot_shield_use\t#using scripts\\shared\\weapons\\_riotshield; self == player", "contents": "riotshield::watch_riot_shield_use()"},
	{ "trigger": "begin_other_grenade_tracking\t#using scripts\\shared\\weapons\\_riotshield;", "contents": "riotshield::begin_other_grenade_tracking()"},
	{ "trigger": "check_stuck_to_shield\t#using scripts\\shared\\weapons\\_riotshield; self == grenade", "contents": "riotshield::check_stuck_to_shield()"},
	{ "trigger": "Callback_VehicleSpawned\t#using scripts\\zm\\gametypes\\_globallogic_vehicle;", "contents": "globallogic_vehicle::Callback_VehicleSpawned(${1:spawner})"},
	{ "trigger": "Callback_VehicleDamage\t#using scripts\\zm\\gametypes\\_globallogic_vehicle;", "contents": "globallogic_vehicle::Callback_VehicleDamage(${1:eInflictor}, ${2:eAttacker}, ${3:iDamage}, ${4:iDFlags}, ${5:sMeansOfDeath}, ${6:weapon}, ${7:vPoint}, ${8:vDir}, ${9:sHitLoc}, ${10:vDamageOrigin}, ${11:psOffsetTime}, ${12:damageFromUnderneath}, ${13:modelIndex}, ${14:partName}, ${15:vSurfaceNormal})"},
	{ "trigger": "Callback_VehicleRadiusDamage\t#using scripts\\zm\\gametypes\\_globallogic_vehicle;", "contents": "globallogic_vehicle::Callback_VehicleRadiusDamage(${1:eInflictor}, ${2:eAttacker}, ${3:iDamage}, ${4:fInnerDamage}, ${5:fOuterDamage}, ${6:iDFlags}, ${7:sMeansOfDeath}, ${8:weapon}, ${9:vPoint}, ${10:fRadius}, ${11:fConeAngleCos}, ${12:vConeDir}, ${13:psOffsetTime})"},
	{ "trigger": "Callback_VehicleKilled\t#using scripts\\zm\\gametypes\\_globallogic_vehicle;", "contents": "globallogic_vehicle::Callback_VehicleKilled(${1:eInflictor}, ${2:eAttacker}, ${3:iDamage}, ${4:sMeansOfDeath}, ${5:weapon}, ${6:vDir}, ${7:sHitLoc}, ${8:psOffsetTime})"},
	{ "trigger": "vehicleCrush\t#using scripts\\zm\\gametypes\\_globallogic_vehicle;", "contents": "globallogic_vehicle::vehicleCrush()"},
	{ "trigger": "GetVehicleUnderneathSplashScalar\t#using scripts\\zm\\gametypes\\_globallogic_vehicle;", "contents": "globallogic_vehicle::GetVehicleUnderneathSplashScalar(${1:weapon})"},
	{ "trigger": "AllowFriendlyFireDamage\t#using scripts\\zm\\gametypes\\_globallogic_vehicle;", "contents": "globallogic_vehicle::AllowFriendlyFireDamage(${1:eInflictor}, ${2:eAttacker}, ${3:sMeansOfDeath}, ${4:weapon})"},
	{ "trigger": "getHighestScoringPlayer\t#using scripts\\zm\\gametypes\\_globallogic_score;", "contents": "globallogic_score::getHighestScoringPlayer()"},
	{ "trigger": "resetScoreChain\t#using scripts\\zm\\gametypes\\_globallogic_score;", "contents": "globallogic_score::resetScoreChain()"},
	{ "trigger": "scoreChainTimer\t#using scripts\\zm\\gametypes\\_globallogic_score;", "contents": "globallogic_score::scoreChainTimer()"},
	{ "trigger": "roundToNearestFive\t#using scripts\\zm\\gametypes\\_globallogic_score;", "contents": "globallogic_score::roundToNearestFive(${1:score})"},
	{ "trigger": "givePlayerMomentumNotification\t#using scripts\\zm\\gametypes\\_globallogic_score;", "contents": "globallogic_score::givePlayerMomentumNotification(${1:score}, ${2:label}, ${3:descValue}, ${4:countsTowardRampage})"},
	{ "trigger": "resetPlayerMomentumOnDeath\t#using scripts\\zm\\gametypes\\_globallogic_score;", "contents": "globallogic_score::resetPlayerMomentumOnDeath()"},
	{ "trigger": "givePlayerXPDisplay\t#using scripts\\zm\\gametypes\\_globallogic_score;", "contents": "globallogic_score::givePlayerXPDisplay(${1:event}, ${2:player}, ${3:victim}, ${4:descValue})"},
	{ "trigger": "givePlayerScore\t#using scripts\\zm\\gametypes\\_globallogic_score;", "contents": "globallogic_score::givePlayerScore(${1:event}, ${2:player}, ${3:victim}, ${4:descValue}, ${5:weapon})"},
	{ "trigger": "default_onPlayerScore\t#using scripts\\zm\\gametypes\\_globallogic_score;", "contents": "globallogic_score::default_onPlayerScore(${1:event}, ${2:player}, ${3:victim})"},
	{ "trigger": "_setPlayerScore\t#using scripts\\zm\\gametypes\\_globallogic_score;", "contents": "globallogic_score::_setPlayerScore(${1:player}, ${2:score})"},
	{ "trigger": "_getPlayerScore\t#using scripts\\zm\\gametypes\\_globallogic_score;", "contents": "globallogic_score::_getPlayerScore(${1:player})"},
	{ "trigger": "_setPlayerMomentum\t#using scripts\\zm\\gametypes\\_globallogic_score;", "contents": "globallogic_score::_setPlayerMomentum(${1:player}, ${2:momentum})"},
	{ "trigger": "_givePlayerKillstreakInternal\t#using scripts\\zm\\gametypes\\_globallogic_score;", "contents": "globallogic_score::_givePlayerKillstreakInternal(${1:player}, ${2:momentum}, ${3:oldMomentum}, ${4:killStreakTypeArray})"},
	{ "trigger": "giveTeamScore\t#using scripts\\zm\\gametypes\\_globallogic_score;", "contents": "globallogic_score::giveTeamScore(${1:event}, ${2:team}, ${3:player}, ${4:victim})"},
	{ "trigger": "giveTeamScoreForObjective\t#using scripts\\zm\\gametypes\\_globallogic_score;", "contents": "globallogic_score::giveTeamScoreForObjective(${1:team}, ${2:score})"},
	{ "trigger": "_setTeamScore\t#using scripts\\zm\\gametypes\\_globallogic_score;", "contents": "globallogic_score::_setTeamScore(${1:team}, ${2:teamScore})"},
	{ "trigger": "resetTeamScores\t#using scripts\\zm\\gametypes\\_globallogic_score;", "contents": "globallogic_score::resetTeamScores()"},
	{ "trigger": "resetAllScores\t#using scripts\\zm\\gametypes\\_globallogic_score;", "contents": "globallogic_score::resetAllScores()"},
	{ "trigger": "resetPlayerScores\t#using scripts\\zm\\gametypes\\_globallogic_score;", "contents": "globallogic_score::resetPlayerScores()"},
	{ "trigger": "updateTeamScores\t#using scripts\\zm\\gametypes\\_globallogic_score;", "contents": "globallogic_score::updateTeamScores(${1:team})"},
	{ "trigger": "updateAllTeamScores\t#using scripts\\zm\\gametypes\\_globallogic_score;", "contents": "globallogic_score::updateAllTeamScores()"},
	{ "trigger": "_getTeamScore\t#using scripts\\zm\\gametypes\\_globallogic_score;", "contents": "globallogic_score::_getTeamScore(${1:team})"},
	{ "trigger": "getHighestTeamScoreTeam\t#using scripts\\zm\\gametypes\\_globallogic_score;", "contents": "globallogic_score::getHighestTeamScoreTeam()"},
	{ "trigger": "areTeamArraysEqual\t#using scripts\\zm\\gametypes\\_globallogic_score;", "contents": "globallogic_score::areTeamArraysEqual(${1:teamsA}, ${2:teamsB})"},
	{ "trigger": "onTeamScore\t#using scripts\\zm\\gametypes\\_globallogic_score;", "contents": "globallogic_score::onTeamScore(${1:score}, ${2:team})"},
	{ "trigger": "default_onTeamScore\t#using scripts\\zm\\gametypes\\_globallogic_score;", "contents": "globallogic_score::default_onTeamScore(${1:event}, ${2:team})"},
	{ "trigger": "getPersStat\t#using scripts\\zm\\gametypes\\_globallogic_score;", "contents": "globallogic_score::getPersStat(${1:dataName})"},
	{ "trigger": "incPersStat\t#using scripts\\zm\\gametypes\\_globallogic_score;", "contents": "globallogic_score::incPersStat(${1:dataName}, ${2:increment}, ${3:record_stats}, ${4:includeGametype})"},
	{ "trigger": "threadedRecordPlayerStats\t#using scripts\\zm\\gametypes\\_globallogic_score;", "contents": "globallogic_score::threadedRecordPlayerStats(${1:dataName})"},
	{ "trigger": "incKillstreakTracker\t#using scripts\\zm\\gametypes\\_globallogic_score;", "contents": "globallogic_score::incKillstreakTracker(${1:weapon})"},
	{ "trigger": "trackAttackerKill\t#using scripts\\zm\\gametypes\\_globallogic_score;", "contents": "globallogic_score::trackAttackerKill(${1:name}, ${2:rank}, ${3:xp}, ${4:prestige}, ${5:xuid})"},
	{ "trigger": "trackAttackeeDeath\t#using scripts\\zm\\gametypes\\_globallogic_score;", "contents": "globallogic_score::trackAttackeeDeath(${1:attackerName}, ${2:rank}, ${3:xp}, ${4:prestige}, ${5:xuid})"},
	{ "trigger": "default_isKillBoosting\t#using scripts\\zm\\gametypes\\_globallogic_score;", "contents": "globallogic_score::default_isKillBoosting()"},
	{ "trigger": "giveKillStats\t#using scripts\\zm\\gametypes\\_globallogic_score;", "contents": "globallogic_score::giveKillStats(${1:sMeansOfDeath}, ${2:weapon}, ${3:eVictim})"},
	{ "trigger": "incTotalKills\t#using scripts\\zm\\gametypes\\_globallogic_score;", "contents": "globallogic_score::incTotalKills(${1:team})"},
	{ "trigger": "setInflictorStat\t#using scripts\\zm\\gametypes\\_globallogic_score;", "contents": "globallogic_score::setInflictorStat(${1:eInflictor}, ${2:eAttacker}, ${3:weapon})"},
	{ "trigger": "processShieldAssist\t#using scripts\\zm\\gametypes\\_globallogic_score; self == riotshield player", "contents": "globallogic_score::processShieldAssist(${1:killedplayer})"},
	{ "trigger": "processAssist\t#using scripts\\zm\\gametypes\\_globallogic_score;", "contents": "globallogic_score::processAssist(${1:killedplayer}, ${2:damagedone}, ${3:weapon})"},
	{ "trigger": "player_give_cymbal_monkey\t#using scripts\\zm\\_zm_weap_cymbal_monkey;", "contents": "_zm_weap_cymbal_monkey::player_give_cymbal_monkey()"},
	{ "trigger": "player_give_cymbal_monkey_upgraded\t#using scripts\\zm\\_zm_weap_cymbal_monkey;", "contents": "_zm_weap_cymbal_monkey::player_give_cymbal_monkey_upgraded()"},
	{ "trigger": "player_handle_cymbal_monkey\t#using scripts\\zm\\_zm_weap_cymbal_monkey;", "contents": "_zm_weap_cymbal_monkey::player_handle_cymbal_monkey()"},
	{ "trigger": "watch_for_dud\t#using scripts\\zm\\_zm_weap_cymbal_monkey;", "contents": "_zm_weap_cymbal_monkey::watch_for_dud(${1:model}, ${2:actor})"},
	{ "trigger": "watch_for_emp\t#using scripts\\zm\\_zm_weap_cymbal_monkey;", "contents": "_zm_weap_cymbal_monkey::watch_for_emp(${1:model}, ${2:actor})"},
	{ "trigger": "clone_player_angles\t#using scripts\\zm\\_zm_weap_cymbal_monkey;", "contents": "_zm_weap_cymbal_monkey::clone_player_angles(${1:owner})"},
	{ "trigger": "show_briefly\t#using scripts\\zm\\_zm_weap_cymbal_monkey;", "contents": "_zm_weap_cymbal_monkey::show_briefly(${1:showtime})"},
	{ "trigger": "show_owner_on_attack\t#using scripts\\zm\\_zm_weap_cymbal_monkey;", "contents": "_zm_weap_cymbal_monkey::show_owner_on_attack(${1:owner})"},
	{ "trigger": "hide_owner\t#using scripts\\zm\\_zm_weap_cymbal_monkey;", "contents": "_zm_weap_cymbal_monkey::hide_owner(${1:owner})"},
	{ "trigger": "proximity_detonate\t#using scripts\\zm\\_zm_weap_cymbal_monkey;", "contents": "_zm_weap_cymbal_monkey::proximity_detonate(${1:owner})"},
	{ "trigger": "player_throw_cymbal_monkey\t#using scripts\\zm\\_zm_weap_cymbal_monkey;", "contents": "_zm_weap_cymbal_monkey::player_throw_cymbal_monkey(${1:grenade}, ${2:num_attractors}, ${3:max_attract_dist}, ${4:attract_dist_diff})"},
	{ "trigger": "move_valid_poi_to_navmesh\t#using scripts\\zm\\_zm_weap_cymbal_monkey;", "contents": "_zm_weap_cymbal_monkey::move_valid_poi_to_navmesh(${1:valid_poi})"},
	{ "trigger": "grenade_stolen_by_sam\t#using scripts\\zm\\_zm_weap_cymbal_monkey;", "contents": "_zm_weap_cymbal_monkey::grenade_stolen_by_sam(${1:ent_grenade}, ${2:ent_model}, ${3:ent_actor})"},
	{ "trigger": "monkey_cleanup\t#using scripts\\zm\\_zm_weap_cymbal_monkey;", "contents": "_zm_weap_cymbal_monkey::monkey_cleanup(${1:parent})"},
	{ "trigger": "pulse_damage\t#using scripts\\zm\\_zm_weap_cymbal_monkey;", "contents": "_zm_weap_cymbal_monkey::pulse_damage(${1:e_owner}, ${2:model})"},
	{ "trigger": "do_monkey_sound\t#using scripts\\zm\\_zm_weap_cymbal_monkey;", "contents": "_zm_weap_cymbal_monkey::do_monkey_sound(${1:model}, ${2:info})"},
	{ "trigger": "play_delayed_explode_vox\t#using scripts\\zm\\_zm_weap_cymbal_monkey;", "contents": "_zm_weap_cymbal_monkey::play_delayed_explode_vox()"},
	{ "trigger": "get_thrown_monkey\t#using scripts\\zm\\_zm_weap_cymbal_monkey;", "contents": "_zm_weap_cymbal_monkey::get_thrown_monkey()"},
	{ "trigger": "monitor_zombie_groans\t#using scripts\\zm\\_zm_weap_cymbal_monkey;", "contents": "_zm_weap_cymbal_monkey::monitor_zombie_groans(${1:info})"},
	{ "trigger": "play_zombie_groans\t#using scripts\\zm\\_zm_weap_cymbal_monkey;", "contents": "_zm_weap_cymbal_monkey::play_zombie_groans()"},
	{ "trigger": "cymbal_monkey_exists\t#using scripts\\zm\\_zm_weap_cymbal_monkey;", "contents": "_zm_weap_cymbal_monkey::cymbal_monkey_exists(${1:w_weapon})"},
	{ "trigger": "register_clientfields\t#using scripts\\zm\\_zm_weap_gravityspikes;", "contents": "zm_weap_gravityspikes::register_clientfields()"},
	{ "trigger": "reset_after_bleeding_out\t#using scripts\\zm\\_zm_weap_gravityspikes; self == a player", "contents": "zm_weap_gravityspikes::reset_after_bleeding_out()"},
	{ "trigger": "gravityspikes_power_override\t#using scripts\\zm\\_zm_weap_gravityspikes; self = level", "contents": "zm_weap_gravityspikes::gravityspikes_power_override(${1:e_player}, ${2:ai_enemy})"},
	{ "trigger": "wield_gravityspikes\t#using scripts\\zm\\_zm_weap_gravityspikes; self = player", "contents": "zm_weap_gravityspikes::wield_gravityspikes(${1:wpn_gravityspikes})"},
	{ "trigger": "unwield_gravityspikes\t#using scripts\\zm\\_zm_weap_gravityspikes;", "contents": "zm_weap_gravityspikes::unwield_gravityspikes(${1:wpn_gravityspikes})"},
	{ "trigger": "weapon_change_watcher\t#using scripts\\zm\\_zm_weap_gravityspikes; self = player", "contents": "zm_weap_gravityspikes::weapon_change_watcher()"},
	{ "trigger": "gravityspikes_attack_watcher\t#using scripts\\zm\\_zm_weap_gravityspikes; self == a player", "contents": "zm_weap_gravityspikes::gravityspikes_attack_watcher(${1:wpn_gravityspikes})"},
	{ "trigger": "gravityspikes_stuck_above_zombie_watcher\t#using scripts\\zm\\_zm_weap_gravityspikes;", "contents": "zm_weap_gravityspikes::gravityspikes_stuck_above_zombie_watcher(${1:wpn_gravityspikes})"},
	{ "trigger": "gravityspikes_altfire_watcher\t#using scripts\\zm\\_zm_weap_gravityspikes; self == a player", "contents": "zm_weap_gravityspikes::gravityspikes_altfire_watcher(${1:wpn_gravityspikes})"},
	{ "trigger": "gravity_spike_position_valid\t#using scripts\\zm\\_zm_weap_gravityspikes; self = player", "contents": "zm_weap_gravityspikes::gravity_spike_position_valid()"},
	{ "trigger": "chop_actor\t#using scripts\\zm\\_zm_weap_gravityspikes;", "contents": "zm_weap_gravityspikes::chop_actor(${1:ai}, ${2:leftswing}, ${3:weapon = level.weaponNone})"},
	{ "trigger": "chop_zombies\t#using scripts\\zm\\_zm_weap_gravityspikes;", "contents": "zm_weap_gravityspikes::chop_zombies(${1:first_time}, ${2:leftswing}, ${3:weapon = level.weaponNone})"},
	{ "trigger": "spikesarc_swipe\t#using scripts\\zm\\_zm_weap_gravityspikes;", "contents": "zm_weap_gravityspikes::spikesarc_swipe(${1:player})"},
	{ "trigger": "gravityspikes_swipe_watcher\t#using scripts\\zm\\_zm_weap_gravityspikes; self == a player", "contents": "zm_weap_gravityspikes::gravityspikes_swipe_watcher(${1:wpn_gravityspikes})"},
	{ "trigger": "gravityspikes_power_update\t#using scripts\\zm\\_zm_weap_gravityspikes; self == level", "contents": "zm_weap_gravityspikes::gravityspikes_power_update(${1:player})"},
	{ "trigger": "gravityspikes_power_expired\t#using scripts\\zm\\_zm_weap_gravityspikes;", "contents": "zm_weap_gravityspikes::gravityspikes_power_expired(${1:weapon})"},
	{ "trigger": "player_invulnerable_during_gravityspike_slam\t#using scripts\\zm\\_zm_weap_gravityspikes;", "contents": "zm_weap_gravityspikes::player_invulnerable_during_gravityspike_slam(${1:eInflictor}, ${2:eAttacker}, ${3:iDamage}, ${4:iDFlags}, ${5:sMeansOfDeath}, ${6:weapon}, ${7:vPoint}, ${8:vDir}, ${9:sHitLoc}, ${10:psOffsetTime}, ${11:boneIndex})"},
	{ "trigger": "no_damage_gravityspikes_slam\t#using scripts\\zm\\_zm_weap_gravityspikes; self == a player", "contents": "zm_weap_gravityspikes::no_damage_gravityspikes_slam()"},
	{ "trigger": "player_near_gravity_vortex\t#using scripts\\zm\\_zm_weap_gravityspikes; self = player that planted trap", "contents": "zm_weap_gravityspikes::player_near_gravity_vortex(${1:v_vortex_origin})"},
	{ "trigger": "player_vortex_rumble\t#using scripts\\zm\\_zm_weap_gravityspikes; self = player that planted trap", "contents": "zm_weap_gravityspikes::player_vortex_rumble(${1:e_player}, ${2:v_vortex_origin})"},
	{ "trigger": "plant_gravity_trap\t#using scripts\\zm\\_zm_weap_gravityspikes; self == a player", "contents": "zm_weap_gravityspikes::plant_gravity_trap(${1:wpn_gravityspikes})"},
	{ "trigger": "gravity_trap_loop\t#using scripts\\zm\\_zm_weap_gravityspikes; self == a player", "contents": "zm_weap_gravityspikes::gravity_trap_loop(${1:v_gravity_trap_pos}, ${2:wpn_gravityspikes})"},
	{ "trigger": "gravity_trap_check\t#using scripts\\zm\\_zm_weap_gravityspikes; self == a zombie", "contents": "zm_weap_gravityspikes::gravity_trap_check(${1:player})"},
	{ "trigger": "create_gravity_trap_spikes_in_ground\t#using scripts\\zm\\_zm_weap_gravityspikes; self == a player", "contents": "zm_weap_gravityspikes::create_gravity_trap_spikes_in_ground(${1:a_v_spawn_pos})"},
	{ "trigger": "gravity_spike_planted_play\t#using scripts\\zm\\_zm_weap_gravityspikes; self = gravity spike model.", "contents": "zm_weap_gravityspikes::gravity_spike_planted_play()"},
	{ "trigger": "destroy_gravity_trap_spikes_in_ground\t#using scripts\\zm\\_zm_weap_gravityspikes; self == a player", "contents": "zm_weap_gravityspikes::destroy_gravity_trap_spikes_in_ground()"},
	{ "trigger": "gravity_trap_fx_on\t#using scripts\\zm\\_zm_weap_gravityspikes; self == a player", "contents": "zm_weap_gravityspikes::gravity_trap_fx_on(${1:v_spawn_pos})"},
	{ "trigger": "gravity_trap_fx_off\t#using scripts\\zm\\_zm_weap_gravityspikes; self == a player", "contents": "zm_weap_gravityspikes::gravity_trap_fx_off()"},
	{ "trigger": "create_gravity_trap_unitrigger\t#using scripts\\zm\\_zm_weap_gravityspikes; self == the player what created this here Gravity Trap", "contents": "zm_weap_gravityspikes::create_gravity_trap_unitrigger(${1:v_origin}, ${2:wpn_gravityspikes})"},
	{ "trigger": "gravity_trap_trigger_visibility\t#using scripts\\zm\\_zm_weap_gravityspikes;", "contents": "zm_weap_gravityspikes::gravity_trap_trigger_visibility(${1:player})"},
	{ "trigger": "gravity_trap_trigger_think\t#using scripts\\zm\\_zm_weap_gravityspikes;", "contents": "zm_weap_gravityspikes::gravity_trap_trigger_think()"},
	{ "trigger": "gravity_trap_trigger_activate\t#using scripts\\zm\\_zm_weap_gravityspikes;", "contents": "zm_weap_gravityspikes::gravity_trap_trigger_activate(${1:trig_stub}, ${2:player})"},
	{ "trigger": "update_gravityspikes_state\t#using scripts\\zm\\_zm_weap_gravityspikes; self == a player", "contents": "zm_weap_gravityspikes::update_gravityspikes_state(${1:n_gravityspikes_state})"},
	{ "trigger": "update_gravityspikes_energy\t#using scripts\\zm\\_zm_weap_gravityspikes; self == a player", "contents": "zm_weap_gravityspikes::update_gravityspikes_energy(${1:n_gravityspikes_power})"},
	{ "trigger": "check_for_range_and_los\t#using scripts\\zm\\_zm_weap_gravityspikes; self == a zombie", "contents": "zm_weap_gravityspikes::check_for_range_and_los(${1:v_attack_source}, ${2:n_allowed_z_diff}, ${3:n_radius_sq})"},
	{ "trigger": "gravityspikes_target_filtering\t#using scripts\\zm\\_zm_weap_gravityspikes;", "contents": "zm_weap_gravityspikes::gravityspikes_target_filtering(${1:ai_enemy})"},
	{ "trigger": "zombie_lift\t#using scripts\\zm\\_zm_weap_gravityspikes; self == a zombie", "contents": "zm_weap_gravityspikes::zombie_lift(${1:player}, ${2:v_attack_source}, ${3:n_push_away}, ${4:n_lift_height}, ${5:v_lift_offset}, ${6:n_lift_speed})"},
	{ "trigger": "gravity_trap_notify_watcher\t#using scripts\\zm\\_zm_weap_gravityspikes; self = ai zombie", "contents": "zm_weap_gravityspikes::gravity_trap_notify_watcher(${1:player})"},
	{ "trigger": "gravity_trap_timeout_watcher\t#using scripts\\zm\\_zm_weap_gravityspikes; self = ai zombie", "contents": "zm_weap_gravityspikes::gravity_trap_timeout_watcher()"},
	{ "trigger": "zombie_lift_wacky_rotate\t#using scripts\\zm\\_zm_weap_gravityspikes; self == a zombie caught in Gravity Trap", "contents": "zm_weap_gravityspikes::zombie_lift_wacky_rotate(${1:n_lift_time}, ${2:player})"},
	{ "trigger": "zombie_kill_and_gib\t#using scripts\\zm\\_zm_weap_gravityspikes; self == a zombie", "contents": "zm_weap_gravityspikes::zombie_kill_and_gib(${1:player})"},
	{ "trigger": "track_lifted_for_ragdoll_count\t#using scripts\\zm\\_zm_weap_gravityspikes; self == a lifted zombie", "contents": "zm_weap_gravityspikes::track_lifted_for_ragdoll_count()"},
	{ "trigger": "corpse_off_navmesh_watcher\t#using scripts\\zm\\_zm_weap_gravityspikes; self = zombie", "contents": "zm_weap_gravityspikes::corpse_off_navmesh_watcher()"},
	{ "trigger": "gravity_spike_melee_kill\t#using scripts\\zm\\_zm_weap_gravityspikes; self == ai zombie", "contents": "zm_weap_gravityspikes::gravity_spike_melee_kill(${1:v_position}, ${2:player})"},
	{ "trigger": "knockdown_zombies_slam\t#using scripts\\zm\\_zm_weap_gravityspikes; self = player", "contents": "zm_weap_gravityspikes::knockdown_zombies_slam()"},
	{ "trigger": "play_slam_fx\t#using scripts\\zm\\_zm_weap_gravityspikes; self = player", "contents": "zm_weap_gravityspikes::play_slam_fx(${1:v_pos})"},
	{ "trigger": "zombie_slam_direction\t#using scripts\\zm\\_zm_weap_gravityspikes; self = ai zombie", "contents": "zm_weap_gravityspikes::zombie_slam_direction(${1:v_position})"},
	{ "trigger": "gadget_mrpukey_is_inuse\t#using scripts\\shared\\abilities\\gadgets\\_gadget_mrpukey;", "contents": "_gadget_mrpukey::gadget_mrpukey_is_inuse(${1:slot})"},
	{ "trigger": "gadget_mrpukey_is_flickering\t#using scripts\\shared\\abilities\\gadgets\\_gadget_mrpukey;", "contents": "_gadget_mrpukey::gadget_mrpukey_is_flickering(${1:slot})"},
	{ "trigger": "gadget_mrpukey_on_flicker\t#using scripts\\shared\\abilities\\gadgets\\_gadget_mrpukey;", "contents": "_gadget_mrpukey::gadget_mrpukey_on_flicker(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_mrpukey_on_give\t#using scripts\\shared\\abilities\\gadgets\\_gadget_mrpukey;", "contents": "_gadget_mrpukey::gadget_mrpukey_on_give(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_mrpukey_on_take\t#using scripts\\shared\\abilities\\gadgets\\_gadget_mrpukey;", "contents": "_gadget_mrpukey::gadget_mrpukey_on_take(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadge_mrpukey_on_connect\t#using scripts\\shared\\abilities\\gadgets\\_gadget_mrpukey;", "contents": "_gadget_mrpukey::gadge_mrpukey_on_connect()"},
	{ "trigger": "gadget_mrpukey_on\t#using scripts\\shared\\abilities\\gadgets\\_gadget_mrpukey;", "contents": "_gadget_mrpukey::gadget_mrpukey_on(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_mrpukey_off\t#using scripts\\shared\\abilities\\gadgets\\_gadget_mrpukey;", "contents": "_gadget_mrpukey::gadget_mrpukey_off(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_mrpukey_is_primed\t#using scripts\\shared\\abilities\\gadgets\\_gadget_mrpukey;", "contents": "_gadget_mrpukey::gadget_mrpukey_is_primed(${1:slot}, ${2:weapon})"},
	{ "trigger": "DropAIAmmo\t#using scripts\\shared\\ammo_shared;", "contents": "ammo::DropAIAmmo()"},
	{ "trigger": "ammo_pouch_think\t#using scripts\\shared\\ammo_shared;", "contents": "ammo::ammo_pouch_think()"},
	{ "trigger": "Migration_SetupGameType\t#using scripts\\shared\\simple_hostmigration;", "contents": "simple_hostmigration::Migration_SetupGameType()"},
	{ "trigger": "Migration_GetIndexForPlayer\t#using scripts\\shared\\simple_hostmigration;", "contents": "simple_hostmigration::Migration_GetIndexForPlayer(${1:player})"},
	{ "trigger": "Migration_SetupPlayerData\t#using scripts\\shared\\simple_hostmigration;", "contents": "simple_hostmigration::Migration_SetupPlayerData(${1:player}, ${2:index})"},
	{ "trigger": "Migration_OnPlayerConnect\t#using scripts\\shared\\simple_hostmigration;", "contents": "simple_hostmigration::Migration_OnPlayerConnect()"},
	{ "trigger": "Migration_WriteGameData\t#using scripts\\shared\\simple_hostmigration;", "contents": "simple_hostmigration::Migration_WriteGameData()"},
	{ "trigger": "Migration_WriteTeamData\t#using scripts\\shared\\simple_hostmigration;", "contents": "simple_hostmigration::Migration_WriteTeamData(${1:team})"},
	{ "trigger": "Migration_WritePlayerData\t#using scripts\\shared\\simple_hostmigration;", "contents": "simple_hostmigration::Migration_WritePlayerData(${1:player}, ${2:i})"},
	{ "trigger": "UpdateHostmigrationData\t#using scripts\\shared\\simple_hostmigration;", "contents": "simple_hostmigration::UpdateHostmigrationData()"},
	{ "trigger": "grab_minigun\t#using scripts\\zm\\_zm_powerup_weapon_minigun;", "contents": "zm_powerup_weapon_minigun::grab_minigun(${1:player})"},
	{ "trigger": "func_should_drop_minigun\t#using scripts\\zm\\_zm_powerup_weapon_minigun;", "contents": "zm_powerup_weapon_minigun::func_should_drop_minigun()"},
	{ "trigger": "minigun_weapon_powerup\t#using scripts\\zm\\_zm_powerup_weapon_minigun;", "contents": "zm_powerup_weapon_minigun::minigun_weapon_powerup(${1:ent_player}, ${2:time})"},
	{ "trigger": "minigun_powerup_last_stand\t#using scripts\\zm\\_zm_powerup_weapon_minigun;", "contents": "zm_powerup_weapon_minigun::minigun_powerup_last_stand()"},
	{ "trigger": "minigun_countdown\t#using scripts\\zm\\_zm_powerup_weapon_minigun;", "contents": "zm_powerup_weapon_minigun::minigun_countdown(${1:ent_player}, ${2:str_weapon_time})"},
	{ "trigger": "minigun_weapon_powerup_off\t#using scripts\\zm\\_zm_powerup_weapon_minigun;", "contents": "zm_powerup_weapon_minigun::minigun_weapon_powerup_off()"},
	{ "trigger": "minigun_damage_adjust\t#using scripts\\zm\\_zm_powerup_weapon_minigun; self is an enemy", "contents": "zm_powerup_weapon_minigun::minigun_damage_adjust(${1:inflictor}, ${2:attacker}, ${3:damage}, ${4:flags}, ${5:meansofdeath}, ${6:weapon}, ${7:vpoint}, ${8:vdir}, ${9:sHitLoc}, ${10:psOffsetTime}, ${11:boneIndex}, ${12:surfaceType})"},
	{ "trigger": "defaultRole\t#using scripts\\shared\\vehicles\\_wasp;", "contents": "wasp::defaultRole()"},
	{ "trigger": "state_death_update\t#using scripts\\shared\\vehicles\\_wasp;", "contents": "wasp::state_death_update(${1:params})"},
	{ "trigger": "state_emped_update\t#using scripts\\shared\\vehicles\\_wasp;", "contents": "wasp::state_emped_update(${1:params})"},
	{ "trigger": "fall_and_bounce\t#using scripts\\shared\\vehicles\\_wasp;", "contents": "wasp::fall_and_bounce(${1:killOnImpact_speed}, ${2:killOnImpact_time})"},
	{ "trigger": "get_guard_points\t#using scripts\\shared\\vehicles\\_wasp;", "contents": "wasp::get_guard_points(${1:owner})"},
	{ "trigger": "state_guard_can_enter\t#using scripts\\shared\\vehicles\\_wasp;", "contents": "wasp::state_guard_can_enter(${1:from_state}, ${2:to_state}, ${3:connection})"},
	{ "trigger": "state_guard_enter\t#using scripts\\shared\\vehicles\\_wasp;", "contents": "wasp::state_guard_enter(${1:params})"},
	{ "trigger": "state_guard_exit\t#using scripts\\shared\\vehicles\\_wasp;", "contents": "wasp::state_guard_exit(${1:params})"},
	{ "trigger": "test_get_back_point\t#using scripts\\shared\\vehicles\\_wasp;", "contents": "wasp::test_get_back_point(${1:point})"},
	{ "trigger": "test_get_back_queryresult\t#using scripts\\shared\\vehicles\\_wasp;", "contents": "wasp::test_get_back_queryresult(${1:queryResult})"},
	{ "trigger": "state_guard_update\t#using scripts\\shared\\vehicles\\_wasp;", "contents": "wasp::state_guard_update(${1:params})"},
	{ "trigger": "state_combat_enter\t#using scripts\\shared\\vehicles\\_wasp;", "contents": "wasp::state_combat_enter(${1:params})"},
	{ "trigger": "turretFireUpdate\t#using scripts\\shared\\vehicles\\_wasp;", "contents": "wasp::turretFireUpdate()"},
	{ "trigger": "path_update_interrupt\t#using scripts\\shared\\vehicles\\_wasp;", "contents": "wasp::path_update_interrupt()"},
	{ "trigger": "wait_till_something_happens\t#using scripts\\shared\\vehicles\\_wasp;", "contents": "wasp::wait_till_something_happens(${1:timeout})"},
	{ "trigger": "drop_leader\t#using scripts\\shared\\vehicles\\_wasp;", "contents": "wasp::drop_leader()"},
	{ "trigger": "update_leader\t#using scripts\\shared\\vehicles\\_wasp;", "contents": "wasp::update_leader()"},
	{ "trigger": "should_fly_forward\t#using scripts\\shared\\vehicles\\_wasp;", "contents": "wasp::should_fly_forward(${1:distanceToGoalSq})"},
	{ "trigger": "state_combat_update\t#using scripts\\shared\\vehicles\\_wasp;", "contents": "wasp::state_combat_update(${1:params})"},
	{ "trigger": "GetNextMovePosition_wander\t#using scripts\\shared\\vehicles\\_wasp; no self.enemy", "contents": "wasp::GetNextMovePosition_wander()"},
	{ "trigger": "GetNextMovePosition_tactical\t#using scripts\\shared\\vehicles\\_wasp; has self.enemy", "contents": "wasp::GetNextMovePosition_tactical()"},
	{ "trigger": "drone_callback_damage\t#using scripts\\shared\\vehicles\\_wasp;", "contents": "wasp::drone_callback_damage(${1:eInflictor}, ${2:eAttacker}, ${3:iDamage}, ${4:iDFlags}, ${5:sMeansOfDeath}, ${6:weapon}, ${7:vPoint}, ${8:vDir}, ${9:sHitLoc}, ${10:vDamageOrigin}, ${11:psOffsetTime}, ${12:damageFromUnderneath}, ${13:modelIndex}, ${14:partName}, ${15:vSurfaceNormal})"},
	{ "trigger": "drone_AllowFriendlyFireDamage\t#using scripts\\shared\\vehicles\\_wasp;", "contents": "wasp::drone_AllowFriendlyFireDamage(${1:eInflictor}, ${2:eAttacker}, ${3:sMeansOfDeath}, ${4:weapon})"},
	{ "trigger": "wasp_driving\t#using scripts\\shared\\vehicles\\_wasp;", "contents": "wasp::wasp_driving(${1:params})"},
	{ "trigger": "wasp_manage_camera_swaps\t#using scripts\\shared\\vehicles\\_wasp;", "contents": "wasp::wasp_manage_camera_swaps()"},
	{ "trigger": "play\t#using scripts\\shared\\scene_shared;", "contents": "scene::play()"},
	{ "trigger": "stop\t#using scripts\\shared\\scene_shared;", "contents": "scene::stop(${1:b_clear = false}, ${2:b_dont_clear_anim = false}, ${3:b_finished = false})"},
	{ "trigger": "get_align_ent\t#using scripts\\shared\\scene_shared;", "contents": "scene::get_align_ent()"},
	{ "trigger": "get_align_tag\t#using scripts\\shared\\scene_shared;", "contents": "scene::get_align_tag()"},
	{ "trigger": "scene\t#using scripts\\shared\\scene_shared;", "contents": "scene::scene()"},
	{ "trigger": "_on_damage_run_scene_thread\t#using scripts\\shared\\scene_shared;", "contents": "scene::_on_damage_run_scene_thread()"},
	{ "trigger": "_assign_unique_name\t#using scripts\\shared\\scene_shared;", "contents": "scene::_assign_unique_name()"},
	{ "trigger": "get_name\t#using scripts\\shared\\scene_shared;", "contents": "scene::get_name()"},
	{ "trigger": "get_orig_name\t#using scripts\\shared\\scene_shared;", "contents": "scene::get_orig_name()"},
	{ "trigger": "_spawn\t#using scripts\\shared\\scene_shared;", "contents": "scene::_spawn(${1:e_spawner}, ${2:b_hide = true}, ${3:b_set_ready_when_spawned = true})"},
	{ "trigger": "_prepare\t#using scripts\\shared\\scene_shared;", "contents": "scene::_prepare()"},
	{ "trigger": "_prepare_player\t#using scripts\\shared\\scene_shared;", "contents": "scene::_prepare_player(${1:player})"},
	{ "trigger": "revive_player\t#using scripts\\shared\\scene_shared;", "contents": "scene::revive_player(${1:player})"},
	{ "trigger": "set_player_stance\t#using scripts\\shared\\scene_shared;", "contents": "scene::set_player_stance(${1:player})"},
	{ "trigger": "finish\t#using scripts\\shared\\scene_shared;", "contents": "scene::finish(${1:b_clear = false}, ${2:b_canceled = false})"},
	{ "trigger": "_finish_player\t#using scripts\\shared\\scene_shared;", "contents": "scene::_finish_player(${1:player})"},
	{ "trigger": "set_objective\t#using scripts\\shared\\scene_shared;", "contents": "scene::set_objective()"},
	{ "trigger": "_on_death\t#using scripts\\shared\\scene_shared;", "contents": "scene::_on_death()"},
	{ "trigger": "do_death_anims\t#using scripts\\shared\\scene_shared;", "contents": "scene::do_death_anims()"},
	{ "trigger": "_cleanup\t#using scripts\\shared\\scene_shared;", "contents": "scene::_cleanup()"},
	{ "trigger": "_set_goal\t#using scripts\\shared\\scene_shared;", "contents": "scene::_set_goal()"},
	{ "trigger": "_track_goal\t#using scripts\\shared\\scene_shared;", "contents": "scene::_track_goal()"},
	{ "trigger": "_play_anim\t#using scripts\\shared\\scene_shared;", "contents": "scene::_play_anim(${1:animation}, ${2:n_delay_min = 0}, ${3:n_delay_max = 0}, ${4:n_rate = 1}, ${5:n_blend = 0.2}, ${6:n_time = 0})"},
	{ "trigger": "spawn_ent\t#using scripts\\shared\\scene_shared;", "contents": "scene::spawn_ent(${1:e})"},
	{ "trigger": "_play_shared_player_anim\t#using scripts\\shared\\scene_shared;", "contents": "scene::_play_shared_player_anim(${1:animation}, ${2:align}, ${3:tag}, ${4:n_rate}, ${5:n_time})"},
	{ "trigger": "_play_shared_player_anim_for_player\t#using scripts\\shared\\scene_shared;", "contents": "scene::_play_shared_player_anim_for_player(${1:player})"},
	{ "trigger": "play_regroup_fx_for_scene\t#using scripts\\shared\\scene_shared;", "contents": "scene::play_regroup_fx_for_scene(${1:e_player})"},
	{ "trigger": "regroup_invulnerability\t#using scripts\\shared\\scene_shared;", "contents": "scene::regroup_invulnerability(${1:e_player})"},
	{ "trigger": "get_lerp_time\t#using scripts\\shared\\scene_shared;", "contents": "scene::get_lerp_time()"},
	{ "trigger": "get_camera_tween\t#using scripts\\shared\\scene_shared;", "contents": "scene::get_camera_tween()"},
	{ "trigger": "get_camera_tween_out\t#using scripts\\shared\\scene_shared;", "contents": "scene::get_camera_tween_out()"},
	{ "trigger": "link_player\t#using scripts\\shared\\scene_shared;", "contents": "scene::link_player()"},
	{ "trigger": "reset_player\t#using scripts\\shared\\scene_shared;", "contents": "scene::reset_player()"},
	{ "trigger": "is_alive\t#using scripts\\shared\\scene_shared;", "contents": "scene::is_alive()"},
	{ "trigger": "is_player\t#using scripts\\shared\\scene_shared;", "contents": "scene::is_player()"},
	{ "trigger": "is_player_model\t#using scripts\\shared\\scene_shared;", "contents": "scene::is_player_model()"},
	{ "trigger": "is_shared_player\t#using scripts\\shared\\scene_shared;", "contents": "scene::is_shared_player()"},
	{ "trigger": "in_a_different_scene\t#using scripts\\shared\\scene_shared;", "contents": "scene::in_a_different_scene()"},
	{ "trigger": "_should_skip_anim\t#using scripts\\shared\\scene_shared;", "contents": "scene::_should_skip_anim(${1:animation})"},
	{ "trigger": "_should_skip_entity\t#using scripts\\shared\\scene_shared;", "contents": "scene::_should_skip_entity()"},
	{ "trigger": "skip_scene_on_client\t#using scripts\\shared\\scene_shared;", "contents": "scene::skip_scene_on_client()"},
	{ "trigger": "skip_scene_on_server\t#using scripts\\shared\\scene_shared;", "contents": "scene::skip_scene_on_server()"},
	{ "trigger": "skip_scene\t#using scripts\\shared\\scene_shared;", "contents": "scene::skip_scene(${1:b_wait_one_frame})"},
	{ "trigger": "add_to_sync_list\t#using scripts\\shared\\scene_shared;", "contents": "scene::add_to_sync_list()"},
	{ "trigger": "remove_from_sync_list\t#using scripts\\shared\\scene_shared;", "contents": "scene::remove_from_sync_list()"},
	{ "trigger": "new_object\t#using scripts\\shared\\scene_shared;", "contents": "scene::new_object()"},
	{ "trigger": "get_valid_object_defs\t#using scripts\\shared\\scene_shared;", "contents": "scene::get_valid_object_defs()"},
	{ "trigger": "get_object_id\t#using scripts\\shared\\scene_shared;", "contents": "scene::get_object_id()"},
	{ "trigger": "sync_with_client_scene\t#using scripts\\shared\\scene_shared;", "contents": "scene::sync_with_client_scene(${1:str_state}, ${2:b_test_run = false})"},
	{ "trigger": "assign_ents\t#using scripts\\shared\\scene_shared;", "contents": "scene::assign_ents(${1:a_ents})"},
	{ "trigger": "_assign_ents_by_name\t#using scripts\\shared\\scene_shared;", "contents": "scene::_assign_ents_by_name(${1:&a_objects}, ${2:&a_ents})"},
	{ "trigger": "_assign_ents_by_type\t#using scripts\\shared\\scene_shared;", "contents": "scene::_assign_ents_by_type(${1:&a_objects}, ${2:&a_ents}, ${3:str_type}, ${4:func_test})"},
	{ "trigger": "_is_ent_player\t#using scripts\\shared\\scene_shared;", "contents": "scene::_is_ent_player(${1:ent})"},
	{ "trigger": "_is_ent_actor\t#using scripts\\shared\\scene_shared;", "contents": "scene::_is_ent_actor(${1:ent})"},
	{ "trigger": "_is_ent_vehicle\t#using scripts\\shared\\scene_shared;", "contents": "scene::_is_ent_vehicle(${1:ent})"},
	{ "trigger": "get_objects\t#using scripts\\shared\\scene_shared;", "contents": "scene::get_objects(${1:str_type})"},
	{ "trigger": "get_anim_relative_start_time\t#using scripts\\shared\\scene_shared;", "contents": "scene::get_anim_relative_start_time(${1:animation}, ${2:n_time})"},
	{ "trigger": "is_player_anim_ending_early\t#using scripts\\shared\\scene_shared;", "contents": "scene::is_player_anim_ending_early()"},
	{ "trigger": "play\t#using scripts\\shared\\scene_shared;", "contents": "scene::play(${1:str_state = \"play\"}, ${2:a_ents}, ${3:b_testing = false}, ${4:str_mode = \"\"})"},
	{ "trigger": "_wait_server_time\t#using scripts\\shared\\scene_shared;", "contents": "scene::_wait_server_time(${1:n_time}, ${2:n_start_time = 0})"},
	{ "trigger": "_wait_for_camera_animation\t#using scripts\\shared\\scene_shared;", "contents": "scene::_wait_for_camera_animation(${1:str_cam}, ${2:n_start_time})"},
	{ "trigger": "_play_camera_anims\t#using scripts\\shared\\scene_shared;", "contents": "scene::_play_camera_anims()"},
	{ "trigger": "_play_camera_anim_on_player_callback\t#using scripts\\shared\\scene_shared;", "contents": "scene::_play_camera_anim_on_player_callback(${1:player})"},
	{ "trigger": "loop_camera_anim_to_set_up_for_capture\t#using scripts\\shared\\scene_shared;", "contents": "scene::loop_camera_anim_to_set_up_for_capture()"},
	{ "trigger": "_play_extracam_on_player\t#using scripts\\shared\\scene_shared;", "contents": "scene::_play_extracam_on_player(${1:player}, ${2:n_index}, ${3:str_camera_anim}, ${4:v_origin}, ${5:v_angles})"},
	{ "trigger": "_stop_camera_anims\t#using scripts\\shared\\scene_shared;", "contents": "scene::_stop_camera_anims()"},
	{ "trigger": "_stop_camera_anim_on_player\t#using scripts\\shared\\scene_shared;", "contents": "scene::_stop_camera_anim_on_player(${1:player})"},
	{ "trigger": "display_dev_info\t#using scripts\\shared\\scene_shared;", "contents": "scene::display_dev_info()"},
	{ "trigger": "destroy_dev_info\t#using scripts\\shared\\scene_shared;", "contents": "scene::destroy_dev_info()"},
	{ "trigger": "is_skipping_scene\t#using scripts\\shared\\scene_shared;", "contents": "scene::is_skipping_scene()"},
	{ "trigger": "is_skipping_player_scene\t#using scripts\\shared\\scene_shared;", "contents": "scene::is_skipping_player_scene()"},
	{ "trigger": "has_next_scene\t#using scripts\\shared\\scene_shared;", "contents": "scene::has_next_scene()"},
	{ "trigger": "run_next\t#using scripts\\shared\\scene_shared;", "contents": "scene::run_next()"},
	{ "trigger": "streamer_request_completed\t#using scripts\\shared\\scene_shared;", "contents": "scene::streamer_request_completed()"},
	{ "trigger": "stop\t#using scripts\\shared\\scene_shared;", "contents": "scene::stop(${1:b_clear = false}, ${2:b_finished = false})"},
	{ "trigger": "_release_object\t#using scripts\\shared\\scene_shared;", "contents": "scene::_release_object()"},
	{ "trigger": "_call_state_funcs\t#using scripts\\shared\\scene_shared;", "contents": "scene::_call_state_funcs(${1:str_state})"},
	{ "trigger": "get_ents\t#using scripts\\shared\\scene_shared;", "contents": "scene::get_ents()"},
	{ "trigger": "get_root\t#using scripts\\shared\\scene_shared;", "contents": "scene::get_root()"},
	{ "trigger": "get_align_ent\t#using scripts\\shared\\scene_shared;", "contents": "scene::get_align_ent()"},
	{ "trigger": "allows_multiple\t#using scripts\\shared\\scene_shared;", "contents": "scene::allows_multiple()"},
	{ "trigger": "is_looping\t#using scripts\\shared\\scene_shared;", "contents": "scene::is_looping()"},
	{ "trigger": "wait_till_scene_ready\t#using scripts\\shared\\scene_shared;", "contents": "scene::wait_till_scene_ready(${1:o_exclude}, ${2:b_ignore_streamer = false})"},
	{ "trigger": "wait_till_objects_ready\t#using scripts\\shared\\scene_shared;", "contents": "scene::wait_till_objects_ready(${1:&array})"},
	{ "trigger": "sync_with_other_scenes\t#using scripts\\shared\\scene_shared;", "contents": "scene::sync_with_other_scenes()"},
	{ "trigger": "get_valid_objects\t#using scripts\\shared\\scene_shared;", "contents": "scene::get_valid_objects()"},
	{ "trigger": "on_error\t#using scripts\\shared\\scene_shared;", "contents": "scene::on_error()"},
	{ "trigger": "get_state\t#using scripts\\shared\\scene_shared;", "contents": "scene::get_state()"},
	{ "trigger": "is_scene_shared\t#using scripts\\shared\\scene_shared;", "contents": "scene::is_scene_shared()"},
	{ "trigger": "skip_scene\t#using scripts\\shared\\scene_shared;", "contents": "scene::skip_scene(${1:b_sequence})"},
	{ "trigger": "should_skip_linked_to_players_scene\t#using scripts\\shared\\scene_shared;", "contents": "scene::should_skip_linked_to_players_scene()"},
	{ "trigger": "has_player\t#using scripts\\shared\\scene_shared;", "contents": "scene::has_player()"},
	{ "trigger": "play\t#using scripts\\shared\\scene_shared;", "contents": "scene::play(${1:str_alert_state})"},
	{ "trigger": "_prepare\t#using scripts\\shared\\scene_shared;", "contents": "scene::_prepare()"},
	{ "trigger": "_on_alert_run_scene_thread\t#using scripts\\shared\\scene_shared;", "contents": "scene::_on_alert_run_scene_thread()"},
	{ "trigger": "new_object\t#using scripts\\shared\\scene_shared;", "contents": "scene::new_object()"},
	{ "trigger": "play\t#using scripts\\shared\\scene_shared;", "contents": "scene::play(${1:str_awareness_state = \"low_alert\"})"},
	{ "trigger": "get_existing_ent\t#using scripts\\shared\\scene_shared;", "contents": "scene::get_existing_ent(${1:str_name}, ${2:b_spawner_only = false}, ${3:b_nodes_and_structs = false})"},
	{ "trigger": "is_valid_ent\t#using scripts\\shared\\scene_shared;", "contents": "scene::is_valid_ent(${1:ent})"},
	{ "trigger": "synced_delete\t#using scripts\\shared\\scene_shared;", "contents": "scene::synced_delete()"},
	{ "trigger": "remove_invalid_scene_objects\t#using scripts\\shared\\scene_shared;", "contents": "scene::remove_invalid_scene_objects(${1:s_scenedef})"},
	{ "trigger": "on_load_wait\t#using scripts\\shared\\scene_shared;", "contents": "scene::on_load_wait()"},
	{ "trigger": "run_instances\t#using scripts\\shared\\scene_shared;", "contents": "scene::run_instances()"},
	{ "trigger": "_trigger_play\t#using scripts\\shared\\scene_shared;", "contents": "scene::_trigger_play(${1:trig})"},
	{ "trigger": "_trigger_stop\t#using scripts\\shared\\scene_shared;", "contents": "scene::_trigger_stop(${1:trig})"},
	{ "trigger": "add_scene_func\t#using scripts\\shared\\scene_shared;", "contents": "scene::add_scene_func(${1:str_scenedef}, ${2:func}, ${3:str_state = \"play\"}, ${4:...})"},
	{ "trigger": "remove_scene_func\t#using scripts\\shared\\scene_shared;", "contents": "scene::remove_scene_func(${1:str_scenedef}, ${2:func}, ${3:str_state = \"play\"})"},
	{ "trigger": "get_scenedef\t#using scripts\\shared\\scene_shared;", "contents": "scene::get_scenedef(${1:str_scenedef})"},
	{ "trigger": "get_scenedefs\t#using scripts\\shared\\scene_shared;", "contents": "scene::get_scenedefs(${1:str_type = \"scene\"})"},
	{ "trigger": "spawn\t#using scripts\\shared\\scene_shared;", "contents": "scene::spawn(${1:arg1}, ${2:arg2}, ${3:arg3}, ${4:arg4}, ${5:b_test_run})"},
	{ "trigger": "play\t#using scripts\\shared\\scene_shared;", "contents": "scene::play(${1:arg1}, ${2:arg2}, ${3:arg3}, ${4:b_test_run = false}, ${5:str_state}, ${6:str_mode = \"\"})"},
	{ "trigger": "_play_instance\t#using scripts\\shared\\scene_shared;", "contents": "scene::_play_instance(${1:s_tracker}, ${2:str_scenedef}, ${3:a_ents}, ${4:b_test_run = false}, ${5:str_state}, ${6:str_mode})"},
	{ "trigger": "skipto_end\t#using scripts\\shared\\scene_shared;", "contents": "scene::skipto_end(${1:arg1}, ${2:arg2}, ${3:arg3}, ${4:n_time}, ${5:b_include_players = false})"},
	{ "trigger": "skipto_end_noai\t#using scripts\\shared\\scene_shared;", "contents": "scene::skipto_end_noai(${1:arg1}, ${2:arg2}, ${3:arg3}, ${4:n_time})"},
	{ "trigger": "stop\t#using scripts\\shared\\scene_shared;", "contents": "scene::stop(${1:arg1}, ${2:arg2}, ${3:arg3})"},
	{ "trigger": "_stop_instance\t#using scripts\\shared\\scene_shared;", "contents": "scene::_stop_instance(${1:b_clear = false}, ${2:str_scenedef})"},
	{ "trigger": "get_prop_count\t#using scripts\\shared\\scene_shared;", "contents": "scene::get_prop_count(${1:str_scenedef})"},
	{ "trigger": "get_vehicle_count\t#using scripts\\shared\\scene_shared;", "contents": "scene::get_vehicle_count(${1:str_scenedef})"},
	{ "trigger": "get_actor_count\t#using scripts\\shared\\scene_shared;", "contents": "scene::get_actor_count(${1:str_scenedef})"},
	{ "trigger": "get_player_count\t#using scripts\\shared\\scene_shared;", "contents": "scene::get_player_count(${1:str_scenedef})"},
	{ "trigger": "_get_type_count\t#using scripts\\shared\\scene_shared;", "contents": "scene::_get_type_count(${1:str_type}, ${2:str_scenedef})"},
	{ "trigger": "is_active\t#using scripts\\shared\\scene_shared;", "contents": "scene::is_active(${1:str_scenedef})"},
	{ "trigger": "is_playing\t#using scripts\\shared\\scene_shared;", "contents": "scene::is_playing(${1:str_scenedef})"},
	{ "trigger": "is_ready\t#using scripts\\shared\\scene_shared;", "contents": "scene::is_ready(${1:str_scenedef})"},
	{ "trigger": "get_active_scenes\t#using scripts\\shared\\scene_shared;", "contents": "scene::get_active_scenes(${1:str_scenedef})"},
	{ "trigger": "get_active_scene\t#using scripts\\shared\\scene_shared;", "contents": "scene::get_active_scene(${1:str_scenedef})"},
	{ "trigger": "delete_scene_data\t#using scripts\\shared\\scene_shared;", "contents": "scene::delete_scene_data(${1:str_scenename})"},
	{ "trigger": "is_igc\t#using scripts\\shared\\scene_shared;", "contents": "scene::is_igc()"},
	{ "trigger": "scene_disable_player_stuff\t#using scripts\\shared\\scene_shared;", "contents": "scene::scene_disable_player_stuff(${1:b_hide_hud = true})"},
	{ "trigger": "scene_enable_player_stuff\t#using scripts\\shared\\scene_shared;", "contents": "scene::scene_enable_player_stuff(${1:b_hide_hud = true})"},
	{ "trigger": "updateIGCViewtime\t#using scripts\\shared\\scene_shared;", "contents": "scene::updateIGCViewtime(${1:b_in_igc})"},
	{ "trigger": "set_igc_active\t#using scripts\\shared\\scene_shared;", "contents": "scene::set_igc_active(${1:b_in_igc})"},
	{ "trigger": "is_igc_active\t#using scripts\\shared\\scene_shared;", "contents": "scene::is_igc_active()"},
	{ "trigger": "is_capture_mode\t#using scripts\\shared\\scene_shared;", "contents": "scene::is_capture_mode()"},
	{ "trigger": "should_spectate_on_join\t#using scripts\\shared\\scene_shared;", "contents": "scene::should_spectate_on_join()"},
	{ "trigger": "wait_until_spectate_on_join_completes\t#using scripts\\shared\\scene_shared;", "contents": "scene::wait_until_spectate_on_join_completes()"},
	{ "trigger": "skip_scene\t#using scripts\\shared\\scene_shared;", "contents": "scene::skip_scene(${1:scene_name}, ${2:b_sequence}, ${3:b_player_scene}, ${4:b_check_linked_scene})"},
	{ "trigger": "_skip_scene\t#using scripts\\shared\\scene_shared;", "contents": "scene::_skip_scene(${1:skipped_scene_name}, ${2:b_sequence}, ${3:b_player_scene}, ${4:b_check_linked_scene})"},
	{ "trigger": "add_player_linked_scene\t#using scripts\\shared\\scene_shared;", "contents": "scene::add_player_linked_scene(${1:linked_scene_str})"},
	{ "trigger": "remove_player_linked_scene\t#using scripts\\shared\\scene_shared;", "contents": "scene::remove_player_linked_scene(${1:linked_scene_str})"},
	{ "trigger": "waittill_skip_sequence_completed\t#using scripts\\shared\\scene_shared;", "contents": "scene::waittill_skip_sequence_completed()"},
	{ "trigger": "is_skipping_in_progress\t#using scripts\\shared\\scene_shared;", "contents": "scene::is_skipping_in_progress()"},
	{ "trigger": "watch_scene_skip_requests\t#using scripts\\shared\\scene_shared;", "contents": "scene::watch_scene_skip_requests()"},
	{ "trigger": "clear_scene_skipping_ui\t#using scripts\\shared\\scene_shared;", "contents": "scene::clear_scene_skipping_ui()"},
	{ "trigger": "watch_scene_ending\t#using scripts\\shared\\scene_shared;", "contents": "scene::watch_scene_ending()"},
	{ "trigger": "watch_scene_skipping\t#using scripts\\shared\\scene_shared;", "contents": "scene::watch_scene_skipping()"},
	{ "trigger": "should_skip_scene_loop\t#using scripts\\shared\\scene_shared;", "contents": "scene::should_skip_scene_loop()"},
	{ "trigger": "any_button_pressed\t#using scripts\\shared\\scene_shared;", "contents": "scene::any_button_pressed()"},
	{ "trigger": "on_player_connect\t#using scripts\\shared\\scene_shared;", "contents": "scene::on_player_connect()"},
	{ "trigger": "on_player_disconnect\t#using scripts\\shared\\scene_shared;", "contents": "scene::on_player_disconnect()"},
	{ "trigger": "add_scene_ordered_notetrack\t#using scripts\\shared\\scene_shared;", "contents": "scene::add_scene_ordered_notetrack(${1:group_name}, ${2:str_note})"},
	{ "trigger": "add_wait_for_streamer_hint_scene\t#using scripts\\shared\\scene_shared;", "contents": "scene::add_wait_for_streamer_hint_scene(${1:str_scene_name})"},
	{ "trigger": "getRankXPCapped\t#using scripts\\shared\\rank_shared;", "contents": "rank::getRankXPCapped(${1:inRankXp})"},
	{ "trigger": "getCodPointsCapped\t#using scripts\\shared\\rank_shared;", "contents": "rank::getCodPointsCapped(${1:inCodPoints})"},
	{ "trigger": "registerScoreInfo\t#using scripts\\shared\\rank_shared;", "contents": "rank::registerScoreInfo(${1:type}, ${2:value}, ${3:xp}, ${4:label}, ${5:teamscore_material})"},
	{ "trigger": "getScoreInfoValue\t#using scripts\\shared\\rank_shared;", "contents": "rank::getScoreInfoValue(${1:type})"},
	{ "trigger": "getScoreInfoXP\t#using scripts\\shared\\rank_shared;", "contents": "rank::getScoreInfoXP(${1:type})"},
	{ "trigger": "shouldSkipMomentumDisplay\t#using scripts\\shared\\rank_shared;", "contents": "rank::shouldSkipMomentumDisplay(${1:type})"},
	{ "trigger": "getScoreInfoLabel\t#using scripts\\shared\\rank_shared;", "contents": "rank::getScoreInfoLabel(${1:type})"},
	{ "trigger": "getCombatEfficiencyEvent\t#using scripts\\shared\\rank_shared;", "contents": "rank::getCombatEfficiencyEvent(${1:type})"},
	{ "trigger": "doesScoreInfoCountTowardRampage\t#using scripts\\shared\\rank_shared;", "contents": "rank::doesScoreInfoCountTowardRampage(${1:type})"},
	{ "trigger": "getRankInfoMinXP\t#using scripts\\shared\\rank_shared;", "contents": "rank::getRankInfoMinXP(${1:rankId})"},
	{ "trigger": "getRankInfoXPAmt\t#using scripts\\shared\\rank_shared;", "contents": "rank::getRankInfoXPAmt(${1:rankId})"},
	{ "trigger": "getRankInfoMaxXp\t#using scripts\\shared\\rank_shared;", "contents": "rank::getRankInfoMaxXp(${1:rankId})"},
	{ "trigger": "getRankInfoFull\t#using scripts\\shared\\rank_shared;", "contents": "rank::getRankInfoFull(${1:rankId})"},
	{ "trigger": "getRankInfoIcon\t#using scripts\\shared\\rank_shared;", "contents": "rank::getRankInfoIcon(${1:rankId}, ${2:prestigeId})"},
	{ "trigger": "getRankInfoLevel\t#using scripts\\shared\\rank_shared;", "contents": "rank::getRankInfoLevel(${1:rankId})"},
	{ "trigger": "getRankInfoCodPointsEarned\t#using scripts\\shared\\rank_shared;", "contents": "rank::getRankInfoCodPointsEarned(${1:rankId})"},
	{ "trigger": "shouldKickByRank\t#using scripts\\shared\\rank_shared;", "contents": "rank::shouldKickByRank()"},
	{ "trigger": "getCodPointsStat\t#using scripts\\shared\\rank_shared;", "contents": "rank::getCodPointsStat()"},
	{ "trigger": "setCodPointsStat\t#using scripts\\shared\\rank_shared;", "contents": "rank::setCodPointsStat(${1:codPoints})"},
	{ "trigger": "getRankXpStat\t#using scripts\\shared\\rank_shared;", "contents": "rank::getRankXpStat()"},
	{ "trigger": "getArenaPointsStat\t#using scripts\\shared\\rank_shared;", "contents": "rank::getArenaPointsStat()"},
	{ "trigger": "on_player_connect\t#using scripts\\shared\\rank_shared;", "contents": "rank::on_player_connect()"},
	{ "trigger": "on_joined_team\t#using scripts\\shared\\rank_shared;", "contents": "rank::on_joined_team()"},
	{ "trigger": "on_joined_spectators\t#using scripts\\shared\\rank_shared;", "contents": "rank::on_joined_spectators()"},
	{ "trigger": "on_player_spawned\t#using scripts\\shared\\rank_shared; self == player", "contents": "rank::on_player_spawned()"},
	{ "trigger": "incCodPoints\t#using scripts\\shared\\rank_shared;", "contents": "rank::incCodPoints(${1:amount})"},
	{ "trigger": "atLeastOnePlayerOnEachTeam\t#using scripts\\shared\\rank_shared;", "contents": "rank::atLeastOnePlayerOnEachTeam()"},
	{ "trigger": "giveRankXP\t#using scripts\\shared\\rank_shared;", "contents": "rank::giveRankXP(${1:type}, ${2:value}, ${3:devAdd})"},
	{ "trigger": "round_this_number\t#using scripts\\shared\\rank_shared;", "contents": "rank::round_this_number(${1:value})"},
	{ "trigger": "updateRank\t#using scripts\\shared\\rank_shared;", "contents": "rank::updateRank()"},
	{ "trigger": "CodeCallback_RankUp\t#using scripts\\shared\\rank_shared;", "contents": "rank::CodeCallback_RankUp(${1:rank}, ${2:prestige}, ${3:unlockTokensAdded})"},
	{ "trigger": "getItemIndex\t#using scripts\\shared\\rank_shared;", "contents": "rank::getItemIndex(${1:refString})"},
	{ "trigger": "endGameUpdate\t#using scripts\\shared\\rank_shared;", "contents": "rank::endGameUpdate()"},
	{ "trigger": "updateRankScoreHUD\t#using scripts\\shared\\rank_shared;", "contents": "rank::updateRankScoreHUD(${1:amount})"},
	{ "trigger": "updateMomentumHUD\t#using scripts\\shared\\rank_shared;", "contents": "rank::updateMomentumHUD(${1:amount}, ${2:reason}, ${3:reasonValue})"},
	{ "trigger": "removeRankHUD\t#using scripts\\shared\\rank_shared;", "contents": "rank::removeRankHUD()"},
	{ "trigger": "getRank\t#using scripts\\shared\\rank_shared;", "contents": "rank::getRank()"},
	{ "trigger": "getRankForXp\t#using scripts\\shared\\rank_shared;", "contents": "rank::getRankForXp(${1:xpVal})"},
	{ "trigger": "getSPM\t#using scripts\\shared\\rank_shared;", "contents": "rank::getSPM()"},
	{ "trigger": "getRankXP\t#using scripts\\shared\\rank_shared;", "contents": "rank::getRankXP()"},
	{ "trigger": "incRankXP\t#using scripts\\shared\\rank_shared;", "contents": "rank::incRankXP(${1:amount})"},
	{ "trigger": "syncXPStat\t#using scripts\\shared\\rank_shared;", "contents": "rank::syncXPStat()"},
	{ "trigger": "network_choke_thread\t#using scripts\\zm\\_zm_net;", "contents": "zm_net::network_choke_thread(${1:id})"},
	{ "trigger": "network_choke_safe\t#using scripts\\zm\\_zm_net;", "contents": "zm_net::network_choke_safe(${1:id})"},
	{ "trigger": "network_choke_action\t#using scripts\\zm\\_zm_net;", "contents": "zm_net::network_choke_action(${1:id}, ${2:choke_action}, ${3:arg1}, ${4:arg2}, ${5:arg3})"},
	{ "trigger": "network_entity_valid\t#using scripts\\zm\\_zm_net;", "contents": "zm_net::network_entity_valid(${1:entity})"},
	{ "trigger": "_network_safe_spawn\t#using scripts\\zm\\_zm_net;", "contents": "zm_net::_network_safe_spawn(${1:classname}, ${2:origin})"},
	{ "trigger": "network_safe_spawn\t#using scripts\\zm\\_zm_net;", "contents": "zm_net::network_safe_spawn(${1:id}, ${2:max}, ${3:classname}, ${4:origin})"},
	{ "trigger": "_network_safe_play_fx_on_tag\t#using scripts\\zm\\_zm_net;", "contents": "zm_net::_network_safe_play_fx_on_tag(${1:fx}, ${2:entity}, ${3:tag})"},
	{ "trigger": "network_safe_play_fx_on_tag\t#using scripts\\zm\\_zm_net;", "contents": "zm_net::network_safe_play_fx_on_tag(${1:id}, ${2:max}, ${3:fx}, ${4:entity}, ${5:tag})"},
	{ "trigger": "onPrecacheGameType\t#using scripts\\zm\\gametypes\\zclassic;", "contents": "zclassic::onPrecacheGameType()"},
	{ "trigger": "onStartGameType\t#using scripts\\zm\\gametypes\\zclassic;", "contents": "zclassic::onStartGameType()"},
	{ "trigger": "getWinningTeamFromLoser\t#using scripts\\zm\\gametypes\\_globallogic_defaults;", "contents": "globallogic_defaults::getWinningTeamFromLoser(${1:losing_team})"},
	{ "trigger": "default_onForfeit\t#using scripts\\zm\\gametypes\\_globallogic_defaults;", "contents": "globallogic_defaults::default_onForfeit(${1:team})"},
	{ "trigger": "default_onDeadEvent\t#using scripts\\zm\\gametypes\\_globallogic_defaults;", "contents": "globallogic_defaults::default_onDeadEvent(${1:team})"},
	{ "trigger": "default_onAliveCountChange\t#using scripts\\zm\\gametypes\\_globallogic_defaults;", "contents": "globallogic_defaults::default_onAliveCountChange(${1:team})"},
	{ "trigger": "default_onRoundEndGame\t#using scripts\\zm\\gametypes\\_globallogic_defaults;", "contents": "globallogic_defaults::default_onRoundEndGame(${1:winner})"},
	{ "trigger": "default_onOneLeftEvent\t#using scripts\\zm\\gametypes\\_globallogic_defaults;", "contents": "globallogic_defaults::default_onOneLeftEvent(${1:team})"},
	{ "trigger": "default_onTimeLimit\t#using scripts\\zm\\gametypes\\_globallogic_defaults;", "contents": "globallogic_defaults::default_onTimeLimit()"},
	{ "trigger": "default_onScoreLimit\t#using scripts\\zm\\gametypes\\_globallogic_defaults;", "contents": "globallogic_defaults::default_onScoreLimit()"},
	{ "trigger": "default_onSpawnSpectator\t#using scripts\\zm\\gametypes\\_globallogic_defaults;", "contents": "globallogic_defaults::default_onSpawnSpectator(${1:origin}, ${2:angles})"},
	{ "trigger": "default_onSpawnIntermission\t#using scripts\\zm\\gametypes\\_globallogic_defaults;", "contents": "globallogic_defaults::default_onSpawnIntermission()"},
	{ "trigger": "default_getTimeLimit\t#using scripts\\zm\\gametypes\\_globallogic_defaults;", "contents": "globallogic_defaults::default_getTimeLimit()"},
	{ "trigger": "clock_shot\t#using scripts\\zm\\zm_giant;", "contents": "zm_giant::clock_shot(${1:a_ents})"},
	{ "trigger": "on_player_spawned\t#using scripts\\zm\\zm_giant;", "contents": "zm_giant::on_player_spawned()"},
	{ "trigger": "periodic_lightning_strikes\t#using scripts\\zm\\zm_giant;", "contents": "zm_giant::periodic_lightning_strikes()"},
	{ "trigger": "custom_add_vox\t#using scripts\\zm\\zm_giant;", "contents": "zm_giant::custom_add_vox()"},
	{ "trigger": "enemy_location_override\t#using scripts\\zm\\zm_giant;", "contents": "zm_giant::enemy_location_override(${1:zombie}, ${2:enemy})"},
	{ "trigger": "validate_and_set_no_target_position\t#using scripts\\zm\\zm_giant;", "contents": "zm_giant::validate_and_set_no_target_position(${1:position})"},
	{ "trigger": "no_target_override\t#using scripts\\zm\\zm_giant;", "contents": "zm_giant::no_target_override(${1:zombie})"},
	{ "trigger": "anim_override_func\t#using scripts\\zm\\zm_giant;", "contents": "zm_giant::anim_override_func()"},
	{ "trigger": "lock_additional_player_spawner\t#using scripts\\zm\\zm_giant;", "contents": "zm_giant::lock_additional_player_spawner()"},
	{ "trigger": "bridge_disconnect\t#using scripts\\zm\\zm_giant;", "contents": "zm_giant::bridge_disconnect(${1:a_parts})"},
	{ "trigger": "bridge_connect\t#using scripts\\zm\\zm_giant;", "contents": "zm_giant::bridge_connect(${1:a_parts})"},
	{ "trigger": "jump_from_bridge\t#using scripts\\zm\\zm_giant;", "contents": "zm_giant::jump_from_bridge()"},
	{ "trigger": "power_electric_switch\t#using scripts\\zm\\zm_giant;", "contents": "zm_giant::power_electric_switch()"},
	{ "trigger": "factory_exit_level\t#using scripts\\zm\\zm_giant;", "contents": "zm_giant::factory_exit_level()"},
	{ "trigger": "factory_find_exit_point\t#using scripts\\zm\\zm_giant;", "contents": "zm_giant::factory_find_exit_point()"},
	{ "trigger": "powerup_special_drop_override\t#using scripts\\zm\\zm_giant;", "contents": "zm_giant::powerup_special_drop_override()"},
	{ "trigger": "sndFunctions\t#using scripts\\zm\\zm_giant;", "contents": "zm_giant::sndFunctions()"},
	{ "trigger": "sndConversations\t#using scripts\\zm\\zm_giant;", "contents": "zm_giant::sndConversations()"},
	{ "trigger": "sndConvo1\t#using scripts\\zm\\zm_giant;", "contents": "zm_giant::sndConvo1()"},
	{ "trigger": "sndConvo2\t#using scripts\\zm\\zm_giant;", "contents": "zm_giant::sndConvo2()"},
	{ "trigger": "sndConvo3\t#using scripts\\zm\\zm_giant;", "contents": "zm_giant::sndConvo3()"},
	{ "trigger": "sndConvo4\t#using scripts\\zm\\zm_giant;", "contents": "zm_giant::sndConvo4()"},
	{ "trigger": "sndFieldReport1\t#using scripts\\zm\\zm_giant;", "contents": "zm_giant::sndFieldReport1()"},
	{ "trigger": "sndFieldReport2\t#using scripts\\zm\\zm_giant;", "contents": "zm_giant::sndFieldReport2()"},
	{ "trigger": "sndFieldReport3\t#using scripts\\zm\\zm_giant;", "contents": "zm_giant::sndFieldReport3()"},
	{ "trigger": "doLine\t#using scripts\\zm\\zm_giant;", "contents": "zm_giant::doLine(${1:guy}, ${2:alias})"},
	{ "trigger": "waitPlaybackTime\t#using scripts\\zm\\zm_giant;", "contents": "zm_giant::waitPlaybackTime(${1:alias})"},
	{ "trigger": "getRandomNotRichtofen\t#using scripts\\zm\\zm_giant;", "contents": "zm_giant::getRandomNotRichtofen()"},
	{ "trigger": "getSpecificCharacter\t#using scripts\\zm\\zm_giant;", "contents": "zm_giant::getSpecificCharacter(${1:charIndex})"},
	{ "trigger": "isAnyoneTalking\t#using scripts\\zm\\zm_giant;", "contents": "zm_giant::isAnyoneTalking()"},
	{ "trigger": "setupMusic\t#using scripts\\zm\\zm_giant;", "contents": "zm_giant::setupMusic()"},
	{ "trigger": "sndFirstDoor\t#using scripts\\zm\\zm_giant;", "contents": "zm_giant::sndFirstDoor()"},
	{ "trigger": "sndPASetup\t#using scripts\\zm\\zm_giant;", "contents": "zm_giant::sndPASetup()"},
	{ "trigger": "sndPA_DoVox\t#using scripts\\zm\\zm_giant;", "contents": "zm_giant::sndPA_DoVox(${1:alias}, ${2:delay}, ${3:nowait = false})"},
	{ "trigger": "sndPA_playvox\t#using scripts\\zm\\zm_giant;", "contents": "zm_giant::sndPA_playvox(${1:alias})"},
	{ "trigger": "sndPA_Traps\t#using scripts\\zm\\zm_giant;", "contents": "zm_giant::sndPA_Traps(${1:trap}, ${2:stage})"},
	{ "trigger": "factory_custom_spawn_location_selection\t#using scripts\\zm\\zm_giant;", "contents": "zm_giant::factory_custom_spawn_location_selection(${1:a_spots})"},
	{ "trigger": "fx_overrides\t#using scripts\\zm\\zm_giant;", "contents": "zm_giant::fx_overrides()"},
	{ "trigger": "filter\t#using scripts\\shared\\array_shared;", "contents": "array::filter(${1:&array}, ${2:b_keep_keys}, ${3:func_filter}, ${4:arg1}, ${5:arg2}, ${6:arg3}, ${7:arg4}, ${8:arg5})"},
	{ "trigger": "remove_dead\t#using scripts\\shared\\array_shared;", "contents": "array::remove_dead(${1:&array}, ${2:b_keep_keys})"},
	{ "trigger": "_filter_undefined\t#using scripts\\shared\\array_shared;", "contents": "array::_filter_undefined(${1:val})"},
	{ "trigger": "remove_undefined\t#using scripts\\shared\\array_shared;", "contents": "array::remove_undefined(${1:&array}, ${2:b_keep_keys})"},
	{ "trigger": "cleanup\t#using scripts\\shared\\array_shared;", "contents": "array::cleanup(${1:&array}, ${2:b_keep_empty_arrays = false})"},
	{ "trigger": "filter_classname\t#using scripts\\shared\\array_shared;", "contents": "array::filter_classname(${1:&array}, ${2:b_keep_keys}, ${3:str_classname})"},
	{ "trigger": "get_touching\t#using scripts\\shared\\array_shared;", "contents": "array::get_touching(${1:&array}, ${2:b_keep_keys})"},
	{ "trigger": "remove_index\t#using scripts\\shared\\array_shared;", "contents": "array::remove_index(${1:array}, ${2:index}, ${3:b_keep_keys})"},
	{ "trigger": "delete_all\t#using scripts\\shared\\array_shared;", "contents": "array::delete_all(${1:&array}, ${2:is_struct})"},
	{ "trigger": "notify_all\t#using scripts\\shared\\array_shared;", "contents": "array::notify_all(${1:&array}, ${2:str_notify})"},
	{ "trigger": "thread_all\t#using scripts\\shared\\array_shared;", "contents": "array::thread_all(${1:&entities}, ${2:func}, ${3:arg1}, ${4:arg2}, ${5:arg3}, ${6:arg4}, ${7:arg5}, ${8:arg6})"},
	{ "trigger": "thread_all_ents\t#using scripts\\shared\\array_shared;", "contents": "array::thread_all_ents(${1:&entities}, ${2:func}, ${3:arg1}, ${4:arg2}, ${5:arg3}, ${6:arg4}, ${7:arg5})"},
	{ "trigger": "run_all\t#using scripts\\shared\\array_shared;", "contents": "array::run_all(${1:&entities}, ${2:func}, ${3:arg1}, ${4:arg2}, ${5:arg3}, ${6:arg4}, ${7:arg5}, ${8:arg6})"},
	{ "trigger": "exclude\t#using scripts\\shared\\array_shared; returns \"array\" minus all members of array_exclude", "contents": "array::exclude(${1:array}, ${2:array_exclude})"},
	{ "trigger": "add\t#using scripts\\shared\\array_shared;", "contents": "array::add(${1:&array}, ${2:item}, ${3:allow_dupes = true})"},
	{ "trigger": "add_sorted\t#using scripts\\shared\\array_shared;", "contents": "array::add_sorted(${1:&array}, ${2:item}, ${3:allow_dupes = true})"},
	{ "trigger": "wait_till\t#using scripts\\shared\\array_shared;", "contents": "array::wait_till(${1:&array}, ${2:notifies}, ${3:n_timeout})"},
	{ "trigger": "wait_till_match\t#using scripts\\shared\\array_shared;", "contents": "array::wait_till_match(${1:&array}, ${2:str_notify}, ${3:str_match}, ${4:n_timeout})"},
	{ "trigger": "_waitlogic_match\t#using scripts\\shared\\array_shared;", "contents": "array::_waitlogic_match(${1:s_tracker}, ${2:str_notify}, ${3:str_match})"},
	{ "trigger": "_waitlogic_death\t#using scripts\\shared\\array_shared;", "contents": "array::_waitlogic_death(${1:s_tracker})"},
	{ "trigger": "update_waitlogic_tracker\t#using scripts\\shared\\array_shared;", "contents": "array::update_waitlogic_tracker(${1:s_tracker})"},
	{ "trigger": "flag_wait\t#using scripts\\shared\\array_shared;", "contents": "array::flag_wait(${1:&array}, ${2:str_flag})"},
	{ "trigger": "flagsys_wait\t#using scripts\\shared\\array_shared;", "contents": "array::flagsys_wait(${1:&array}, ${2:str_flag})"},
	{ "trigger": "flagsys_wait_any_flag\t#using scripts\\shared\\array_shared;", "contents": "array::flagsys_wait_any_flag(${1:&array}, ${2:...})"},
	{ "trigger": "flagsys_wait_any\t#using scripts\\shared\\array_shared;", "contents": "array::flagsys_wait_any(${1:&array}, ${2:str_flag})"},
	{ "trigger": "flag_wait_clear\t#using scripts\\shared\\array_shared;", "contents": "array::flag_wait_clear(${1:&array}, ${2:str_flag})"},
	{ "trigger": "flagsys_wait_clear\t#using scripts\\shared\\array_shared;", "contents": "array::flagsys_wait_clear(${1:&array}, ${2:str_flag}, ${3:n_timeout})"},
	{ "trigger": "wait_any\t#using scripts\\shared\\array_shared;", "contents": "array::wait_any(${1:array}, ${2:msg}, ${3:n_timeout})"},
	{ "trigger": "_waitlogic2\t#using scripts\\shared\\array_shared;", "contents": "array::_waitlogic2(${1:s_tracker}, ${2:ent}, ${3:msg})"},
	{ "trigger": "flag_wait_any\t#using scripts\\shared\\array_shared;", "contents": "array::flag_wait_any(${1:array}, ${2:str_flag})"},
	{ "trigger": "random\t#using scripts\\shared\\array_shared;", "contents": "array::random(${1:array})"},
	{ "trigger": "randomize\t#using scripts\\shared\\array_shared;", "contents": "array::randomize(${1:array})"},
	{ "trigger": "clamp_size\t#using scripts\\shared\\array_shared;", "contents": "array::clamp_size(${1:array}, ${2:n_size})"},
	{ "trigger": "reverse\t#using scripts\\shared\\array_shared;", "contents": "array::reverse(${1:array})"},
	{ "trigger": "remove_keys\t#using scripts\\shared\\array_shared;", "contents": "array::remove_keys(${1:array})"},
	{ "trigger": "swap\t#using scripts\\shared\\array_shared;", "contents": "array::swap(${1:&array}, ${2:index1}, ${3:index2})"},
	{ "trigger": "pop\t#using scripts\\shared\\array_shared;", "contents": "array::pop(${1:&array}, ${2:index}, ${3:b_keep_keys = true})"},
	{ "trigger": "pop_front\t#using scripts\\shared\\array_shared;", "contents": "array::pop_front(${1:&array}, ${2:b_keep_keys = true})"},
	{ "trigger": "push\t#using scripts\\shared\\array_shared;", "contents": "array::push(${1:&array}, ${2:val}, ${3:index})"},
	{ "trigger": "push_front\t#using scripts\\shared\\array_shared;", "contents": "array::push_front(${1:&array}, ${2:val})"},
	{ "trigger": "get_closest\t#using scripts\\shared\\array_shared;", "contents": "array::get_closest(${1:org}, ${2:&array}, ${3:dist})"},
	{ "trigger": "get_farthest\t#using scripts\\shared\\array_shared;", "contents": "array::get_farthest(${1:org}, ${2:&array}, ${3:dist = undefined})"},
	{ "trigger": "closerFunc\t#using scripts\\shared\\array_shared;", "contents": "array::closerFunc(${1:dist1}, ${2:dist2})"},
	{ "trigger": "fartherFunc\t#using scripts\\shared\\array_shared;", "contents": "array::fartherFunc(${1:dist1}, ${2:dist2})"},
	{ "trigger": "get_all_farthest\t#using scripts\\shared\\array_shared;", "contents": "array::get_all_farthest(${1:org}, ${2:&array}, ${3:a_exclude}, ${4:n_max}, ${5:n_maxdist})"},
	{ "trigger": "get_all_closest\t#using scripts\\shared\\array_shared;", "contents": "array::get_all_closest(${1:org}, ${2:&array}, ${3:a_exclude}, ${4:n_max}, ${5:n_maxdist})"},
	{ "trigger": "alphabetize\t#using scripts\\shared\\array_shared;", "contents": "array::alphabetize(${1:&array})"},
	{ "trigger": "Name: sort_by_value\t#using scripts\\shared\\array_shared;", "contents": "array::Name: sort_by_value(${1:array}, ${2:b_lowest_first = true})"},
	{ "trigger": "Example: list = array::sort_by_value\t#using scripts\\shared\\array_shared;", "contents": "array::Example: list = array::sort_by_value(${1:array );})"},
	{ "trigger": "sort_by_value\t#using scripts\\shared\\array_shared;", "contents": "array::sort_by_value(${1:&array}, ${2:b_lowest_first = false})"},
	{ "trigger": "_sort_by_value_compare_func\t#using scripts\\shared\\array_shared;", "contents": "array::_sort_by_value_compare_func(${1:val1}, ${2:val2}, ${3:b_lowest_first})"},
	{ "trigger": "Name: sort_by_script_int\t#using scripts\\shared\\array_shared;", "contents": "array::Name: sort_by_script_int(${1:a_ents}, ${2:b_lowest_first = true})"},
	{ "trigger": "Example: list = array::sort_by_script_int\t#using scripts\\shared\\array_shared;", "contents": "array::Example: list = array::sort_by_script_int(${1:a_ents );})"},
	{ "trigger": "sort_by_script_int\t#using scripts\\shared\\array_shared;", "contents": "array::sort_by_script_int(${1:&a_ents}, ${2:b_lowest_first = false})"},
	{ "trigger": "_sort_by_script_int_compare_func\t#using scripts\\shared\\array_shared;", "contents": "array::_sort_by_script_int_compare_func(${1:e1}, ${2:e2}, ${3:b_lowest_first})"},
	{ "trigger": "merge_sort\t#using scripts\\shared\\array_shared;", "contents": "array::merge_sort(${1:&current_list}, ${2:func_sort}, ${3:param})"},
	{ "trigger": "merge\t#using scripts\\shared\\array_shared;", "contents": "array::merge(${1:left}, ${2:right}, ${3:func_sort}, ${4:param})"},
	{ "trigger": "insertion_sort\t#using scripts\\shared\\array_shared;", "contents": "array::insertion_sort(${1:&a}, ${2:compareFunc}, ${3:val})"},
	{ "trigger": "spread_all\t#using scripts\\shared\\array_shared;", "contents": "array::spread_all(${1:&entities}, ${2:func}, ${3:arg1}, ${4:arg2}, ${5:arg3}, ${6:arg4}, ${7:arg5})"},
	{ "trigger": "wait_till_touching\t#using scripts\\shared\\array_shared;", "contents": "array::wait_till_touching(${1:&a_ents}, ${2:e_volume})"},
	{ "trigger": "is_touching\t#using scripts\\shared\\array_shared;", "contents": "array::is_touching(${1:&a_ents}, ${2:e_volume})"},
	{ "trigger": "contains\t#using scripts\\shared\\array_shared;", "contents": "array::contains(${1:array_or_val}, ${2:value})"},
	{ "trigger": "_filter_dead\t#using scripts\\shared\\array_shared;", "contents": "array::_filter_dead(${1:val})"},
	{ "trigger": "_filter_classname\t#using scripts\\shared\\array_shared;", "contents": "array::_filter_classname(${1:val}, ${2:arg})"},
	{ "trigger": "quickSort\t#using scripts\\shared\\array_shared;", "contents": "array::quickSort(${1:array}, ${2:compare_func})"},
	{ "trigger": "quickSortMid\t#using scripts\\shared\\array_shared;", "contents": "array::quickSortMid(${1:array}, ${2:start}, ${3:end}, ${4:compare_func})"},
	{ "trigger": "quicksort_compare\t#using scripts\\shared\\array_shared;", "contents": "array::quicksort_compare(${1:left}, ${2:right})"},
	{ "trigger": "createAcousticSensorWatcher\t#using scripts\\shared\\weapons\\_acousticsensor;", "contents": "acousticsensor::createAcousticSensorWatcher()"},
	{ "trigger": "onSpawnAcousticSensor\t#using scripts\\shared\\weapons\\_acousticsensor; self == acoustic sensor", "contents": "acousticsensor::onSpawnAcousticSensor(${1:watcher}, ${2:player})"},
	{ "trigger": "acousticSensorDetonate\t#using scripts\\shared\\weapons\\_acousticsensor;", "contents": "acousticsensor::acousticSensorDetonate(${1:attacker}, ${2:weapon}, ${3:target})"},
	{ "trigger": "destroyEnt\t#using scripts\\shared\\weapons\\_acousticsensor;", "contents": "acousticsensor::destroyEnt()"},
	{ "trigger": "watchShutdown\t#using scripts\\shared\\weapons\\_acousticsensor;", "contents": "acousticsensor::watchShutdown(${1:player}, ${2:origin})"},
	{ "trigger": "watchAcousticSensorDamage\t#using scripts\\shared\\weapons\\_acousticsensor; self == acoustic sensor", "contents": "acousticsensor::watchAcousticSensorDamage(${1:watcher})"},
	{ "trigger": "result\t#using scripts\\zm\\aats\\_zm_aat_dead_wire;", "contents": "zm_aat_dead_wire::result(${1:death}, ${2:attacker}, ${3:mod}, ${4:weapon})"},
	{ "trigger": "exec_post_system\t#using scripts\\shared\\system_shared;", "contents": "system::exec_post_system(${1:req})"},
	{ "trigger": "run_post_systems\t#using scripts\\shared\\system_shared;", "contents": "system::run_post_systems()"},
	{ "trigger": "exec_pre_system\t#using scripts\\shared\\system_shared;", "contents": "system::exec_pre_system(${1:req})"},
	{ "trigger": "run_pre_systems\t#using scripts\\shared\\system_shared;", "contents": "system::run_pre_systems()"},
	{ "trigger": "wait_till\t#using scripts\\shared\\system_shared;", "contents": "system::wait_till(${1:required_systems})"},
	{ "trigger": "ignore\t#using scripts\\shared\\system_shared;", "contents": "system::ignore(${1:str_system})"},
	{ "trigger": "is_system_running\t#using scripts\\shared\\system_shared;", "contents": "system::is_system_running(${1:str_system})"},
	{ "trigger": "pers_upgrade_double_points_pickup_start\t#using scripts\\zm\\_zm_pers_upgrades_functions;", "contents": "zm_pers_upgrades_functions::pers_upgrade_double_points_pickup_start()"},
	{ "trigger": "pers_upgrade_insta_kill_upgrade_check\t#using scripts\\zm\\_zm_pers_upgrades_functions;", "contents": "zm_pers_upgrades_functions::pers_upgrade_insta_kill_upgrade_check()"},
	{ "trigger": "updateDvars\t#using scripts\\shared\\abilities\\gadgets\\_gadget_heat_wave;", "contents": "heat_wave::updateDvars()"},
	{ "trigger": "gadget_heat_wave_is_inuse\t#using scripts\\shared\\abilities\\gadgets\\_gadget_heat_wave;", "contents": "heat_wave::gadget_heat_wave_is_inuse(${1:slot})"},
	{ "trigger": "gadget_heat_wave_is_flickering\t#using scripts\\shared\\abilities\\gadgets\\_gadget_heat_wave;", "contents": "heat_wave::gadget_heat_wave_is_flickering(${1:slot})"},
	{ "trigger": "gadget_heat_wave_on_flicker\t#using scripts\\shared\\abilities\\gadgets\\_gadget_heat_wave;", "contents": "heat_wave::gadget_heat_wave_on_flicker(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_heat_wave_on_give\t#using scripts\\shared\\abilities\\gadgets\\_gadget_heat_wave;", "contents": "heat_wave::gadget_heat_wave_on_give(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_heat_wave_on_take\t#using scripts\\shared\\abilities\\gadgets\\_gadget_heat_wave;", "contents": "heat_wave::gadget_heat_wave_on_take(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_heat_wave_on_connect\t#using scripts\\shared\\abilities\\gadgets\\_gadget_heat_wave;", "contents": "heat_wave::gadget_heat_wave_on_connect()"},
	{ "trigger": "gadget_heat_wave_on_player_spawn\t#using scripts\\shared\\abilities\\gadgets\\_gadget_heat_wave;", "contents": "heat_wave::gadget_heat_wave_on_player_spawn()"},
	{ "trigger": "watch_entity_shutdown\t#using scripts\\shared\\abilities\\gadgets\\_gadget_heat_wave;", "contents": "heat_wave::watch_entity_shutdown()"},
	{ "trigger": "gadget_heat_wave_on_activate\t#using scripts\\shared\\abilities\\gadgets\\_gadget_heat_wave;", "contents": "heat_wave::gadget_heat_wave_on_activate(${1:slot}, ${2:weapon})"},
	{ "trigger": "toggle_activate_clientfields\t#using scripts\\shared\\abilities\\gadgets\\_gadget_heat_wave;", "contents": "heat_wave::toggle_activate_clientfields()"},
	{ "trigger": "gadget_heat_wave_on_deactivate\t#using scripts\\shared\\abilities\\gadgets\\_gadget_heat_wave;", "contents": "heat_wave::gadget_heat_wave_on_deactivate(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_heat_wave_flicker\t#using scripts\\shared\\abilities\\gadgets\\_gadget_heat_wave;", "contents": "heat_wave::gadget_heat_wave_flicker(${1:slot}, ${2:weapon})"},
	{ "trigger": "set_gadget_status\t#using scripts\\shared\\abilities\\gadgets\\_gadget_heat_wave;", "contents": "heat_wave::set_gadget_status(${1:status}, ${2:time})"},
	{ "trigger": "is_entity_valid\t#using scripts\\shared\\abilities\\gadgets\\_gadget_heat_wave;", "contents": "heat_wave::is_entity_valid(${1:entity}, ${2:heatwave})"},
	{ "trigger": "heat_wave_trace_entity\t#using scripts\\shared\\abilities\\gadgets\\_gadget_heat_wave;", "contents": "heat_wave::heat_wave_trace_entity(${1:entity}, ${2:heatwave})"},
	{ "trigger": "heat_wave_fx_cleanup\t#using scripts\\shared\\abilities\\gadgets\\_gadget_heat_wave;", "contents": "heat_wave::heat_wave_fx_cleanup(${1:fxOrg}, ${2:direction})"},
	{ "trigger": "heat_wave_fx\t#using scripts\\shared\\abilities\\gadgets\\_gadget_heat_wave;", "contents": "heat_wave::heat_wave_fx(${1:origin}, ${2:direction})"},
	{ "trigger": "heat_wave_setup\t#using scripts\\shared\\abilities\\gadgets\\_gadget_heat_wave;", "contents": "heat_wave::heat_wave_setup(${1:weapon})"},
	{ "trigger": "heat_wave_think\t#using scripts\\shared\\abilities\\gadgets\\_gadget_heat_wave;", "contents": "heat_wave::heat_wave_think(${1:slot}, ${2:weapon})"},
	{ "trigger": "heat_wave_damage_entities\t#using scripts\\shared\\abilities\\gadgets\\_gadget_heat_wave;", "contents": "heat_wave::heat_wave_damage_entities(${1:weapon}, ${2:heatwave})"},
	{ "trigger": "heat_wave_burn_entities\t#using scripts\\shared\\abilities\\gadgets\\_gadget_heat_wave;", "contents": "heat_wave::heat_wave_burn_entities(${1:weapon}, ${2:entity}, ${3:heatwave})"},
	{ "trigger": "heat_wave_damage_projectiles\t#using scripts\\shared\\abilities\\gadgets\\_gadget_heat_wave;", "contents": "heat_wave::heat_wave_damage_projectiles(${1:weapon}, ${2:heatwave})"},
	{ "trigger": "projectileExplode\t#using scripts\\shared\\abilities\\gadgets\\_gadget_heat_wave; self == trophy owning player", "contents": "heat_wave::projectileExplode(${1:projectile}, ${2:heatwave}, ${3:weapon})"},
	{ "trigger": "apply_burn\t#using scripts\\shared\\abilities\\gadgets\\_gadget_heat_wave;", "contents": "heat_wave::apply_burn(${1:weapon}, ${2:entity}, ${3:heatwave})"},
	{ "trigger": "watch_burn_clear\t#using scripts\\shared\\abilities\\gadgets\\_gadget_heat_wave;", "contents": "heat_wave::watch_burn_clear()"},
	{ "trigger": "update_last_burned_by\t#using scripts\\shared\\abilities\\gadgets\\_gadget_heat_wave;", "contents": "heat_wave::update_last_burned_by(${1:heatwave})"},
	{ "trigger": "heat_wave_burn_sound\t#using scripts\\shared\\abilities\\gadgets\\_gadget_heat_wave;", "contents": "heat_wave::heat_wave_burn_sound(${1:shellshock_duration})"},
	{ "trigger": "cassert\t#using scripts\\shared\\hud_shared;", "contents": "hud::cassert(${1:ARRAY_COUNT( g_he_horzalign ) == HORIZONTAL_ALIGN_MAX + 1 );})"},
	{ "trigger": "cassert\t#using scripts\\shared\\hud_shared;", "contents": "hud::cassert(${1:ARRAY_COUNT( g_he_vertalign ) == VERTICAL_ALIGN_MAX + 1 );})"},
	{ "trigger": "font_pulse\t#using scripts\\shared\\hud_shared;", "contents": "hud::font_pulse(${1:player})"},
	{ "trigger": "fade_to_black_for_x_sec\t#using scripts\\shared\\hud_shared;", "contents": "hud::fade_to_black_for_x_sec(${1:startwait}, ${2:blackscreenwait}, ${3:fadeintime}, ${4:fadeouttime}, ${5:shaderName})"},
	{ "trigger": "screen_fade_in\t#using scripts\\shared\\hud_shared;", "contents": "hud::screen_fade_in(${1:fadeintime})"},
	{ "trigger": "setParent\t#using scripts\\shared\\hud_util_shared;", "contents": "hud::setParent(${1:element})"},
	{ "trigger": "getParent\t#using scripts\\shared\\hud_util_shared;", "contents": "hud::getParent()"},
	{ "trigger": "addChild\t#using scripts\\shared\\hud_util_shared;", "contents": "hud::addChild(${1:element})"},
	{ "trigger": "removeChild\t#using scripts\\shared\\hud_util_shared;", "contents": "hud::removeChild(${1:element})"},
	{ "trigger": "setPoint\t#using scripts\\shared\\hud_util_shared;", "contents": "hud::setPoint(${1:point}, ${2:relativePoint}, ${3:xOffset}, ${4:yOffset}, ${5:moveTime})"},
	{ "trigger": "setPointBar\t#using scripts\\shared\\hud_util_shared;", "contents": "hud::setPointBar(${1:point}, ${2:relativePoint}, ${3:xOffset}, ${4:yOffset})"},
	{ "trigger": "updateBar\t#using scripts\\shared\\hud_util_shared;", "contents": "hud::updateBar(${1:barFrac}, ${2:rateOfChange})"},
	{ "trigger": "updateBarScale\t#using scripts\\shared\\hud_util_shared; rateOfChange is optional and is in \"(entire bar lengths) per second\"", "contents": "hud::updateBarScale(${1:barFrac}, ${2:rateOfChange})"},
	{ "trigger": "createFontString\t#using scripts\\shared\\hud_util_shared;", "contents": "hud::createFontString(${1:font}, ${2:fontScale})"},
	{ "trigger": "createServerFontString\t#using scripts\\shared\\hud_util_shared;", "contents": "hud::createServerFontString(${1:font}, ${2:fontScale}, ${3:team})"},
	{ "trigger": "createServerTimer\t#using scripts\\shared\\hud_util_shared;", "contents": "hud::createServerTimer(${1:font}, ${2:fontScale}, ${3:team})"},
	{ "trigger": "createClientTimer\t#using scripts\\shared\\hud_util_shared;", "contents": "hud::createClientTimer(${1:font}, ${2:fontScale})"},
	{ "trigger": "createIcon\t#using scripts\\shared\\hud_util_shared;", "contents": "hud::createIcon(${1:shader}, ${2:width}, ${3:height})"},
	{ "trigger": "createServerIcon\t#using scripts\\shared\\hud_util_shared;", "contents": "hud::createServerIcon(${1:shader}, ${2:width}, ${3:height}, ${4:team})"},
	{ "trigger": "createServerBar\t#using scripts\\shared\\hud_util_shared;", "contents": "hud::createServerBar(${1:color}, ${2:width}, ${3:height}, ${4:flashFrac}, ${5:team}, ${6:selected})"},
	{ "trigger": "createBar\t#using scripts\\shared\\hud_util_shared;", "contents": "hud::createBar(${1:color}, ${2:width}, ${3:height}, ${4:flashFrac})"},
	{ "trigger": "getCurrentFraction\t#using scripts\\shared\\hud_util_shared;", "contents": "hud::getCurrentFraction()"},
	{ "trigger": "createPrimaryProgressBar\t#using scripts\\shared\\hud_util_shared;", "contents": "hud::createPrimaryProgressBar()"},
	{ "trigger": "createPrimaryProgressBarText\t#using scripts\\shared\\hud_util_shared;", "contents": "hud::createPrimaryProgressBarText()"},
	{ "trigger": "createSecondaryProgressBar\t#using scripts\\shared\\hud_util_shared;", "contents": "hud::createSecondaryProgressBar()"},
	{ "trigger": "createSecondaryProgressBarText\t#using scripts\\shared\\hud_util_shared;", "contents": "hud::createSecondaryProgressBarText()"},
	{ "trigger": "createTeamProgressBar\t#using scripts\\shared\\hud_util_shared;", "contents": "hud::createTeamProgressBar(${1:team})"},
	{ "trigger": "createTeamProgressBarText\t#using scripts\\shared\\hud_util_shared;", "contents": "hud::createTeamProgressBarText(${1:team})"},
	{ "trigger": "setFlashFrac\t#using scripts\\shared\\hud_util_shared;", "contents": "hud::setFlashFrac(${1:flashFrac})"},
	{ "trigger": "hideElem\t#using scripts\\shared\\hud_util_shared;", "contents": "hud::hideElem()"},
	{ "trigger": "showElem\t#using scripts\\shared\\hud_util_shared;", "contents": "hud::showElem()"},
	{ "trigger": "flashThread\t#using scripts\\shared\\hud_util_shared;", "contents": "hud::flashThread()"},
	{ "trigger": "destroyElem\t#using scripts\\shared\\hud_util_shared;", "contents": "hud::destroyElem()"},
	{ "trigger": "setIconShader\t#using scripts\\shared\\hud_util_shared;", "contents": "hud::setIconShader(${1:shader})"},
	{ "trigger": "setWidth\t#using scripts\\shared\\hud_util_shared;", "contents": "hud::setWidth(${1:width})"},
	{ "trigger": "setHeight\t#using scripts\\shared\\hud_util_shared;", "contents": "hud::setHeight(${1:height})"},
	{ "trigger": "setSize\t#using scripts\\shared\\hud_util_shared;", "contents": "hud::setSize(${1:width}, ${2:height})"},
	{ "trigger": "updateChildren\t#using scripts\\shared\\hud_util_shared;", "contents": "hud::updateChildren()"},
	{ "trigger": "createLoadoutIcon\t#using scripts\\shared\\hud_util_shared;", "contents": "hud::createLoadoutIcon(${1:player}, ${2:verIndex}, ${3:horIndex}, ${4:xpos}, ${5:ypos})"},
	{ "trigger": "setLoadoutIconCoords\t#using scripts\\shared\\hud_util_shared;", "contents": "hud::setLoadoutIconCoords(${1:player}, ${2:verIndex}, ${3:horIndex}, ${4:xpos}, ${5:ypos})"},
	{ "trigger": "setLoadoutTextCoords\t#using scripts\\shared\\hud_util_shared;", "contents": "hud::setLoadoutTextCoords(${1:xCoord})"},
	{ "trigger": "createLoadoutText\t#using scripts\\shared\\hud_util_shared;", "contents": "hud::createLoadoutText(${1:icon}, ${2:xCoord})"},
	{ "trigger": "showLoadoutAttribute\t#using scripts\\shared\\hud_util_shared;", "contents": "hud::showLoadoutAttribute(${1:iconElem}, ${2:icon}, ${3:alpha}, ${4:textElem}, ${5:text})"},
	{ "trigger": "hideLoadoutAttribute\t#using scripts\\shared\\hud_util_shared;", "contents": "hud::hideLoadoutAttribute(${1:iconElem}, ${2:fadeTime}, ${3:textElem}, ${4:hideTextOnly})"},
	{ "trigger": "showPerks\t#using scripts\\shared\\hud_util_shared;", "contents": "hud::showPerks()"},
	{ "trigger": "showPerk\t#using scripts\\shared\\hud_util_shared;", "contents": "hud::showPerk(${1:index}, ${2:perk}, ${3:ypos})"},
	{ "trigger": "hidePerk\t#using scripts\\shared\\hud_util_shared;", "contents": "hud::hidePerk(${1:index}, ${2:fadeTime}, ${3:hideTextOnly})"},
	{ "trigger": "showKillstreak\t#using scripts\\shared\\hud_util_shared;", "contents": "hud::showKillstreak(${1:index}, ${2:killstreak}, ${3:xpos}, ${4:ypos})"},
	{ "trigger": "hideKillstreak\t#using scripts\\shared\\hud_util_shared;", "contents": "hud::hideKillstreak(${1:index}, ${2:fadetime})"},
	{ "trigger": "setGamemodeInfoPoint\t#using scripts\\shared\\hud_util_shared;", "contents": "hud::setGamemodeInfoPoint()"},
	{ "trigger": "server_choke_thread\t#using scripts\\zm\\_zm_server_throttle;", "contents": "zm_server_throttle::server_choke_thread(${1:id})"},
	{ "trigger": "server_choke_safe\t#using scripts\\zm\\_zm_server_throttle;", "contents": "zm_server_throttle::server_choke_safe(${1:id})"},
	{ "trigger": "server_choke_action\t#using scripts\\zm\\_zm_server_throttle;", "contents": "zm_server_throttle::server_choke_action(${1:id}, ${2:choke_action}, ${3:arg1}, ${4:arg2}, ${5:arg3})"},
	{ "trigger": "server_entity_valid\t#using scripts\\zm\\_zm_server_throttle;", "contents": "zm_server_throttle::server_entity_valid(${1:entity})"},
	{ "trigger": "_server_safe_ground_trace\t#using scripts\\zm\\_zm_server_throttle;", "contents": "zm_server_throttle::_server_safe_ground_trace(${1:pos})"},
	{ "trigger": "server_safe_ground_trace\t#using scripts\\zm\\_zm_server_throttle;", "contents": "zm_server_throttle::server_safe_ground_trace(${1:id}, ${2:max}, ${3:origin})"},
	{ "trigger": "_server_safe_ground_trace_ignore_water\t#using scripts\\zm\\_zm_server_throttle;", "contents": "zm_server_throttle::_server_safe_ground_trace_ignore_water(${1:pos})"},
	{ "trigger": "server_safe_ground_trace_ignore_water\t#using scripts\\zm\\_zm_server_throttle;", "contents": "zm_server_throttle::server_safe_ground_trace_ignore_water(${1:id}, ${2:max}, ${3:origin})"},
	{ "trigger": "teamOutcomeNotify\t#using scripts\\zm\\gametypes\\_hud_message;", "contents": "hud_message::teamOutcomeNotify(${1:winner}, ${2:isRound}, ${3:endReasonText})"},
	{ "trigger": "teamOutcomeNotifyZombie\t#using scripts\\zm\\gametypes\\_hud_message;", "contents": "hud_message::teamOutcomeNotifyZombie(${1:winner}, ${2:isRound}, ${3:endReasonText})"},
	{ "trigger": "outcomeNotify\t#using scripts\\zm\\gametypes\\_hud_message;", "contents": "hud_message::outcomeNotify(${1:winner}, ${2:isRoundEnd}, ${3:endReasonText})"},
	{ "trigger": "wagerOutcomeNotify\t#using scripts\\zm\\gametypes\\_hud_message;", "contents": "hud_message::wagerOutcomeNotify(${1:winner}, ${2:endReasonText})"},
	{ "trigger": "teamWagerOutcomeNotify\t#using scripts\\zm\\gametypes\\_hud_message;", "contents": "hud_message::teamWagerOutcomeNotify(${1:winner}, ${2:isRoundEnd}, ${3:endReasonText})"},
	{ "trigger": "resetOutcomeNotify\t#using scripts\\zm\\gametypes\\_hud_message;", "contents": "hud_message::resetOutcomeNotify(${1:hudElemList1}, ${2:hudElemList2}, ${3:hudElem3}, ${4:hudElem4}, ${5:hudElem5}, ${6:hudElem6}, ${7:hudElem7}, ${8:hudElem8}, ${9:hudElem9}, ${10:hudElem10})"},
	{ "trigger": "resetWagerOutcomeNotify\t#using scripts\\zm\\gametypes\\_hud_message;", "contents": "hud_message::resetWagerOutcomeNotify(${1:playerNameHudElems}, ${2:playerCPHudElems}, ${3:outcomeTitle}, ${4:outcomeText})"},
	{ "trigger": "updateOutcome\t#using scripts\\zm\\gametypes\\_hud_message;", "contents": "hud_message::updateOutcome(${1:firstTitle}, ${2:secondTitle}, ${3:thirdTitle})"},
	{ "trigger": "updateWagerOutcome\t#using scripts\\zm\\gametypes\\_hud_message;", "contents": "hud_message::updateWagerOutcome(${1:playerNameHudElems}, ${2:playerCPHudElems})"},
	{ "trigger": "on_player_connect\t#using scripts\\shared\\hud_message_shared;", "contents": "hud_message::on_player_connect()"},
	{ "trigger": "on_player_disconnect\t#using scripts\\shared\\hud_message_shared;", "contents": "hud_message::on_player_disconnect()"},
	{ "trigger": "hintMessage\t#using scripts\\shared\\hud_message_shared;", "contents": "hud_message::hintMessage(${1:hintText}, ${2:duration})"},
	{ "trigger": "hintMessagePlayers\t#using scripts\\shared\\hud_message_shared;", "contents": "hud_message::hintMessagePlayers(${1:players}, ${2:hintText}, ${3:duration})"},
	{ "trigger": "showInitialFactionPopup\t#using scripts\\shared\\hud_message_shared;", "contents": "hud_message::showInitialFactionPopup(${1:team})"},
	{ "trigger": "oldNotifyMessage\t#using scripts\\shared\\hud_message_shared;", "contents": "hud_message::oldNotifyMessage(${1:titleText}, ${2:notifyText}, ${3:iconName}, ${4:glowColor}, ${5:sound}, ${6:duration})"},
	{ "trigger": "notifyMessage\t#using scripts\\shared\\hud_message_shared;", "contents": "hud_message::notifyMessage(${1:notifyData})"},
	{ "trigger": "playNotifyLoop\t#using scripts\\shared\\hud_message_shared;", "contents": "hud_message::playNotifyLoop(${1:duration})"},
	{ "trigger": "showNotifyMessage\t#using scripts\\shared\\hud_message_shared;", "contents": "hud_message::showNotifyMessage(${1:notifyData}, ${2:duration})"},
	{ "trigger": "waitRequireVisibility\t#using scripts\\shared\\hud_message_shared;", "contents": "hud_message::waitRequireVisibility(${1:waitTime})"},
	{ "trigger": "canReadText\t#using scripts\\shared\\hud_message_shared;", "contents": "hud_message::canReadText()"},
	{ "trigger": "resetOnDeath\t#using scripts\\shared\\hud_message_shared;", "contents": "hud_message::resetOnDeath()"},
	{ "trigger": "resetOnCancel\t#using scripts\\shared\\hud_message_shared;", "contents": "hud_message::resetOnCancel()"},
	{ "trigger": "resetNotify\t#using scripts\\shared\\hud_message_shared;", "contents": "hud_message::resetNotify()"},
	{ "trigger": "hintMessageDeathThink\t#using scripts\\shared\\hud_message_shared;", "contents": "hud_message::hintMessageDeathThink()"},
	{ "trigger": "lowerMessageThink\t#using scripts\\shared\\hud_message_shared;", "contents": "hud_message::lowerMessageThink()"},
	{ "trigger": "setMatchScoreHUDElemForTeam\t#using scripts\\shared\\hud_message_shared;", "contents": "hud_message::setMatchScoreHUDElemForTeam(${1:team})"},
	{ "trigger": "isInTop\t#using scripts\\shared\\hud_message_shared;", "contents": "hud_message::isInTop(${1:players}, ${2:topN})"},
	{ "trigger": "destroyHudElem\t#using scripts\\shared\\hud_message_shared;", "contents": "hud_message::destroyHudElem(${1:hudElem})"},
	{ "trigger": "setShoutcasterWaitingMessage\t#using scripts\\shared\\hud_message_shared;", "contents": "hud_message::setShoutcasterWaitingMessage()"},
	{ "trigger": "clearShoutcasterWaitingMessage\t#using scripts\\shared\\hud_message_shared;", "contents": "hud_message::clearShoutcasterWaitingMessage()"},
	{ "trigger": "waitTillNotifiesDone\t#using scripts\\shared\\hud_message_shared;", "contents": "hud_message::waitTillNotifiesDone()"},
	{ "trigger": "createSatchelWatcher\t#using scripts\\shared\\weapons\\_satchel_charge;", "contents": "satchel_charge::createSatchelWatcher()"},
	{ "trigger": "satchelDetonate\t#using scripts\\shared\\weapons\\_satchel_charge;", "contents": "satchel_charge::satchelDetonate(${1:attacker}, ${2:weapon}, ${3:target})"},
	{ "trigger": "satchelSpawn\t#using scripts\\shared\\weapons\\_satchel_charge;", "contents": "satchel_charge::satchelSpawn(${1:watcher}, ${2:owner})"},
	{ "trigger": "grab_nuke\t#using scripts\\zm\\_zm_powerup_nuke;", "contents": "zm_powerup_nuke::grab_nuke(${1:player})"},
	{ "trigger": "nuke_powerup\t#using scripts\\zm\\_zm_powerup_nuke;", "contents": "zm_powerup_nuke::nuke_powerup(${1:drop_item}, ${2:player_team})"},
	{ "trigger": "nuke_flash\t#using scripts\\zm\\_zm_powerup_nuke;", "contents": "zm_powerup_nuke::nuke_flash(${1:team})"},
	{ "trigger": "nuke_delay_spawning\t#using scripts\\zm\\_zm_powerup_nuke;", "contents": "zm_powerup_nuke::nuke_delay_spawning(${1:n_spawn_delay})"},
	{ "trigger": "exploder_before_load\t#using scripts\\shared\\exploder_shared;", "contents": "exploder::exploder_before_load(${1:num})"},
	{ "trigger": "exploder\t#using scripts\\shared\\exploder_shared;", "contents": "exploder::exploder(${1:exploder_id})"},
	{ "trigger": "exploder_stop\t#using scripts\\shared\\exploder_shared;", "contents": "exploder::exploder_stop(${1:num})"},
	{ "trigger": "exploder_sound\t#using scripts\\shared\\exploder_shared;", "contents": "exploder::exploder_sound()"},
	{ "trigger": "cannon_effect\t#using scripts\\shared\\exploder_shared;", "contents": "exploder::cannon_effect()"},
	{ "trigger": "fire_effect\t#using scripts\\shared\\exploder_shared;", "contents": "exploder::fire_effect()"},
	{ "trigger": "sound_effect\t#using scripts\\shared\\exploder_shared;", "contents": "exploder::sound_effect()"},
	{ "trigger": "effect_soundalias\t#using scripts\\shared\\exploder_shared;", "contents": "exploder::effect_soundalias()"},
	{ "trigger": "trail_effect\t#using scripts\\shared\\exploder_shared;", "contents": "exploder::trail_effect()"},
	{ "trigger": "trail_effect_ender\t#using scripts\\shared\\exploder_shared;", "contents": "exploder::trail_effect_ender(${1:ent}, ${2:ender})"},
	{ "trigger": "exploder_delay\t#using scripts\\shared\\exploder_shared;", "contents": "exploder::exploder_delay()"},
	{ "trigger": "exploder_playSound\t#using scripts\\shared\\exploder_shared;", "contents": "exploder::exploder_playSound()"},
	{ "trigger": "brush_delete\t#using scripts\\shared\\exploder_shared;", "contents": "exploder::brush_delete()"},
	{ "trigger": "brush_show\t#using scripts\\shared\\exploder_shared;", "contents": "exploder::brush_show()"},
	{ "trigger": "brush_throw\t#using scripts\\shared\\exploder_shared;", "contents": "exploder::brush_throw()"},
	{ "trigger": "exploder_trigger\t#using scripts\\shared\\exploder_shared;", "contents": "exploder::exploder_trigger(${1:trigger}, ${2:script_value})"},
	{ "trigger": "reportExploderIds\t#using scripts\\shared\\exploder_shared;", "contents": "exploder::reportExploderIds()"},
	{ "trigger": "getExploderId\t#using scripts\\shared\\exploder_shared;", "contents": "exploder::getExploderId(${1:ent})"},
	{ "trigger": "createExploder\t#using scripts\\shared\\exploder_shared;", "contents": "exploder::createExploder(${1:fxid})"},
	{ "trigger": "activate_exploder\t#using scripts\\shared\\exploder_shared;", "contents": "exploder::activate_exploder(${1:num})"},
	{ "trigger": "activate_radiant_exploder\t#using scripts\\shared\\exploder_shared;", "contents": "exploder::activate_radiant_exploder(${1:string})"},
	{ "trigger": "activate_individual_exploder\t#using scripts\\shared\\exploder_shared;", "contents": "exploder::activate_individual_exploder(${1:num})"},
	{ "trigger": "activate_exploder_on_clients\t#using scripts\\shared\\exploder_shared;", "contents": "exploder::activate_exploder_on_clients(${1:num})"},
	{ "trigger": "stop_exploder\t#using scripts\\shared\\exploder_shared;", "contents": "exploder::stop_exploder(${1:num})"},
	{ "trigger": "delete_exploder_on_clients\t#using scripts\\shared\\exploder_shared;", "contents": "exploder::delete_exploder_on_clients(${1:exploder_id})"},
	{ "trigger": "kill_exploder\t#using scripts\\shared\\exploder_shared;", "contents": "exploder::kill_exploder(${1:exploder_string})"},
	{ "trigger": "exploder_damage\t#using scripts\\shared\\exploder_shared;", "contents": "exploder::exploder_damage()"},
	{ "trigger": "earthquake\t#using scripts\\shared\\exploder_shared;", "contents": "exploder::earthquake()"},
	{ "trigger": "rumble\t#using scripts\\shared\\exploder_shared;", "contents": "exploder::rumble()"},
	{ "trigger": "stop_after_duration\t#using scripts\\shared\\exploder_shared;", "contents": "exploder::stop_after_duration(${1:name}, ${2:duration})"},
	{ "trigger": "exploder_duration\t#using scripts\\shared\\exploder_shared;", "contents": "exploder::exploder_duration(${1:name}, ${2:duration})"},
	{ "trigger": "test\t#using scripts\\core\\core_frontend;", "contents": "core_frontend::test()"},
	{ "trigger": "gadget_roulette_is_inuse\t#using scripts\\shared\\abilities\\gadgets\\_gadget_roulette;", "contents": "roulette::gadget_roulette_is_inuse(${1:slot})"},
	{ "trigger": "gadget_roulette_is_flickering\t#using scripts\\shared\\abilities\\gadgets\\_gadget_roulette;", "contents": "roulette::gadget_roulette_is_flickering(${1:slot})"},
	{ "trigger": "gadget_roulette_on_flicker\t#using scripts\\shared\\abilities\\gadgets\\_gadget_roulette;", "contents": "roulette::gadget_roulette_on_flicker(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_roulette_on_give\t#using scripts\\shared\\abilities\\gadgets\\_gadget_roulette;", "contents": "roulette::gadget_roulette_on_give(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_roulette_on_take\t#using scripts\\shared\\abilities\\gadgets\\_gadget_roulette;", "contents": "roulette::gadget_roulette_on_take(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_roulette_on_connect\t#using scripts\\shared\\abilities\\gadgets\\_gadget_roulette;", "contents": "roulette::gadget_roulette_on_connect()"},
	{ "trigger": "gadget_roulette_on_player_spawn\t#using scripts\\shared\\abilities\\gadgets\\_gadget_roulette;", "contents": "roulette::gadget_roulette_on_player_spawn()"},
	{ "trigger": "watch_entity_shutdown\t#using scripts\\shared\\abilities\\gadgets\\_gadget_roulette;", "contents": "roulette::watch_entity_shutdown()"},
	{ "trigger": "gadget_roulette_on_activate\t#using scripts\\shared\\abilities\\gadgets\\_gadget_roulette;", "contents": "roulette::gadget_roulette_on_activate(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_roulette_is_ready\t#using scripts\\shared\\abilities\\gadgets\\_gadget_roulette;", "contents": "roulette::gadget_roulette_is_ready(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_roulette_give_earned_specialist\t#using scripts\\shared\\abilities\\gadgets\\_gadget_roulette;", "contents": "roulette::gadget_roulette_give_earned_specialist(${1:weapon}, ${2:playSound})"},
	{ "trigger": "disable_hero_gadget_activation\t#using scripts\\shared\\abilities\\gadgets\\_gadget_roulette;", "contents": "roulette::disable_hero_gadget_activation(${1:duration})"},
	{ "trigger": "watchRespinGadgetActivated\t#using scripts\\shared\\abilities\\gadgets\\_gadget_roulette;", "contents": "roulette::watchRespinGadgetActivated()"},
	{ "trigger": "watchRespin\t#using scripts\\shared\\abilities\\gadgets\\_gadget_roulette;", "contents": "roulette::watchRespin(${1:weapon})"},
	{ "trigger": "failsafe_reenable_offhand_special\t#using scripts\\shared\\abilities\\gadgets\\_gadget_roulette;", "contents": "roulette::failsafe_reenable_offhand_special()"},
	{ "trigger": "reset_roulette_state_to_default\t#using scripts\\shared\\abilities\\gadgets\\_gadget_roulette;", "contents": "roulette::reset_roulette_state_to_default()"},
	{ "trigger": "watchGadgetActivated\t#using scripts\\shared\\abilities\\gadgets\\_gadget_roulette;", "contents": "roulette::watchGadgetActivated(${1:weapon})"},
	{ "trigger": "giveRandomWeapon\t#using scripts\\shared\\abilities\\gadgets\\_gadget_roulette;", "contents": "roulette::giveRandomWeapon(${1:weapon}, ${2:isPrimaryRoll})"},
	{ "trigger": "gadget_roulette_on_deactivate\t#using scripts\\shared\\abilities\\gadgets\\_gadget_roulette;", "contents": "roulette::gadget_roulette_on_deactivate(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_roulette_on_deactivate_helper\t#using scripts\\shared\\abilities\\gadgets\\_gadget_roulette;", "contents": "roulette::gadget_roulette_on_deactivate_helper(${1:weapon})"},
	{ "trigger": "gadget_roulette_flicker\t#using scripts\\shared\\abilities\\gadgets\\_gadget_roulette;", "contents": "roulette::gadget_roulette_flicker(${1:slot}, ${2:weapon})"},
	{ "trigger": "set_gadget_status\t#using scripts\\shared\\abilities\\gadgets\\_gadget_roulette;", "contents": "roulette::set_gadget_status(${1:status}, ${2:time})"},
	{ "trigger": "dpad_left_pressed\t#using scripts\\shared\\abilities\\gadgets\\_gadget_roulette;", "contents": "roulette::dpad_left_pressed()"},
	{ "trigger": "getRandomGadget\t#using scripts\\shared\\abilities\\gadgets\\_gadget_roulette;", "contents": "roulette::getRandomGadget(${1:isPrimaryRoll})"},
	{ "trigger": "registerGadgetType\t#using scripts\\shared\\abilities\\gadgets\\_gadget_roulette;", "contents": "roulette::registerGadgetType(${1:gadgetNameString}, ${2:primaryWeight}, ${3:secondaryWeight})"},
	{ "trigger": "get_nonalternate_weapon\t#using scripts\\shared\\aat_shared;", "contents": "aat::get_nonalternate_weapon(${1:weapon})"},
	{ "trigger": "aat_response\t#using scripts\\shared\\aat_shared;", "contents": "aat::aat_response(${1:death}, ${2:inflictor}, ${3:attacker}, ${4:damage}, ${5:flags}, ${6:mod}, ${7:weapon}, ${8:vpoint}, ${9:vdir}, ${10:sHitLoc}, ${11:psOffsetTime}, ${12:boneIndex}, ${13:surfaceType})"},
	{ "trigger": "register\t#using scripts\\shared\\aat_shared;", "contents": "aat::register(${1:name}, ${2:percentage}, ${3:cooldown_time_entity}, ${4:cooldown_time_attacker}, ${5:cooldown_time_global}, ${6:occurs_on_death}, ${7:result_func}, ${8:damage_feedback_icon}, ${9:damage_feedback_sound}, ${10:validation_func})"},
	{ "trigger": "register_immunity\t#using scripts\\shared\\aat_shared;", "contents": "aat::register_immunity(${1:name}, ${2:archetype}, ${3:immune_trigger}, ${4:immune_result_direct}, ${5:immune_result_indirect})"},
	{ "trigger": "finalize_clientfields\t#using scripts\\shared\\aat_shared;", "contents": "aat::finalize_clientfields()"},
	{ "trigger": "register_aat_exemption\t#using scripts\\shared\\aat_shared;", "contents": "aat::register_aat_exemption(${1:weapon})"},
	{ "trigger": "is_exempt_weapon\t#using scripts\\shared\\aat_shared;", "contents": "aat::is_exempt_weapon(${1:weapon})"},
	{ "trigger": "register_reroll\t#using scripts\\shared\\aat_shared;", "contents": "aat::register_reroll(${1:name}, ${2:count}, ${3:active_func}, ${4:damage_feedback_icon})"},
	{ "trigger": "getAATOnWeapon\t#using scripts\\shared\\aat_shared; self == player", "contents": "aat::getAATOnWeapon(${1:weapon})"},
	{ "trigger": "acquire\t#using scripts\\shared\\aat_shared;", "contents": "aat::acquire(${1:weapon}, ${2:name})"},
	{ "trigger": "remove\t#using scripts\\shared\\aat_shared;", "contents": "aat::remove(${1:weapon})"},
	{ "trigger": "watch_weapon_changes\t#using scripts\\shared\\aat_shared;", "contents": "aat::watch_weapon_changes()"},
	{ "trigger": "drone_precache\t#using scripts\\shared\\abilities\\gadgets\\_gadget_drone;", "contents": "_gadget_drone::drone_precache()"},
	{ "trigger": "gadget_drone_is_inuse\t#using scripts\\shared\\abilities\\gadgets\\_gadget_drone;", "contents": "_gadget_drone::gadget_drone_is_inuse(${1:slot})"},
	{ "trigger": "gadget_drone_is_flickering\t#using scripts\\shared\\abilities\\gadgets\\_gadget_drone;", "contents": "_gadget_drone::gadget_drone_is_flickering(${1:slot})"},
	{ "trigger": "gadget_drone_on_flicker\t#using scripts\\shared\\abilities\\gadgets\\_gadget_drone;", "contents": "_gadget_drone::gadget_drone_on_flicker(${1:slot})"},
	{ "trigger": "gadget_drone_on_give\t#using scripts\\shared\\abilities\\gadgets\\_gadget_drone;", "contents": "_gadget_drone::gadget_drone_on_give(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_drone_on_take\t#using scripts\\shared\\abilities\\gadgets\\_gadget_drone;", "contents": "_gadget_drone::gadget_drone_on_take(${1:slot})"},
	{ "trigger": "gadget_drone_on_connect\t#using scripts\\shared\\abilities\\gadgets\\_gadget_drone;", "contents": "_gadget_drone::gadget_drone_on_connect()"},
	{ "trigger": "gadget_drone_on\t#using scripts\\shared\\abilities\\gadgets\\_gadget_drone;", "contents": "_gadget_drone::gadget_drone_on(${1:slot})"},
	{ "trigger": "gadget_drone_off\t#using scripts\\shared\\abilities\\gadgets\\_gadget_drone;", "contents": "_gadget_drone::gadget_drone_off(${1:slot})"},
	{ "trigger": "set_gadget_status\t#using scripts\\shared\\abilities\\gadgets\\_gadget_drone;", "contents": "_gadget_drone::set_gadget_status(${1:status}, ${2:time})"},
	{ "trigger": "gadget_drone_flicker\t#using scripts\\shared\\abilities\\gadgets\\_gadget_drone;", "contents": "_gadget_drone::gadget_drone_flicker(${1:slot})"},
	{ "trigger": "gadget_drone_spawn\t#using scripts\\shared\\abilities\\gadgets\\_gadget_drone;", "contents": "_gadget_drone::gadget_drone_spawn()"},
	{ "trigger": "gadget_drone_despawn\t#using scripts\\shared\\abilities\\gadgets\\_gadget_drone;", "contents": "_gadget_drone::gadget_drone_despawn()"},
	{ "trigger": "register\t#using scripts\\shared\\weapons\\_proximity_grenade;", "contents": "proximity_grenade::register()"},
	{ "trigger": "createProximityGrenadeWatcher\t#using scripts\\shared\\weapons\\_proximity_grenade; self == player", "contents": "proximity_grenade::createProximityGrenadeWatcher()"},
	{ "trigger": "createGadgetProximityGrenadeWatcher\t#using scripts\\shared\\weapons\\_proximity_grenade; self == player", "contents": "proximity_grenade::createGadgetProximityGrenadeWatcher()"},
	{ "trigger": "onSpawnProximityGrenadeWeaponObject\t#using scripts\\shared\\weapons\\_proximity_grenade; self == weapon object", "contents": "proximity_grenade::onSpawnProximityGrenadeWeaponObject(${1:watcher}, ${2:owner})"},
	{ "trigger": "trackOnOwner\t#using scripts\\shared\\weapons\\_proximity_grenade;", "contents": "proximity_grenade::trackOnOwner(${1:owner})"},
	{ "trigger": "setupKillCamEnt\t#using scripts\\shared\\weapons\\_proximity_grenade; self == grenade", "contents": "proximity_grenade::setupKillCamEnt()"},
	{ "trigger": "cleanupKillCamEntOnDeath\t#using scripts\\shared\\weapons\\_proximity_grenade; self == grenade", "contents": "proximity_grenade::cleanupKillCamEntOnDeath()"},
	{ "trigger": "proximityDetonate\t#using scripts\\shared\\weapons\\_proximity_grenade;", "contents": "proximity_grenade::proximityDetonate(${1:attacker}, ${2:weapon}, ${3:target})"},
	{ "trigger": "proximityGrenadeDamagePlayer\t#using scripts\\shared\\weapons\\_proximity_grenade;", "contents": "proximity_grenade::proximityGrenadeDamagePlayer(${1:eAttacker}, ${2:eInflictor}, ${3:killCamEnt}, ${4:weapon}, ${5:meansOfDeath}, ${6:damage}, ${7:proximityChain})"},
	{ "trigger": "getProximityChain\t#using scripts\\shared\\weapons\\_proximity_grenade;", "contents": "proximity_grenade::getProximityChain()"},
	{ "trigger": "chainIsActive\t#using scripts\\shared\\weapons\\_proximity_grenade;", "contents": "proximity_grenade::chainIsActive(${1:chain})"},
	{ "trigger": "cleanUpProximityChainEnt\t#using scripts\\shared\\weapons\\_proximity_grenade; self is a temp entity to keep track of the original chain. it goes away when all chains are finished.", "contents": "proximity_grenade::cleanUpProximityChainEnt()"},
	{ "trigger": "isInChain\t#using scripts\\shared\\weapons\\_proximity_grenade;", "contents": "proximity_grenade::isInChain(${1:player})"},
	{ "trigger": "addPlayerToChain\t#using scripts\\shared\\weapons\\_proximity_grenade;", "contents": "proximity_grenade::addPlayerToChain(${1:player})"},
	{ "trigger": "proximityGrenadeChain\t#using scripts\\shared\\weapons\\_proximity_grenade;", "contents": "proximity_grenade::proximityGrenadeChain(${1:eAttacker}, ${2:eInflictor}, ${3:killCamEnt}, ${4:weapon}, ${5:meansOfDeath}, ${6:damage}, ${7:proximityChain}, ${8:delay})"},
	{ "trigger": "chainPlayer\t#using scripts\\shared\\weapons\\_proximity_grenade;", "contents": "proximity_grenade::chainPlayer(${1:eAttacker}, ${2:killCamEnt}, ${3:weapon}, ${4:meansOfDeath}, ${5:damage}, ${6:proximityChain}, ${7:player}, ${8:distanceSq})"},
	{ "trigger": "tesla_play_arc_fx\t#using scripts\\shared\\weapons\\_proximity_grenade;", "contents": "proximity_grenade::tesla_play_arc_fx(${1:target}, ${2:waitTime})"},
	{ "trigger": "watchProximityGrenadeHitPlayer\t#using scripts\\shared\\weapons\\_proximity_grenade; self = grenade", "contents": "proximity_grenade::watchProximityGrenadeHitPlayer(${1:owner})"},
	{ "trigger": "performHudEffects\t#using scripts\\shared\\weapons\\_proximity_grenade;", "contents": "proximity_grenade::performHudEffects(${1:position}, ${2:distanceToGrenade})"},
	{ "trigger": "damagePlayerInRadius\t#using scripts\\shared\\weapons\\_proximity_grenade; self = player in radius", "contents": "proximity_grenade::damagePlayerInRadius(${1:position}, ${2:eAttacker}, ${3:killCamEnt})"},
	{ "trigger": "proximityDeathWait\t#using scripts\\shared\\weapons\\_proximity_grenade;", "contents": "proximity_grenade::proximityDeathWait(${1:owner})"},
	{ "trigger": "deleteEntOnOwnerDeath\t#using scripts\\shared\\weapons\\_proximity_grenade;", "contents": "proximity_grenade::deleteEntOnOwnerDeath(${1:owner})"},
	{ "trigger": "deleteEntAfterTime\t#using scripts\\shared\\weapons\\_proximity_grenade;", "contents": "proximity_grenade::deleteEntAfterTime()"},
	{ "trigger": "deleteEntOnTimeout\t#using scripts\\shared\\weapons\\_proximity_grenade;", "contents": "proximity_grenade::deleteEntOnTimeout()"},
	{ "trigger": "watch_death\t#using scripts\\shared\\weapons\\_proximity_grenade; self == player", "contents": "proximity_grenade::watch_death()"},
	{ "trigger": "on_player_spawned\t#using scripts\\shared\\weapons\\_proximity_grenade;", "contents": "proximity_grenade::on_player_spawned()"},
	{ "trigger": "begin_other_grenade_tracking\t#using scripts\\shared\\weapons\\_proximity_grenade;", "contents": "proximity_grenade::begin_other_grenade_tracking()"},
	{ "trigger": "on_damage\t#using scripts\\shared\\weapons\\_proximity_grenade;", "contents": "proximity_grenade::on_damage(${1:eAttacker}, ${2:eInflictor}, ${3:weapon}, ${4:meansOfDeath}, ${5:damage})"},
	{ "trigger": "do_scripted_crash\t#using scripts\\shared\\vehicle_death_shared;", "contents": "vehicle_death::do_scripted_crash()"},
	{ "trigger": "play_death_audio\t#using scripts\\shared\\vehicle_death_shared;", "contents": "vehicle_death::play_death_audio()"},
	{ "trigger": "play_spinning_plane_sound\t#using scripts\\shared\\vehicle_death_shared;", "contents": "vehicle_death::play_spinning_plane_sound()"},
	{ "trigger": "set_death_model\t#using scripts\\shared\\vehicle_death_shared;", "contents": "vehicle_death::set_death_model(${1:sModel}, ${2:fDelay})"},
	{ "trigger": "aircraft_crash\t#using scripts\\shared\\vehicle_death_shared;", "contents": "vehicle_death::aircraft_crash(${1:point}, ${2:dir})"},
	{ "trigger": "helicopter_crash\t#using scripts\\shared\\vehicle_death_shared;", "contents": "vehicle_death::helicopter_crash(${1:point}, ${2:dir})"},
	{ "trigger": "helicopter_crash_movement\t#using scripts\\shared\\vehicle_death_shared;", "contents": "vehicle_death::helicopter_crash_movement(${1:point}, ${2:dir})"},
	{ "trigger": "helicopter_crash_accel\t#using scripts\\shared\\vehicle_death_shared;", "contents": "vehicle_death::helicopter_crash_accel()"},
	{ "trigger": "helicopter_crash_rotation\t#using scripts\\shared\\vehicle_death_shared;", "contents": "vehicle_death::helicopter_crash_rotation(${1:point}, ${2:dir})"},
	{ "trigger": "helicopter_crash_zone_accel\t#using scripts\\shared\\vehicle_death_shared;", "contents": "vehicle_death::helicopter_crash_zone_accel(${1:dir})"},
	{ "trigger": "helicopter_collision\t#using scripts\\shared\\vehicle_death_shared;", "contents": "vehicle_death::helicopter_collision()"},
	{ "trigger": "play_crashing_loop\t#using scripts\\shared\\vehicle_death_shared;", "contents": "vehicle_death::play_crashing_loop()"},
	{ "trigger": "helicopter_explode\t#using scripts\\shared\\vehicle_death_shared;", "contents": "vehicle_death::helicopter_explode(${1:delete_me})"},
	{ "trigger": "aircraft_crash_move\t#using scripts\\shared\\vehicle_death_shared;", "contents": "vehicle_death::aircraft_crash_move(${1:point}, ${2:dir})"},
	{ "trigger": "delay_set_gravity\t#using scripts\\shared\\vehicle_death_shared;", "contents": "vehicle_death::delay_set_gravity(${1:delay})"},
	{ "trigger": "helicopter_crash_move\t#using scripts\\shared\\vehicle_death_shared;", "contents": "vehicle_death::helicopter_crash_move(${1:point}, ${2:dir})"},
	{ "trigger": "boat_crash\t#using scripts\\shared\\vehicle_death_shared;", "contents": "vehicle_death::boat_crash(${1:point}, ${2:dir})"},
	{ "trigger": "boat_crash_movement\t#using scripts\\shared\\vehicle_death_shared;", "contents": "vehicle_death::boat_crash_movement(${1:point}, ${2:dir})"},
	{ "trigger": "boat_crash_monitor\t#using scripts\\shared\\vehicle_death_shared;", "contents": "vehicle_death::boat_crash_monitor(${1:point}, ${2:dir}, ${3:crash_time})"},
	{ "trigger": "crash_stop\t#using scripts\\shared\\vehicle_death_shared;", "contents": "vehicle_death::crash_stop()"},
	{ "trigger": "crash_collision_test\t#using scripts\\shared\\vehicle_death_shared;", "contents": "vehicle_death::crash_collision_test()"},
	{ "trigger": "crash_path_check\t#using scripts\\shared\\vehicle_death_shared;", "contents": "vehicle_death::crash_path_check(${1:node})"},
	{ "trigger": "death_firesound\t#using scripts\\shared\\vehicle_death_shared;", "contents": "vehicle_death::death_firesound(${1:sound})"},
	{ "trigger": "death_fx\t#using scripts\\shared\\vehicle_death_shared;", "contents": "vehicle_death::death_fx()"},
	{ "trigger": "death_make_badplace\t#using scripts\\shared\\vehicle_death_shared;", "contents": "vehicle_death::death_make_badplace(${1:type})"},
	{ "trigger": "death_jolt\t#using scripts\\shared\\vehicle_death_shared;", "contents": "vehicle_death::death_jolt(${1:type})"},
	{ "trigger": "deathrollon\t#using scripts\\shared\\vehicle_death_shared;", "contents": "vehicle_death::deathrollon()"},
	{ "trigger": "deathrolloff\t#using scripts\\shared\\vehicle_death_shared;", "contents": "vehicle_death::deathrolloff()"},
	{ "trigger": "loop_fx_on_vehicle_tag\t#using scripts\\shared\\vehicle_death_shared;", "contents": "vehicle_death::loop_fx_on_vehicle_tag(${1:effect}, ${2:loopTime}, ${3:tag})"},
	{ "trigger": "deathfx_ent\t#using scripts\\shared\\vehicle_death_shared;", "contents": "vehicle_death::deathfx_ent()"},
	{ "trigger": "death_cleanup_level_variables\t#using scripts\\shared\\vehicle_death_shared;", "contents": "vehicle_death::death_cleanup_level_variables()"},
	{ "trigger": "death_cleanup_riders\t#using scripts\\shared\\vehicle_death_shared;", "contents": "vehicle_death::death_cleanup_riders()"},
	{ "trigger": "death_radius_damage\t#using scripts\\shared\\vehicle_death_shared;", "contents": "vehicle_death::death_radius_damage(${1:meansOfDamage = \"MOD_EXPLOSIVE\"})"},
	{ "trigger": "death_update_crash\t#using scripts\\shared\\vehicle_death_shared;", "contents": "vehicle_death::death_update_crash(${1:point}, ${2:dir})"},
	{ "trigger": "waittill_crash_done_or_stopped\t#using scripts\\shared\\vehicle_death_shared;", "contents": "vehicle_death::waittill_crash_done_or_stopped()"},
	{ "trigger": "vehicle_damage_filter_damage_watcher\t#using scripts\\shared\\vehicle_death_shared;", "contents": "vehicle_death::vehicle_damage_filter_damage_watcher(${1:driver}, ${2:heavy_damage_threshold})"},
	{ "trigger": "vehicle_damage_filter_exit_watcher\t#using scripts\\shared\\vehicle_death_shared;", "contents": "vehicle_death::vehicle_damage_filter_exit_watcher(${1:driver})"},
	{ "trigger": "vehicle_damage_filter\t#using scripts\\shared\\vehicle_death_shared;", "contents": "vehicle_death::vehicle_damage_filter(${1:vision_set}, ${2:heavy_damage_threshold}, ${3:filterid = 0}, ${4:b_use_player_damage = false})"},
	{ "trigger": "flipping_shooting_death\t#using scripts\\shared\\vehicle_death_shared;", "contents": "vehicle_death::flipping_shooting_death(${1:attacker}, ${2:hitDir})"},
	{ "trigger": "plane_crash\t#using scripts\\shared\\vehicle_death_shared;", "contents": "vehicle_death::plane_crash()"},
	{ "trigger": "barrel_rolling_crash\t#using scripts\\shared\\vehicle_death_shared;", "contents": "vehicle_death::barrel_rolling_crash()"},
	{ "trigger": "random_crash\t#using scripts\\shared\\vehicle_death_shared;", "contents": "vehicle_death::random_crash(${1:hitdir})"},
	{ "trigger": "set_movement_and_accel\t#using scripts\\shared\\vehicle_death_shared;", "contents": "vehicle_death::set_movement_and_accel(${1:new_vel}, ${2:ang_vel})"},
	{ "trigger": "flipping_shooting_crash_movement\t#using scripts\\shared\\vehicle_death_shared;", "contents": "vehicle_death::flipping_shooting_crash_movement(${1:attacker}, ${2:hitdir})"},
	{ "trigger": "flipping_shooting_dmg_snd\t#using scripts\\shared\\vehicle_death_shared;", "contents": "vehicle_death::flipping_shooting_dmg_snd()"},
	{ "trigger": "flipping_shooting_crash_accel\t#using scripts\\shared\\vehicle_death_shared;", "contents": "vehicle_death::flipping_shooting_crash_accel()"},
	{ "trigger": "death_fire_loop_audio\t#using scripts\\shared\\vehicle_death_shared;", "contents": "vehicle_death::death_fire_loop_audio()"},
	{ "trigger": "FreeWhenSafe\t#using scripts\\shared\\vehicle_death_shared;", "contents": "vehicle_death::FreeWhenSafe(${1:time = 4})"},
	{ "trigger": "DeleteWhenSafe\t#using scripts\\shared\\vehicle_death_shared;", "contents": "vehicle_death::DeleteWhenSafe(${1:time = 4})"},
	{ "trigger": "DelayedRemove_thread\t#using scripts\\shared\\vehicle_death_shared;", "contents": "vehicle_death::DelayedRemove_thread(${1:time}, ${2:shouldDelete})"},
	{ "trigger": "CleanUp\t#using scripts\\shared\\vehicle_death_shared;", "contents": "vehicle_death::CleanUp()"},
	{ "trigger": "infrared_is_inuse\t#using scripts\\shared\\abilities\\gadgets\\_gadget_infrared;", "contents": "_gadget_infrared::infrared_is_inuse(${1:slot})"},
	{ "trigger": "infrared_on_connect\t#using scripts\\shared\\abilities\\gadgets\\_gadget_infrared;", "contents": "_gadget_infrared::infrared_on_connect()"},
	{ "trigger": "infrared_on_disconnect\t#using scripts\\shared\\abilities\\gadgets\\_gadget_infrared;", "contents": "_gadget_infrared::infrared_on_disconnect()"},
	{ "trigger": "infrared_on_spawn\t#using scripts\\shared\\abilities\\gadgets\\_gadget_infrared;", "contents": "_gadget_infrared::infrared_on_spawn()"},
	{ "trigger": "infrared_on_give\t#using scripts\\shared\\abilities\\gadgets\\_gadget_infrared;", "contents": "_gadget_infrared::infrared_on_give(${1:slot}, ${2:weapon})"},
	{ "trigger": "infrared_on_take\t#using scripts\\shared\\abilities\\gadgets\\_gadget_infrared;", "contents": "_gadget_infrared::infrared_on_take(${1:slot}, ${2:weapon})"},
	{ "trigger": "infrared_gadget_on\t#using scripts\\shared\\abilities\\gadgets\\_gadget_infrared;", "contents": "_gadget_infrared::infrared_gadget_on(${1:slot}, ${2:weapon})"},
	{ "trigger": "infrared_gadget_off\t#using scripts\\shared\\abilities\\gadgets\\_gadget_infrared;", "contents": "_gadget_infrared::infrared_gadget_off(${1:slot}, ${2:weapon})"},
	{ "trigger": "enable\t#using scripts\\zm\\gametypes\\_perplayer;", "contents": "perplayer::enable(${1:handler})"},
	{ "trigger": "disable\t#using scripts\\zm\\gametypes\\_perplayer;", "contents": "perplayer::disable(${1:handler})"},
	{ "trigger": "onPlayerConnect\t#using scripts\\zm\\gametypes\\_perplayer;", "contents": "perplayer::onPlayerConnect(${1:handler})"},
	{ "trigger": "onPlayerDisconnect\t#using scripts\\zm\\gametypes\\_perplayer;", "contents": "perplayer::onPlayerDisconnect(${1:handler})"},
	{ "trigger": "onJoinedTeam\t#using scripts\\zm\\gametypes\\_perplayer;", "contents": "perplayer::onJoinedTeam(${1:handler})"},
	{ "trigger": "onJoinedSpectators\t#using scripts\\zm\\gametypes\\_perplayer;", "contents": "perplayer::onJoinedSpectators(${1:handler})"},
	{ "trigger": "onPlayerSpawned\t#using scripts\\zm\\gametypes\\_perplayer;", "contents": "perplayer::onPlayerSpawned(${1:handler})"},
	{ "trigger": "onPlayerKilled\t#using scripts\\zm\\gametypes\\_perplayer;", "contents": "perplayer::onPlayerKilled(${1:handler})"},
	{ "trigger": "handlePlayer\t#using scripts\\zm\\gametypes\\_perplayer;", "contents": "perplayer::handlePlayer(${1:handler})"},
	{ "trigger": "unHandlePlayer\t#using scripts\\zm\\gametypes\\_perplayer;", "contents": "perplayer::unHandlePlayer(${1:handler}, ${2:unsetready}, ${3:disconnected})"},
	{ "trigger": "createSensorGrenadeWatcher\t#using scripts\\shared\\weapons\\_sensor_grenade;", "contents": "sensor_grenade::createSensorGrenadeWatcher()"},
	{ "trigger": "onSpawnSensorGrenade\t#using scripts\\shared\\weapons\\_sensor_grenade; self == sensor sensor", "contents": "sensor_grenade::onSpawnSensorGrenade(${1:watcher}, ${2:player})"},
	{ "trigger": "watchForStationary\t#using scripts\\shared\\weapons\\_sensor_grenade;", "contents": "sensor_grenade::watchForStationary(${1:owner})"},
	{ "trigger": "watchForExplode\t#using scripts\\shared\\weapons\\_sensor_grenade;", "contents": "sensor_grenade::watchForExplode(${1:owner})"},
	{ "trigger": "checkForTracking\t#using scripts\\shared\\weapons\\_sensor_grenade;", "contents": "sensor_grenade::checkForTracking(${1:origin})"},
	{ "trigger": "trackSensorGrenadeVictim\t#using scripts\\shared\\weapons\\_sensor_grenade;", "contents": "sensor_grenade::trackSensorGrenadeVictim(${1:victim})"},
	{ "trigger": "isPlayerTracked\t#using scripts\\shared\\weapons\\_sensor_grenade;", "contents": "sensor_grenade::isPlayerTracked(${1:player}, ${2:time})"},
	{ "trigger": "sensorGrenadeDestroyed\t#using scripts\\shared\\weapons\\_sensor_grenade;", "contents": "sensor_grenade::sensorGrenadeDestroyed(${1:attacker}, ${2:weapon}, ${3:target})"},
	{ "trigger": "watchSensorGrenadeDamage\t#using scripts\\shared\\weapons\\_sensor_grenade; self == sensor grenade", "contents": "sensor_grenade::watchSensorGrenadeDamage(${1:watcher})"},
	{ "trigger": "watch_for_decoys\t#using scripts\\shared\\weapons\\_sensor_grenade;", "contents": "sensor_grenade::watch_for_decoys(${1:owner})"},
	{ "trigger": "get_decoy_spawn_loc\t#using scripts\\shared\\weapons\\_sensor_grenade;", "contents": "sensor_grenade::get_decoy_spawn_loc()"},
	{ "trigger": "watch_decoy\t#using scripts\\shared\\weapons\\_sensor_grenade;", "contents": "sensor_grenade::watch_decoy(${1:sensor_grenade})"},
	{ "trigger": "on_player_connect\t#using scripts\\shared\\popups_shared;", "contents": "popups::on_player_connect()"},
	{ "trigger": "DisplayKillstreakTeamMessageToAll\t#using scripts\\shared\\popups_shared;", "contents": "popups::DisplayKillstreakTeamMessageToAll(${1:killstreak}, ${2:player})"},
	{ "trigger": "DisplayKillstreakHackedTeamMessageToAll\t#using scripts\\shared\\popups_shared;", "contents": "popups::DisplayKillstreakHackedTeamMessageToAll(${1:killstreak}, ${2:player})"},
	{ "trigger": "shouldDisplayTeamMessages\t#using scripts\\shared\\popups_shared;", "contents": "popups::shouldDisplayTeamMessages()"},
	{ "trigger": "DisplayTeamMessageToAll\t#using scripts\\shared\\popups_shared;", "contents": "popups::DisplayTeamMessageToAll(${1:message}, ${2:player})"},
	{ "trigger": "DisplayTeamMessageToTeam\t#using scripts\\shared\\popups_shared;", "contents": "popups::DisplayTeamMessageToTeam(${1:message}, ${2:player}, ${3:team})"},
	{ "trigger": "displayTeamMessageWaiter\t#using scripts\\shared\\popups_shared;", "contents": "popups::displayTeamMessageWaiter()"},
	{ "trigger": "displayPopUpsWaiter\t#using scripts\\shared\\popups_shared;", "contents": "popups::displayPopUpsWaiter()"},
	{ "trigger": "milestoneNotify\t#using scripts\\shared\\popups_shared;", "contents": "popups::milestoneNotify(${1:index}, ${2:itemIndex}, ${3:type}, ${4:tier})"},
	{ "trigger": "first_frame\t#using scripts\\shared\\animation_shared;", "contents": "animation::first_frame(${1:animation}, ${2:v_origin_or_ent}, ${3:v_angles_or_tag})"},
	{ "trigger": "last_frame\t#using scripts\\shared\\animation_shared;", "contents": "animation::last_frame(${1:animation}, ${2:v_origin_or_ent}, ${3:v_angles_or_tag})"},
	{ "trigger": "play\t#using scripts\\shared\\animation_shared;", "contents": "animation::play(${1:animation}, ${2:v_origin_or_ent}, ${3:v_angles_or_tag}, ${4:n_rate = 1}, ${5:n_blend_in = .2}, ${6:n_blend_out = .2}, ${7:n_lerp = 0}, ${8:n_start_time = 0}, ${9:b_show_player_firstperson_weapon = false}, ${10:b_unlink_after_completed = true})"},
	{ "trigger": "stop\t#using scripts\\shared\\animation_shared;", "contents": "animation::stop(${1:n_blend = 0.2})"},
	{ "trigger": "_play\t#using scripts\\shared\\animation_shared;", "contents": "animation::_play(${1:animation}, ${2:v_origin_or_ent}, ${3:v_angles_or_tag}, ${4:n_rate}, ${5:n_blend_in}, ${6:n_blend_out}, ${7:n_lerp}, ${8:n_start_time}, ${9:b_show_player_firstperson_weapon}, ${10:b_unlink_after_completed})"},
	{ "trigger": "_blend_out\t#using scripts\\shared\\animation_shared;", "contents": "animation::_blend_out(${1:animation}, ${2:n_blend}, ${3:n_rate}, ${4:n_start_time})"},
	{ "trigger": "_get_align_ent\t#using scripts\\shared\\animation_shared;", "contents": "animation::_get_align_ent(${1:e_align})"},
	{ "trigger": "_get_align_pos\t#using scripts\\shared\\animation_shared;", "contents": "animation::_get_align_pos(${1:v_origin_or_ent}, ${2:v_angles_or_tag})"},
	{ "trigger": "teleport\t#using scripts\\shared\\animation_shared;", "contents": "animation::teleport(${1:animation}, ${2:v_origin_or_ent}, ${3:v_angles_or_tag}, ${4:time})"},
	{ "trigger": "reach\t#using scripts\\shared\\animation_shared;", "contents": "animation::reach(${1:animation}, ${2:v_origin_or_ent}, ${3:v_angles_or_tag}, ${4:b_disable_arrivals = false})"},
	{ "trigger": "_reach\t#using scripts\\shared\\animation_shared;", "contents": "animation::_reach(${1:s_tracker}, ${2:animation}, ${3:v_origin_or_ent}, ${4:v_angles_or_tag}, ${5:b_disable_arrivals = false})"},
	{ "trigger": "set_death_anim\t#using scripts\\shared\\animation_shared;", "contents": "animation::set_death_anim(${1:animation}, ${2:v_origin_or_ent}, ${3:v_angles_or_tag}, ${4:n_rate}, ${5:n_blend_in}, ${6:n_blend_out}, ${7:n_lerp})"},
	{ "trigger": "_do_death_anim\t#using scripts\\shared\\animation_shared;", "contents": "animation::_do_death_anim(${1:animation}, ${2:v_origin_or_ent}, ${3:v_angles_or_tag}, ${4:n_rate}, ${5:n_blend_in}, ${6:n_blend_out}, ${7:n_lerp})"},
	{ "trigger": "set_player_clamps\t#using scripts\\shared\\animation_shared;", "contents": "animation::set_player_clamps()"},
	{ "trigger": "add_notetrack_func\t#using scripts\\shared\\animation_shared;", "contents": "animation::add_notetrack_func(${1:funcname}, ${2:func})"},
	{ "trigger": "add_global_notetrack_handler\t#using scripts\\shared\\animation_shared;", "contents": "animation::add_global_notetrack_handler(${1:str_note}, ${2:func}, ${3:pass_notify_params}, ${4:...})"},
	{ "trigger": "call_notetrack_handler\t#using scripts\\shared\\animation_shared;", "contents": "animation::call_notetrack_handler(${1:str_note}, ${2:param1}, ${3:param2})"},
	{ "trigger": "setup_notetracks\t#using scripts\\shared\\animation_shared;", "contents": "animation::setup_notetracks()"},
	{ "trigger": "handle_notetracks\t#using scripts\\shared\\animation_shared;", "contents": "animation::handle_notetracks(${1:animation})"},
	{ "trigger": "cracks_on\t#using scripts\\shared\\animation_shared;", "contents": "animation::cracks_on(${1:str_type})"},
	{ "trigger": "cracks_off\t#using scripts\\shared\\animation_shared;", "contents": "animation::cracks_off(${1:str_type})"},
	{ "trigger": "enable_headlook\t#using scripts\\shared\\animation_shared;", "contents": "animation::enable_headlook(${1:b_on = true})"},
	{ "trigger": "enable_headlook_notorso\t#using scripts\\shared\\animation_shared;", "contents": "animation::enable_headlook_notorso(${1:b_on = true})"},
	{ "trigger": "is_valid_weapon\t#using scripts\\shared\\animation_shared;", "contents": "animation::is_valid_weapon(${1:weaponObject})"},
	{ "trigger": "attach_weapon\t#using scripts\\shared\\animation_shared;", "contents": "animation::attach_weapon(${1:weaponObject}, ${2:tag = \"tag_weapon_right\"})"},
	{ "trigger": "detach_weapon\t#using scripts\\shared\\animation_shared;", "contents": "animation::detach_weapon(${1:weaponObject}, ${2:tag = \"tag_weapon_right\"})"},
	{ "trigger": "fire_weapon\t#using scripts\\shared\\animation_shared;", "contents": "animation::fire_weapon()"},
	{ "trigger": "get_hack_pos\t#using scripts\\shared\\doors_shared;", "contents": "doors::get_hack_pos()"},
	{ "trigger": "get_hack_angles\t#using scripts\\shared\\doors_shared;", "contents": "doors::get_hack_angles()"},
	{ "trigger": "lock\t#using scripts\\shared\\doors_shared;", "contents": "doors::lock()"},
	{ "trigger": "unlock\t#using scripts\\shared\\doors_shared;", "contents": "doors::unlock()"},
	{ "trigger": "delete_door\t#using scripts\\shared\\doors_shared;", "contents": "doors::delete_door()"},
	{ "trigger": "open\t#using scripts\\shared\\doors_shared;", "contents": "doors::open()"},
	{ "trigger": "close_internal\t#using scripts\\shared\\doors_shared;", "contents": "doors::close_internal()"},
	{ "trigger": "close\t#using scripts\\shared\\doors_shared;", "contents": "doors::close()"},
	{ "trigger": "open_internal\t#using scripts\\shared\\doors_shared;", "contents": "doors::open_internal()"},
	{ "trigger": "update_use_message\t#using scripts\\shared\\doors_shared;", "contents": "doors::update_use_message()"},
	{ "trigger": "run_lock_fx\t#using scripts\\shared\\doors_shared;", "contents": "doors::run_lock_fx()"},
	{ "trigger": "process_hint_trigger_message\t#using scripts\\shared\\doors_shared;", "contents": "doors::process_hint_trigger_message()"},
	{ "trigger": "set_script_flags\t#using scripts\\shared\\doors_shared;", "contents": "doors::set_script_flags(${1:b_set})"},
	{ "trigger": "set_door_paths\t#using scripts\\shared\\doors_shared;", "contents": "doors::set_door_paths(${1:n_door_connect_paths})"},
	{ "trigger": "calculate_offset_position\t#using scripts\\shared\\doors_shared;", "contents": "doors::calculate_offset_position(${1:v_origin}, ${2:v_angles}, ${3:v_offset})"},
	{ "trigger": "set_swing_angle\t#using scripts\\shared\\doors_shared;", "contents": "doors::set_swing_angle(${1:angle})"},
	{ "trigger": "GetSwingAngle\t#using scripts\\shared\\doors_shared;", "contents": "doors::GetSwingAngle()"},
	{ "trigger": "SetDoorOpenDelay\t#using scripts\\shared\\doors_shared;", "contents": "doors::SetDoorOpenDelay(${1:delay_time})"},
	{ "trigger": "setup_door_scriptbundle\t#using scripts\\shared\\doors_shared;", "contents": "doors::setup_door_scriptbundle(${1:s_door_bundle}, ${2:s_door_instance})"},
	{ "trigger": "door_open_update\t#using scripts\\shared\\doors_shared;", "contents": "doors::door_open_update(${1:c_door})"},
	{ "trigger": "door_update\t#using scripts\\shared\\doors_shared;", "contents": "doors::door_update(${1:c_door})"},
	{ "trigger": "door_update_lock_scripted\t#using scripts\\shared\\doors_shared;", "contents": "doors::door_update_lock_scripted(${1:c_door})"},
	{ "trigger": "player_freeze_in_place\t#using scripts\\shared\\doors_shared;", "contents": "doors::player_freeze_in_place(${1:b_do_freeze})"},
	{ "trigger": "trigger_wait_until_clear\t#using scripts\\shared\\doors_shared;", "contents": "doors::trigger_wait_until_clear(${1:c_door})"},
	{ "trigger": "door_wait_until_user_release\t#using scripts\\shared\\doors_shared;", "contents": "doors::door_wait_until_user_release(${1:c_door}, ${2:e_triggerer}, ${3:str_kill_on_door_notify})"},
	{ "trigger": "door_wait_until_clear\t#using scripts\\shared\\doors_shared;", "contents": "doors::door_wait_until_clear(${1:c_door}, ${2:e_triggerer})"},
	{ "trigger": "trigger_check_for_ents_touching\t#using scripts\\shared\\doors_shared;", "contents": "doors::trigger_check_for_ents_touching(${1:str_kill_trigger_notify})"},
	{ "trigger": "player_has_key\t#using scripts\\shared\\doors_shared;", "contents": "doors::player_has_key(${1:str_key_type})"},
	{ "trigger": "player_take_key\t#using scripts\\shared\\doors_shared;", "contents": "doors::player_take_key(${1:str_key_type})"},
	{ "trigger": "rotate_key_forever\t#using scripts\\shared\\doors_shared;", "contents": "doors::rotate_key_forever()"},
	{ "trigger": "key_process_timeout\t#using scripts\\shared\\doors_shared;", "contents": "doors::key_process_timeout(${1:n_timeout_sec}, ${2:e_trigger}, ${3:e_model})"},
	{ "trigger": "give_ai_key_internal\t#using scripts\\shared\\doors_shared;", "contents": "doors::give_ai_key_internal(${1:n_timeout_sec}, ${2:str_key_type})"},
	{ "trigger": "give_ai_key\t#using scripts\\shared\\doors_shared;", "contents": "doors::give_ai_key(${1:n_timeout_sec = undefined}, ${2:str_key_type = \"door\"})"},
	{ "trigger": "give_player_key\t#using scripts\\shared\\doors_shared;", "contents": "doors::give_player_key(${1:str_key_type = \"door\"})"},
	{ "trigger": "unlock_all\t#using scripts\\shared\\doors_shared;", "contents": "doors::unlock_all(${1:b_do_open = true})"},
	{ "trigger": "unlock\t#using scripts\\shared\\doors_shared;", "contents": "doors::unlock(${1:str_name}, ${2:str_name_type = \"targetname\"}, ${3:b_do_open = true})"},
	{ "trigger": "lightninggun_start_damage_effects\t#using scripts\\shared\\weapons\\_lightninggun;", "contents": "lightninggun::lightninggun_start_damage_effects(${1:eAttacker})"},
	{ "trigger": "lightninggun_arc_killcam\t#using scripts\\shared\\weapons\\_lightninggun;", "contents": "lightninggun::lightninggun_arc_killcam(${1:arc_source_pos}, ${2:arc_target}, ${3:arc_target_pos}, ${4:original_killcam_ent}, ${5:waitTime})"},
	{ "trigger": "lightninggun_arc_fx\t#using scripts\\shared\\weapons\\_lightninggun;", "contents": "lightninggun::lightninggun_arc_fx(${1:arc_source_pos}, ${2:arc_target}, ${3:arc_target_pos}, ${4:distanceSq}, ${5:original_killcam_ent})"},
	{ "trigger": "lightninggun_arc\t#using scripts\\shared\\weapons\\_lightninggun;", "contents": "lightninggun::lightninggun_arc(${1:delay}, ${2:eAttacker}, ${3:arc_source}, ${4:arc_source_origin}, ${5:arc_source_pos}, ${6:arc_target}, ${7:arc_target_pos}, ${8:distanceSq})"},
	{ "trigger": "lightninggun_find_arc_targets\t#using scripts\\shared\\weapons\\_lightninggun;", "contents": "lightninggun::lightninggun_find_arc_targets(${1:eAttacker}, ${2:arc_source}, ${3:arc_source_origin}, ${4:arc_source_pos})"},
	{ "trigger": "create_killcam_entity\t#using scripts\\shared\\weapons\\_lightninggun;", "contents": "lightninggun::create_killcam_entity(${1:origin}, ${2:angles}, ${3:weapon})"},
	{ "trigger": "killcam_move\t#using scripts\\shared\\weapons\\_lightninggun;", "contents": "lightninggun::killcam_move(${1:start_origin}, ${2:end_origin}, ${3:time})"},
	{ "trigger": "lightninggun_damage_response\t#using scripts\\shared\\weapons\\_lightninggun;", "contents": "lightninggun::lightninggun_damage_response(${1:eAttacker}, ${2:eInflictor}, ${3:weapon}, ${4:meansOfDeath}, ${5:damage})"},
	{ "trigger": "on_damage_lightninggun\t#using scripts\\shared\\weapons\\_lightninggun;", "contents": "lightninggun::on_damage_lightninggun(${1:eAttacker}, ${2:eInflictor}, ${3:weapon}, ${4:meansOfDeath}, ${5:damage})"},
	{ "trigger": "on_player_connect\t#using scripts\\shared\\persistence_shared;", "contents": "persistence::on_player_connect()"},
	{ "trigger": "upload_global_stat_counters\t#using scripts\\shared\\persistence_shared;", "contents": "persistence::upload_global_stat_counters()"},
	{ "trigger": "stat_get_with_gametype\t#using scripts\\shared\\persistence_shared;", "contents": "persistence::stat_get_with_gametype(${1:dataName})"},
	{ "trigger": "get_gametype_name\t#using scripts\\shared\\persistence_shared;", "contents": "persistence::get_gametype_name()"},
	{ "trigger": "is_party_gamemode\t#using scripts\\shared\\persistence_shared;", "contents": "persistence::is_party_gamemode()"},
	{ "trigger": "is_stat_modifiable\t#using scripts\\shared\\persistence_shared;", "contents": "persistence::is_stat_modifiable(${1:dataName})"},
	{ "trigger": "stat_set_with_gametype\t#using scripts\\shared\\persistence_shared;", "contents": "persistence::stat_set_with_gametype(${1:dataName}, ${2:value}, ${3:incValue})"},
	{ "trigger": "adjust_recent_stats\t#using scripts\\shared\\persistence_shared;", "contents": "persistence::adjust_recent_stats()"},
	{ "trigger": "get_recent_stat\t#using scripts\\shared\\persistence_shared;", "contents": "persistence::get_recent_stat(${1:isGlobal}, ${2:index}, ${3:statName})"},
	{ "trigger": "set_recent_stat\t#using scripts\\shared\\persistence_shared;", "contents": "persistence::set_recent_stat(${1:isGlobal}, ${2:index}, ${3:statName}, ${4:value})"},
	{ "trigger": "add_recent_stat\t#using scripts\\shared\\persistence_shared;", "contents": "persistence::add_recent_stat(${1:isGlobal}, ${2:index}, ${3:statName}, ${4:value})"},
	{ "trigger": "set_match_history_stat\t#using scripts\\shared\\persistence_shared;", "contents": "persistence::set_match_history_stat(${1:statName}, ${2:value})"},
	{ "trigger": "add_match_history_stat\t#using scripts\\shared\\persistence_shared;", "contents": "persistence::add_match_history_stat(${1:statName}, ${2:value})"},
	{ "trigger": "can_set_aar_stat\t#using scripts\\shared\\persistence_shared;", "contents": "persistence::can_set_aar_stat()"},
	{ "trigger": "set_after_action_report_player_stat\t#using scripts\\shared\\persistence_shared;", "contents": "persistence::set_after_action_report_player_stat(${1:playerIndex}, ${2:statName}, ${3:value})"},
	{ "trigger": "set_after_action_report_player_medal\t#using scripts\\shared\\persistence_shared;", "contents": "persistence::set_after_action_report_player_medal(${1:playerIndex}, ${2:medalIndex}, ${3:value})"},
	{ "trigger": "set_after_action_report_stat\t#using scripts\\shared\\persistence_shared;", "contents": "persistence::set_after_action_report_stat(${1:statName}, ${2:value}, ${3:index})"},
	{ "trigger": "CodeCallback_ChallengeComplete\t#using scripts\\shared\\persistence_shared;", "contents": "persistence::CodeCallback_ChallengeComplete(${1:rewardXP}, ${2:maxVal}, ${3:row}, ${4:tableNumber}, ${5:challengeType}, ${6:itemIndex}, ${7:challengeIndex})"},
	{ "trigger": "CodeCallback_GunChallengeComplete\t#using scripts\\shared\\persistence_shared;", "contents": "persistence::CodeCallback_GunChallengeComplete(${1:rewardXP}, ${2:attachmentIndex}, ${3:itemIndex}, ${4:rankID}, ${5:isLastRank})"},
	{ "trigger": "check_contract_expirations\t#using scripts\\shared\\persistence_shared;", "contents": "persistence::check_contract_expirations()"},
	{ "trigger": "increment_contract_times\t#using scripts\\shared\\persistence_shared;", "contents": "persistence::increment_contract_times(${1:timeInc})"},
	{ "trigger": "add_contract_to_queue\t#using scripts\\shared\\persistence_shared;", "contents": "persistence::add_contract_to_queue(${1:index}, ${2:passed})"},
	{ "trigger": "upload_stats_soon\t#using scripts\\shared\\persistence_shared;", "contents": "persistence::upload_stats_soon()"},
	{ "trigger": "CodeCallback_OnAddPlayerStat\t#using scripts\\shared\\persistence_shared;", "contents": "persistence::CodeCallback_OnAddPlayerStat(${1:dataName}, ${2:value})"},
	{ "trigger": "CodeCallback_OnAddWeaponStat\t#using scripts\\shared\\persistence_shared;", "contents": "persistence::CodeCallback_OnAddWeaponStat(${1:weapon}, ${2:dataName}, ${3:value})"},
	{ "trigger": "process_contracts_on_add_stat\t#using scripts\\shared\\persistence_shared;", "contents": "persistence::process_contracts_on_add_stat(${1:statType}, ${2:dataName}, ${3:value}, ${4:weapon})"},
	{ "trigger": "combat_think\t#using scripts\\shared\\bots\\_bot_combat;", "contents": "bot_combat::combat_think()"},
	{ "trigger": "is_alive\t#using scripts\\shared\\bots\\_bot_combat;", "contents": "bot_combat::is_alive(${1:entity})"},
	{ "trigger": "get_bot_threats\t#using scripts\\shared\\bots\\_bot_combat;", "contents": "bot_combat::get_bot_threats(${1:maxDistance})"},
	{ "trigger": "get_ai_threats\t#using scripts\\shared\\bots\\_bot_combat;", "contents": "bot_combat::get_ai_threats()"},
	{ "trigger": "ignore_none\t#using scripts\\shared\\bots\\_bot_combat;", "contents": "bot_combat::ignore_none(${1:entity})"},
	{ "trigger": "ignore_non_sentient\t#using scripts\\shared\\bots\\_bot_combat;", "contents": "bot_combat::ignore_non_sentient(${1:entity})"},
	{ "trigger": "has_threat\t#using scripts\\shared\\bots\\_bot_combat;", "contents": "bot_combat::has_threat()"},
	{ "trigger": "threat_visible\t#using scripts\\shared\\bots\\_bot_combat;", "contents": "bot_combat::threat_visible()"},
	{ "trigger": "threat_is_alive\t#using scripts\\shared\\bots\\_bot_combat;", "contents": "bot_combat::threat_is_alive()"},
	{ "trigger": "set_threat\t#using scripts\\shared\\bots\\_bot_combat;", "contents": "bot_combat::set_threat(${1:entity})"},
	{ "trigger": "clear_threat\t#using scripts\\shared\\bots\\_bot_combat;", "contents": "bot_combat::clear_threat()"},
	{ "trigger": "update_threat\t#using scripts\\shared\\bots\\_bot_combat;", "contents": "bot_combat::update_threat(${1:newThreat})"},
	{ "trigger": "get_new_threat\t#using scripts\\shared\\bots\\_bot_combat;", "contents": "bot_combat::get_new_threat(${1:maxDistance})"},
	{ "trigger": "get_greatest_threat\t#using scripts\\shared\\bots\\_bot_combat;", "contents": "bot_combat::get_greatest_threat(${1:maxDistance})"},
	{ "trigger": "engage_threat\t#using scripts\\shared\\bots\\_bot_combat;", "contents": "bot_combat::engage_threat()"},
	{ "trigger": "update_threat_goal\t#using scripts\\shared\\bots\\_bot_combat;", "contents": "bot_combat::update_threat_goal()"},
	{ "trigger": "get_threat_goal_radius\t#using scripts\\shared\\bots\\_bot_combat;", "contents": "bot_combat::get_threat_goal_radius()"},
	{ "trigger": "fire_weapon\t#using scripts\\shared\\bots\\_bot_combat;", "contents": "bot_combat::fire_weapon()"},
	{ "trigger": "melee_attack\t#using scripts\\shared\\bots\\_bot_combat;", "contents": "bot_combat::melee_attack()"},
	{ "trigger": "chase_threat\t#using scripts\\shared\\bots\\_bot_combat;", "contents": "bot_combat::chase_threat()"},
	{ "trigger": "get_aim_offset\t#using scripts\\shared\\bots\\_bot_combat;", "contents": "bot_combat::get_aim_offset(${1:entity})"},
	{ "trigger": "update_weapon_aim\t#using scripts\\shared\\bots\\_bot_combat;", "contents": "bot_combat::update_weapon_aim()"},
	{ "trigger": "start_threat_aim\t#using scripts\\shared\\bots\\_bot_combat;", "contents": "bot_combat::start_threat_aim()"},
	{ "trigger": "angleError\t#using scripts\\shared\\bots\\_bot_combat;", "contents": "bot_combat::angleError(${1:angleMin}, ${2:angleMax})"},
	{ "trigger": "clear_threat_aim\t#using scripts\\shared\\bots\\_bot_combat;", "contents": "bot_combat::clear_threat_aim()"},
	{ "trigger": "bot_pre_combat\t#using scripts\\shared\\bots\\_bot_combat;", "contents": "bot_combat::bot_pre_combat()"},
	{ "trigger": "bot_post_combat\t#using scripts\\shared\\bots\\_bot_combat;", "contents": "bot_combat::bot_post_combat()"},
	{ "trigger": "update_weapon_ads\t#using scripts\\shared\\bots\\_bot_combat;", "contents": "bot_combat::update_weapon_ads()"},
	{ "trigger": "weapon_ads_dot\t#using scripts\\shared\\bots\\_bot_combat;", "contents": "bot_combat::weapon_ads_dot(${1:weapon})"},
	{ "trigger": "weapon_fire_dot\t#using scripts\\shared\\bots\\_bot_combat;", "contents": "bot_combat::weapon_fire_dot(${1:weapon})"},
	{ "trigger": "weapon_range\t#using scripts\\shared\\bots\\_bot_combat;", "contents": "bot_combat::weapon_range(${1:weapon})"},
	{ "trigger": "weapon_range_close\t#using scripts\\shared\\bots\\_bot_combat;", "contents": "bot_combat::weapon_range_close(${1:weapon})"},
	{ "trigger": "switch_weapon\t#using scripts\\shared\\bots\\_bot_combat;", "contents": "bot_combat::switch_weapon()"},
	{ "trigger": "threat_switch_weapon\t#using scripts\\shared\\bots\\_bot_combat;", "contents": "bot_combat::threat_switch_weapon()"},
	{ "trigger": "reload_weapon\t#using scripts\\shared\\bots\\_bot_combat;", "contents": "bot_combat::reload_weapon()"},
	{ "trigger": "weapon_clip_frac\t#using scripts\\shared\\bots\\_bot_combat;", "contents": "bot_combat::weapon_clip_frac(${1:weapon})"},
	{ "trigger": "throw_grenade\t#using scripts\\shared\\bots\\_bot_combat;", "contents": "bot_combat::throw_grenade(${1:weapon}, ${2:target})"},
	{ "trigger": "press_grenade_button\t#using scripts\\shared\\bots\\_bot_combat;", "contents": "bot_combat::press_grenade_button(${1:weapon})"},
	{ "trigger": "aim_grenade\t#using scripts\\shared\\bots\\_bot_combat;", "contents": "bot_combat::aim_grenade(${1:weapon}, ${2:target})"},
	{ "trigger": "will_hit_target\t#using scripts\\shared\\bots\\_bot_combat;", "contents": "bot_combat::will_hit_target(${1:weapon}, ${2:target})"},
	{ "trigger": "get_throw_velocity\t#using scripts\\shared\\bots\\_bot_combat;", "contents": "bot_combat::get_throw_velocity(${1:weapon})"},
	{ "trigger": "get_lethal_grenade\t#using scripts\\shared\\bots\\_bot_combat;", "contents": "bot_combat::get_lethal_grenade()"},
	{ "trigger": "wait_damage_loop\t#using scripts\\shared\\bots\\_bot_combat;", "contents": "bot_combat::wait_damage_loop()"},
	{ "trigger": "clear_damage\t#using scripts\\shared\\bots\\_bot_combat;", "contents": "bot_combat::clear_damage()"},
	{ "trigger": "combat_strafe\t#using scripts\\shared\\bots\\_bot_combat;", "contents": "bot_combat::combat_strafe(${1:radiusMin}, ${2:radiusMax}, ${3:spacing}, ${4:sideDotMin}, ${5:sideDotMax})"},
	{ "trigger": "on_player_connect\t#using scripts\\shared\\abilities\\_ability_power;", "contents": "ability_power::on_player_connect()"},
	{ "trigger": "power_is_hero_ability\t#using scripts\\shared\\abilities\\_ability_power;", "contents": "ability_power::power_is_hero_ability(${1:gadget})"},
	{ "trigger": "is_weapon_or_variant_same_as_gadget\t#using scripts\\shared\\abilities\\_ability_power;", "contents": "ability_power::is_weapon_or_variant_same_as_gadget(${1:weapon}, ${2:gadget})"},
	{ "trigger": "power_gain_event_score\t#using scripts\\shared\\abilities\\_ability_power;", "contents": "ability_power::power_gain_event_score(${1:eAttacker}, ${2:score}, ${3:weapon}, ${4:hero_restricted})"},
	{ "trigger": "power_gain_event_damage_actor\t#using scripts\\shared\\abilities\\_ability_power;", "contents": "ability_power::power_gain_event_damage_actor(${1:eAttacker})"},
	{ "trigger": "power_gain_event_killed_actor\t#using scripts\\shared\\abilities\\_ability_power;", "contents": "ability_power::power_gain_event_killed_actor(${1:eAttacker}, ${2:meansOfDeath})"},
	{ "trigger": "power_gain_event\t#using scripts\\shared\\abilities\\_ability_power;", "contents": "ability_power::power_gain_event(${1:slot}, ${2:eAttacker}, ${3:val}, ${4:source})"},
	{ "trigger": "power_loss_event_took_damage\t#using scripts\\shared\\abilities\\_ability_power;", "contents": "ability_power::power_loss_event_took_damage(${1:eAttacker}, ${2:eInflictor}, ${3:weapon}, ${4:sMeansOfDeath}, ${5:iDamage})"},
	{ "trigger": "power_loss_event\t#using scripts\\shared\\abilities\\_ability_power;", "contents": "ability_power::power_loss_event(${1:slot}, ${2:eAttacker}, ${3:val}, ${4:source})"},
	{ "trigger": "power_drain_completely\t#using scripts\\shared\\abilities\\_ability_power;", "contents": "ability_power::power_drain_completely(${1:slot})"},
	{ "trigger": "IsMovingPowerloss\t#using scripts\\shared\\abilities\\_ability_power;", "contents": "ability_power::IsMovingPowerloss()"},
	{ "trigger": "power_consume_timer_think\t#using scripts\\shared\\abilities\\_ability_power;", "contents": "ability_power::power_consume_timer_think(${1:slot}, ${2:weapon})"},
	{ "trigger": "update_players_stats_at_match_end\t#using scripts\\zm\\_zm_stats;", "contents": "zm_stats::update_players_stats_at_match_end(${1:players})"},
	{ "trigger": "update_playing_utc_time\t#using scripts\\zm\\_zm_stats;", "contents": "zm_stats::update_playing_utc_time(${1:matchEndUTCTime})"},
	{ "trigger": "survival_classic_custom_stat_update\t#using scripts\\zm\\_zm_stats;", "contents": "zm_stats::survival_classic_custom_stat_update()"},
	{ "trigger": "grief_custom_stat_update\t#using scripts\\zm\\_zm_stats;", "contents": "zm_stats::grief_custom_stat_update()"},
	{ "trigger": "get_global_stat\t#using scripts\\zm\\_zm_stats;", "contents": "zm_stats::get_global_stat(${1:stat_name})"},
	{ "trigger": "set_global_stat\t#using scripts\\zm\\_zm_stats;", "contents": "zm_stats::set_global_stat(${1:stat_name}, ${2:value})"},
	{ "trigger": "add_global_stat\t#using scripts\\zm\\_zm_stats;", "contents": "zm_stats::add_global_stat(${1:stat_name}, ${2:value})"},
	{ "trigger": "increment_global_stat\t#using scripts\\zm\\_zm_stats;", "contents": "zm_stats::increment_global_stat(${1:stat_name})"},
	{ "trigger": "highwater_global_stat\t#using scripts\\zm\\_zm_stats;", "contents": "zm_stats::highwater_global_stat(${1:stat_name}, ${2:value})"},
	{ "trigger": "add_client_stat\t#using scripts\\zm\\_zm_stats;", "contents": "zm_stats::add_client_stat(${1:stat_name}, ${2:stat_value}, ${3:include_gametype})"},
	{ "trigger": "increment_player_stat\t#using scripts\\zm\\_zm_stats;", "contents": "zm_stats::increment_player_stat(${1:stat_name})"},
	{ "trigger": "increment_root_stat\t#using scripts\\zm\\_zm_stats;", "contents": "zm_stats::increment_root_stat(${1:stat_name}, ${2:stat_value})"},
	{ "trigger": "increment_client_stat\t#using scripts\\zm\\_zm_stats;", "contents": "zm_stats::increment_client_stat(${1:stat_name}, ${2:include_gametype})"},
	{ "trigger": "set_client_stat\t#using scripts\\zm\\_zm_stats;", "contents": "zm_stats::set_client_stat(${1:stat_name}, ${2:stat_value}, ${3:include_gametype})"},
	{ "trigger": "zero_client_stat\t#using scripts\\zm\\_zm_stats;", "contents": "zm_stats::zero_client_stat(${1:stat_name}, ${2:include_gametype})"},
	{ "trigger": "get_map_stat\t#using scripts\\zm\\_zm_stats;", "contents": "zm_stats::get_map_stat(${1:stat_name})"},
	{ "trigger": "set_map_stat\t#using scripts\\zm\\_zm_stats;", "contents": "zm_stats::set_map_stat(${1:stat_name}, ${2:value})"},
	{ "trigger": "add_map_stat\t#using scripts\\zm\\_zm_stats;", "contents": "zm_stats::add_map_stat(${1:stat_name}, ${2:value})"},
	{ "trigger": "increment_map_stat\t#using scripts\\zm\\_zm_stats;", "contents": "zm_stats::increment_map_stat(${1:stat_name})"},
	{ "trigger": "highwater_map_stat\t#using scripts\\zm\\_zm_stats;", "contents": "zm_stats::highwater_map_stat(${1:stat_name}, ${2:value})"},
	{ "trigger": "increment_map_cheat_stat\t#using scripts\\zm\\_zm_stats;", "contents": "zm_stats::increment_map_cheat_stat(${1:stat_name})"},
	{ "trigger": "increment_challenge_stat\t#using scripts\\zm\\_zm_stats;", "contents": "zm_stats::increment_challenge_stat(${1:stat_name}, ${2:amount = 1})"},
	{ "trigger": "get_stat_distance_traveled\t#using scripts\\zm\\_zm_stats;", "contents": "zm_stats::get_stat_distance_traveled()"},
	{ "trigger": "get_stat_round_number\t#using scripts\\zm\\_zm_stats;", "contents": "zm_stats::get_stat_round_number()"},
	{ "trigger": "get_stat_combined_rank_value_survival_classic\t#using scripts\\zm\\_zm_stats;", "contents": "zm_stats::get_stat_combined_rank_value_survival_classic()"},
	{ "trigger": "update_global_counters_on_match_end\t#using scripts\\zm\\_zm_stats;", "contents": "zm_stats::update_global_counters_on_match_end()"},
	{ "trigger": "get_specific_stat\t#using scripts\\zm\\_zm_stats;", "contents": "zm_stats::get_specific_stat(${1:stat_category}, ${2:stat_name})"},
	{ "trigger": "adjustRecentStats\t#using scripts\\zm\\_zm_stats;", "contents": "zm_stats::adjustRecentStats()"},
	{ "trigger": "uploadStatsSoon\t#using scripts\\zm\\_zm_stats;", "contents": "zm_stats::uploadStatsSoon()"},
	{ "trigger": "createScramblerWatcher\t#using scripts\\shared\\weapons\\_scrambler;", "contents": "scrambler::createScramblerWatcher()"},
	{ "trigger": "onSpawnScrambler\t#using scripts\\shared\\weapons\\_scrambler; self == scrambler", "contents": "scrambler::onSpawnScrambler(${1:watcher}, ${2:player})"},
	{ "trigger": "scramblerDetonate\t#using scripts\\shared\\weapons\\_scrambler;", "contents": "scrambler::scramblerDetonate(${1:attacker}, ${2:weapon}, ${3:target})"},
	{ "trigger": "watchShutdown\t#using scripts\\shared\\weapons\\_scrambler;", "contents": "scrambler::watchShutdown(${1:player})"},
	{ "trigger": "destroyEnt\t#using scripts\\shared\\weapons\\_scrambler;", "contents": "scrambler::destroyEnt()"},
	{ "trigger": "watchScramblerDamage\t#using scripts\\shared\\weapons\\_scrambler; self == scrambler", "contents": "scrambler::watchScramblerDamage(${1:watcher})"},
	{ "trigger": "ownerSameTeam\t#using scripts\\shared\\weapons\\_scrambler;", "contents": "scrambler::ownerSameTeam(${1:owner1}, ${2:owner2})"},
	{ "trigger": "checkScramblerStun\t#using scripts\\shared\\weapons\\_scrambler;", "contents": "scrambler::checkScramblerStun()"},
	{ "trigger": "enable_quick_revive_perk_for_level\t#using scripts\\zm\\_zm_perk_quick_revive;", "contents": "zm_perk_quick_revive::enable_quick_revive_perk_for_level()"},
	{ "trigger": "quick_revive_precache\t#using scripts\\zm\\_zm_perk_quick_revive;", "contents": "zm_perk_quick_revive::quick_revive_precache()"},
	{ "trigger": "quick_revive_register_clientfield\t#using scripts\\zm\\_zm_perk_quick_revive;", "contents": "zm_perk_quick_revive::quick_revive_register_clientfield()"},
	{ "trigger": "quick_revive_set_clientfield\t#using scripts\\zm\\_zm_perk_quick_revive;", "contents": "zm_perk_quick_revive::quick_revive_set_clientfield(${1:state})"},
	{ "trigger": "quick_revive_perk_machine_setup\t#using scripts\\zm\\_zm_perk_quick_revive;", "contents": "zm_perk_quick_revive::quick_revive_perk_machine_setup(${1:use_trigger}, ${2:perk_machine}, ${3:bump_trigger}, ${4:collision})"},
	{ "trigger": "revive_cost_override\t#using scripts\\zm\\_zm_perk_quick_revive;", "contents": "zm_perk_quick_revive::revive_cost_override()"},
	{ "trigger": "turn_revive_on\t#using scripts\\zm\\_zm_perk_quick_revive;", "contents": "zm_perk_quick_revive::turn_revive_on()"},
	{ "trigger": "reenable_quickrevive\t#using scripts\\zm\\_zm_perk_quick_revive;", "contents": "zm_perk_quick_revive::reenable_quickrevive(${1:machine_clip}, ${2:solo_mode})"},
	{ "trigger": "update_quick_revive\t#using scripts\\zm\\_zm_perk_quick_revive;", "contents": "zm_perk_quick_revive::update_quick_revive(${1:solo_mode})"},
	{ "trigger": "check_quickrevive_for_hotjoin\t#using scripts\\zm\\_zm_perk_quick_revive;", "contents": "zm_perk_quick_revive::check_quickrevive_for_hotjoin()"},
	{ "trigger": "revive_solo_fx\t#using scripts\\zm\\_zm_perk_quick_revive;", "contents": "zm_perk_quick_revive::revive_solo_fx(${1:machine_clip}, ${2:blocker_model})"},
	{ "trigger": "disable_quickrevive\t#using scripts\\zm\\_zm_perk_quick_revive;", "contents": "zm_perk_quick_revive::disable_quickrevive(${1:machine_clip})"},
	{ "trigger": "unhide_quickrevive\t#using scripts\\zm\\_zm_perk_quick_revive;", "contents": "zm_perk_quick_revive::unhide_quickrevive()"},
	{ "trigger": "restart_quickrevive\t#using scripts\\zm\\_zm_perk_quick_revive;", "contents": "zm_perk_quick_revive::restart_quickrevive()"},
	{ "trigger": "update_quickrevive_power_state\t#using scripts\\zm\\_zm_perk_quick_revive;", "contents": "zm_perk_quick_revive::update_quickrevive_power_state(${1:poweron})"},
	{ "trigger": "solo_revive_buy_trigger_move\t#using scripts\\zm\\_zm_perk_quick_revive;", "contents": "zm_perk_quick_revive::solo_revive_buy_trigger_move(${1:revive_trigger_noteworthy})"},
	{ "trigger": "solo_revive_buy_trigger_move_trigger\t#using scripts\\zm\\_zm_perk_quick_revive;", "contents": "zm_perk_quick_revive::solo_revive_buy_trigger_move_trigger(${1:revive_perk_trigger})"},
	{ "trigger": "give_quick_revive_perk\t#using scripts\\zm\\_zm_perk_quick_revive;", "contents": "zm_perk_quick_revive::give_quick_revive_perk()"},
	{ "trigger": "take_quick_revive_perk\t#using scripts\\zm\\_zm_perk_quick_revive;", "contents": "zm_perk_quick_revive::take_quick_revive_perk(${1:b_pause}, ${2:str_perk}, ${3:str_result})"},
	{ "trigger": "Callback_ActorSpawned\t#using scripts\\zm\\gametypes\\_globallogic_actor;", "contents": "globallogic_actor::Callback_ActorSpawned(${1:spawner})"},
	{ "trigger": "Callback_ActorDamage\t#using scripts\\zm\\gametypes\\_globallogic_actor;", "contents": "globallogic_actor::Callback_ActorDamage(${1:eInflictor}, ${2:eAttacker}, ${3:iDamage}, ${4:iDFlags}, ${5:sMeansOfDeath}, ${6:weapon}, ${7:vPoint}, ${8:vDir}, ${9:sHitLoc}, ${10:vDamageOrigin}, ${11:psOffsetTime}, ${12:boneIndex}, ${13:modelIndex}, ${14:surfaceType}, ${15:vSurfaceNormal})"},
	{ "trigger": "Callback_ActorKilled\t#using scripts\\zm\\gametypes\\_globallogic_actor;", "contents": "globallogic_actor::Callback_ActorKilled(${1:eInflictor}, ${2:attacker}, ${3:iDamage}, ${4:sMeansOfDeath}, ${5:weapon}, ${6:vDir}, ${7:sHitLoc}, ${8:psOffsetTime})"},
	{ "trigger": "Callback_ActorCloned\t#using scripts\\zm\\gametypes\\_globallogic_actor;", "contents": "globallogic_actor::Callback_ActorCloned(${1:original})"},
	{ "trigger": "defaultRole\t#using scripts\\shared\\vehicles\\_amws;", "contents": "amws::defaultRole()"},
	{ "trigger": "state_death_update\t#using scripts\\shared\\vehicles\\_amws;", "contents": "amws::state_death_update(${1:params})"},
	{ "trigger": "death_suicide_crash\t#using scripts\\shared\\vehicles\\_amws;", "contents": "amws::death_suicide_crash(${1:params})"},
	{ "trigger": "state_driving_update\t#using scripts\\shared\\vehicles\\_amws;", "contents": "amws::state_driving_update(${1:params})"},
	{ "trigger": "cobra_raise\t#using scripts\\shared\\vehicles\\_amws;", "contents": "amws::cobra_raise()"},
	{ "trigger": "cobra_retract\t#using scripts\\shared\\vehicles\\_amws;", "contents": "amws::cobra_retract()"},
	{ "trigger": "state_emped_update\t#using scripts\\shared\\vehicles\\_amws;", "contents": "amws::state_emped_update(${1:params})"},
	{ "trigger": "state_surge_update\t#using scripts\\shared\\vehicles\\_amws;", "contents": "amws::state_surge_update(${1:params})"},
	{ "trigger": "state_surge_exit\t#using scripts\\shared\\vehicles\\_amws;", "contents": "amws::state_surge_exit(${1:params})"},
	{ "trigger": "state_stationary_enter\t#using scripts\\shared\\vehicles\\_amws;", "contents": "amws::state_stationary_enter(${1:params})"},
	{ "trigger": "state_stationary_update\t#using scripts\\shared\\vehicles\\_amws;", "contents": "amws::state_stationary_update(${1:params})"},
	{ "trigger": "state_stationary_update_wait\t#using scripts\\shared\\vehicles\\_amws; self == sentient", "contents": "amws::state_stationary_update_wait(${1:wait_time})"},
	{ "trigger": "state_stationary_exit\t#using scripts\\shared\\vehicles\\_amws;", "contents": "amws::state_stationary_exit(${1:params})"},
	{ "trigger": "state_combat_enter\t#using scripts\\shared\\vehicles\\_amws;", "contents": "amws::state_combat_enter(${1:params})"},
	{ "trigger": "is_ai_using_minigun\t#using scripts\\shared\\vehicles\\_amws;", "contents": "amws::is_ai_using_minigun()"},
	{ "trigger": "turretFireUpdate\t#using scripts\\shared\\vehicles\\_amws;", "contents": "amws::turretFireUpdate()"},
	{ "trigger": "state_combat_update\t#using scripts\\shared\\vehicles\\_amws;", "contents": "amws::state_combat_update(${1:params})"},
	{ "trigger": "aim_and_fire_rocket_launcher\t#using scripts\\shared\\vehicles\\_amws; self == amws", "contents": "amws::aim_and_fire_rocket_launcher(${1:aim_time})"},
	{ "trigger": "state_combat_update_wait\t#using scripts\\shared\\vehicles\\_amws; self == sentient", "contents": "amws::state_combat_update_wait(${1:wait_time})"},
	{ "trigger": "waittill_weapon_lock_or_timeout\t#using scripts\\shared\\vehicles\\_amws; self == sentient", "contents": "amws::waittill_weapon_lock_or_timeout(${1:wait_time})"},
	{ "trigger": "wait_evasion_reaction_time\t#using scripts\\shared\\vehicles\\_amws; self == vehicle with setting", "contents": "amws::wait_evasion_reaction_time()"},
	{ "trigger": "FireRocketLauncher\t#using scripts\\shared\\vehicles\\_amws;", "contents": "amws::FireRocketLauncher(${1:enemy})"},
	{ "trigger": "GetNextMovePosition_wander\t#using scripts\\shared\\vehicles\\_amws; no self.enemy", "contents": "amws::GetNextMovePosition_wander()"},
	{ "trigger": "GetNextMovePosition_evasive\t#using scripts\\shared\\vehicles\\_amws;", "contents": "amws::GetNextMovePosition_evasive(${1:client_flags})"},
	{ "trigger": "GetNextMovePosition_tactical\t#using scripts\\shared\\vehicles\\_amws;", "contents": "amws::GetNextMovePosition_tactical(${1:enemy})"},
	{ "trigger": "path_update_interrupt_by_attacker\t#using scripts\\shared\\vehicles\\_amws; self == vehicle", "contents": "amws::path_update_interrupt_by_attacker()"},
	{ "trigger": "path_update_interrupt\t#using scripts\\shared\\vehicles\\_amws;", "contents": "amws::path_update_interrupt()"},
	{ "trigger": "gib\t#using scripts\\shared\\vehicles\\_amws;", "contents": "amws::gib(${1:attacker})"},
	{ "trigger": "drone_callback_damage\t#using scripts\\shared\\vehicles\\_amws;", "contents": "amws::drone_callback_damage(${1:eInflictor}, ${2:eAttacker}, ${3:iDamage}, ${4:iDFlags}, ${5:sMeansOfDeath}, ${6:weapon}, ${7:vPoint}, ${8:vDir}, ${9:sHitLoc}, ${10:vDamageOrigin}, ${11:psOffsetTime}, ${12:damageFromUnderneath}, ${13:modelIndex}, ${14:partName}, ${15:vSurfaceNormal})"},
	{ "trigger": "RegisterBlackBoardAttribute\t#using scripts\\shared\\ai\\systems\\blackboard;", "contents": "Blackboard::RegisterBlackBoardAttribute(${1:entity}, ${2:attributeName}, ${3:defaultAttributeValue}, ${4:getterFunction})"},
	{ "trigger": "SetBlackBoardAttribute\t#using scripts\\shared\\ai\\systems\\blackboard;", "contents": "Blackboard::SetBlackBoardAttribute(${1:entity}, ${2:attributeName}, ${3:attributeValue})"},
	{ "trigger": "CreateBlackBoardForEntity\t#using scripts\\shared\\ai\\systems\\blackboard;", "contents": "Blackboard::CreateBlackBoardForEntity(${1:entity})"},
	{ "trigger": "RegisterVehicleBlackBoardAttributes\t#using scripts\\shared\\ai\\blackboard_vehicle;", "contents": "Blackboard::RegisterVehicleBlackBoardAttributes()"},
	{ "trigger": "on_damage\t#using scripts\\zm\\gametypes\\_shellshock;", "contents": "shellshock::on_damage(${1:cause}, ${2:damage}, ${3:weapon})"},
	{ "trigger": "endOnDeath\t#using scripts\\zm\\gametypes\\_shellshock;", "contents": "shellshock::endOnDeath()"},
	{ "trigger": "endOnTimer\t#using scripts\\zm\\gametypes\\_shellshock;", "contents": "shellshock::endOnTimer(${1:timer})"},
	{ "trigger": "rcbomb_earthQuake\t#using scripts\\zm\\gametypes\\_shellshock;", "contents": "shellshock::rcbomb_earthQuake(${1:position})"},
	{ "trigger": "gadget_exo_breakdown_is_inuse\t#using scripts\\shared\\abilities\\gadgets\\_gadget_exo_breakdown;", "contents": "_gadget_exo_breakdown::gadget_exo_breakdown_is_inuse(${1:slot})"},
	{ "trigger": "gadget_exo_breakdown_is_flickering\t#using scripts\\shared\\abilities\\gadgets\\_gadget_exo_breakdown;", "contents": "_gadget_exo_breakdown::gadget_exo_breakdown_is_flickering(${1:slot})"},
	{ "trigger": "gadget_exo_breakdown_on_flicker\t#using scripts\\shared\\abilities\\gadgets\\_gadget_exo_breakdown;", "contents": "_gadget_exo_breakdown::gadget_exo_breakdown_on_flicker(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_exo_breakdown_on_give\t#using scripts\\shared\\abilities\\gadgets\\_gadget_exo_breakdown;", "contents": "_gadget_exo_breakdown::gadget_exo_breakdown_on_give(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_exo_breakdown_on_take\t#using scripts\\shared\\abilities\\gadgets\\_gadget_exo_breakdown;", "contents": "_gadget_exo_breakdown::gadget_exo_breakdown_on_take(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_exo_breakdown_on_connect\t#using scripts\\shared\\abilities\\gadgets\\_gadget_exo_breakdown;", "contents": "_gadget_exo_breakdown::gadget_exo_breakdown_on_connect()"},
	{ "trigger": "gadget_exo_breakdown_on\t#using scripts\\shared\\abilities\\gadgets\\_gadget_exo_breakdown;", "contents": "_gadget_exo_breakdown::gadget_exo_breakdown_on(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_exo_breakdown_off\t#using scripts\\shared\\abilities\\gadgets\\_gadget_exo_breakdown;", "contents": "_gadget_exo_breakdown::gadget_exo_breakdown_off(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_exo_breakdown_is_primed\t#using scripts\\shared\\abilities\\gadgets\\_gadget_exo_breakdown;", "contents": "_gadget_exo_breakdown::gadget_exo_breakdown_is_primed(${1:slot}, ${2:weapon})"},
	{ "trigger": "pad_manager\t#using scripts\\zm\\zm_giant_teleporter;", "contents": "zm_giant_teleporter::pad_manager()"},
	{ "trigger": "teleport_pad_think\t#using scripts\\zm\\zm_giant_teleporter;", "contents": "zm_giant_teleporter::teleport_pad_think(${1:index})"},
	{ "trigger": "teleport_pad_countdown\t#using scripts\\zm\\zm_giant_teleporter;", "contents": "zm_giant_teleporter::teleport_pad_countdown(${1:index}, ${2:time})"},
	{ "trigger": "sndCountdown\t#using scripts\\zm\\zm_giant_teleporter;", "contents": "zm_giant_teleporter::sndCountdown()"},
	{ "trigger": "clock_timer\t#using scripts\\zm\\zm_giant_teleporter;", "contents": "zm_giant_teleporter::clock_timer()"},
	{ "trigger": "teleport_pad_active_think\t#using scripts\\zm\\zm_giant_teleporter;", "contents": "zm_giant_teleporter::teleport_pad_active_think(${1:index})"},
	{ "trigger": "player_teleporting\t#using scripts\\zm\\zm_giant_teleporter;", "contents": "zm_giant_teleporter::player_teleporting(${1:index})"},
	{ "trigger": "teleport_trigger_invisible\t#using scripts\\zm\\zm_giant_teleporter;", "contents": "zm_giant_teleporter::teleport_trigger_invisible(${1:enable})"},
	{ "trigger": "player_is_near_pad\t#using scripts\\zm\\zm_giant_teleporter;", "contents": "zm_giant_teleporter::player_is_near_pad(${1:player})"},
	{ "trigger": "teleport_pad_player_fx\t#using scripts\\zm\\zm_giant_teleporter;", "contents": "zm_giant_teleporter::teleport_pad_player_fx(${1:duration})"},
	{ "trigger": "teleport_players\t#using scripts\\zm\\zm_giant_teleporter;", "contents": "zm_giant_teleporter::teleport_players()"},
	{ "trigger": "teleport_core_hint_update\t#using scripts\\zm\\zm_giant_teleporter;", "contents": "zm_giant_teleporter::teleport_core_hint_update()"},
	{ "trigger": "teleport_core_think\t#using scripts\\zm\\zm_giant_teleporter;", "contents": "zm_giant_teleporter::teleport_core_think()"},
	{ "trigger": "stop_countdown\t#using scripts\\zm\\zm_giant_teleporter;", "contents": "zm_giant_teleporter::stop_countdown()"},
	{ "trigger": "teleport_pads_are_active\t#using scripts\\zm\\zm_giant_teleporter;", "contents": "zm_giant_teleporter::teleport_pads_are_active()"},
	{ "trigger": "teleport_2d_audio\t#using scripts\\zm\\zm_giant_teleporter;", "contents": "zm_giant_teleporter::teleport_2d_audio()"},
	{ "trigger": "teleport_nuke\t#using scripts\\zm\\zm_giant_teleporter;", "contents": "zm_giant_teleporter::teleport_nuke(${1:max_zombies}, ${2:range})"},
	{ "trigger": "teleporter_vo\t#using scripts\\zm\\zm_giant_teleporter;", "contents": "zm_giant_teleporter::teleporter_vo(${1:tele_vo_type}, ${2:location})"},
	{ "trigger": "teleporter_vo_play\t#using scripts\\zm\\zm_giant_teleporter;", "contents": "zm_giant_teleporter::teleporter_vo_play(${1:vox_type}, ${2:pre_wait})"},
	{ "trigger": "play_tele_help_vox\t#using scripts\\zm\\zm_giant_teleporter;", "contents": "zm_giant_teleporter::play_tele_help_vox()"},
	{ "trigger": "play_packa_see_vox\t#using scripts\\zm\\zm_giant_teleporter;", "contents": "zm_giant_teleporter::play_packa_see_vox()"},
	{ "trigger": "teleporter_wire_wait\t#using scripts\\zm\\zm_giant_teleporter;", "contents": "zm_giant_teleporter::teleporter_wire_wait(${1:index})"},
	{ "trigger": "teleport_aftereffects\t#using scripts\\zm\\zm_giant_teleporter;", "contents": "zm_giant_teleporter::teleport_aftereffects()"},
	{ "trigger": "teleport_aftereffect_shellshock\t#using scripts\\zm\\zm_giant_teleporter;", "contents": "zm_giant_teleporter::teleport_aftereffect_shellshock()"},
	{ "trigger": "teleport_aftereffect_shellshock_electric\t#using scripts\\zm\\zm_giant_teleporter;", "contents": "zm_giant_teleporter::teleport_aftereffect_shellshock_electric()"},
	{ "trigger": "teleport_aftereffect_fov\t#using scripts\\zm\\zm_giant_teleporter;", "contents": "zm_giant_teleporter::teleport_aftereffect_fov()"},
	{ "trigger": "teleport_aftereffect_bw_vision\t#using scripts\\zm\\zm_giant_teleporter;", "contents": "zm_giant_teleporter::teleport_aftereffect_bw_vision(${1:localClientNum})"},
	{ "trigger": "teleport_aftereffect_red_vision\t#using scripts\\zm\\zm_giant_teleporter;", "contents": "zm_giant_teleporter::teleport_aftereffect_red_vision(${1:localClientNum})"},
	{ "trigger": "teleport_aftereffect_flashy_vision\t#using scripts\\zm\\zm_giant_teleporter;", "contents": "zm_giant_teleporter::teleport_aftereffect_flashy_vision(${1:localClientNum})"},
	{ "trigger": "teleport_aftereffect_flare_vision\t#using scripts\\zm\\zm_giant_teleporter;", "contents": "zm_giant_teleporter::teleport_aftereffect_flare_vision(${1:localClientNum})"},
	{ "trigger": "packa_door_reminder\t#using scripts\\zm\\zm_giant_teleporter;", "contents": "zm_giant_teleporter::packa_door_reminder()"},
	{ "trigger": "dog_blocker_clip\t#using scripts\\zm\\zm_giant_teleporter;", "contents": "zm_giant_teleporter::dog_blocker_clip()"},
	{ "trigger": "result\t#using scripts\\zm\\aats\\_zm_aat_fire_works;", "contents": "zm_aat_fire_works::result(${1:death}, ${2:attacker}, ${3:mod}, ${4:weapon})"},
	{ "trigger": "fire_works_zombie_validation\t#using scripts\\zm\\aats\\_zm_aat_fire_works;", "contents": "zm_aat_fire_works::fire_works_zombie_validation()"},
	{ "trigger": "fire_works_summon\t#using scripts\\zm\\aats\\_zm_aat_fire_works;", "contents": "zm_aat_fire_works::fire_works_summon(${1:e_player}, ${2:w_weapon})"},
	{ "trigger": "zm_aat_fire_works_get_target\t#using scripts\\zm\\aats\\_zm_aat_fire_works;", "contents": "zm_aat_fire_works::zm_aat_fire_works_get_target()"},
	{ "trigger": "zm_aat_fire_works_zombie_damage_response\t#using scripts\\zm\\aats\\_zm_aat_fire_works;", "contents": "zm_aat_fire_works::zm_aat_fire_works_zombie_damage_response(${1:str_mod}, ${2:str_hit_location}, ${3:v_hit_origin}, ${4:e_attacker}, ${5:n_amount}, ${6:w_weapon}, ${7:direction_vec}, ${8:tagName}, ${9:modelName}, ${10:partName}, ${11:dFlags}, ${12:inflictor}, ${13:chargeLevel})"},
	{ "trigger": "zm_aat_fire_works_death_callback\t#using scripts\\zm\\aats\\_zm_aat_fire_works;", "contents": "zm_aat_fire_works::zm_aat_fire_works_death_callback(${1:attacker})"},
	{ "trigger": "zombie_death_gib\t#using scripts\\zm\\aats\\_zm_aat_fire_works;", "contents": "zm_aat_fire_works::zombie_death_gib(${1:e_attacker}, ${2:w_weapon}, ${3:e_owner})"},
	{ "trigger": "zone_is_enabled\t#using scripts\\zm\\_zm_zonemgr;", "contents": "zm_zonemgr::zone_is_enabled(${1:zone_name})"},
	{ "trigger": "zone_wait_till_enabled\t#using scripts\\zm\\_zm_zonemgr;", "contents": "zm_zonemgr::zone_wait_till_enabled(${1:zone_name})"},
	{ "trigger": "get_player_zone\t#using scripts\\zm\\_zm_zonemgr;", "contents": "zm_zonemgr::get_player_zone()"},
	{ "trigger": "get_zone_from_position\t#using scripts\\zm\\_zm_zonemgr;", "contents": "zm_zonemgr::get_zone_from_position(${1:v_pos}, ${2:ignore_enabled_check})"},
	{ "trigger": "get_zone_magic_boxes\t#using scripts\\zm\\_zm_zonemgr;", "contents": "zm_zonemgr::get_zone_magic_boxes(${1:zone_name})"},
	{ "trigger": "get_zone_zbarriers\t#using scripts\\zm\\_zm_zonemgr;", "contents": "zm_zonemgr::get_zone_zbarriers(${1:zone_name})"},
	{ "trigger": "get_players_in_zone\t#using scripts\\zm\\_zm_zonemgr;", "contents": "zm_zonemgr::get_players_in_zone(${1:zone_name}, ${2:return_players})"},
	{ "trigger": "any_player_in_zone\t#using scripts\\zm\\_zm_zonemgr;", "contents": "zm_zonemgr::any_player_in_zone(${1:zone_name})"},
	{ "trigger": "entity_in_zone\t#using scripts\\zm\\_zm_zonemgr;", "contents": "zm_zonemgr::entity_in_zone(${1:zone_name}, ${2:ignore_enabled_check = false})"},
	{ "trigger": "entity_in_active_zone\t#using scripts\\zm\\_zm_zonemgr;", "contents": "zm_zonemgr::entity_in_active_zone(${1:ignore_enabled_check = false})"},
	{ "trigger": "enable_zone\t#using scripts\\zm\\_zm_zonemgr;", "contents": "zm_zonemgr::enable_zone(${1:zone_name})"},
	{ "trigger": "add_zone_flags\t#using scripts\\zm\\_zm_zonemgr;", "contents": "zm_zonemgr::add_zone_flags(${1:wait_flag}, ${2:add_flags})"},
	{ "trigger": "add_adjacent_zone\t#using scripts\\zm\\_zm_zonemgr;", "contents": "zm_zonemgr::add_adjacent_zone(${1:zone_name_a}, ${2:zone_name_b}, ${3:flag_name}, ${4:one_way}, ${5:zone_tag_a}, ${6:zone_tag_b})"},
	{ "trigger": "setup_zone_flag_waits\t#using scripts\\zm\\_zm_zonemgr;", "contents": "zm_zonemgr::setup_zone_flag_waits()"},
	{ "trigger": "wait_zone_flags_updating\t#using scripts\\zm\\_zm_zonemgr;", "contents": "zm_zonemgr::wait_zone_flags_updating()"},
	{ "trigger": "zone_flag_wait_throttle\t#using scripts\\zm\\_zm_zonemgr;", "contents": "zm_zonemgr::zone_flag_wait_throttle()"},
	{ "trigger": "zone_flag_wait\t#using scripts\\zm\\_zm_zonemgr;", "contents": "zm_zonemgr::zone_flag_wait(${1:flag_name})"},
	{ "trigger": "door_close_disconnect\t#using scripts\\zm\\_zm_zonemgr;", "contents": "zm_zonemgr::door_close_disconnect(${1:flag_name})"},
	{ "trigger": "connect_zones\t#using scripts\\zm\\_zm_zonemgr;", "contents": "zm_zonemgr::connect_zones(${1:zone_name_a}, ${2:zone_name_b}, ${3:one_way})"},
	{ "trigger": "create_spawner_list\t#using scripts\\zm\\_zm_zonemgr;", "contents": "zm_zonemgr::create_spawner_list(${1:zkeys})"},
	{ "trigger": "get_active_zone_names\t#using scripts\\zm\\_zm_zonemgr;", "contents": "zm_zonemgr::get_active_zone_names()"},
	{ "trigger": "get_active_zones_entities\t#using scripts\\zm\\_zm_zonemgr;", "contents": "zm_zonemgr::get_active_zones_entities()"},
	{ "trigger": "_destroy_debug_zones\t#using scripts\\zm\\_zm_zonemgr;", "contents": "zm_zonemgr::_destroy_debug_zones()"},
	{ "trigger": "_debug_show_zone\t#using scripts\\zm\\_zm_zonemgr;", "contents": "zm_zonemgr::_debug_show_zone(${1:zone}, ${2:color}, ${3:alpha})"},
	{ "trigger": "_debug_zones\t#using scripts\\zm\\_zm_zonemgr;", "contents": "zm_zonemgr::_debug_zones()"},
	{ "trigger": "jump_pad_player_variables\t#using scripts\\zm\\_zm_jump_pad;", "contents": "zm_jump_pad::jump_pad_player_variables()"},
	{ "trigger": "jump_pad_think\t#using scripts\\zm\\_zm_jump_pad;", "contents": "zm_jump_pad::jump_pad_think()"},
	{ "trigger": "jump_pad_start\t#using scripts\\zm\\_zm_jump_pad;", "contents": "zm_jump_pad::jump_pad_start(${1:ent_player}, ${2:endon_condition})"},
	{ "trigger": "jump_pad_cancel\t#using scripts\\zm\\_zm_jump_pad;", "contents": "zm_jump_pad::jump_pad_cancel(${1:ent_player})"},
	{ "trigger": "jump_pad_move\t#using scripts\\zm\\_zm_jump_pad;", "contents": "zm_jump_pad::jump_pad_move(${1:vec_direction}, ${2:flt_time}, ${3:struct_poi}, ${4:trigger})"},
	{ "trigger": "disconnect_failsafe_pad_poi_clean\t#using scripts\\zm\\_zm_jump_pad;", "contents": "zm_jump_pad::disconnect_failsafe_pad_poi_clean()"},
	{ "trigger": "failsafe_pad_poi_clean\t#using scripts\\zm\\_zm_jump_pad;", "contents": "zm_jump_pad::failsafe_pad_poi_clean(${1:ent_trig}, ${2:ent_poi})"},
	{ "trigger": "jump_pad_enemy_follow_or_ignore\t#using scripts\\zm\\_zm_jump_pad;", "contents": "zm_jump_pad::jump_pad_enemy_follow_or_ignore(${1:ent_poi})"},
	{ "trigger": "jump_pad_ignore_poi_cleanup\t#using scripts\\zm\\_zm_jump_pad;", "contents": "zm_jump_pad::jump_pad_ignore_poi_cleanup(${1:ent_poi})"},
	{ "trigger": "stop_chasing_the_sky\t#using scripts\\zm\\_zm_jump_pad;", "contents": "zm_jump_pad::stop_chasing_the_sky(${1:ent_poi})"},
	{ "trigger": "jump_pad_player_overrides\t#using scripts\\zm\\_zm_jump_pad;", "contents": "zm_jump_pad::jump_pad_player_overrides(${1:st_behavior}, ${2:int_clean})"},
	{ "trigger": "setupMiniMap\t#using scripts\\shared\\compass;", "contents": "compass::setupMiniMap(${1:material})"},
	{ "trigger": "vecscale\t#using scripts\\shared\\compass;", "contents": "compass::vecscale(${1:vec}, ${2:scalar})"},
	{ "trigger": "is_killstreak_weapon\t#using scripts\\shared\\killstreaks_shared;", "contents": "killstreaks::is_killstreak_weapon(${1:weapon})"},
	{ "trigger": "is_weapon_associated_with_killstreak\t#using scripts\\shared\\killstreaks_shared;", "contents": "killstreaks::is_weapon_associated_with_killstreak(${1:weapon})"},
	{ "trigger": "switch_to_last_non_killstreak_weapon\t#using scripts\\shared\\killstreaks_shared;", "contents": "killstreaks::switch_to_last_non_killstreak_weapon(${1:immediate}, ${2:awayfromBall})"},
	{ "trigger": "get_killstreak_weapon\t#using scripts\\shared\\killstreaks_shared;", "contents": "killstreaks::get_killstreak_weapon(${1:killstreak})"},
	{ "trigger": "isHeldInventoryKillstreakWeapon\t#using scripts\\shared\\killstreaks_shared;", "contents": "killstreaks::isHeldInventoryKillstreakWeapon(${1:killstreakWeapon})"},
	{ "trigger": "WaitForTimecheck\t#using scripts\\shared\\killstreaks_shared;", "contents": "killstreaks::WaitForTimecheck(${1:duration}, ${2:callback}, ${3:endCondition1}, ${4:endCondition2}, ${5:endCondition3})"},
	{ "trigger": "EMP_IsEMPd\t#using scripts\\shared\\killstreaks_shared;", "contents": "killstreaks::EMP_IsEMPd()"},
	{ "trigger": "WaitTillEMP\t#using scripts\\shared\\killstreaks_shared;", "contents": "killstreaks::WaitTillEMP(${1:onEmpdCallback}, ${2:arg})"},
	{ "trigger": "HasUav\t#using scripts\\shared\\killstreaks_shared;", "contents": "killstreaks::HasUav(${1:team_or_entnum})"},
	{ "trigger": "HasSatellite\t#using scripts\\shared\\killstreaks_shared;", "contents": "killstreaks::HasSatellite(${1:team_or_entnum})"},
	{ "trigger": "DestroyOtherTeamsEquipment\t#using scripts\\shared\\killstreaks_shared;", "contents": "killstreaks::DestroyOtherTeamsEquipment(${1:attacker}, ${2:weapon})"},
	{ "trigger": "DestroyEquipment\t#using scripts\\shared\\killstreaks_shared;", "contents": "killstreaks::DestroyEquipment(${1:attacker}, ${2:team}, ${3:weapon})"},
	{ "trigger": "DestroyTacticalInsertions\t#using scripts\\shared\\killstreaks_shared;", "contents": "killstreaks::DestroyTacticalInsertions(${1:attacker}, ${2:victimTeam})"},
	{ "trigger": "DestroyOtherTeamsActiveVehicles\t#using scripts\\shared\\killstreaks_shared;", "contents": "killstreaks::DestroyOtherTeamsActiveVehicles(${1:attacker}, ${2:weapon})"},
	{ "trigger": "DestroyActiveVehicles\t#using scripts\\shared\\killstreaks_shared;", "contents": "killstreaks::DestroyActiveVehicles(${1:attacker}, ${2:team}, ${3:weapon})"},
	{ "trigger": "DestroyEntities\t#using scripts\\shared\\killstreaks_shared;", "contents": "killstreaks::DestroyEntities(${1:entities}, ${2:attacker}, ${3:team}, ${4:weapon})"},
	{ "trigger": "setup_clientfields\t#using scripts\\shared\\abilities\\_ability_player;", "contents": "ability_player::setup_clientfields()"},
	{ "trigger": "on_player_connect\t#using scripts\\shared\\abilities\\_ability_player;", "contents": "ability_player::on_player_connect()"},
	{ "trigger": "on_player_spawned\t#using scripts\\shared\\abilities\\_ability_player; self == player", "contents": "ability_player::on_player_spawned()"},
	{ "trigger": "on_player_disconnect\t#using scripts\\shared\\abilities\\_ability_player;", "contents": "ability_player::on_player_disconnect()"},
	{ "trigger": "is_using_any_gadget\t#using scripts\\shared\\abilities\\_ability_player;", "contents": "ability_player::is_using_any_gadget()"},
	{ "trigger": "gadgets_save_power\t#using scripts\\shared\\abilities\\_ability_player;", "contents": "ability_player::gadgets_save_power(${1:game_ended})"},
	{ "trigger": "gadgets_wait_for_death\t#using scripts\\shared\\abilities\\_ability_player;", "contents": "ability_player::gadgets_wait_for_death()"},
	{ "trigger": "gadgets_wait_for_game_end\t#using scripts\\shared\\abilities\\_ability_player;", "contents": "ability_player::gadgets_wait_for_game_end()"},
	{ "trigger": "script_set_cclass\t#using scripts\\shared\\abilities\\_ability_player;", "contents": "ability_player::script_set_cclass(${1:cclass}, ${2:save = true})"},
	{ "trigger": "update_gadget\t#using scripts\\shared\\abilities\\_ability_player;", "contents": "ability_player::update_gadget(${1:weapon})"},
	{ "trigger": "register_gadget\t#using scripts\\shared\\abilities\\_ability_player;", "contents": "ability_player::register_gadget(${1:type})"},
	{ "trigger": "register_gadget_should_notify\t#using scripts\\shared\\abilities\\_ability_player;", "contents": "ability_player::register_gadget_should_notify(${1:type}, ${2:should_notify})"},
	{ "trigger": "register_gadget_possession_callbacks\t#using scripts\\shared\\abilities\\_ability_player;", "contents": "ability_player::register_gadget_possession_callbacks(${1:type}, ${2:on_give}, ${3:on_take})"},
	{ "trigger": "register_gadget_activation_callbacks\t#using scripts\\shared\\abilities\\_ability_player;", "contents": "ability_player::register_gadget_activation_callbacks(${1:type}, ${2:turn_on}, ${3:turn_off})"},
	{ "trigger": "register_gadget_flicker_callbacks\t#using scripts\\shared\\abilities\\_ability_player;", "contents": "ability_player::register_gadget_flicker_callbacks(${1:type}, ${2:on_flicker})"},
	{ "trigger": "register_gadget_ready_callbacks\t#using scripts\\shared\\abilities\\_ability_player;", "contents": "ability_player::register_gadget_ready_callbacks(${1:type}, ${2:ready_func})"},
	{ "trigger": "register_gadget_primed_callbacks\t#using scripts\\shared\\abilities\\_ability_player;", "contents": "ability_player::register_gadget_primed_callbacks(${1:type}, ${2:primed_func})"},
	{ "trigger": "register_gadget_is_inuse_callbacks\t#using scripts\\shared\\abilities\\_ability_player;", "contents": "ability_player::register_gadget_is_inuse_callbacks(${1:type}, ${2:inuse_func})"},
	{ "trigger": "register_gadget_is_flickering_callbacks\t#using scripts\\shared\\abilities\\_ability_player;", "contents": "ability_player::register_gadget_is_flickering_callbacks(${1:type}, ${2:flickering_func})"},
	{ "trigger": "register_gadget_failed_activate_callback\t#using scripts\\shared\\abilities\\_ability_player;", "contents": "ability_player::register_gadget_failed_activate_callback(${1:type}, ${2:failed_activate})"},
	{ "trigger": "gadget_is_in_use\t#using scripts\\shared\\abilities\\_ability_player;", "contents": "ability_player::gadget_is_in_use(${1:slot})"},
	{ "trigger": "gadget_is_flickering\t#using scripts\\shared\\abilities\\_ability_player;", "contents": "ability_player::gadget_is_flickering(${1:slot})"},
	{ "trigger": "give_gadget\t#using scripts\\shared\\abilities\\_ability_player;", "contents": "ability_player::give_gadget(${1:slot}, ${2:weapon})"},
	{ "trigger": "take_gadget\t#using scripts\\shared\\abilities\\_ability_player;", "contents": "ability_player::take_gadget(${1:slot}, ${2:weapon})"},
	{ "trigger": "turn_gadget_on\t#using scripts\\shared\\abilities\\_ability_player;", "contents": "ability_player::turn_gadget_on(${1:slot}, ${2:weapon})"},
	{ "trigger": "turn_gadget_off\t#using scripts\\shared\\abilities\\_ability_player;", "contents": "ability_player::turn_gadget_off(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_CheckHeroAbilityKill\t#using scripts\\shared\\abilities\\_ability_player;", "contents": "ability_player::gadget_CheckHeroAbilityKill(${1:attacker})"},
	{ "trigger": "gadget_flicker\t#using scripts\\shared\\abilities\\_ability_player;", "contents": "ability_player::gadget_flicker(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_ready\t#using scripts\\shared\\abilities\\_ability_player;", "contents": "ability_player::gadget_ready(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_primed\t#using scripts\\shared\\abilities\\_ability_player;", "contents": "ability_player::gadget_primed(${1:slot}, ${2:weapon})"},
	{ "trigger": "create_lightning_chain_params\t#using scripts\\zm\\_zm_lightning_chain;", "contents": "lightning_chain::create_lightning_chain_params()"},
	{ "trigger": "arc_damage\t#using scripts\\zm\\_zm_lightning_chain;", "contents": "lightning_chain::arc_damage(${1:source_enemy}, ${2:player}, ${3:arc_num}, ${4:params = level.default_lightning_chain_params})"},
	{ "trigger": "arc_damage_ent\t#using scripts\\zm\\_zm_lightning_chain;", "contents": "lightning_chain::arc_damage_ent(${1:player}, ${2:arc_num}, ${3:params = level.default_lightning_chain_params})"},
	{ "trigger": "lc_play_death_fx\t#using scripts\\zm\\_zm_lightning_chain;", "contents": "lightning_chain::lc_play_death_fx(${1:arc_num}, ${2:params})"},
	{ "trigger": "lc_play_arc_fx\t#using scripts\\zm\\_zm_lightning_chain;", "contents": "lightning_chain::lc_play_arc_fx(${1:target}, ${2:params})"},
	{ "trigger": "RegisterBehaviorTreeScriptAPIInternal\t#using scripts\\shared\\ai\\systems\\behavior_tree_utility;", "contents": "BehaviorTreeNetwork::RegisterBehaviorTreeScriptAPIInternal(${1:functionName}, ${2:functionPtr})"},
	{ "trigger": "functionName = ToLower\t#using scripts\\shared\\ai\\systems\\behavior_tree_utility;", "contents": "BehaviorTreeNetwork::functionName = ToLower(${1:functionName );})"},
	{ "trigger": "RegisterBehaviorTreeActionInternal\t#using scripts\\shared\\ai\\systems\\behavior_tree_utility;", "contents": "BehaviorTreeNetwork::RegisterBehaviorTreeActionInternal(${1:actionName}, ${2:startFuncPtr}, ${3:updateFuncPtr}, ${4:terminateFuncPtr})"},
	{ "trigger": "RegisterBehaviorTreeScriptAPIInternal\t#using scripts\\core_common\\ai\\systems\\behavior_tree_utility;", "contents": "BehaviorTreeNetwork::RegisterBehaviorTreeScriptAPIInternal(${1:functionName}, ${2:functionPtr})"},
	{ "trigger": "functionName = ToLower\t#using scripts\\core_common\\ai\\systems\\behavior_tree_utility;", "contents": "BehaviorTreeNetwork::functionName = ToLower(${1:functionName );})"},
	{ "trigger": "RegisterBehaviorTreeActionInternal\t#using scripts\\core_common\\ai\\systems\\behavior_tree_utility;", "contents": "BehaviorTreeNetwork::RegisterBehaviorTreeActionInternal(${1:actionName}, ${2:startFuncPtr}, ${3:updateFuncPtr}, ${4:terminateFuncPtr})"},
	{ "trigger": "updateDvars\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::updateDvars()"},
	{ "trigger": "start_gametype\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::start_gametype()"},
	{ "trigger": "setUpRetrievableHintStrings\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::setUpRetrievableHintStrings()"},
	{ "trigger": "on_player_connect\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::on_player_connect()"},
	{ "trigger": "on_player_spawned\t#using scripts\\shared\\weapons\\_weaponobjects; self == player", "contents": "weaponobjects::on_player_spawned()"},
	{ "trigger": "resetWatchers\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::resetWatchers()"},
	{ "trigger": "createBaseWatchers\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::createBaseWatchers()"},
	{ "trigger": "setupRetrievableWatcher\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::setupRetrievableWatcher()"},
	{ "trigger": "createSpecialCrossbowWatcherTypes\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::createSpecialCrossbowWatcherTypes(${1:weaponName})"},
	{ "trigger": "createSpecialCrossbowWatcher\t#using scripts\\shared\\weapons\\_weaponobjects; self == player", "contents": "weaponobjects::createSpecialCrossbowWatcher()"},
	{ "trigger": "createHatchetWatcher\t#using scripts\\shared\\weapons\\_weaponobjects; self == player", "contents": "weaponobjects::createHatchetWatcher()"},
	{ "trigger": "createTactInsertWatcher\t#using scripts\\shared\\weapons\\_weaponobjects; self == player", "contents": "weaponobjects::createTactInsertWatcher()"},
	{ "trigger": "createRCBombWatcher\t#using scripts\\shared\\weapons\\_weaponobjects; self == player", "contents": "weaponobjects::createRCBombWatcher()"},
	{ "trigger": "createQRDroneWatcher\t#using scripts\\shared\\weapons\\_weaponobjects; self == player", "contents": "weaponobjects::createQRDroneWatcher()"},
	{ "trigger": "getSpikeLauncherActiveSpikeCount\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::getSpikeLauncherActiveSpikeCount(${1:watcher})"},
	{ "trigger": "watchSpikeLauncherItemCountChanged\t#using scripts\\shared\\weapons\\_weaponobjects; self == player", "contents": "weaponobjects::watchSpikeLauncherItemCountChanged(${1:watcher})"},
	{ "trigger": "spikesDetonating\t#using scripts\\shared\\weapons\\_weaponobjects; self == player", "contents": "weaponobjects::spikesDetonating(${1:watcher})"},
	{ "trigger": "createSpikeLauncherWatcher\t#using scripts\\shared\\weapons\\_weaponobjects; self == player", "contents": "weaponobjects::createSpikeLauncherWatcher(${1:weapon})"},
	{ "trigger": "createPlayerHelicopterWatcher\t#using scripts\\shared\\weapons\\_weaponobjects; self == player", "contents": "weaponobjects::createPlayerHelicopterWatcher()"},
	{ "trigger": "createClaymoreWatcher\t#using scripts\\shared\\weapons\\_weaponobjects; self == player", "contents": "weaponobjects::createClaymoreWatcher()"},
	{ "trigger": "voidOnSpawn\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::voidOnSpawn(${1:unused0}, ${2:unused1})"},
	{ "trigger": "voidOnDamage\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::voidOnDamage(${1:unused0})"},
	{ "trigger": "voidOnSpawnRetrieveTriggers\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::voidOnSpawnRetrieveTriggers(${1:unused0}, ${2:unused1})"},
	{ "trigger": "voidPickUp\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::voidPickUp(${1:unused0}, ${2:unused1})"},
	{ "trigger": "deleteEnt\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::deleteEnt(${1:attacker}, ${2:emp}, ${3:target})"},
	{ "trigger": "clearFXOnDeath\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::clearFXOnDeath(${1:fx})"},
	{ "trigger": "deleteWeaponObjectInstance\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::deleteWeaponObjectInstance()"},
	{ "trigger": "deleteWeaponObjectArray\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::deleteWeaponObjectArray()"},
	{ "trigger": "delayedSpikeDetonation\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::delayedSpikeDetonation(${1:attacker}, ${2:weapon})"},
	{ "trigger": "spikeDetonate\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::spikeDetonate(${1:attacker}, ${2:weapon}, ${3:target})"},
	{ "trigger": "claymoreDetonate\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::claymoreDetonate(${1:attacker}, ${2:weapon}, ${3:target})"},
	{ "trigger": "weaponDetonate\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::weaponDetonate(${1:attacker}, ${2:weapon})"},
	{ "trigger": "detonateWhenStationary\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::detonateWhenStationary(${1:object}, ${2:delay}, ${3:attacker}, ${4:weapon})"},
	{ "trigger": "waitAndDetonate\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::waitAndDetonate(${1:object}, ${2:delay}, ${3:attacker}, ${4:weapon})"},
	{ "trigger": "waitAndFizzleOut\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::waitAndFizzleOut(${1:object}, ${2:delay})"},
	{ "trigger": "detonateWeaponObjectArray\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::detonateWeaponObjectArray(${1:forceDetonation}, ${2:weapon})"},
	{ "trigger": "addWeaponObjectToWatcher\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::addWeaponObjectToWatcher(${1:watcherName}, ${2:weapon_instance})"},
	{ "trigger": "addWeaponObject\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::addWeaponObject(${1:watcher}, ${2:weapon_instance}, ${3:weapon})"},
	{ "trigger": "cleanupWatcherOnDeath\t#using scripts\\shared\\weapons\\_weaponobjects; call on weapon entity", "contents": "weaponobjects::cleanupWatcherOnDeath(${1:watcher})"},
	{ "trigger": "weapon_object_timeout\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::weapon_object_timeout(${1:watcher})"},
	{ "trigger": "delete_on_notify\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::delete_on_notify(${1:e_player})"},
	{ "trigger": "deleteWeaponObjectHelper\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::deleteWeaponObjectHelper(${1:weapon_ent})"},
	{ "trigger": "removeWeaponObject\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::removeWeaponObject(${1:watcher}, ${2:weapon_ent})"},
	{ "trigger": "cleanWeaponObjectArray\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::cleanWeaponObjectArray(${1:watcher})"},
	{ "trigger": "weapon_object_do_DamageFeedBack\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::weapon_object_do_DamageFeedBack(${1:weapon}, ${2:attacker})"},
	{ "trigger": "weaponObjectDamage\t#using scripts\\shared\\weapons\\_weaponobjects; self == weapon object", "contents": "weaponobjects::weaponObjectDamage(${1:watcher})"},
	{ "trigger": "playDialogOnDeath\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::playDialogOnDeath(${1:owner})"},
	{ "trigger": "watchObjectDamage\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::watchObjectDamage(${1:owner})"},
	{ "trigger": "stunStart\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::stunStart(${1:watcher}, ${2:time})"},
	{ "trigger": "stunStop\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::stunStop()"},
	{ "trigger": "weaponStun\t#using scripts\\shared\\weapons\\_weaponobjects; self == weapon object", "contents": "weaponobjects::weaponStun()"},
	{ "trigger": "stunFxThink\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::stunFxThink(${1:fx})"},
	{ "trigger": "isStunned\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::isStunned()"},
	{ "trigger": "weaponObjectFizzleOut\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::weaponObjectFizzleOut()"},
	{ "trigger": "resetWeaponObjectExplodeThisFrame\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::resetWeaponObjectExplodeThisFrame()"},
	{ "trigger": "getWeaponObjectWatcher\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::getWeaponObjectWatcher(${1:name})"},
	{ "trigger": "getWeaponObjectWatcherByWeapon\t#using scripts\\shared\\weapons\\_weaponobjects; self == player", "contents": "weaponobjects::getWeaponObjectWatcherByWeapon(${1:weapon})"},
	{ "trigger": "resetWeaponObjectWatcher\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::resetWeaponObjectWatcher(${1:watcher}, ${2:ownerTeam})"},
	{ "trigger": "createWeaponObjectWatcher\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::createWeaponObjectWatcher(${1:weaponname}, ${2:ownerTeam})"},
	{ "trigger": "createUseWeaponObjectWatcher\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::createUseWeaponObjectWatcher(${1:weaponname}, ${2:ownerTeam})"},
	{ "trigger": "createProximityWeaponObjectWatcher\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::createProximityWeaponObjectWatcher(${1:weaponname}, ${2:ownerTeam})"},
	{ "trigger": "commonOnSpawnUseWeaponObject\t#using scripts\\shared\\weapons\\_weaponobjects; self == weapon (for example: the claymore)", "contents": "weaponobjects::commonOnSpawnUseWeaponObject(${1:watcher}, ${2:owner})"},
	{ "trigger": "WasProximityAlarmActivatedBySelf\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::WasProximityAlarmActivatedBySelf()"},
	{ "trigger": "ProximityAlarmActivate\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::ProximityAlarmActivate(${1:active}, ${2:watcher})"},
	{ "trigger": "ProximityAlarmLoop\t#using scripts\\shared\\weapons\\_weaponobjects; self == weapon entity (for example: the claymore)", "contents": "weaponobjects::ProximityAlarmLoop(${1:watcher}, ${2:owner})"},
	{ "trigger": "commonOnSpawnUseWeaponObjectProximityAlarm\t#using scripts\\shared\\weapons\\_weaponobjects; self == weapon entity (for example: the claymore)", "contents": "weaponobjects::commonOnSpawnUseWeaponObjectProximityAlarm(${1:watcher}, ${2:owner})"},
	{ "trigger": "onSpawnUseWeaponObject\t#using scripts\\shared\\weapons\\_weaponobjects; self == weapon (for example: the claymore)", "contents": "weaponobjects::onSpawnUseWeaponObject(${1:watcher}, ${2:owner})"},
	{ "trigger": "onSpawnProximityWeaponObject\t#using scripts\\shared\\weapons\\_weaponobjects; self == weapon (for example: the claymore)", "contents": "weaponobjects::onSpawnProximityWeaponObject(${1:watcher}, ${2:owner})"},
	{ "trigger": "watchWeaponObjectUsage\t#using scripts\\shared\\weapons\\_weaponobjects; self == player", "contents": "weaponobjects::watchWeaponObjectUsage()"},
	{ "trigger": "watchWeaponObjectSpawn\t#using scripts\\shared\\weapons\\_weaponobjects; self == player", "contents": "weaponobjects::watchWeaponObjectSpawn(${1:notify_type})"},
	{ "trigger": "anyObjectsInWorld\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::anyObjectsInWorld(${1:weapon})"},
	{ "trigger": "weaponObjectDetectionMovable\t#using scripts\\shared\\weapons\\_weaponobjects; self == weapon (for example: the claymore)", "contents": "weaponobjects::weaponObjectDetectionMovable(${1:ownerTeam})"},
	{ "trigger": "setIconPos\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::setIconPos(${1:item}, ${2:icon}, ${3:heightIncrease})"},
	{ "trigger": "weaponObjectDetectionTrigger_wait\t#using scripts\\shared\\weapons\\_weaponobjects; self == weapon (for example: the claymore)", "contents": "weaponobjects::weaponObjectDetectionTrigger_wait(${1:ownerTeam})"},
	{ "trigger": "weaponObjectDetectionTrigger\t#using scripts\\shared\\weapons\\_weaponobjects; self == weapon (for example: the claymore)", "contents": "weaponobjects::weaponObjectDetectionTrigger(${1:ownerTeam})"},
	{ "trigger": "hackerTriggerSetVisibility\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::hackerTriggerSetVisibility(${1:owner})"},
	{ "trigger": "hackerNotMoving\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::hackerNotMoving()"},
	{ "trigger": "hackerInit\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::hackerInit(${1:watcher})"},
	{ "trigger": "hackerThink\t#using scripts\\shared\\weapons\\_weaponobjects; self == weapon_instance", "contents": "weaponobjects::hackerThink(${1:trigger}, ${2:watcher})"},
	{ "trigger": "ItemHacked\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::ItemHacked(${1:watcher}, ${2:player})"},
	{ "trigger": "hackerUnfreezePlayer\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::hackerUnfreezePlayer(${1:player})"},
	{ "trigger": "hackerResult\t#using scripts\\shared\\weapons\\_weaponobjects; self == trigger_radius", "contents": "weaponobjects::hackerResult(${1:player}, ${2:owner})"},
	{ "trigger": "canHack\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::canHack(${1:player}, ${2:owner}, ${3:weapon_check})"},
	{ "trigger": "hackerRemoveWeapon\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::hackerRemoveWeapon(${1:weapon_instance})"},
	{ "trigger": "proximityWeaponObject_CreateDamageArea\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::proximityWeaponObject_CreateDamageArea(${1:watcher})"},
	{ "trigger": "proximityWeaponObject_ValidTriggerEntity\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::proximityWeaponObject_ValidTriggerEntity(${1:watcher}, ${2:ent})"},
	{ "trigger": "function	proximityWeaponObject_RemoveSpawnProtectOnDeath\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::function	proximityWeaponObject_RemoveSpawnProtectOnDeath(${1:ent})"},
	{ "trigger": "function	proximityWeaponObject_SpawnProtect\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::function	proximityWeaponObject_SpawnProtect(${1:watcher}, ${2:ent})"},
	{ "trigger": "proximityWeaponObject_IsSpawnProtected\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::proximityWeaponObject_IsSpawnProtected(${1:watcher}, ${2:ent})"},
	{ "trigger": "proximityWeaponObject_DoDetonation\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::proximityWeaponObject_DoDetonation(${1:watcher}, ${2:ent}, ${3:traceOrigin})"},
	{ "trigger": "proximityWeaponObject_ActivationDelay\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::proximityWeaponObject_ActivationDelay(${1:watcher})"},
	{ "trigger": "proximityWeaponObject_WaitTillFrameEndAndDoDetonation\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::proximityWeaponObject_WaitTillFrameEndAndDoDetonation(${1:watcher}, ${2:ent}, ${3:traceOrigin})"},
	{ "trigger": "proximityWeaponObjectDetonation\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::proximityWeaponObjectDetonation(${1:watcher})"},
	{ "trigger": "shouldAffectWeaponObject\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::shouldAffectWeaponObject(${1:object}, ${2:watcher})"},
	{ "trigger": "deleteOnDeath\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::deleteOnDeath(${1:ent})"},
	{ "trigger": "testKillbrushOnStationary\t#using scripts\\shared\\weapons\\_weaponobjects; self == weaponobject", "contents": "weaponobjects::testKillbrushOnStationary(${1:a_killbrushes}, ${2:player})"},
	{ "trigger": "deleteOnKillbrush\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::deleteOnKillbrush(${1:player})"},
	{ "trigger": "watchWeaponObjectAltDetonation\t#using scripts\\shared\\weapons\\_weaponobjects; self == player", "contents": "weaponobjects::watchWeaponObjectAltDetonation()"},
	{ "trigger": "watchWeaponObjectAltDetonate\t#using scripts\\shared\\weapons\\_weaponobjects; self == player", "contents": "weaponobjects::watchWeaponObjectAltDetonate()"},
	{ "trigger": "watchWeaponObjectDetonation\t#using scripts\\shared\\weapons\\_weaponobjects; self == player", "contents": "weaponobjects::watchWeaponObjectDetonation()"},
	{ "trigger": "cleanUpWatchers\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::cleanUpWatchers()"},
	{ "trigger": "watchForDisconnectCleanUp\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::watchForDisconnectCleanUp()"},
	{ "trigger": "deleteWeaponObjectsOn\t#using scripts\\shared\\weapons\\_weaponobjects; self == player", "contents": "weaponobjects::deleteWeaponObjectsOn()"},
	{ "trigger": "saydamaged\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::saydamaged(${1:orig}, ${2:amount})"},
	{ "trigger": "showHeadIcon\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::showHeadIcon(${1:trigger})"},
	{ "trigger": "friendlyFireCheck\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::friendlyFireCheck(${1:owner}, ${2:attacker}, ${3:forcedFriendlyFireRule})"},
	{ "trigger": "onSpawnHatchet\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::onSpawnHatchet(${1:watcher}, ${2:player})"},
	{ "trigger": "onSpawnCrossbowBolt\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::onSpawnCrossbowBolt(${1:watcher}, ${2:player})"},
	{ "trigger": "onSpawnCrossbowBolt_internal\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::onSpawnCrossbowBolt_internal(${1:watcher}, ${2:player})"},
	{ "trigger": "dieOnEntityDeath\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::dieOnEntityDeath(${1:entity}, ${2:player})"},
	{ "trigger": "onSpawnCrossbowBoltImpact\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::onSpawnCrossbowBoltImpact(${1:s_watcher}, ${2:e_player})"},
	{ "trigger": "onSpawnCrossbowBoltImpact_internal\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::onSpawnCrossbowBoltImpact_internal(${1:s_watcher}, ${2:e_player})"},
	{ "trigger": "onSpawnSpecialCrossbowTrigger\t#using scripts\\shared\\weapons\\_weaponobjects; self == weapon_instance (for example: the claymore)", "contents": "weaponobjects::onSpawnSpecialCrossbowTrigger(${1:watcher}, ${2:player})"},
	{ "trigger": "watchSpecialCrossbowTrigger\t#using scripts\\shared\\weapons\\_weaponobjects; self == weapon (for example: the claymore)", "contents": "weaponobjects::watchSpecialCrossbowTrigger(${1:trigger}, ${2:callback}, ${3:playerSoundOnUse}, ${4:npcSoundOnUse})"},
	{ "trigger": "onSpawnHatchetTrigger\t#using scripts\\shared\\weapons\\_weaponobjects; self == weapon_instance (for example: the claymore)", "contents": "weaponobjects::onSpawnHatchetTrigger(${1:watcher}, ${2:player})"},
	{ "trigger": "watchHatchetTrigger\t#using scripts\\shared\\weapons\\_weaponobjects; self == weapon (for example: the claymore)", "contents": "weaponobjects::watchHatchetTrigger(${1:trigger}, ${2:callback}, ${3:playerSoundOnUse}, ${4:npcSoundOnUse})"},
	{ "trigger": "get_held_weapon_match_or_root_match\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::get_held_weapon_match_or_root_match(${1:weapon})"},
	{ "trigger": "get_player_crossbow_weapon\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::get_player_crossbow_weapon()"},
	{ "trigger": "onSpawnRetrievableWeaponObject\t#using scripts\\shared\\weapons\\_weaponobjects; self == weapon (for example: the claymore)", "contents": "weaponobjects::onSpawnRetrievableWeaponObject(${1:watcher}, ${2:player})"},
	{ "trigger": "destroyEnt\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::destroyEnt()"},
	{ "trigger": "pickUp\t#using scripts\\shared\\weapons\\_weaponobjects; self == weapon_instance (for example: the claymore)", "contents": "weaponobjects::pickUp(${1:player})"},
	{ "trigger": "pickUpCrossbowBolt\t#using scripts\\shared\\weapons\\_weaponobjects; self == weapon_instance (for example: the crossbow bolt)", "contents": "weaponobjects::pickUpCrossbowBolt(${1:player}, ${2:heldWeapon})"},
	{ "trigger": "onDestroyed\t#using scripts\\shared\\weapons\\_weaponobjects; self == weapon object", "contents": "weaponobjects::onDestroyed(${1:attacker})"},
	{ "trigger": "watchShutdown\t#using scripts\\shared\\weapons\\_weaponobjects; self == weapon (for example: the claymore)", "contents": "weaponobjects::watchShutdown(${1:player})"},
	{ "trigger": "watchUseTrigger\t#using scripts\\shared\\weapons\\_weaponobjects; self == weapon (for example: the claymore)", "contents": "weaponobjects::watchUseTrigger(${1:trigger}, ${2:callback}, ${3:playerSoundOnUse}, ${4:npcSoundOnUse})"},
	{ "trigger": "createRetrievableHint\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::createRetrievableHint(${1:name}, ${2:hint})"},
	{ "trigger": "createHackerHint\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::createHackerHint(${1:name}, ${2:hint})"},
	{ "trigger": "createDestroyHint\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::createDestroyHint(${1:name}, ${2:hint})"},
	{ "trigger": "setupReconEffect\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::setupReconEffect()"},
	{ "trigger": "useTeamEquipmentClientField\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::useTeamEquipmentClientField(${1:watcher})"},
	{ "trigger": "GetWatcherForWeapon\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::GetWatcherForWeapon(${1:weapon})"},
	{ "trigger": "destroy_other_teams_supplemental_watcher_objects\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::destroy_other_teams_supplemental_watcher_objects(${1:attacker}, ${2:weapon})"},
	{ "trigger": "destroy_supplemental_watcher_objects\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::destroy_supplemental_watcher_objects(${1:attacker}, ${2:team}, ${3:weapon})"},
	{ "trigger": "add_supplemental_object\t#using scripts\\shared\\weapons\\_weaponobjects;", "contents": "weaponobjects::add_supplemental_object(${1:object})"},
	{ "trigger": "watch_supplemental_object_death\t#using scripts\\shared\\weapons\\_weaponobjects; self == object", "contents": "weaponobjects::watch_supplemental_object_death()"},
	{ "trigger": "artfxprintln\t#using scripts\\zm\\_art;", "contents": "art::artfxprintln(${1:file}, ${2:string})"},
	{ "trigger": "strtok_loc\t#using scripts\\zm\\_art;", "contents": "art::strtok_loc(${1:string}, ${2:par1})"},
	{ "trigger": "setfogsliders\t#using scripts\\zm\\_art;", "contents": "art::setfogsliders()"},
	{ "trigger": "tweakart\t#using scripts\\zm\\_art;", "contents": "art::tweakart()"},
	{ "trigger": "fovslidercheck\t#using scripts\\zm\\_art;", "contents": "art::fovslidercheck()"},
	{ "trigger": "dumpsettings\t#using scripts\\zm\\_art;", "contents": "art::dumpsettings()"},
	{ "trigger": "spawn_player_clone\t#using scripts\\zm\\_zm_clone;", "contents": "zm_clone::spawn_player_clone(${1:player}, ${2:origin}, ${3:forceweapon}, ${4:forcemodel})"},
	{ "trigger": "clone_damage_func\t#using scripts\\zm\\_zm_clone;", "contents": "zm_clone::clone_damage_func(${1:eInflictor}, ${2:eAttacker}, ${3:iDamage}, ${4:iDFlags}, ${5:sMeansOfDeath}, ${6:weapon}, ${7:vPoint}, ${8:vDir}, ${9:sHitLoc}, ${10:psOffsetTime}, ${11:boneIndex})"},
	{ "trigger": "clone_give_weapon\t#using scripts\\zm\\_zm_clone;", "contents": "zm_clone::clone_give_weapon(${1:weapon})"},
	{ "trigger": "clone_animate\t#using scripts\\zm\\_zm_clone;", "contents": "zm_clone::clone_animate(${1:animtype})"},
	{ "trigger": "clone_actor_animate\t#using scripts\\zm\\_zm_clone;", "contents": "zm_clone::clone_actor_animate(${1:animtype})"},
	{ "trigger": "clone_mover_animate\t#using scripts\\zm\\_zm_clone;", "contents": "zm_clone::clone_mover_animate(${1:animtype})"},
	{ "trigger": "grab_ww_grenade\t#using scripts\\zm\\_zm_powerup_ww_grenade;", "contents": "zm_powerup_ww_grenade::grab_ww_grenade(${1:player})"},
	{ "trigger": "ww_grenade_powerup\t#using scripts\\zm\\_zm_powerup_ww_grenade;", "contents": "zm_powerup_ww_grenade::ww_grenade_powerup(${1:item}, ${2:player})"},
	{ "trigger": "on_spawn\t#using scripts\\zm\\_zm_weap_ballistic_knife;", "contents": "_zm_weap_ballistic_knife::on_spawn(${1:watcher}, ${2:player})"},
	{ "trigger": "on_spawn_retrieve_trigger\t#using scripts\\zm\\_zm_weap_ballistic_knife;", "contents": "_zm_weap_ballistic_knife::on_spawn_retrieve_trigger(${1:watcher}, ${2:player})"},
	{ "trigger": "RegisterBehaviorTreeScriptAPI\t#using scripts\\shared\\ai\\systems\\behavior_tree_utility;", "contents": "BehaviorTreeNetworkUtility::RegisterBehaviorTreeScriptAPI(${1:functionName}, ${2:functionPtr})"},
	{ "trigger": "RegisterBehaviorTreeAction\t#using scripts\\shared\\ai\\systems\\behavior_tree_utility;", "contents": "BehaviorTreeNetworkUtility::RegisterBehaviorTreeAction(${1:actionName}, ${2:startFuncPtr}, ${3:updateFuncPtr}, ${4:terminateFuncPtr})"},
	{ "trigger": "RegisterBehaviorTreeScriptAPI\t#using scripts\\core_common\\ai\\systems\\behavior_tree_utility;", "contents": "BehaviorTreeNetworkUtility::RegisterBehaviorTreeScriptAPI(${1:functionName}, ${2:functionPtr})"},
	{ "trigger": "RegisterBehaviorTreeAction\t#using scripts\\core_common\\ai\\systems\\behavior_tree_utility;", "contents": "BehaviorTreeNetworkUtility::RegisterBehaviorTreeAction(${1:actionName}, ${2:startFuncPtr}, ${3:updateFuncPtr}, ${4:terminateFuncPtr})"},
	{ "trigger": "on_player_connect\t#using scripts\\shared\\weapons\\_weapons;", "contents": "weapons::on_player_connect()"},
	{ "trigger": "on_player_spawned\t#using scripts\\shared\\weapons\\_weapons; self == player", "contents": "weapons::on_player_spawned()"},
	{ "trigger": "watch_weapon_change\t#using scripts\\shared\\weapons\\_weapons;", "contents": "weapons::watch_weapon_change()"},
	{ "trigger": "update_last_held_weapon_timings\t#using scripts\\shared\\weapons\\_weapons;", "contents": "weapons::update_last_held_weapon_timings(${1:newTime})"},
	{ "trigger": "update_timings\t#using scripts\\shared\\weapons\\_weapons;", "contents": "weapons::update_timings(${1:newTime})"},
	{ "trigger": "track\t#using scripts\\shared\\weapons\\_weapons;", "contents": "weapons::track()"},
	{ "trigger": "may_drop\t#using scripts\\shared\\weapons\\_weapons;", "contents": "weapons::may_drop(${1:weapon})"},
	{ "trigger": "drop_for_death\t#using scripts\\shared\\weapons\\_weapons;", "contents": "weapons::drop_for_death(${1:attacker}, ${2:sWeapon}, ${3:sMeansOfDeath})"},
	{ "trigger": "delete_pickup_after_aWhile\t#using scripts\\shared\\weapons\\_weapons;", "contents": "weapons::delete_pickup_after_aWhile()"},
	{ "trigger": "watch_pickup\t#using scripts\\shared\\weapons\\_weapons;", "contents": "weapons::watch_pickup()"},
	{ "trigger": "watch_usage\t#using scripts\\shared\\weapons\\_weapons;", "contents": "weapons::watch_usage()"},
	{ "trigger": "track_fire\t#using scripts\\shared\\weapons\\_weapons;", "contents": "weapons::track_fire(${1:curWeapon})"},
	{ "trigger": "watch_grenade_usage\t#using scripts\\shared\\weapons\\_weapons;", "contents": "weapons::watch_grenade_usage()"},
	{ "trigger": "watch_missile_usage\t#using scripts\\shared\\weapons\\_weapons;", "contents": "weapons::watch_missile_usage()"},
	{ "trigger": "watch_missile_death\t#using scripts\\shared\\weapons\\_weapons; self == missile", "contents": "weapons::watch_missile_death()"},
	{ "trigger": "drop_all_to_ground\t#using scripts\\shared\\weapons\\_weapons;", "contents": "weapons::drop_all_to_ground(${1:origin}, ${2:radius})"},
	{ "trigger": "drop_grenades_to_ground\t#using scripts\\shared\\weapons\\_weapons;", "contents": "weapons::drop_grenades_to_ground(${1:origin}, ${2:radius})"},
	{ "trigger": "watch_grenade_cancel\t#using scripts\\shared\\weapons\\_weapons;", "contents": "weapons::watch_grenade_cancel()"},
	{ "trigger": "watch_offhand_end\t#using scripts\\shared\\weapons\\_weapons; self == player", "contents": "weapons::watch_offhand_end()"},
	{ "trigger": "is_using_offhand_equipment\t#using scripts\\shared\\weapons\\_weapons; self == player", "contents": "weapons::is_using_offhand_equipment()"},
	{ "trigger": "begin_grenade_tracking\t#using scripts\\shared\\weapons\\_weapons;", "contents": "weapons::begin_grenade_tracking()"},
	{ "trigger": "begin_other_grenade_tracking\t#using scripts\\shared\\weapons\\_weapons;", "contents": "weapons::begin_other_grenade_tracking()"},
	{ "trigger": "check_stuck_to_player\t#using scripts\\shared\\weapons\\_weapons;", "contents": "weapons::check_stuck_to_player(${1:deleteOnTeamChange}, ${2:awardScoreEvent}, ${3:weapon})"},
	{ "trigger": "check_hatchet_bounce\t#using scripts\\shared\\weapons\\_weapons;", "contents": "weapons::check_hatchet_bounce()"},
	{ "trigger": "stuck_to_player_team_change\t#using scripts\\shared\\weapons\\_weapons;", "contents": "weapons::stuck_to_player_team_change(${1:player})"},
	{ "trigger": "watch_for_throwbacks\t#using scripts\\shared\\weapons\\_weapons;", "contents": "weapons::watch_for_throwbacks()"},
	{ "trigger": "wait_and_delete_dud\t#using scripts\\shared\\weapons\\_weapons;", "contents": "weapons::wait_and_delete_dud(${1:waitTime})"},
	{ "trigger": "getTimeFromLevelStart\t#using scripts\\shared\\weapons\\_weapons;", "contents": "weapons::getTimeFromLevelStart()"},
	{ "trigger": "turn_grenade_into_a_dud\t#using scripts\\shared\\weapons\\_weapons;", "contents": "weapons::turn_grenade_into_a_dud(${1:weapon}, ${2:isThrownGrenade}, ${3:player})"},
	{ "trigger": "watch_for_grenade_duds\t#using scripts\\shared\\weapons\\_weapons;", "contents": "weapons::watch_for_grenade_duds()"},
	{ "trigger": "watch_for_grenade_launcher_duds\t#using scripts\\shared\\weapons\\_weapons;", "contents": "weapons::watch_for_grenade_launcher_duds()"},
	{ "trigger": "get_damageable_ents\t#using scripts\\shared\\weapons\\_weapons;", "contents": "weapons::get_damageable_ents(${1:pos}, ${2:radius}, ${3:doLOS}, ${4:startRadius})"},
	{ "trigger": "damage_trace_passed\t#using scripts\\shared\\weapons\\_weapons;", "contents": "weapons::damage_trace_passed(${1:from}, ${2:to}, ${3:startRadius}, ${4:ignore})"},
	{ "trigger": "damage_trace\t#using scripts\\shared\\weapons\\_weapons;", "contents": "weapons::damage_trace(${1:from}, ${2:to}, ${3:startRadius}, ${4:ignore})"},
	{ "trigger": "damage_ent\t#using scripts\\shared\\weapons\\_weapons;", "contents": "weapons::damage_ent(${1:eInflictor}, ${2:eAttacker}, ${3:iDamage}, ${4:sMeansOfDeath}, ${5:weapon}, ${6:damagepos}, ${7:damagedir})"},
	{ "trigger": "debugline\t#using scripts\\shared\\weapons\\_weapons;", "contents": "weapons::debugline(${1:a}, ${2:b}, ${3:color})"},
	{ "trigger": "on_damage\t#using scripts\\shared\\weapons\\_weapons;", "contents": "weapons::on_damage(${1:eAttacker}, ${2:eInflictor}, ${3:weapon}, ${4:meansOfDeath}, ${5:damage})"},
	{ "trigger": "play_concussion_sound\t#using scripts\\shared\\weapons\\_weapons;", "contents": "weapons::play_concussion_sound(${1:duration})"},
	{ "trigger": "delete_ent_on_owner_death\t#using scripts\\shared\\weapons\\_weapons;", "contents": "weapons::delete_ent_on_owner_death(${1:owner})"},
	{ "trigger": "update_stowed_weapon\t#using scripts\\shared\\weapons\\_weapons;", "contents": "weapons::update_stowed_weapon()"},
	{ "trigger": "loadout_get_offhand_weapon\t#using scripts\\shared\\weapons\\_weapons;", "contents": "weapons::loadout_get_offhand_weapon(${1:stat})"},
	{ "trigger": "loadout_get_offhand_count\t#using scripts\\shared\\weapons\\_weapons;", "contents": "weapons::loadout_get_offhand_count(${1:stat})"},
	{ "trigger": "flash_scavenger_icon\t#using scripts\\shared\\weapons\\_weapons;", "contents": "weapons::flash_scavenger_icon()"},
	{ "trigger": "scavenger_think\t#using scripts\\shared\\weapons\\_weapons;", "contents": "weapons::scavenger_think()"},
	{ "trigger": "scavenger_hud_destroyOnDisconnect\t#using scripts\\shared\\weapons\\_weapons;", "contents": "weapons::scavenger_hud_destroyOnDisconnect()"},
	{ "trigger": "scavenger_hud_create\t#using scripts\\shared\\weapons\\_weapons;", "contents": "weapons::scavenger_hud_create()"},
	{ "trigger": "drop_scavenger_for_death\t#using scripts\\shared\\weapons\\_weapons;", "contents": "weapons::drop_scavenger_for_death(${1:attacker})"},
	{ "trigger": "add_limited_weapon\t#using scripts\\shared\\weapons\\_weapons;", "contents": "weapons::add_limited_weapon(${1:weapon}, ${2:owner}, ${3:num_drops})"},
	{ "trigger": "should_drop_limited_weapon\t#using scripts\\shared\\weapons\\_weapons;", "contents": "weapons::should_drop_limited_weapon(${1:weapon}, ${2:owner})"},
	{ "trigger": "drop_limited_weapon\t#using scripts\\shared\\weapons\\_weapons;", "contents": "weapons::drop_limited_weapon(${1:weapon}, ${2:owner}, ${3:item})"},
	{ "trigger": "limited_pickup\t#using scripts\\shared\\weapons\\_weapons;", "contents": "weapons::limited_pickup(${1:limited_info})"},
	{ "trigger": "track_cooked_detonation\t#using scripts\\shared\\weapons\\_weapons;", "contents": "weapons::track_cooked_detonation(${1:attacker}, ${2:weapon}, ${3:cookTime})"},
	{ "trigger": "nineBang_doNineBang\t#using scripts\\shared\\weapons\\_weapons;", "contents": "weapons::nineBang_doNineBang(${1:attacker}, ${2:weapon}, ${3:pos}, ${4:cookTime})"},
	{ "trigger": "nineBang_getSubExplosionPos\t#using scripts\\shared\\weapons\\_weapons;", "contents": "weapons::nineBang_getSubExplosionPos(${1:startPos}, ${2:range})"},
	{ "trigger": "nineBang_DoEmpDamage\t#using scripts\\shared\\weapons\\_weapons;", "contents": "weapons::nineBang_DoEmpDamage(${1:player}, ${2:weapon}, ${3:position})"},
	{ "trigger": "nineBang_empCanDamage\t#using scripts\\shared\\weapons\\_weapons;", "contents": "weapons::nineBang_empCanDamage(${1:ent}, ${2:pos}, ${3:radiusSq}, ${4:doLOS}, ${5:startRadius})"},
	{ "trigger": "track_multi_detonation\t#using scripts\\shared\\weapons\\_weapons; self is the grenade", "contents": "weapons::track_multi_detonation(${1:ownerEnt}, ${2:weapon}, ${3:cookTime})"},
	{ "trigger": "multi_detonation_get_cluster_launch_dir\t#using scripts\\shared\\weapons\\_weapons;", "contents": "weapons::multi_detonation_get_cluster_launch_dir(${1:index}, ${2:multiVal})"},
	{ "trigger": "onPlayerConnect\t#using scripts\\zm\\gametypes\\_weapons;", "contents": "weapons::onPlayerConnect()"},
	{ "trigger": "onPlayerSpawned\t#using scripts\\zm\\gametypes\\_weapons;", "contents": "weapons::onPlayerSpawned()"},
	{ "trigger": "watchWeaponChange\t#using scripts\\zm\\gametypes\\_weapons;", "contents": "weapons::watchWeaponChange()"},
	{ "trigger": "watchRiotShieldUse\t#using scripts\\zm\\gametypes\\_weapons; self == player", "contents": "weapons::watchRiotShieldUse()"},
	{ "trigger": "updateLastHeldWeaponTimings\t#using scripts\\zm\\gametypes\\_weapons;", "contents": "weapons::updateLastHeldWeaponTimings(${1:newTime})"},
	{ "trigger": "updateWeaponTimings\t#using scripts\\zm\\gametypes\\_weapons;", "contents": "weapons::updateWeaponTimings(${1:newTime})"},
	{ "trigger": "trackWeapon\t#using scripts\\zm\\gametypes\\_weapons;", "contents": "weapons::trackWeapon()"},
	{ "trigger": "mayDropWeapon\t#using scripts\\zm\\gametypes\\_weapons;", "contents": "weapons::mayDropWeapon(${1:weapon})"},
	{ "trigger": "dropWeaponForDeath\t#using scripts\\zm\\gametypes\\_weapons;", "contents": "weapons::dropWeaponForDeath(${1:attacker})"},
	{ "trigger": "deletePickupAfterAWhile\t#using scripts\\zm\\gametypes\\_weapons;", "contents": "weapons::deletePickupAfterAWhile()"},
	{ "trigger": "watchPickup\t#using scripts\\zm\\gametypes\\_weapons;", "contents": "weapons::watchPickup()"},
	{ "trigger": "watchWeaponUsage\t#using scripts\\zm\\gametypes\\_weapons;", "contents": "weapons::watchWeaponUsage()"},
	{ "trigger": "trackWeaponFire\t#using scripts\\zm\\gametypes\\_weapons;", "contents": "weapons::trackWeaponFire(${1:curWeapon})"},
	{ "trigger": "watchGrenadeUsage\t#using scripts\\zm\\gametypes\\_weapons;", "contents": "weapons::watchGrenadeUsage()"},
	{ "trigger": "watchMissileUsage\t#using scripts\\zm\\gametypes\\_weapons;", "contents": "weapons::watchMissileUsage()"},
	{ "trigger": "watchMissileDeath\t#using scripts\\zm\\gametypes\\_weapons; self == missile", "contents": "weapons::watchMissileDeath()"},
	{ "trigger": "dropWeaponsToGround\t#using scripts\\zm\\gametypes\\_weapons;", "contents": "weapons::dropWeaponsToGround(${1:origin}, ${2:radius})"},
	{ "trigger": "dropGrenadesToGround\t#using scripts\\zm\\gametypes\\_weapons;", "contents": "weapons::dropGrenadesToGround(${1:origin}, ${2:radius})"},
	{ "trigger": "watchGrenadeCancel\t#using scripts\\zm\\gametypes\\_weapons;", "contents": "weapons::watchGrenadeCancel()"},
	{ "trigger": "watch_offhand_end\t#using scripts\\zm\\gametypes\\_weapons; self == player", "contents": "weapons::watch_offhand_end()"},
	{ "trigger": "is_using_offhand_equipment\t#using scripts\\zm\\gametypes\\_weapons; self == player", "contents": "weapons::is_using_offhand_equipment()"},
	{ "trigger": "beginGrenadeTracking\t#using scripts\\zm\\gametypes\\_weapons;", "contents": "weapons::beginGrenadeTracking()"},
	{ "trigger": "beginOtherGrenadeTracking\t#using scripts\\zm\\gametypes\\_weapons;", "contents": "weapons::beginOtherGrenadeTracking()"},
	{ "trigger": "checkStuckToPlayer\t#using scripts\\zm\\gametypes\\_weapons;", "contents": "weapons::checkStuckToPlayer(${1:deleteOnTeamChange}, ${2:awardScoreEvent}, ${3:weapon})"},
	{ "trigger": "checkHatchetBounce\t#using scripts\\zm\\gametypes\\_weapons;", "contents": "weapons::checkHatchetBounce()"},
	{ "trigger": "stuckToPlayerTeamChange\t#using scripts\\zm\\gametypes\\_weapons;", "contents": "weapons::stuckToPlayerTeamChange(${1:player})"},
	{ "trigger": "watchForThrowbacks\t#using scripts\\zm\\gametypes\\_weapons;", "contents": "weapons::watchForThrowbacks()"},
	{ "trigger": "registerGrenadeLauncherDudDvar\t#using scripts\\zm\\gametypes\\_weapons;", "contents": "weapons::registerGrenadeLauncherDudDvar(${1:dvarString}, ${2:defaultValue}, ${3:minValue}, ${4:maxValue})"},
	{ "trigger": "registerThrownGrenadeDudDvar\t#using scripts\\zm\\gametypes\\_weapons;", "contents": "weapons::registerThrownGrenadeDudDvar(${1:dvarString}, ${2:defaultValue}, ${3:minValue}, ${4:maxValue})"},
	{ "trigger": "registerKillstreakDelay\t#using scripts\\zm\\gametypes\\_weapons;", "contents": "weapons::registerKillstreakDelay(${1:dvarString}, ${2:defaultValue}, ${3:minValue}, ${4:maxValue})"},
	{ "trigger": "turnGrenadeIntoADud\t#using scripts\\zm\\gametypes\\_weapons;", "contents": "weapons::turnGrenadeIntoADud(${1:weapon}, ${2:isThrownGrenade}, ${3:player})"},
	{ "trigger": "watchForGrenadeDuds\t#using scripts\\zm\\gametypes\\_weapons;", "contents": "weapons::watchForGrenadeDuds()"},
	{ "trigger": "watchForGrenadeLauncherDuds\t#using scripts\\zm\\gametypes\\_weapons;", "contents": "weapons::watchForGrenadeLauncherDuds()"},
	{ "trigger": "getDamageableEnts\t#using scripts\\zm\\gametypes\\_weapons;", "contents": "weapons::getDamageableEnts(${1:pos}, ${2:radius}, ${3:doLOS}, ${4:startRadius})"},
	{ "trigger": "damageEnt\t#using scripts\\zm\\gametypes\\_weapons;", "contents": "weapons::damageEnt(${1:eInflictor}, ${2:eAttacker}, ${3:iDamage}, ${4:sMeansOfDeath}, ${5:weapon}, ${6:damagepos}, ${7:damagedir})"},
	{ "trigger": "debugline\t#using scripts\\zm\\gametypes\\_weapons;", "contents": "weapons::debugline(${1:a}, ${2:b}, ${3:color})"},
	{ "trigger": "onWeaponDamage\t#using scripts\\zm\\gametypes\\_weapons;", "contents": "weapons::onWeaponDamage(${1:eAttacker}, ${2:eInflictor}, ${3:weapon}, ${4:meansOfDeath}, ${5:damage})"},
	{ "trigger": "playConcussionSound\t#using scripts\\zm\\gametypes\\_weapons;", "contents": "weapons::playConcussionSound(${1:duration})"},
	{ "trigger": "deleteEntOnOwnerDeath\t#using scripts\\zm\\gametypes\\_weapons;", "contents": "weapons::deleteEntOnOwnerDeath(${1:owner})"},
	{ "trigger": "updateStowedWeapon\t#using scripts\\zm\\gametypes\\_weapons;", "contents": "weapons::updateStowedWeapon()"},
	{ "trigger": "loadout_get_class_num\t#using scripts\\zm\\gametypes\\_weapons;", "contents": "weapons::loadout_get_class_num()"},
	{ "trigger": "loadout_get_offhand_weapon\t#using scripts\\zm\\gametypes\\_weapons;", "contents": "weapons::loadout_get_offhand_weapon(${1:stat})"},
	{ "trigger": "loadout_get_offhand_count\t#using scripts\\zm\\gametypes\\_weapons;", "contents": "weapons::loadout_get_offhand_count(${1:stat})"},
	{ "trigger": "scavenger_think\t#using scripts\\zm\\gametypes\\_weapons;", "contents": "weapons::scavenger_think()"},
	{ "trigger": "scavenger_hud_create\t#using scripts\\zm\\gametypes\\_weapons;", "contents": "weapons::scavenger_hud_create()"},
	{ "trigger": "dropScavengerForDeath\t#using scripts\\zm\\gametypes\\_weapons;", "contents": "weapons::dropScavengerForDeath(${1:attacker})"},
	{ "trigger": "addLimitedWeapon\t#using scripts\\zm\\gametypes\\_weapons;", "contents": "weapons::addLimitedWeapon(${1:weapon}, ${2:owner}, ${3:num_drops})"},
	{ "trigger": "shouldDropLimitedWeapon\t#using scripts\\zm\\gametypes\\_weapons;", "contents": "weapons::shouldDropLimitedWeapon(${1:weapon}, ${2:owner})"},
	{ "trigger": "dropLimitedWeapon\t#using scripts\\zm\\gametypes\\_weapons;", "contents": "weapons::dropLimitedWeapon(${1:weapon}, ${2:owner}, ${3:item})"},
	{ "trigger": "limitedPickup\t#using scripts\\zm\\gametypes\\_weapons;", "contents": "weapons::limitedPickup(${1:limited_info})"},
	{ "trigger": "is_primary_weapon\t#using scripts\\shared\\weapons_shared;", "contents": "weapons::is_primary_weapon(${1:weapon})"},
	{ "trigger": "is_side_arm\t#using scripts\\shared\\weapons_shared;", "contents": "weapons::is_side_arm(${1:weapon})"},
	{ "trigger": "is_inventory\t#using scripts\\shared\\weapons_shared;", "contents": "weapons::is_inventory(${1:weapon})"},
	{ "trigger": "is_grenade\t#using scripts\\shared\\weapons_shared;", "contents": "weapons::is_grenade(${1:weapon})"},
	{ "trigger": "force_stowed_weapon_update\t#using scripts\\shared\\weapons_shared;", "contents": "weapons::force_stowed_weapon_update()"},
	{ "trigger": "detach_carry_object_model\t#using scripts\\shared\\weapons_shared;", "contents": "weapons::detach_carry_object_model()"},
	{ "trigger": "detach_all_weapons\t#using scripts\\shared\\weapons_shared;", "contents": "weapons::detach_all_weapons()"},
	{ "trigger": "stow_on_back\t#using scripts\\shared\\weapons_shared;", "contents": "weapons::stow_on_back(${1:current})"},
	{ "trigger": "stow_on_hip\t#using scripts\\shared\\weapons_shared;", "contents": "weapons::stow_on_hip()"},
	{ "trigger": "weaponDamageTracePassed\t#using scripts\\shared\\weapons_shared;", "contents": "weapons::weaponDamageTracePassed(${1:from}, ${2:to}, ${3:startRadius}, ${4:ignore})"},
	{ "trigger": "weaponDamageTrace\t#using scripts\\shared\\weapons_shared;", "contents": "weapons::weaponDamageTrace(${1:from}, ${2:to}, ${3:startRadius}, ${4:ignore})"},
	{ "trigger": "has_lmg\t#using scripts\\shared\\weapons_shared;", "contents": "weapons::has_lmg()"},
	{ "trigger": "has_launcher\t#using scripts\\shared\\weapons_shared;", "contents": "weapons::has_launcher()"},
	{ "trigger": "has_hero_weapon\t#using scripts\\shared\\weapons_shared;", "contents": "weapons::has_hero_weapon()"},
	{ "trigger": "has_lockon\t#using scripts\\shared\\weapons_shared;", "contents": "weapons::has_lockon(${1:target})"},
	{ "trigger": "play_animation\t#using scripts\\shared\\lui_shared;", "contents": "lui::play_animation(${1:menu}, ${2:str_anim})"},
	{ "trigger": "set_color\t#using scripts\\shared\\lui_shared;", "contents": "lui::set_color(${1:menu}, ${2:color})"},
	{ "trigger": "set_value_for_player\t#using scripts\\shared\\lui_shared;", "contents": "lui::set_value_for_player(${1:str_menu_id}, ${2:str_variable_id}, ${3:value})"},
	{ "trigger": "set_global\t#using scripts\\shared\\lui_shared;", "contents": "lui::set_global(${1:str_menu_id}, ${2:str_variable_id}, ${3:value})"},
	{ "trigger": "timer\t#using scripts\\shared\\lui_shared;", "contents": "lui::timer(${1:n_time}, ${2:str_endon}, ${3:x}, ${4:y}, ${5:height})"},
	{ "trigger": "prime_movie\t#using scripts\\shared\\lui_shared;", "contents": "lui::prime_movie(${1:str_movie}, ${2:b_looping = false}, ${3:str_key = \"\"})"},
	{ "trigger": "play_movie\t#using scripts\\shared\\lui_shared;", "contents": "lui::play_movie(${1:str_movie}, ${2:str_type}, ${3:show_black_screen = false}, ${4:b_looping = false}, ${5:str_key = \"\"})"},
	{ "trigger": "play_movie_with_timeout\t#using scripts\\shared\\lui_shared;", "contents": "lui::play_movie_with_timeout(${1:str_movie}, ${2:str_type}, ${3:timeout}, ${4:show_black_screen = false}, ${5:b_looping = false}, ${6:str_key = \"\"})"},
	{ "trigger": "screen_flash\t#using scripts\\shared\\lui_shared;", "contents": "lui::screen_flash(${1:n_fadein_time}, ${2:n_hold_time}, ${3:n_fadeout_time}, ${4:n_target_alpha = 1}, ${5:v_color}, ${6:b_force_close_menu = false})"},
	{ "trigger": "screen_fade\t#using scripts\\shared\\lui_shared;", "contents": "lui::screen_fade(${1:n_time}, ${2:n_target_alpha = 1}, ${3:n_start_alpha = 0}, ${4:v_color}, ${5:b_force_close_menu = false}, ${6:str_menu_id})"},
	{ "trigger": "screen_fade_out\t#using scripts\\shared\\lui_shared;", "contents": "lui::screen_fade_out(${1:n_time}, ${2:v_color}, ${3:str_menu_id})"},
	{ "trigger": "screen_fade_in\t#using scripts\\shared\\lui_shared;", "contents": "lui::screen_fade_in(${1:n_time}, ${2:v_color}, ${3:str_menu_id})"},
	{ "trigger": "screen_close_menu\t#using scripts\\shared\\lui_shared;", "contents": "lui::screen_close_menu()"},
	{ "trigger": "open_generic_script_dialog\t#using scripts\\shared\\lui_shared;", "contents": "lui::open_generic_script_dialog(${1:title}, ${2:description})"},
	{ "trigger": "open_script_dialog\t#using scripts\\shared\\lui_shared;", "contents": "lui::open_script_dialog(${1:dialog_name})"},
	{ "trigger": "enable_staminup_perk_for_level\t#using scripts\\zm\\_zm_perk_staminup;", "contents": "zm_perk_staminup::enable_staminup_perk_for_level()"},
	{ "trigger": "staminup_precache\t#using scripts\\zm\\_zm_perk_staminup;", "contents": "zm_perk_staminup::staminup_precache()"},
	{ "trigger": "staminup_register_clientfield\t#using scripts\\zm\\_zm_perk_staminup;", "contents": "zm_perk_staminup::staminup_register_clientfield()"},
	{ "trigger": "staminup_set_clientfield\t#using scripts\\zm\\_zm_perk_staminup;", "contents": "zm_perk_staminup::staminup_set_clientfield(${1:state})"},
	{ "trigger": "staminup_perk_machine_setup\t#using scripts\\zm\\_zm_perk_staminup;", "contents": "zm_perk_staminup::staminup_perk_machine_setup(${1:use_trigger}, ${2:perk_machine}, ${3:bump_trigger}, ${4:collision})"},
	{ "trigger": "setupAttackProperties\t#using scripts\\zm\\_zm_behavior_utility;", "contents": "zm_behavior_utility::setupAttackProperties()"},
	{ "trigger": "enteredPlayableArea\t#using scripts\\zm\\_zm_behavior_utility;", "contents": "zm_behavior_utility::enteredPlayableArea()"},
	{ "trigger": "AddAIOverrideDamageCallback\t#using scripts\\shared\\ai\\archetype_utility;", "contents": "AiUtility::AddAIOverrideDamageCallback(${1:entity}, ${2:callback}, ${3:addToFront})"},
	{ "trigger": "gadget_rapid_strike_is_inuse\t#using scripts\\shared\\abilities\\gadgets\\_gadget_rapid_strike;", "contents": "_gadget_rapid_strike::gadget_rapid_strike_is_inuse(${1:slot})"},
	{ "trigger": "gadget_rapid_strike_is_flickering\t#using scripts\\shared\\abilities\\gadgets\\_gadget_rapid_strike;", "contents": "_gadget_rapid_strike::gadget_rapid_strike_is_flickering(${1:slot})"},
	{ "trigger": "gadget_rapid_strike_on_flicker\t#using scripts\\shared\\abilities\\gadgets\\_gadget_rapid_strike;", "contents": "_gadget_rapid_strike::gadget_rapid_strike_on_flicker(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_rapid_strike_on_give\t#using scripts\\shared\\abilities\\gadgets\\_gadget_rapid_strike;", "contents": "_gadget_rapid_strike::gadget_rapid_strike_on_give(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_rapid_strike_on_take\t#using scripts\\shared\\abilities\\gadgets\\_gadget_rapid_strike;", "contents": "_gadget_rapid_strike::gadget_rapid_strike_on_take(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_rapid_strike_on_connect\t#using scripts\\shared\\abilities\\gadgets\\_gadget_rapid_strike;", "contents": "_gadget_rapid_strike::gadget_rapid_strike_on_connect()"},
	{ "trigger": "gadget_rapid_strike_on\t#using scripts\\shared\\abilities\\gadgets\\_gadget_rapid_strike;", "contents": "_gadget_rapid_strike::gadget_rapid_strike_on(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_rapid_strike_off\t#using scripts\\shared\\abilities\\gadgets\\_gadget_rapid_strike;", "contents": "_gadget_rapid_strike::gadget_rapid_strike_off(${1:slot}, ${2:weapon})"},
	{ "trigger": "getTweakableDVarValue\t#using scripts\\shared\\tweakables_shared;", "contents": "tweakables::getTweakableDVarValue(${1:category}, ${2:name})"},
	{ "trigger": "getTweakableDVar\t#using scripts\\shared\\tweakables_shared;", "contents": "tweakables::getTweakableDVar(${1:category}, ${2:name})"},
	{ "trigger": "getTweakableValue\t#using scripts\\shared\\tweakables_shared;", "contents": "tweakables::getTweakableValue(${1:category}, ${2:name})"},
	{ "trigger": "getTweakableLastValue\t#using scripts\\shared\\tweakables_shared;", "contents": "tweakables::getTweakableLastValue(${1:category}, ${2:name})"},
	{ "trigger": "setTweakableValue\t#using scripts\\shared\\tweakables_shared;", "contents": "tweakables::setTweakableValue(${1:category}, ${2:name}, ${3:value})"},
	{ "trigger": "setTweakableLastValue\t#using scripts\\shared\\tweakables_shared;", "contents": "tweakables::setTweakableLastValue(${1:category}, ${2:name}, ${3:value})"},
	{ "trigger": "registerTweakable\t#using scripts\\shared\\tweakables_shared;", "contents": "tweakables::registerTweakable(${1:category}, ${2:name}, ${3:dvar}, ${4:value})"},
	{ "trigger": "updateServerDvar\t#using scripts\\shared\\tweakables_shared;", "contents": "tweakables::updateServerDvar(${1:dvar}, ${2:value})"},
	{ "trigger": "player_is_in_laststand\t#using scripts\\shared\\laststand_shared;", "contents": "laststand::player_is_in_laststand()"},
	{ "trigger": "player_num_in_laststand\t#using scripts\\shared\\laststand_shared;", "contents": "laststand::player_num_in_laststand()"},
	{ "trigger": "player_all_players_in_laststand\t#using scripts\\shared\\laststand_shared;", "contents": "laststand::player_all_players_in_laststand()"},
	{ "trigger": "player_any_player_in_laststand\t#using scripts\\shared\\laststand_shared;", "contents": "laststand::player_any_player_in_laststand()"},
	{ "trigger": "laststand_allowed\t#using scripts\\shared\\laststand_shared;", "contents": "laststand::laststand_allowed(${1:sWeapon}, ${2:sMeansOfDeath}, ${3:sHitLoc})"},
	{ "trigger": "cleanup_suicide_hud\t#using scripts\\shared\\laststand_shared;", "contents": "laststand::cleanup_suicide_hud()"},
	{ "trigger": "clean_up_suicide_hud_on_end_game\t#using scripts\\shared\\laststand_shared;", "contents": "laststand::clean_up_suicide_hud_on_end_game()"},
	{ "trigger": "clean_up_suicide_hud_on_bled_out\t#using scripts\\shared\\laststand_shared;", "contents": "laststand::clean_up_suicide_hud_on_bled_out()"},
	{ "trigger": "is_facing\t#using scripts\\shared\\laststand_shared;", "contents": "laststand::is_facing(${1:facee}, ${2:requiredDot = 0.9})"},
	{ "trigger": "revive_hud_create\t#using scripts\\shared\\laststand_shared;", "contents": "laststand::revive_hud_create()"},
	{ "trigger": "revive_hud_show\t#using scripts\\shared\\laststand_shared;", "contents": "laststand::revive_hud_show()"},
	{ "trigger": "revive_hud_show_n_fade\t#using scripts\\shared\\laststand_shared;", "contents": "laststand::revive_hud_show_n_fade(${1:time})"},
	{ "trigger": "drawcylinder\t#using scripts\\shared\\laststand_shared;", "contents": "laststand::drawcylinder(${1:pos}, ${2:rad}, ${3:height})"},
	{ "trigger": "player_getup_setup\t#using scripts\\shared\\laststand_shared;", "contents": "laststand::player_getup_setup()"},
	{ "trigger": "laststand_getup_damage_watcher\t#using scripts\\shared\\laststand_shared;", "contents": "laststand::laststand_getup_damage_watcher()"},
	{ "trigger": "laststand_getup_hud\t#using scripts\\shared\\laststand_shared;", "contents": "laststand::laststand_getup_hud()"},
	{ "trigger": "laststand_getup_hud_destroy\t#using scripts\\shared\\laststand_shared;", "contents": "laststand::laststand_getup_hud_destroy(${1:hudelem})"},
	{ "trigger": "cleanup_laststand_on_disconnect\t#using scripts\\shared\\laststand_shared;", "contents": "laststand::cleanup_laststand_on_disconnect()"},
	{ "trigger": "get_gadget_name\t#using scripts\\shared\\abilities\\gadgets\\_gadget_multirocket;", "contents": "_gadget_multirocket::get_gadget_name()"},
	{ "trigger": "get_gadget_weapon\t#using scripts\\shared\\abilities\\gadgets\\_gadget_multirocket;", "contents": "_gadget_multirocket::get_gadget_weapon()"},
	{ "trigger": "gadget_multirocket_is_inuse\t#using scripts\\shared\\abilities\\gadgets\\_gadget_multirocket;", "contents": "_gadget_multirocket::gadget_multirocket_is_inuse()"},
	{ "trigger": "gadget_multirocket_is_flickering\t#using scripts\\shared\\abilities\\gadgets\\_gadget_multirocket;", "contents": "_gadget_multirocket::gadget_multirocket_is_flickering()"},
	{ "trigger": "gadget_multirocket_on_flicker\t#using scripts\\shared\\abilities\\gadgets\\_gadget_multirocket;", "contents": "_gadget_multirocket::gadget_multirocket_on_flicker(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_multirocket_on_give\t#using scripts\\shared\\abilities\\gadgets\\_gadget_multirocket;", "contents": "_gadget_multirocket::gadget_multirocket_on_give(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_multirocket_on_take\t#using scripts\\shared\\abilities\\gadgets\\_gadget_multirocket;", "contents": "_gadget_multirocket::gadget_multirocket_on_take(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_multirocket_on_connect\t#using scripts\\shared\\abilities\\gadgets\\_gadget_multirocket;", "contents": "_gadget_multirocket::gadget_multirocket_on_connect()"},
	{ "trigger": "gadget_multirocket_on\t#using scripts\\shared\\abilities\\gadgets\\_gadget_multirocket;", "contents": "_gadget_multirocket::gadget_multirocket_on(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_multirocket_off\t#using scripts\\shared\\abilities\\gadgets\\_gadget_multirocket;", "contents": "_gadget_multirocket::gadget_multirocket_off(${1:slot}, ${2:weapon})"},
	{ "trigger": "set_gadget_multirocket_flicker_status\t#using scripts\\shared\\abilities\\gadgets\\_gadget_multirocket;", "contents": "_gadget_multirocket::set_gadget_multirocket_flicker_status(${1:time}, ${2:status})"},
	{ "trigger": "gadget_multirocket_flicker\t#using scripts\\shared\\abilities\\gadgets\\_gadget_multirocket;", "contents": "_gadget_multirocket::gadget_multirocket_flicker(${1:eventTime})"},
	{ "trigger": "gadget_multirocket_target_acquire\t#using scripts\\shared\\abilities\\gadgets\\_gadget_multirocket; looks for enemy ai to target", "contents": "_gadget_multirocket::gadget_multirocket_target_acquire()"},
	{ "trigger": "gadget_multirocket_weapon_watcher\t#using scripts\\shared\\abilities\\gadgets\\_gadget_multirocket; marked targets are cleared when the gagdget is off", "contents": "_gadget_multirocket::gadget_multirocket_weapon_watcher()"},
	{ "trigger": "gadget_multirocket_fire_watcher\t#using scripts\\shared\\abilities\\gadgets\\_gadget_multirocket; rockets fire at marked targets", "contents": "_gadget_multirocket::gadget_multirocket_fire_watcher()"},
	{ "trigger": "gadget_multirocket_fire\t#using scripts\\shared\\abilities\\gadgets\\_gadget_multirocket;", "contents": "_gadget_multirocket::gadget_multirocket_fire()"},
	{ "trigger": "sndFakeFire\t#using scripts\\shared\\abilities\\gadgets\\_gadget_multirocket;", "contents": "_gadget_multirocket::sndFakeFire()"},
	{ "trigger": "gadget_multirocket_remove_targets\t#using scripts\\shared\\abilities\\gadgets\\_gadget_multirocket;", "contents": "_gadget_multirocket::gadget_multirocket_remove_targets()"},
	{ "trigger": "on_target_killed\t#using scripts\\shared\\abilities\\gadgets\\_gadget_multirocket;", "contents": "_gadget_multirocket::on_target_killed(${1:params})"},
	{ "trigger": "gadget_multirocket_fire_hint_on\t#using scripts\\shared\\abilities\\gadgets\\_gadget_multirocket;", "contents": "_gadget_multirocket::gadget_multirocket_fire_hint_on()"},
	{ "trigger": "gadget_multirocket_fire_hint_off\t#using scripts\\shared\\abilities\\gadgets\\_gadget_multirocket;", "contents": "_gadget_multirocket::gadget_multirocket_fire_hint_off()"},
	{ "trigger": "gadget_multirocket_proximity_explode\t#using scripts\\shared\\abilities\\gadgets\\_gadget_multirocket; self = rocket", "contents": "_gadget_multirocket::gadget_multirocket_proximity_explode(${1:ai_target})"},
	{ "trigger": "gadget_system_overload_is_inuse\t#using scripts\\shared\\abilities\\gadgets\\_gadget_system_overload;", "contents": "_gadget_system_overload::gadget_system_overload_is_inuse(${1:slot})"},
	{ "trigger": "gadget_system_overload_is_flickering\t#using scripts\\shared\\abilities\\gadgets\\_gadget_system_overload;", "contents": "_gadget_system_overload::gadget_system_overload_is_flickering(${1:slot})"},
	{ "trigger": "gadget_system_overload_on_flicker\t#using scripts\\shared\\abilities\\gadgets\\_gadget_system_overload;", "contents": "_gadget_system_overload::gadget_system_overload_on_flicker(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_system_overload_on_give\t#using scripts\\shared\\abilities\\gadgets\\_gadget_system_overload;", "contents": "_gadget_system_overload::gadget_system_overload_on_give(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_system_overload_on_take\t#using scripts\\shared\\abilities\\gadgets\\_gadget_system_overload;", "contents": "_gadget_system_overload::gadget_system_overload_on_take(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_system_overload_on_connect\t#using scripts\\shared\\abilities\\gadgets\\_gadget_system_overload;", "contents": "_gadget_system_overload::gadget_system_overload_on_connect()"},
	{ "trigger": "gadget_system_overload_on\t#using scripts\\shared\\abilities\\gadgets\\_gadget_system_overload;", "contents": "_gadget_system_overload::gadget_system_overload_on(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_system_overload_off\t#using scripts\\shared\\abilities\\gadgets\\_gadget_system_overload;", "contents": "_gadget_system_overload::gadget_system_overload_off(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_system_overload_is_primed\t#using scripts\\shared\\abilities\\gadgets\\_gadget_system_overload;", "contents": "_gadget_system_overload::gadget_system_overload_is_primed(${1:slot}, ${2:weapon})"},
	{ "trigger": "destructible_cover_think\t#using scripts\\shared\\destructible_cover_shared;", "contents": "destructible_cover_shared::destructible_cover_think()"},
	{ "trigger": "hide_cracked_parts\t#using scripts\\shared\\destructible_cover_shared;", "contents": "destructible_cover_shared::hide_cracked_parts(${1:tag_array})"},
	{ "trigger": "dest_model_think\t#using scripts\\shared\\destructible_cover_shared;", "contents": "destructible_cover_shared::dest_model_think()"},
	{ "trigger": "pass_on_damage\t#using scripts\\shared\\destructible_cover_shared;", "contents": "destructible_cover_shared::pass_on_damage(${1:damage}, ${2:direction_vec}, ${3:who}, ${4:tag}, ${5:type})"},
	{ "trigger": "destroy_chunks\t#using scripts\\shared\\destructible_cover_shared;", "contents": "destructible_cover_shared::destroy_chunks(${1:chunk})"},
	{ "trigger": "precache_destructible_fx\t#using scripts\\shared\\destructible_cover_shared;", "contents": "destructible_cover_shared::precache_destructible_fx()"},
	{ "trigger": "destroy_piece\t#using scripts\\shared\\destructible_cover_shared;", "contents": "destructible_cover_shared::destroy_piece(${1:tag})"},
	{ "trigger": "dest_collision_watcher\t#using scripts\\shared\\destructible_cover_shared;", "contents": "destructible_cover_shared::dest_collision_watcher(${1:tag})"},
	{ "trigger": "destructible_cover_geo_think\t#using scripts\\shared\\destructible_cover_shared;", "contents": "destructible_cover_shared::destructible_cover_geo_think()"},
	{ "trigger": "ents_from_script_int\t#using scripts\\shared\\destructible_cover_shared;", "contents": "destructible_cover_shared::ents_from_script_int(${1:int})"},
	{ "trigger": "enable_juggernaut_perk_for_level\t#using scripts\\zm\\_zm_perk_juggernaut;", "contents": "zm_perk_juggernaut::enable_juggernaut_perk_for_level()"},
	{ "trigger": "juggernaut_precache\t#using scripts\\zm\\_zm_perk_juggernaut;", "contents": "zm_perk_juggernaut::juggernaut_precache()"},
	{ "trigger": "juggernaut_register_clientfield\t#using scripts\\zm\\_zm_perk_juggernaut;", "contents": "zm_perk_juggernaut::juggernaut_register_clientfield()"},
	{ "trigger": "juggernaut_set_clientfield\t#using scripts\\zm\\_zm_perk_juggernaut;", "contents": "zm_perk_juggernaut::juggernaut_set_clientfield(${1:state})"},
	{ "trigger": "juggernaut_perk_machine_setup\t#using scripts\\zm\\_zm_perk_juggernaut;", "contents": "zm_perk_juggernaut::juggernaut_perk_machine_setup(${1:use_trigger}, ${2:perk_machine}, ${3:bump_trigger}, ${4:collision})"},
	{ "trigger": "give_juggernaut_perk\t#using scripts\\zm\\_zm_perk_juggernaut;", "contents": "zm_perk_juggernaut::give_juggernaut_perk()"},
	{ "trigger": "take_juggernaut_perk\t#using scripts\\zm\\_zm_perk_juggernaut;", "contents": "zm_perk_juggernaut::take_juggernaut_perk(${1:b_pause}, ${2:str_perk}, ${3:str_result})"},
	{ "trigger": "on_player_spawned\t#using scripts\\zm\\_zm_playerhealth;", "contents": "zm_playerhealth::on_player_spawned()"},
	{ "trigger": "player_health_visionset\t#using scripts\\zm\\_zm_playerhealth;", "contents": "zm_playerhealth::player_health_visionset()"},
	{ "trigger": "playerHurtcheck\t#using scripts\\zm\\_zm_playerhealth;", "contents": "zm_playerhealth::playerHurtcheck()"},
	{ "trigger": "playerHealthRegen\t#using scripts\\zm\\_zm_playerhealth;", "contents": "zm_playerhealth::playerHealthRegen()"},
	{ "trigger": "playerInvul\t#using scripts\\zm\\_zm_playerhealth;", "contents": "zm_playerhealth::playerInvul(${1:timer})"},
	{ "trigger": "healthOverlay\t#using scripts\\zm\\_zm_playerhealth;", "contents": "zm_playerhealth::healthOverlay()"},
	{ "trigger": "fadeFunc\t#using scripts\\zm\\_zm_playerhealth;", "contents": "zm_playerhealth::fadeFunc(${1:overlay}, ${2:severity}, ${3:mult}, ${4:hud_scaleOnly})"},
	{ "trigger": "watchHideRedFlashingOverlay\t#using scripts\\zm\\_zm_playerhealth;", "contents": "zm_playerhealth::watchHideRedFlashingOverlay(${1:overlay})"},
	{ "trigger": "redFlashingOverlay\t#using scripts\\zm\\_zm_playerhealth;", "contents": "zm_playerhealth::redFlashingOverlay(${1:overlay})"},
	{ "trigger": "healthOverlay_remove\t#using scripts\\zm\\_zm_playerhealth;", "contents": "zm_playerhealth::healthOverlay_remove(${1:overlay})"},
	{ "trigger": "empty_kill_func\t#using scripts\\zm\\_zm_playerhealth;", "contents": "zm_playerhealth::empty_kill_func(${1:type}, ${2:loc}, ${3:point}, ${4:attacker}, ${5:amount})"},
	{ "trigger": "load\t#using scripts\\shared\\table_shared;", "contents": "table::load(${1:str_filename}, ${2:str_table_start}, ${3:b_convert_numbers = true})"},
	{ "trigger": "str_to_num\t#using scripts\\shared\\table_shared;", "contents": "table::str_to_num(${1:value})"},
	{ "trigger": "gadget_misdirection_is_inuse\t#using scripts\\shared\\abilities\\gadgets\\_gadget_misdirection;", "contents": "_gadget_misdirection::gadget_misdirection_is_inuse(${1:slot})"},
	{ "trigger": "gadget_misdirection_is_flickering\t#using scripts\\shared\\abilities\\gadgets\\_gadget_misdirection;", "contents": "_gadget_misdirection::gadget_misdirection_is_flickering(${1:slot})"},
	{ "trigger": "gadget_misdirection_on_flicker\t#using scripts\\shared\\abilities\\gadgets\\_gadget_misdirection;", "contents": "_gadget_misdirection::gadget_misdirection_on_flicker(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_misdirection_on_give\t#using scripts\\shared\\abilities\\gadgets\\_gadget_misdirection;", "contents": "_gadget_misdirection::gadget_misdirection_on_give(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_misdirection_on_take\t#using scripts\\shared\\abilities\\gadgets\\_gadget_misdirection;", "contents": "_gadget_misdirection::gadget_misdirection_on_take(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_misdirection_on_connect\t#using scripts\\shared\\abilities\\gadgets\\_gadget_misdirection;", "contents": "_gadget_misdirection::gadget_misdirection_on_connect()"},
	{ "trigger": "gadget_misdirection_on\t#using scripts\\shared\\abilities\\gadgets\\_gadget_misdirection;", "contents": "_gadget_misdirection::gadget_misdirection_on(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_misdirection_off\t#using scripts\\shared\\abilities\\gadgets\\_gadget_misdirection;", "contents": "_gadget_misdirection::gadget_misdirection_off(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_misdirection_is_primed\t#using scripts\\shared\\abilities\\gadgets\\_gadget_misdirection;", "contents": "_gadget_misdirection::gadget_misdirection_is_primed(${1:slot}, ${2:weapon})"},
	{ "trigger": "thundergun_on_player_connect\t#using scripts\\zm\\_zm_weap_thundergun;", "contents": "zm_weap_thundergun::thundergun_on_player_connect()"},
	{ "trigger": "wait_for_thundergun_fired\t#using scripts\\zm\\_zm_weap_thundergun;", "contents": "zm_weap_thundergun::wait_for_thundergun_fired()"},
	{ "trigger": "thundergun_network_choke\t#using scripts\\zm\\_zm_weap_thundergun;", "contents": "zm_weap_thundergun::thundergun_network_choke()"},
	{ "trigger": "thundergun_fired\t#using scripts\\zm\\_zm_weap_thundergun;", "contents": "zm_weap_thundergun::thundergun_fired()"},
	{ "trigger": "thundergun_affect_ais\t#using scripts\\zm\\_zm_weap_thundergun;", "contents": "zm_weap_thundergun::thundergun_affect_ais()"},
	{ "trigger": "thundergun_get_enemies_in_range\t#using scripts\\zm\\_zm_weap_thundergun;", "contents": "zm_weap_thundergun::thundergun_get_enemies_in_range()"},
	{ "trigger": "thundergun_debug_print\t#using scripts\\zm\\_zm_weap_thundergun;", "contents": "zm_weap_thundergun::thundergun_debug_print(${1:msg}, ${2:color})"},
	{ "trigger": "thundergun_fling_zombie\t#using scripts\\zm\\_zm_weap_thundergun;", "contents": "zm_weap_thundergun::thundergun_fling_zombie(${1:player}, ${2:fling_vec}, ${3:index})"},
	{ "trigger": "zombie_knockdown\t#using scripts\\zm\\_zm_weap_thundergun;", "contents": "zm_weap_thundergun::zombie_knockdown(${1:player}, ${2:gib})"},
	{ "trigger": "playThundergunPainAnim\t#using scripts\\zm\\_zm_weap_thundergun;", "contents": "zm_weap_thundergun::playThundergunPainAnim()"},
	{ "trigger": "thundergun_knockdown_zombie\t#using scripts\\zm\\_zm_weap_thundergun;", "contents": "zm_weap_thundergun::thundergun_knockdown_zombie(${1:player}, ${2:gib})"},
	{ "trigger": "handle_thundergun_pain_notetracks\t#using scripts\\zm\\_zm_weap_thundergun;", "contents": "zm_weap_thundergun::handle_thundergun_pain_notetracks(${1:note})"},
	{ "trigger": "is_thundergun_damage\t#using scripts\\zm\\_zm_weap_thundergun;", "contents": "zm_weap_thundergun::is_thundergun_damage()"},
	{ "trigger": "enemy_killed_by_thundergun\t#using scripts\\zm\\_zm_weap_thundergun;", "contents": "zm_weap_thundergun::enemy_killed_by_thundergun()"},
	{ "trigger": "thundergun_sound_thread\t#using scripts\\zm\\_zm_weap_thundergun;", "contents": "zm_weap_thundergun::thundergun_sound_thread()"},
	{ "trigger": "setup_thundergun_vox\t#using scripts\\zm\\_zm_weap_thundergun;", "contents": "zm_weap_thundergun::setup_thundergun_vox(${1:player}, ${2:fling}, ${3:gib}, ${4:knockdown})"},
	{ "trigger": "override_thundergun_damage_func\t#using scripts\\zm\\_zm_weap_thundergun;", "contents": "zm_weap_thundergun::override_thundergun_damage_func(${1:player}, ${2:gib})"},
	{ "trigger": "check_spawnflags\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::check_spawnflags()"},
	{ "trigger": "trigger_unlock\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::trigger_unlock(${1:trigger})"},
	{ "trigger": "trigger_unlock_death\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::trigger_unlock_death(${1:target})"},
	{ "trigger": "wait_for_an_unlocked_trigger\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::wait_for_an_unlocked_trigger(${1:triggers}, ${2:noteworthy})"},
	{ "trigger": "report_trigger\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::report_trigger(${1:ent}, ${2:noteworthy})"},
	{ "trigger": "get_trigger_look_target\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::get_trigger_look_target()"},
	{ "trigger": "trigger_look\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::trigger_look(${1:trigger})"},
	{ "trigger": "trigger_spawner\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::trigger_spawner(${1:trigger})"},
	{ "trigger": "trigger_spawner_spawn\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::trigger_spawner_spawn()"},
	{ "trigger": "trigger_notify\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::trigger_notify(${1:trigger}, ${2:msg})"},
	{ "trigger": "flag_set_trigger\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::flag_set_trigger(${1:trigger}, ${2:str_flag})"},
	{ "trigger": "flag_clear_trigger\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::flag_clear_trigger(${1:trigger}, ${2:str_flag})"},
	{ "trigger": "add_tokens_to_trigger_flags\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::add_tokens_to_trigger_flags(${1:tokens})"},
	{ "trigger": "script_flag_false_trigger\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::script_flag_false_trigger(${1:trigger})"},
	{ "trigger": "script_flag_true_trigger\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::script_flag_true_trigger(${1:trigger})"},
	{ "trigger": "friendly_respawn_trigger\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::friendly_respawn_trigger(${1:trigger})"},
	{ "trigger": "friendly_respawn_clear\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::friendly_respawn_clear(${1:trigger})"},
	{ "trigger": "trigger_turns_off\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::trigger_turns_off(${1:trigger})"},
	{ "trigger": "script_flag_set_touching\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::script_flag_set_touching(${1:trigger})"},
	{ "trigger": "_detect_touched\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::_detect_touched()"},
	{ "trigger": "trigger_delete_on_touch\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::trigger_delete_on_touch(${1:trigger})"},
	{ "trigger": "flag_set_touching\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::flag_set_touching(${1:trigger})"},
	{ "trigger": "trigger_once\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::trigger_once(${1:trig})"},
	{ "trigger": "trigger_hint\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::trigger_hint(${1:trigger})"},
	{ "trigger": "trigger_exploder\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::trigger_exploder(${1:trigger})"},
	{ "trigger": "display_hint\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::display_hint(${1:hint})"},
	{ "trigger": "_hint_print\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::_hint_print(${1:string}, ${2:breakfunc})"},
	{ "trigger": "_hint_print_wait\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::_hint_print_wait(${1:length}, ${2:breakfunc})"},
	{ "trigger": "get_all\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::get_all(${1:type1}, ${2:type2}, ${3:type3}, ${4:type4}, ${5:type5}, ${6:type6}, ${7:type7}, ${8:type8}, ${9:type9})"},
	{ "trigger": "_is_valid_trigger_type\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::_is_valid_trigger_type(${1:type})"},
	{ "trigger": "Name: wait_till\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::Name: wait_till(${1:<str_name>}, ${2:str_key = \"targetname\"}, ${3:e_entity})"},
	{ "trigger": "Example: wait_till\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::Example: wait_till(${1:\"player_in_building1}, ${2:\"script_noteworthy\" );})"},
	{ "trigger": "wait_till\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::wait_till(${1:str_name}, ${2:str_key = \"targetname\"}, ${3:e_entity}, ${4:b_assert = true})"},
	{ "trigger": "_trigger_wait\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::_trigger_wait(${1:e_entity})"},
	{ "trigger": "_trigger_wait_think\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::_trigger_wait_think(${1:s_tracker}, ${2:e_entity})"},
	{ "trigger": "use\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::use(${1:str_name}, ${2:str_key = \"targetname\"}, ${3:ent}, ${4:b_assert = true})"},
	{ "trigger": "set_flag_permissions\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::set_flag_permissions(${1:msg})"},
	{ "trigger": "update_based_on_flags\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::update_based_on_flags()"},
	{ "trigger": "is_look_trigger\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::is_look_trigger(${1:trig})"},
	{ "trigger": "is_trigger_once\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::is_trigger_once(${1:trig})"},
	{ "trigger": "wait_for_either\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::wait_for_either(${1:str_targetname1}, ${2:str_targetname2})"},
	{ "trigger": "_ent_waits_for_trigger\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::_ent_waits_for_trigger(${1:trigger})"},
	{ "trigger": "wait_or_timeout\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::wait_or_timeout(${1:n_time}, ${2:str_name}, ${3:str_key})"},
	{ "trigger": "trigger_on_timeout\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::trigger_on_timeout(${1:n_time}, ${2:b_cancel_on_triggered = true}, ${3:str_name}, ${4:str_key = \"targetname\"})"},
	{ "trigger": "multiple_waits\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::multiple_waits(${1:str_trigger_name}, ${2:str_trigger_notify})"},
	{ "trigger": "multiple_wait\t#using scripts\\shared\\trigger_shared; self = trigger ent", "contents": "trigger::multiple_wait(${1:str_trigger_notify})"},
	{ "trigger": "add_function\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::add_function(${1:trigger}, ${2:str_remove_on}, ${3:func}, ${4:param_1}, ${5:param_2}, ${6:param_3}, ${7:param_4}, ${8:param_5}, ${9:param_6})"},
	{ "trigger": "_do_trigger_function\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::_do_trigger_function(${1:trigger}, ${2:str_remove_on}, ${3:func}, ${4:param_1}, ${5:param_2}, ${6:param_3}, ${7:param_4}, ${8:param_5}, ${9:param_6})"},
	{ "trigger": "kill_spawner_trigger\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::kill_spawner_trigger(${1:trigger})"},
	{ "trigger": "get_script_linkto_targets\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::get_script_linkto_targets()"},
	{ "trigger": "delete_link_chain\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::delete_link_chain(${1:trigger})"},
	{ "trigger": "delete_links_then_self\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::delete_links_then_self()"},
	{ "trigger": "no_crouch_or_prone_think\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::no_crouch_or_prone_think(${1:trigger})"},
	{ "trigger": "no_prone_think\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::no_prone_think(${1:trigger})"},
	{ "trigger": "trigger_group\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::trigger_group()"},
	{ "trigger": "trigger_group_remove\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::trigger_group_remove()"},
	{ "trigger": "function_thread\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::function_thread(${1:ent}, ${2:on_enter_payload}, ${3:on_exit_payload})"},
	{ "trigger": "ent_already_in\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::ent_already_in(${1:trig})"},
	{ "trigger": "add_to_ent\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::add_to_ent(${1:ent}, ${2:trig})"},
	{ "trigger": "remove_from_ent\t#using scripts\\shared\\trigger_shared;", "contents": "trigger::remove_from_ent(${1:ent}, ${2:trig})"},
	{ "trigger": "get_unused_explosion\t#using scripts\\zm\\_destructible;", "contents": "destructible::get_unused_explosion()"},
	{ "trigger": "physics_explosion_and_rumble\t#using scripts\\zm\\_destructible;", "contents": "destructible::physics_explosion_and_rumble(${1:origin}, ${2:radius}, ${3:physics_explosion})"},
	{ "trigger": "destructible_event_callback\t#using scripts\\zm\\_destructible; self == the destructible object (like the car or barrel)", "contents": "destructible::destructible_event_callback(${1:destructible_event}, ${2:attacker}, ${3:weapon})"},
	{ "trigger": "simple_explosion\t#using scripts\\zm\\_destructible;", "contents": "destructible::simple_explosion(${1:attacker})"},
	{ "trigger": "simple_timed_explosion\t#using scripts\\zm\\_destructible;", "contents": "destructible::simple_timed_explosion(${1:destructible_event}, ${2:attacker})"},
	{ "trigger": "complex_explosion\t#using scripts\\zm\\_destructible;", "contents": "destructible::complex_explosion(${1:attacker}, ${2:max_radius})"},
	{ "trigger": "destructible_car_explosion\t#using scripts\\zm\\_destructible;", "contents": "destructible::destructible_car_explosion(${1:attacker}, ${2:physics_explosion})"},
	{ "trigger": "destructible_car_death_think\t#using scripts\\zm\\_destructible;", "contents": "destructible::destructible_car_death_think()"},
	{ "trigger": "destructible_car_grenade_stuck_think\t#using scripts\\zm\\_destructible;", "contents": "destructible::destructible_car_grenade_stuck_think()"},
	{ "trigger": "destructible_car_grenade_stuck_explode\t#using scripts\\zm\\_destructible;", "contents": "destructible::destructible_car_grenade_stuck_explode(${1:missile})"},
	{ "trigger": "destructible_car_hacked_c4\t#using scripts\\zm\\_destructible;", "contents": "destructible::destructible_car_hacked_c4(${1:car})"},
	{ "trigger": "destructible_car_death_notify\t#using scripts\\zm\\_destructible;", "contents": "destructible::destructible_car_death_notify()"},
	{ "trigger": "destructible_car_fire_think\t#using scripts\\zm\\_destructible;", "contents": "destructible::destructible_car_fire_think(${1:attacker})"},
	{ "trigger": "CodeCallback_DestructibleEvent\t#using scripts\\zm\\_destructible;", "contents": "destructible::CodeCallback_DestructibleEvent(${1:event}, ${2:param1}, ${3:param2}, ${4:param3}, ${5:param4})"},
	{ "trigger": "breakAfter\t#using scripts\\zm\\_destructible;", "contents": "destructible::breakAfter(${1:time}, ${2:damage}, ${3:piece})"},
	{ "trigger": "explosive_incendiary_explosion\t#using scripts\\zm\\_destructible;", "contents": "destructible::explosive_incendiary_explosion(${1:attacker}, ${2:explosion_radius}, ${3:physics_explosion})"},
	{ "trigger": "explosive_electrical_explosion\t#using scripts\\zm\\_destructible;", "contents": "destructible::explosive_electrical_explosion(${1:attacker}, ${2:explosion_radius}, ${3:physics_explosion})"},
	{ "trigger": "explosive_concussive_explosion\t#using scripts\\zm\\_destructible;", "contents": "destructible::explosive_concussive_explosion(${1:attacker}, ${2:explosion_radius}, ${3:physics_explosion})"},
	{ "trigger": "setup_container_scriptbundle\t#using scripts\\shared\\containers_shared;", "contents": "containers::setup_container_scriptbundle(${1:s_bundle}, ${2:s_container_instance})"},
	{ "trigger": "container_update\t#using scripts\\shared\\containers_shared;", "contents": "containers::container_update(${1:c_container})"},
	{ "trigger": "create_locker_trigger\t#using scripts\\shared\\containers_shared;", "contents": "containers::create_locker_trigger(${1:v_pos}, ${2:n_radius}, ${3:str_message})"},
	{ "trigger": "setup_general_container_bundle\t#using scripts\\shared\\containers_shared;", "contents": "containers::setup_general_container_bundle(${1:str_targetname}, ${2:str_intel_vo}, ${3:str_narrative_collectable_model}, ${4:force_open})"},
	{ "trigger": "setup_locker_double_doors\t#using scripts\\shared\\containers_shared;", "contents": "containers::setup_locker_double_doors(${1:str_left_door_name}, ${2:str_right_door_name}, ${3:center_point_offset})"},
	{ "trigger": "get_closest_ent_from_array\t#using scripts\\shared\\containers_shared;", "contents": "containers::get_closest_ent_from_array(${1:v_pos}, ${2:a_ents})"},
	{ "trigger": "create_locker_doors\t#using scripts\\shared\\containers_shared;", "contents": "containers::create_locker_doors(${1:e_left_door}, ${2:e_right_door}, ${3:door_open_angle}, ${4:door_open_time})"},
	{ "trigger": "gadget_ravage_core_is_inuse\t#using scripts\\shared\\abilities\\gadgets\\_gadget_ravage_core;", "contents": "_gadget_ravage_core::gadget_ravage_core_is_inuse(${1:slot})"},
	{ "trigger": "gadget_ravage_core_is_flickering\t#using scripts\\shared\\abilities\\gadgets\\_gadget_ravage_core;", "contents": "_gadget_ravage_core::gadget_ravage_core_is_flickering(${1:slot})"},
	{ "trigger": "gadget_ravage_core_on_flicker\t#using scripts\\shared\\abilities\\gadgets\\_gadget_ravage_core;", "contents": "_gadget_ravage_core::gadget_ravage_core_on_flicker(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_ravage_core_on_give\t#using scripts\\shared\\abilities\\gadgets\\_gadget_ravage_core;", "contents": "_gadget_ravage_core::gadget_ravage_core_on_give(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_ravage_core_on_take\t#using scripts\\shared\\abilities\\gadgets\\_gadget_ravage_core;", "contents": "_gadget_ravage_core::gadget_ravage_core_on_take(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_ravage_core_on_connect\t#using scripts\\shared\\abilities\\gadgets\\_gadget_ravage_core;", "contents": "_gadget_ravage_core::gadget_ravage_core_on_connect()"},
	{ "trigger": "gadget_ravage_core_on\t#using scripts\\shared\\abilities\\gadgets\\_gadget_ravage_core;", "contents": "_gadget_ravage_core::gadget_ravage_core_on(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_ravage_core_off\t#using scripts\\shared\\abilities\\gadgets\\_gadget_ravage_core;", "contents": "_gadget_ravage_core::gadget_ravage_core_off(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_smokescreen_is_inuse\t#using scripts\\shared\\abilities\\gadgets\\_gadget_smokescreen;", "contents": "_gadget_smokescreen::gadget_smokescreen_is_inuse(${1:slot})"},
	{ "trigger": "gadget_smokescreen_is_flickering\t#using scripts\\shared\\abilities\\gadgets\\_gadget_smokescreen;", "contents": "_gadget_smokescreen::gadget_smokescreen_is_flickering(${1:slot})"},
	{ "trigger": "gadget_smokescreen_on_flicker\t#using scripts\\shared\\abilities\\gadgets\\_gadget_smokescreen;", "contents": "_gadget_smokescreen::gadget_smokescreen_on_flicker(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_smokescreen_on_give\t#using scripts\\shared\\abilities\\gadgets\\_gadget_smokescreen;", "contents": "_gadget_smokescreen::gadget_smokescreen_on_give(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_smokescreen_on_take\t#using scripts\\shared\\abilities\\gadgets\\_gadget_smokescreen;", "contents": "_gadget_smokescreen::gadget_smokescreen_on_take(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_smokescreen_on_connect\t#using scripts\\shared\\abilities\\gadgets\\_gadget_smokescreen;", "contents": "_gadget_smokescreen::gadget_smokescreen_on_connect()"},
	{ "trigger": "gadget_smokescreen_on\t#using scripts\\shared\\abilities\\gadgets\\_gadget_smokescreen;", "contents": "_gadget_smokescreen::gadget_smokescreen_on(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_smokescreen_off\t#using scripts\\shared\\abilities\\gadgets\\_gadget_smokescreen;", "contents": "_gadget_smokescreen::gadget_smokescreen_off(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_smokescreen_is_primed\t#using scripts\\shared\\abilities\\gadgets\\_gadget_smokescreen;", "contents": "_gadget_smokescreen::gadget_smokescreen_is_primed(${1:slot}, ${2:weapon})"},
	{ "trigger": "turn_on_fire_sale\t#using scripts\\zm\\_zm_bgb_machine;", "contents": "bgb_machine::turn_on_fire_sale()"},
	{ "trigger": "turn_off_fire_sale\t#using scripts\\zm\\_zm_bgb_machine;", "contents": "bgb_machine::turn_off_fire_sale()"},
	{ "trigger": "zombie_faller_delete\t#using scripts\\zm\\_zm_ai_faller;", "contents": "zm_ai_faller::zombie_faller_delete()"},
	{ "trigger": "faller_script_parameters\t#using scripts\\zm\\_zm_ai_faller;", "contents": "zm_ai_faller::faller_script_parameters()"},
	{ "trigger": "setup_deathfunc\t#using scripts\\zm\\_zm_ai_faller;", "contents": "zm_ai_faller::setup_deathfunc(${1:func_name})"},
	{ "trigger": "do_zombie_fall\t#using scripts\\zm\\_zm_ai_faller;", "contents": "zm_ai_faller::do_zombie_fall(${1:spot})"},
	{ "trigger": "zombie_faller_do_fall\t#using scripts\\zm\\_zm_ai_faller;", "contents": "zm_ai_faller::zombie_faller_do_fall()"},
	{ "trigger": "zombie_fall_loop\t#using scripts\\zm\\_zm_ai_faller;", "contents": "zm_ai_faller::zombie_fall_loop()"},
	{ "trigger": "zombie_land\t#using scripts\\zm\\_zm_ai_faller;", "contents": "zm_ai_faller::zombie_land()"},
	{ "trigger": "zombie_faller_always_drop\t#using scripts\\zm\\_zm_ai_faller;", "contents": "zm_ai_faller::zombie_faller_always_drop()"},
	{ "trigger": "zombie_faller_drop_not_occupied\t#using scripts\\zm\\_zm_ai_faller;", "contents": "zm_ai_faller::zombie_faller_drop_not_occupied()"},
	{ "trigger": "zombie_faller_watch_all_players\t#using scripts\\zm\\_zm_ai_faller;", "contents": "zm_ai_faller::zombie_faller_watch_all_players()"},
	{ "trigger": "zombie_faller_watch_player\t#using scripts\\zm\\_zm_ai_faller;", "contents": "zm_ai_faller::zombie_faller_watch_player(${1:player})"},
	{ "trigger": "zombie_fall_wait\t#using scripts\\zm\\_zm_ai_faller;", "contents": "zm_ai_faller::zombie_fall_wait()"},
	{ "trigger": "zombie_fall_should_attack\t#using scripts\\zm\\_zm_ai_faller;", "contents": "zm_ai_faller::zombie_fall_should_attack(${1:spot})"},
	{ "trigger": "zombie_fall_get_vicitims\t#using scripts\\zm\\_zm_ai_faller;", "contents": "zm_ai_faller::zombie_fall_get_vicitims(${1:spot})"},
	{ "trigger": "get_fall_anim\t#using scripts\\zm\\_zm_ai_faller;", "contents": "zm_ai_faller::get_fall_anim(${1:spot})"},
	{ "trigger": "zombie_faller_enable_location\t#using scripts\\zm\\_zm_ai_faller;", "contents": "zm_ai_faller::zombie_faller_enable_location()"},
	{ "trigger": "zombie_faller_death_wait\t#using scripts\\zm\\_zm_ai_faller;", "contents": "zm_ai_faller::zombie_faller_death_wait(${1:endon_notify})"},
	{ "trigger": "zombie_fall_death_func\t#using scripts\\zm\\_zm_ai_faller;", "contents": "zm_ai_faller::zombie_fall_death_func()"},
	{ "trigger": "zombie_fall_death\t#using scripts\\zm\\_zm_ai_faller;", "contents": "zm_ai_faller::zombie_fall_death(${1:spot})"},
	{ "trigger": "_damage_mod_to_damage_type\t#using scripts\\zm\\_zm_ai_faller;", "contents": "zm_ai_faller::_damage_mod_to_damage_type(${1:type})"},
	{ "trigger": "zombie_fall_fx\t#using scripts\\zm\\_zm_ai_faller;", "contents": "zm_ai_faller::zombie_fall_fx(${1:spot})"},
	{ "trigger": "zombie_fall_burst_fx\t#using scripts\\zm\\_zm_ai_faller;", "contents": "zm_ai_faller::zombie_fall_burst_fx()"},
	{ "trigger": "zombie_fall_dust_fx\t#using scripts\\zm\\_zm_ai_faller;", "contents": "zm_ai_faller::zombie_fall_dust_fx(${1:zombie})"},
	{ "trigger": "stop_zombie_fall_dust_fx\t#using scripts\\zm\\_zm_ai_faller;", "contents": "zm_ai_faller::stop_zombie_fall_dust_fx(${1:zombie})"},
	{ "trigger": "handle_fall_notetracks\t#using scripts\\zm\\_zm_ai_faller;", "contents": "zm_ai_faller::handle_fall_notetracks(${1:note}, ${2:spot})"},
	{ "trigger": "faller_death_ragdoll\t#using scripts\\zm\\_zm_ai_faller;", "contents": "zm_ai_faller::faller_death_ragdoll()"},
	{ "trigger": "in_player_fov\t#using scripts\\zm\\_zm_ai_faller;", "contents": "zm_ai_faller::in_player_fov(${1:player})"},
	{ "trigger": "potentially_visible\t#using scripts\\zm\\_zm_ai_faller;", "contents": "zm_ai_faller::potentially_visible(${1:how_close})"},
	{ "trigger": "do_zombie_emerge\t#using scripts\\zm\\_zm_ai_faller;", "contents": "zm_ai_faller::do_zombie_emerge(${1:spot})"},
	{ "trigger": "zombie_faller_emerge\t#using scripts\\zm\\_zm_ai_faller;", "contents": "zm_ai_faller::zombie_faller_emerge(${1:spot})"},
	{ "trigger": "zombie_emerge_fx\t#using scripts\\zm\\_zm_ai_faller;", "contents": "zm_ai_faller::zombie_emerge_fx(${1:spot})"},
	{ "trigger": "zombie_emerge_dust_fx\t#using scripts\\zm\\_zm_ai_faller;", "contents": "zm_ai_faller::zombie_emerge_dust_fx(${1:zombie})"},
	{ "trigger": "stop_zombie_emerge_dust_fx\t#using scripts\\zm\\_zm_ai_faller;", "contents": "zm_ai_faller::stop_zombie_emerge_dust_fx(${1:zombie})"},
	{ "trigger": "loop_fx_sound\t#using scripts\\shared\\sound_shared;", "contents": "sound::loop_fx_sound(${1:alias}, ${2:origin}, ${3:ender})"},
	{ "trigger": "loop_delete\t#using scripts\\shared\\sound_shared;", "contents": "sound::loop_delete(${1:ender}, ${2:ent})"},
	{ "trigger": "play_in_space\t#using scripts\\shared\\sound_shared;", "contents": "sound::play_in_space(${1:alias}, ${2:origin}, ${3:master})"},
	{ "trigger": "loop_on_tag\t#using scripts\\shared\\sound_shared;", "contents": "sound::loop_on_tag(${1:alias}, ${2:tag}, ${3:bStopSoundOnDeath})"},
	{ "trigger": "play_on_tag\t#using scripts\\shared\\sound_shared;", "contents": "sound::play_on_tag(${1:alias}, ${2:tag}, ${3:ends_on_death})"},
	{ "trigger": "play_on_entity\t#using scripts\\shared\\sound_shared;", "contents": "sound::play_on_entity(${1:alias})"},
	{ "trigger": "wait_for_sounddone_or_death\t#using scripts\\shared\\sound_shared;", "contents": "sound::wait_for_sounddone_or_death(${1:org})"},
	{ "trigger": "stop_loop_on_entity\t#using scripts\\shared\\sound_shared;", "contents": "sound::stop_loop_on_entity(${1:alias})"},
	{ "trigger": "loop_on_entity\t#using scripts\\shared\\sound_shared;", "contents": "sound::loop_on_entity(${1:alias}, ${2:offset})"},
	{ "trigger": "loop_in_space\t#using scripts\\shared\\sound_shared;", "contents": "sound::loop_in_space(${1:alias}, ${2:origin}, ${3:ender})"},
	{ "trigger": "delete_on_death_wait\t#using scripts\\shared\\sound_shared;", "contents": "sound::delete_on_death_wait(${1:ent}, ${2:sounddone})"},
	{ "trigger": "play_on_players\t#using scripts\\shared\\sound_shared;", "contents": "sound::play_on_players(${1:sound}, ${2:team})"},
	{ "trigger": "on_player_spawned\t#using scripts\\shared\\weapons\\_heatseekingmissile;", "contents": "heatseekingmissile::on_player_spawned()"},
	{ "trigger": "ClearIRTarget\t#using scripts\\shared\\weapons\\_heatseekingmissile;", "contents": "heatseekingmissile::ClearIRTarget()"},
	{ "trigger": "StingerFiredNotify\t#using scripts\\shared\\weapons\\_heatseekingmissile;", "contents": "heatseekingmissile::StingerFiredNotify()"},
	{ "trigger": "StingerWaitForAds\t#using scripts\\shared\\weapons\\_heatseekingmissile;", "contents": "heatseekingmissile::StingerWaitForAds()"},
	{ "trigger": "StingerToggleLoop\t#using scripts\\shared\\weapons\\_heatseekingmissile;", "contents": "heatseekingmissile::StingerToggleLoop()"},
	{ "trigger": "StingerIRTLoop\t#using scripts\\shared\\weapons\\_heatseekingmissile;", "contents": "heatseekingmissile::StingerIRTLoop(${1:weapon})"},
	{ "trigger": "TargetWithinRangeOfPlaySpace\t#using scripts\\shared\\weapons\\_heatseekingmissile;", "contents": "heatseekingmissile::TargetWithinRangeOfPlaySpace(${1:target})"},
	{ "trigger": "DestroyLockOnCanceledMessage\t#using scripts\\shared\\weapons\\_heatseekingmissile;", "contents": "heatseekingmissile::DestroyLockOnCanceledMessage()"},
	{ "trigger": "DisplayLockOnCanceledMessage\t#using scripts\\shared\\weapons\\_heatseekingmissile;", "contents": "heatseekingmissile::DisplayLockOnCanceledMessage()"},
	{ "trigger": "GetBestStingerTarget\t#using scripts\\shared\\weapons\\_heatseekingmissile;", "contents": "heatseekingmissile::GetBestStingerTarget(${1:weapon})"},
	{ "trigger": "CalcLockOnRadius\t#using scripts\\shared\\weapons\\_heatseekingmissile;", "contents": "heatseekingmissile::CalcLockOnRadius(${1:target}, ${2:weapon})"},
	{ "trigger": "CalcLockOnLossRadius\t#using scripts\\shared\\weapons\\_heatseekingmissile;", "contents": "heatseekingmissile::CalcLockOnLossRadius(${1:target}, ${2:weapon})"},
	{ "trigger": "RatioDistanceFromScreenCenter\t#using scripts\\shared\\weapons\\_heatseekingmissile;", "contents": "heatseekingmissile::RatioDistanceFromScreenCenter(${1:target}, ${2:weapon})"},
	{ "trigger": "InsideStingerReticleDetect\t#using scripts\\shared\\weapons\\_heatseekingmissile;", "contents": "heatseekingmissile::InsideStingerReticleDetect(${1:target}, ${2:weapon})"},
	{ "trigger": "InsideStingerReticleNoLock\t#using scripts\\shared\\weapons\\_heatseekingmissile;", "contents": "heatseekingmissile::InsideStingerReticleNoLock(${1:target}, ${2:weapon})"},
	{ "trigger": "InsideStingerReticleLocked\t#using scripts\\shared\\weapons\\_heatseekingmissile;", "contents": "heatseekingmissile::InsideStingerReticleLocked(${1:target}, ${2:weapon})"},
	{ "trigger": "IsStillValidTarget\t#using scripts\\shared\\weapons\\_heatseekingmissile;", "contents": "heatseekingmissile::IsStillValidTarget(${1:ent}, ${2:weapon})"},
	{ "trigger": "PlayerStingerAds\t#using scripts\\shared\\weapons\\_heatseekingmissile;", "contents": "heatseekingmissile::PlayerStingerAds()"},
	{ "trigger": "LoopLocalSeekSound\t#using scripts\\shared\\weapons\\_heatseekingmissile;", "contents": "heatseekingmissile::LoopLocalSeekSound(${1:alias}, ${2:interval})"},
	{ "trigger": "PlaySoundForLocalPlayer\t#using scripts\\shared\\weapons\\_heatseekingmissile;", "contents": "heatseekingmissile::PlaySoundForLocalPlayer(${1:alias})"},
	{ "trigger": "LoopLocalLockSound\t#using scripts\\shared\\weapons\\_heatseekingmissile;", "contents": "heatseekingmissile::LoopLocalLockSound(${1:alias}, ${2:interval})"},
	{ "trigger": "LockSightTest\t#using scripts\\shared\\weapons\\_heatseekingmissile;", "contents": "heatseekingmissile::LockSightTest(${1:target})"},
	{ "trigger": "SoftSightTest\t#using scripts\\shared\\weapons\\_heatseekingmissile;", "contents": "heatseekingmissile::SoftSightTest()"},
	{ "trigger": "InitLockField\t#using scripts\\shared\\weapons\\_heatseekingmissile;", "contents": "heatseekingmissile::InitLockField(${1:target})"},
	{ "trigger": "LockingOn\t#using scripts\\shared\\weapons\\_heatseekingmissile;", "contents": "heatseekingmissile::LockingOn(${1:target}, ${2:lock})"},
	{ "trigger": "watchClearLockingOn\t#using scripts\\shared\\weapons\\_heatseekingmissile;", "contents": "heatseekingmissile::watchClearLockingOn(${1:target}, ${2:clientNum})"},
	{ "trigger": "LockedOn\t#using scripts\\shared\\weapons\\_heatseekingmissile;", "contents": "heatseekingmissile::LockedOn(${1:target}, ${2:lock})"},
	{ "trigger": "TargetingHacking\t#using scripts\\shared\\weapons\\_heatseekingmissile;", "contents": "heatseekingmissile::TargetingHacking(${1:target}, ${2:lock})"},
	{ "trigger": "watchClearHacking\t#using scripts\\shared\\weapons\\_heatseekingmissile;", "contents": "heatseekingmissile::watchClearHacking(${1:target}, ${2:clientNum})"},
	{ "trigger": "setFriendlyFlags\t#using scripts\\shared\\weapons\\_heatseekingmissile;", "contents": "heatseekingmissile::setFriendlyFlags(${1:weapon}, ${2:target})"},
	{ "trigger": "setFriendlyHacking\t#using scripts\\shared\\weapons\\_heatseekingmissile;", "contents": "heatseekingmissile::setFriendlyHacking(${1:weapon}, ${2:target})"},
	{ "trigger": "setFriendlyTargetting\t#using scripts\\shared\\weapons\\_heatseekingmissile;", "contents": "heatseekingmissile::setFriendlyTargetting(${1:weapon}, ${2:target})"},
	{ "trigger": "setFriendlyTargetLocked\t#using scripts\\shared\\weapons\\_heatseekingmissile;", "contents": "heatseekingmissile::setFriendlyTargetLocked(${1:weapon}, ${2:target})"},
	{ "trigger": "watchClearLockedOn\t#using scripts\\shared\\weapons\\_heatseekingmissile;", "contents": "heatseekingmissile::watchClearLockedOn(${1:target}, ${2:clientNum})"},
	{ "trigger": "MissileTarget_LockOnMonitor\t#using scripts\\shared\\weapons\\_heatseekingmissile;", "contents": "heatseekingmissile::MissileTarget_LockOnMonitor(${1:player}, ${2:endon1}, ${3:endon2})"},
	{ "trigger": "_incomingMissile\t#using scripts\\shared\\weapons\\_heatseekingmissile;", "contents": "heatseekingmissile::_incomingMissile(${1:missile}, ${2:attacker})"},
	{ "trigger": "_incomingMissileTracker\t#using scripts\\shared\\weapons\\_heatseekingmissile;", "contents": "heatseekingmissile::_incomingMissileTracker(${1:missile}, ${2:attacker})"},
	{ "trigger": "MissileTarget_isMissileIncoming\t#using scripts\\shared\\weapons\\_heatseekingmissile;", "contents": "heatseekingmissile::MissileTarget_isMissileIncoming()"},
	{ "trigger": "MissileTarget_isOtherPlayerMissileIncoming\t#using scripts\\shared\\weapons\\_heatseekingmissile;", "contents": "heatseekingmissile::MissileTarget_isOtherPlayerMissileIncoming(${1:attacker})"},
	{ "trigger": "MissileTarget_HandleIncomingMissile\t#using scripts\\shared\\weapons\\_heatseekingmissile;", "contents": "heatseekingmissile::MissileTarget_HandleIncomingMissile(${1:responseFunc}, ${2:endon1}, ${3:endon2}, ${4:allowDirectDamage})"},
	{ "trigger": "MissileTarget_ProximityDetonateIncomingMissile\t#using scripts\\shared\\weapons\\_heatseekingmissile;", "contents": "heatseekingmissile::MissileTarget_ProximityDetonateIncomingMissile(${1:endon1}, ${2:endon2}, ${3:allowDirectDamage})"},
	{ "trigger": "_missileDetonate\t#using scripts\\shared\\weapons\\_heatseekingmissile;", "contents": "heatseekingmissile::_missileDetonate(${1:attacker}, ${2:weapon}, ${3:range}, ${4:minDamage}, ${5:maxDamage}, ${6:allowDirectDamage})"},
	{ "trigger": "MissileTarget_ProximityDetonate\t#using scripts\\shared\\weapons\\_heatseekingmissile;", "contents": "heatseekingmissile::MissileTarget_ProximityDetonate(${1:missile}, ${2:attacker}, ${3:weapon}, ${4:endon1}, ${5:endon2}, ${6:allowDirectDamage})"},
	{ "trigger": "MissileTarget_PlayFlareFx\t#using scripts\\shared\\weapons\\_heatseekingmissile;", "contents": "heatseekingmissile::MissileTarget_PlayFlareFx()"},
	{ "trigger": "MissileTarget_DeployFlares\t#using scripts\\shared\\weapons\\_heatseekingmissile; self == missile target", "contents": "heatseekingmissile::MissileTarget_DeployFlares(${1:origin}, ${2:angles})"},
	{ "trigger": "gameResultBookmark\t#using scripts\\shared\\demo_shared;", "contents": "demo::gameResultBookmark(${1:type}, ${2:winningTeamIndex}, ${3:losingTeamIndex})"},
	{ "trigger": "reset_actor_bookmark_kill_times\t#using scripts\\shared\\demo_shared;", "contents": "demo::reset_actor_bookmark_kill_times()"},
	{ "trigger": "add_actor_bookmark_kill_time\t#using scripts\\shared\\demo_shared;", "contents": "demo::add_actor_bookmark_kill_time()"},
	{ "trigger": "watch_actor_bookmarks\t#using scripts\\shared\\demo_shared;", "contents": "demo::watch_actor_bookmarks()"},
	{ "trigger": "precache_damage_fx\t#using scripts\\shared\\vehicles\\_metal_storm;", "contents": "metal_storm::precache_damage_fx()"},
	{ "trigger": "metalstorm_think\t#using scripts\\shared\\vehicles\\_metal_storm;", "contents": "metal_storm::metalstorm_think()"},
	{ "trigger": "metalstorm_off\t#using scripts\\shared\\vehicles\\_metal_storm;", "contents": "metal_storm::metalstorm_off()"},
	{ "trigger": "metalstorm_on\t#using scripts\\shared\\vehicles\\_metal_storm;", "contents": "metal_storm::metalstorm_on()"},
	{ "trigger": "bootup\t#using scripts\\shared\\vehicles\\_metal_storm;", "contents": "metal_storm::bootup()"},
	{ "trigger": "metalstorm_turret_on_vis_target_thread\t#using scripts\\shared\\vehicles\\_metal_storm; Used for grenade watching", "contents": "metal_storm::metalstorm_turret_on_vis_target_thread()"},
	{ "trigger": "metalstorm_turret_on_target_thread\t#using scripts\\shared\\vehicles\\_metal_storm;", "contents": "metal_storm::metalstorm_turret_on_target_thread()"},
	{ "trigger": "metalstorm_turret_scan\t#using scripts\\shared\\vehicles\\_metal_storm;", "contents": "metal_storm::metalstorm_turret_scan(${1:scan_forever})"},
	{ "trigger": "metalstorm_grenade_watcher\t#using scripts\\shared\\vehicles\\_metal_storm;", "contents": "metal_storm::metalstorm_grenade_watcher()"},
	{ "trigger": "metalstorm_weapon_think\t#using scripts\\shared\\vehicles\\_metal_storm;", "contents": "metal_storm::metalstorm_weapon_think()"},
	{ "trigger": "metalstorm_fire_for_time\t#using scripts\\shared\\vehicles\\_metal_storm;", "contents": "metal_storm::metalstorm_fire_for_time(${1:totalFireTime})"},
	{ "trigger": "metalstorm_start_ai\t#using scripts\\shared\\vehicles\\_metal_storm;", "contents": "metal_storm::metalstorm_start_ai(${1:state})"},
	{ "trigger": "metalstorm_stop_ai\t#using scripts\\shared\\vehicles\\_metal_storm;", "contents": "metal_storm::metalstorm_stop_ai()"},
	{ "trigger": "metalstorm_check_move\t#using scripts\\shared\\vehicles\\_metal_storm;", "contents": "metal_storm::metalstorm_check_move(${1:position})"},
	{ "trigger": "path_update_interrupt\t#using scripts\\shared\\vehicles\\_metal_storm;", "contents": "metal_storm::path_update_interrupt()"},
	{ "trigger": "waittill_enemy_too_close_or_timeout\t#using scripts\\shared\\vehicles\\_metal_storm;", "contents": "metal_storm::waittill_enemy_too_close_or_timeout(${1:time})"},
	{ "trigger": "metalstorm_movementupdate\t#using scripts\\shared\\vehicles\\_metal_storm;", "contents": "metal_storm::metalstorm_movementupdate()"},
	{ "trigger": "metalstorm_find_new_position\t#using scripts\\shared\\vehicles\\_metal_storm;", "contents": "metal_storm::metalstorm_find_new_position()"},
	{ "trigger": "metalstorm_exit_vehicle\t#using scripts\\shared\\vehicles\\_metal_storm;", "contents": "metal_storm::metalstorm_exit_vehicle()"},
	{ "trigger": "metalstorm_scripted\t#using scripts\\shared\\vehicles\\_metal_storm;", "contents": "metal_storm::metalstorm_scripted()"},
	{ "trigger": "metalstorm_update_damage_fx\t#using scripts\\shared\\vehicles\\_metal_storm;", "contents": "metal_storm::metalstorm_update_damage_fx()"},
	{ "trigger": "update_damage_states\t#using scripts\\shared\\vehicles\\_metal_storm;", "contents": "metal_storm::update_damage_states()"},
	{ "trigger": "get_damage_fx_ent\t#using scripts\\shared\\vehicles\\_metal_storm;", "contents": "metal_storm::get_damage_fx_ent()"},
	{ "trigger": "cleanup_fx_ents\t#using scripts\\shared\\vehicles\\_metal_storm;", "contents": "metal_storm::cleanup_fx_ents()"},
	{ "trigger": "metalstorm_freeze_blink_lights\t#using scripts\\shared\\vehicles\\_metal_storm;", "contents": "metal_storm::metalstorm_freeze_blink_lights()"},
	{ "trigger": "metalstorm_freeze_death\t#using scripts\\shared\\vehicles\\_metal_storm;", "contents": "metal_storm::metalstorm_freeze_death(${1:attacker}, ${2:mod})"},
	{ "trigger": "metalstorm_death\t#using scripts\\shared\\vehicles\\_metal_storm;", "contents": "metal_storm::metalstorm_death()"},
	{ "trigger": "death_fx\t#using scripts\\shared\\vehicles\\_metal_storm;", "contents": "metal_storm::death_fx()"},
	{ "trigger": "metalstorm_crash_movement\t#using scripts\\shared\\vehicles\\_metal_storm;", "contents": "metal_storm::metalstorm_crash_movement(${1:attacker})"},
	{ "trigger": "spin_crash\t#using scripts\\shared\\vehicles\\_metal_storm;", "contents": "metal_storm::spin_crash()"},
	{ "trigger": "death_turret_rotate\t#using scripts\\shared\\vehicles\\_metal_storm;", "contents": "metal_storm::death_turret_rotate()"},
	{ "trigger": "metalstorm_emped\t#using scripts\\shared\\vehicles\\_metal_storm;", "contents": "metal_storm::metalstorm_emped()"},
	{ "trigger": "MetalStormCallback_VehicleDamage\t#using scripts\\shared\\vehicles\\_metal_storm;", "contents": "metal_storm::MetalStormCallback_VehicleDamage(${1:eInflictor}, ${2:eAttacker}, ${3:iDamage}, ${4:iDFlags}, ${5:sMeansOfDeath}, ${6:weapon}, ${7:vPoint}, ${8:vDir}, ${9:sHitLoc}, ${10:psOffsetTime}, ${11:damageFromUnderneath}, ${12:modelIndex}, ${13:partName})"},
	{ "trigger": "metalstorm_set_team\t#using scripts\\shared\\vehicles\\_metal_storm;", "contents": "metal_storm::metalstorm_set_team(${1:team})"},
	{ "trigger": "metalstorm_blink_lights\t#using scripts\\shared\\vehicles\\_metal_storm;", "contents": "metal_storm::metalstorm_blink_lights()"},
	{ "trigger": "metalstorm_player_bullet_shake\t#using scripts\\shared\\vehicles\\_metal_storm;", "contents": "metal_storm::metalstorm_player_bullet_shake(${1:player})"},
	{ "trigger": "metalstorm_player_rocket_recoil\t#using scripts\\shared\\vehicles\\_metal_storm;", "contents": "metal_storm::metalstorm_player_rocket_recoil(${1:player})"},
	{ "trigger": "metalstorm_rocket_recoil\t#using scripts\\shared\\vehicles\\_metal_storm;", "contents": "metal_storm::metalstorm_rocket_recoil()"},
	{ "trigger": "metalstorm_player_hit_dudes_sound\t#using scripts\\shared\\vehicles\\_metal_storm;", "contents": "metal_storm::metalstorm_player_hit_dudes_sound()"},
	{ "trigger": "on_player_spawned\t#using scripts\\shared\\player_shared; self == player", "contents": "player::on_player_spawned()"},
	{ "trigger": "last_valid_position\t#using scripts\\shared\\player_shared;", "contents": "player::last_valid_position()"},
	{ "trigger": "take_weapons\t#using scripts\\shared\\player_shared;", "contents": "player::take_weapons()"},
	{ "trigger": "generate_weapon_data\t#using scripts\\shared\\player_shared;", "contents": "player::generate_weapon_data()"},
	{ "trigger": "give_back_weapons\t#using scripts\\shared\\player_shared;", "contents": "player::give_back_weapons(${1:b_immediate = false})"},
	{ "trigger": "get_weapondata\t#using scripts\\shared\\player_shared;", "contents": "player::get_weapondata(${1:weapon})"},
	{ "trigger": "weapondata_give\t#using scripts\\shared\\player_shared;", "contents": "player::weapondata_give(${1:weapondata})"},
	{ "trigger": "switch_to_primary_weapon\t#using scripts\\shared\\player_shared;", "contents": "player::switch_to_primary_weapon(${1:b_immediate = false})"},
	{ "trigger": "fill_current_clip\t#using scripts\\shared\\player_shared; self = player", "contents": "player::fill_current_clip()"},
	{ "trigger": "is_valid_weapon\t#using scripts\\shared\\player_shared;", "contents": "player::is_valid_weapon(${1:weaponObject})"},
	{ "trigger": "is_spawn_protected\t#using scripts\\shared\\player_shared;", "contents": "player::is_spawn_protected()"},
	{ "trigger": "simple_respawn\t#using scripts\\shared\\player_shared;", "contents": "player::simple_respawn()"},
	{ "trigger": "get_snapped_spot_origin\t#using scripts\\shared\\player_shared;", "contents": "player::get_snapped_spot_origin(${1:spot_position})"},
	{ "trigger": "allow_stance_change\t#using scripts\\shared\\player_shared;", "contents": "player::allow_stance_change(${1:b_allow = true})"},
	{ "trigger": "on_player_connecting\t#using scripts\\zm\\gametypes\\_spectating;", "contents": "spectating::on_player_connecting()"},
	{ "trigger": "on_player_spawned\t#using scripts\\zm\\gametypes\\_spectating; self == player", "contents": "spectating::on_player_spawned()"},
	{ "trigger": "on_joined_team\t#using scripts\\zm\\gametypes\\_spectating;", "contents": "spectating::on_joined_team()"},
	{ "trigger": "on_joined_spectate\t#using scripts\\zm\\gametypes\\_spectating;", "contents": "spectating::on_joined_spectate()"},
	{ "trigger": "updateSpectateSettings\t#using scripts\\zm\\gametypes\\_spectating;", "contents": "spectating::updateSpectateSettings()"},
	{ "trigger": "getSplitscreenTeam\t#using scripts\\zm\\gametypes\\_spectating;", "contents": "spectating::getSplitscreenTeam()"},
	{ "trigger": "OtherLocalPlayerStillAlive\t#using scripts\\zm\\gametypes\\_spectating;", "contents": "spectating::OtherLocalPlayerStillAlive()"},
	{ "trigger": "allowSpectateAllTeams\t#using scripts\\zm\\gametypes\\_spectating;", "contents": "spectating::allowSpectateAllTeams(${1:allow})"},
	{ "trigger": "allowSpectateAllTeamsExceptTeam\t#using scripts\\zm\\gametypes\\_spectating;", "contents": "spectating::allowSpectateAllTeamsExceptTeam(${1:skip_team}, ${2:allow})"},
	{ "trigger": "setSpectatePermissions\t#using scripts\\zm\\gametypes\\_spectating;", "contents": "spectating::setSpectatePermissions()"},
	{ "trigger": "setSpectatePermissionsForMachine\t#using scripts\\zm\\gametypes\\_spectating;", "contents": "spectating::setSpectatePermissionsForMachine()"},
	{ "trigger": "Annihilate\t#using scripts\\shared\\ai\\systems\\gib;", "contents": "GibServerUtils::Annihilate(${1:entity})"},
	{ "trigger": "CopyGibState\t#using scripts\\shared\\ai\\systems\\gib;", "contents": "GibServerUtils::CopyGibState(${1:originalEntity}, ${2:newEntity})"},
	{ "trigger": "IsGibbed\t#using scripts\\shared\\ai\\systems\\gib;", "contents": "GibServerUtils::IsGibbed(${1:entity}, ${2:gibFlag})"},
	{ "trigger": "GibHat\t#using scripts\\shared\\ai\\systems\\gib;", "contents": "GibServerUtils::GibHat(${1:entity})"},
	{ "trigger": "GibHead\t#using scripts\\shared\\ai\\systems\\gib;", "contents": "GibServerUtils::GibHead(${1:entity})"},
	{ "trigger": "GibLeftArm\t#using scripts\\shared\\ai\\systems\\gib;", "contents": "GibServerUtils::GibLeftArm(${1:entity})"},
	{ "trigger": "GibRightArm\t#using scripts\\shared\\ai\\systems\\gib;", "contents": "GibServerUtils::GibRightArm(${1:entity})"},
	{ "trigger": "GibLeftLeg\t#using scripts\\shared\\ai\\systems\\gib;", "contents": "GibServerUtils::GibLeftLeg(${1:entity})"},
	{ "trigger": "GibRightLeg\t#using scripts\\shared\\ai\\systems\\gib;", "contents": "GibServerUtils::GibRightLeg(${1:entity})"},
	{ "trigger": "GibLegs\t#using scripts\\shared\\ai\\systems\\gib;", "contents": "GibServerUtils::GibLegs(${1:entity})"},
	{ "trigger": "PlayerGibLeftArm\t#using scripts\\shared\\ai\\systems\\gib;", "contents": "GibServerUtils::PlayerGibLeftArm(${1:entity})"},
	{ "trigger": "PlayerGibRightArm\t#using scripts\\shared\\ai\\systems\\gib;", "contents": "GibServerUtils::PlayerGibRightArm(${1:entity})"},
	{ "trigger": "PlayerGibLeftLeg\t#using scripts\\shared\\ai\\systems\\gib;", "contents": "GibServerUtils::PlayerGibLeftLeg(${1:entity})"},
	{ "trigger": "PlayerGibRightLeg\t#using scripts\\shared\\ai\\systems\\gib;", "contents": "GibServerUtils::PlayerGibRightLeg(${1:entity})"},
	{ "trigger": "PlayerGibLegs\t#using scripts\\shared\\ai\\systems\\gib;", "contents": "GibServerUtils::PlayerGibLegs(${1:entity})"},
	{ "trigger": "PlayerGibLeftArmVel\t#using scripts\\shared\\ai\\systems\\gib;", "contents": "GibServerUtils::PlayerGibLeftArmVel(${1:entity}, ${2:dir})"},
	{ "trigger": "PlayerGibRightArmVel\t#using scripts\\shared\\ai\\systems\\gib;", "contents": "GibServerUtils::PlayerGibRightArmVel(${1:entity}, ${2:dir})"},
	{ "trigger": "PlayerGibLeftLegVel\t#using scripts\\shared\\ai\\systems\\gib;", "contents": "GibServerUtils::PlayerGibLeftLegVel(${1:entity}, ${2:dir})"},
	{ "trigger": "PlayerGibRightLegVel\t#using scripts\\shared\\ai\\systems\\gib;", "contents": "GibServerUtils::PlayerGibRightLegVel(${1:entity}, ${2:dir})"},
	{ "trigger": "PlayerGibLegsVel\t#using scripts\\shared\\ai\\systems\\gib;", "contents": "GibServerUtils::PlayerGibLegsVel(${1:entity}, ${2:dir})"},
	{ "trigger": "ReapplyHiddenGibPieces\t#using scripts\\shared\\ai\\systems\\gib;", "contents": "GibServerUtils::ReapplyHiddenGibPieces(${1:entity})"},
	{ "trigger": "ShowHiddenGibPieces\t#using scripts\\shared\\ai\\systems\\gib;", "contents": "GibServerUtils::ShowHiddenGibPieces(${1:entity})"},
	{ "trigger": "ToggleSpawnGibs\t#using scripts\\shared\\ai\\systems\\gib;", "contents": "GibServerUtils::ToggleSpawnGibs(${1:entity}, ${2:shouldSpawnGibs})"},
	{ "trigger": "watch_bolt_detonation\t#using scripts\\shared\\weapons\\_spike_charge_siegebot; self == explosive_bolt entity", "contents": "spike_charge_siegebot::watch_bolt_detonation(${1:owner})"},
	{ "trigger": "enable_doubletap2_perk_for_level\t#using scripts\\zm\\_zm_perk_doubletap2;", "contents": "zm_perk_doubletap2::enable_doubletap2_perk_for_level()"},
	{ "trigger": "doubletap2_precache\t#using scripts\\zm\\_zm_perk_doubletap2;", "contents": "zm_perk_doubletap2::doubletap2_precache()"},
	{ "trigger": "doubletap2_register_clientfield\t#using scripts\\zm\\_zm_perk_doubletap2;", "contents": "zm_perk_doubletap2::doubletap2_register_clientfield()"},
	{ "trigger": "doubletap2_set_clientfield\t#using scripts\\zm\\_zm_perk_doubletap2;", "contents": "zm_perk_doubletap2::doubletap2_set_clientfield(${1:state})"},
	{ "trigger": "doubletap2_perk_machine_setup\t#using scripts\\zm\\_zm_perk_doubletap2;", "contents": "zm_perk_doubletap2::doubletap2_perk_machine_setup(${1:use_trigger}, ${2:perk_machine}, ${3:bump_trigger}, ${4:collision})"},
	{ "trigger": "on_fire_timeout\t#using scripts\\shared\\ai\\zombie_death;", "contents": "zombie_death::on_fire_timeout()"},
	{ "trigger": "flame_death_fx\t#using scripts\\shared\\ai\\zombie_death;", "contents": "zombie_death::flame_death_fx()"},
	{ "trigger": "randomize_array\t#using scripts\\shared\\ai\\zombie_death;", "contents": "zombie_death::randomize_array(${1:array})"},
	{ "trigger": "set_last_gib_time\t#using scripts\\shared\\ai\\zombie_death;", "contents": "zombie_death::set_last_gib_time()"},
	{ "trigger": "get_gib_ref\t#using scripts\\shared\\ai\\zombie_death;", "contents": "zombie_death::get_gib_ref(${1:direction})"},
	{ "trigger": "get_random\t#using scripts\\shared\\ai\\zombie_death;", "contents": "zombie_death::get_random(${1:array})"},
	{ "trigger": "do_gib\t#using scripts\\shared\\ai\\zombie_death;", "contents": "zombie_death::do_gib()"},
	{ "trigger": "precache_gib_fx\t#using scripts\\shared\\ai\\zombie_death;", "contents": "zombie_death::precache_gib_fx()"},
	{ "trigger": "is_warlord_perk\t#using scripts\\shared\\loadout_shared;", "contents": "loadout::is_warlord_perk(${1:itemIndex})"},
	{ "trigger": "is_item_excluded\t#using scripts\\shared\\loadout_shared;", "contents": "loadout::is_item_excluded(${1:itemIndex})"},
	{ "trigger": "getLoadoutItemFromDDLStats\t#using scripts\\shared\\loadout_shared;", "contents": "loadout::getLoadoutItemFromDDLStats(${1:customClassNum}, ${2:loadoutSlot})"},
	{ "trigger": "create_watcher\t#using scripts\\shared\\weapons\\_decoy;", "contents": "decoy::create_watcher()"},
	{ "trigger": "on_spawn\t#using scripts\\shared\\weapons\\_decoy;", "contents": "decoy::on_spawn(${1:watcher}, ${2:owner})"},
	{ "trigger": "destroy\t#using scripts\\shared\\weapons\\_decoy;", "contents": "decoy::destroy(${1:watcher}, ${2:owner})"},
	{ "trigger": "detonate\t#using scripts\\shared\\weapons\\_decoy;", "contents": "decoy::detonate(${1:attacker}, ${2:weapon}, ${3:target})"},
	{ "trigger": "simulate_weapon_fire\t#using scripts\\shared\\weapons\\_decoy;", "contents": "decoy::simulate_weapon_fire(${1:owner})"},
	{ "trigger": "simulate_weapon_fire_machine_gun\t#using scripts\\shared\\weapons\\_decoy;", "contents": "decoy::simulate_weapon_fire_machine_gun(${1:owner}, ${2:weapon})"},
	{ "trigger": "simulate_weapon_fire_machine_gun_semi_auto\t#using scripts\\shared\\weapons\\_decoy;", "contents": "decoy::simulate_weapon_fire_machine_gun_semi_auto(${1:owner}, ${2:weapon})"},
	{ "trigger": "simulate_weapon_fire_pistol\t#using scripts\\shared\\weapons\\_decoy;", "contents": "decoy::simulate_weapon_fire_pistol(${1:owner}, ${2:weapon})"},
	{ "trigger": "simulate_weapon_fire_shotgun\t#using scripts\\shared\\weapons\\_decoy;", "contents": "decoy::simulate_weapon_fire_shotgun(${1:owner}, ${2:weapon})"},
	{ "trigger": "simulate_weapon_fire_machine_gun_full_auto\t#using scripts\\shared\\weapons\\_decoy;", "contents": "decoy::simulate_weapon_fire_machine_gun_full_auto(${1:owner}, ${2:weapon})"},
	{ "trigger": "simulate_weapon_fire_sniper\t#using scripts\\shared\\weapons\\_decoy;", "contents": "decoy::simulate_weapon_fire_sniper(${1:owner}, ${2:weapon})"},
	{ "trigger": "fire_burst\t#using scripts\\shared\\weapons\\_decoy;", "contents": "decoy::fire_burst(${1:owner}, ${2:weapon}, ${3:fireTime}, ${4:count}, ${5:interrupt})"},
	{ "trigger": "finish_while_loop\t#using scripts\\shared\\weapons\\_decoy;", "contents": "decoy::finish_while_loop(${1:weapon}, ${2:reloadTime}, ${3:burst_spacing_min}, ${4:burst_spacing_max})"},
	{ "trigger": "play_reload_sounds\t#using scripts\\shared\\weapons\\_decoy;", "contents": "decoy::play_reload_sounds(${1:weapon}, ${2:reloadTime})"},
	{ "trigger": "watch_for_explosion\t#using scripts\\shared\\weapons\\_decoy;", "contents": "decoy::watch_for_explosion(${1:owner}, ${2:weapon})"},
	{ "trigger": "watch_for_death_before_explosion\t#using scripts\\shared\\weapons\\_decoy;", "contents": "decoy::watch_for_death_before_explosion()"},
	{ "trigger": "do_explosion\t#using scripts\\shared\\weapons\\_decoy;", "contents": "decoy::do_explosion(${1:owner}, ${2:pos}, ${3:weapon}, ${4:count})"},
	{ "trigger": "pick_random_weapon\t#using scripts\\shared\\weapons\\_decoy;", "contents": "decoy::pick_random_weapon()"},
	{ "trigger": "should_play_reload_sound\t#using scripts\\shared\\weapons\\_decoy;", "contents": "decoy::should_play_reload_sound()"},
	{ "trigger": "translate_notify_1\t#using scripts\\shared\\weapons\\grapple;", "contents": "grapple::translate_notify_1(${1:from_notify}, ${2:to_notify})"},
	{ "trigger": "watch_for_grapple\t#using scripts\\shared\\weapons\\grapple;", "contents": "grapple::watch_for_grapple()"},
	{ "trigger": "watch_lockon\t#using scripts\\shared\\weapons\\grapple;", "contents": "grapple::watch_lockon(${1:weapon})"},
	{ "trigger": "clear_lockon_after_grapple\t#using scripts\\shared\\weapons\\grapple;", "contents": "grapple::clear_lockon_after_grapple(${1:weapon})"},
	{ "trigger": "watch_lockon_angles\t#using scripts\\shared\\weapons\\grapple;", "contents": "grapple::watch_lockon_angles(${1:weapon})"},
	{ "trigger": "place_dummy_target\t#using scripts\\shared\\weapons\\grapple;", "contents": "grapple::place_dummy_target(${1:origin}, ${2:forward}, ${3:weapon})"},
	{ "trigger": "get_a_target\t#using scripts\\shared\\weapons\\grapple;", "contents": "grapple::get_a_target(${1:weapon})"},
	{ "trigger": "get_target_type_score\t#using scripts\\shared\\weapons\\grapple;", "contents": "grapple::get_target_type_score(${1:target})"},
	{ "trigger": "get_target_score\t#using scripts\\shared\\weapons\\grapple;", "contents": "grapple::get_target_score(${1:target}, ${2:origin}, ${3:forward}, ${4:min_range}, ${5:max_range})"},
	{ "trigger": "pick_a_target_from\t#using scripts\\shared\\weapons\\grapple;", "contents": "grapple::pick_a_target_from(${1:targets}, ${2:origin}, ${3:forward}, ${4:min_range}, ${5:max_range})"},
	{ "trigger": "trace\t#using scripts\\shared\\weapons\\grapple;", "contents": "grapple::trace(${1:from}, ${2:to}, ${3:target})"},
	{ "trigger": "can_see\t#using scripts\\shared\\weapons\\grapple;", "contents": "grapple::can_see(${1:target}, ${2:target_origin}, ${3:player_origin}, ${4:player_forward}, ${5:distance})"},
	{ "trigger": "is_valid_target\t#using scripts\\shared\\weapons\\grapple;", "contents": "grapple::is_valid_target(${1:ent})"},
	{ "trigger": "inside_screen_angles\t#using scripts\\shared\\weapons\\grapple;", "contents": "grapple::inside_screen_angles(${1:testOrigin}, ${2:weapon}, ${3:newtarget})"},
	{ "trigger": "inside_screen_crosshair_radius\t#using scripts\\shared\\weapons\\grapple;", "contents": "grapple::inside_screen_crosshair_radius(${1:testOrigin}, ${2:weapon})"},
	{ "trigger": "inside_screen_lockon_radius\t#using scripts\\shared\\weapons\\grapple;", "contents": "grapple::inside_screen_lockon_radius(${1:targetOrigin})"},
	{ "trigger": "inside_screen_radius\t#using scripts\\shared\\weapons\\grapple;", "contents": "grapple::inside_screen_radius(${1:targetOrigin}, ${2:radius})"},
	{ "trigger": "get_target_lock_on_origin\t#using scripts\\shared\\weapons\\grapple;", "contents": "grapple::get_target_lock_on_origin(${1:target})"},
	{ "trigger": "get_first_available\t#using scripts\\zm\\_zm_placeable_mine;", "contents": "zm_placeable_mine::get_first_available()"},
	{ "trigger": "add_mine_type\t#using scripts\\zm\\_zm_placeable_mine;", "contents": "zm_placeable_mine::add_mine_type(${1:mine_name}, ${2:str_retrieval_prompt})"},
	{ "trigger": "set_max_per_player\t#using scripts\\zm\\_zm_placeable_mine;", "contents": "zm_placeable_mine::set_max_per_player(${1:n_max_per_player})"},
	{ "trigger": "add_planted_callback\t#using scripts\\zm\\_zm_placeable_mine;", "contents": "zm_placeable_mine::add_planted_callback(${1:fn_planted_cb}, ${2:wpn_name})"},
	{ "trigger": "setup_for_player\t#using scripts\\zm\\_zm_placeable_mine;", "contents": "zm_placeable_mine::setup_for_player(${1:wpn_type}, ${2:ui_model = \"hudItems.showDpadRight\"})"},
	{ "trigger": "disable_prompt_for_player\t#using scripts\\zm\\_zm_placeable_mine;", "contents": "zm_placeable_mine::disable_prompt_for_player(${1:wpn_type})"},
	{ "trigger": "disable_all_prompts_for_player\t#using scripts\\zm\\_zm_placeable_mine;", "contents": "zm_placeable_mine::disable_all_prompts_for_player()"},
	{ "trigger": "setup_watchers\t#using scripts\\zm\\_zm_placeable_mine; self == player", "contents": "zm_placeable_mine::setup_watchers()"},
	{ "trigger": "GlobalLogic_SetupDefault_ZombieCallbacks\t#using scripts\\zm\\gametypes\\_zm_gametype;", "contents": "zm_gametype::GlobalLogic_SetupDefault_ZombieCallbacks()"},
	{ "trigger": "do_game_mode_shellshock\t#using scripts\\zm\\gametypes\\_zm_gametype;", "contents": "zm_gametype::do_game_mode_shellshock()"},
	{ "trigger": "canPlayerSuicide\t#using scripts\\zm\\gametypes\\_zm_gametype;", "contents": "zm_gametype::canPlayerSuicide()"},
	{ "trigger": "onPlayerDisconnect\t#using scripts\\zm\\gametypes\\_zm_gametype;", "contents": "zm_gametype::onPlayerDisconnect()"},
	{ "trigger": "onDeadEvent\t#using scripts\\zm\\gametypes\\_zm_gametype;", "contents": "zm_gametype::onDeadEvent(${1:team})"},
	{ "trigger": "onSpawnIntermission\t#using scripts\\zm\\gametypes\\_zm_gametype;", "contents": "zm_gametype::onSpawnIntermission()"},
	{ "trigger": "onSpawnSpectator\t#using scripts\\zm\\gametypes\\_zm_gametype;", "contents": "zm_gametype::onSpawnSpectator(${1:origin}, ${2:angles})"},
	{ "trigger": "maySpawn\t#using scripts\\zm\\gametypes\\_zm_gametype;", "contents": "zm_gametype::maySpawn()"},
	{ "trigger": "onStartGameType\t#using scripts\\zm\\gametypes\\_zm_gametype;", "contents": "zm_gametype::onStartGameType()"},
	{ "trigger": "onSpawnPlayerUnified\t#using scripts\\zm\\gametypes\\_zm_gametype;", "contents": "zm_gametype::onSpawnPlayerUnified()"},
	{ "trigger": "onFindValidSpawnPoint\t#using scripts\\zm\\gametypes\\_zm_gametype;", "contents": "zm_gametype::onFindValidSpawnPoint()"},
	{ "trigger": "onSpawnPlayer\t#using scripts\\zm\\gametypes\\_zm_gametype; self == player", "contents": "zm_gametype::onSpawnPlayer(${1:predictedSpawn})"},
	{ "trigger": "get_player_spawns_for_gametype\t#using scripts\\zm\\gametypes\\_zm_gametype;", "contents": "zm_gametype::get_player_spawns_for_gametype()"},
	{ "trigger": "onEndGame\t#using scripts\\zm\\gametypes\\_zm_gametype;", "contents": "zm_gametype::onEndGame(${1:winningTeam})"},
	{ "trigger": "onRoundEndGame\t#using scripts\\zm\\gametypes\\_zm_gametype;", "contents": "zm_gametype::onRoundEndGame(${1:roundWinner})"},
	{ "trigger": "menu_onPlayerConnect\t#using scripts\\zm\\gametypes\\_zm_gametype;", "contents": "zm_gametype::menu_onPlayerConnect()"},
	{ "trigger": "menu_onMenuResponse\t#using scripts\\zm\\gametypes\\_zm_gametype;", "contents": "zm_gametype::menu_onMenuResponse()"},
	{ "trigger": "menuAlliesZombies\t#using scripts\\zm\\gametypes\\_zm_gametype;", "contents": "zm_gametype::menuAlliesZombies()"},
	{ "trigger": "onPlayerConnect\t#using scripts\\zm\\gametypes\\_zm_gametype;", "contents": "zm_gametype::onPlayerConnect()"},
	{ "trigger": "onPlayerSpawned\t#using scripts\\zm\\gametypes\\_zm_gametype;", "contents": "zm_gametype::onPlayerSpawned()"},
	{ "trigger": "onPlayerConnect_check_for_hotjoin\t#using scripts\\zm\\gametypes\\_zm_gametype;", "contents": "zm_gametype::onPlayerConnect_check_for_hotjoin()"},
	{ "trigger": "player_hotjoin\t#using scripts\\zm\\gametypes\\_zm_gametype;", "contents": "zm_gametype::player_hotjoin()"},
	{ "trigger": "wait_fade_in\t#using scripts\\zm\\gametypes\\_zm_gametype;", "contents": "zm_gametype::wait_fade_in()"},
	{ "trigger": "prepare_stub\t#using scripts\\zm\\_zm_melee_weapon;", "contents": "zm_melee_weapon::prepare_stub(${1:stub}, ${2:weapon}, ${3:flourish_weapon}, ${4:ballistic_weapon}, ${5:ballistic_upgraded_weapon}, ${6:cost}, ${7:wallbuy_targetname}, ${8:hint_string}, ${9:vo_dialog_id}, ${10:flourish_fn})"},
	{ "trigger": "find_melee_weapon\t#using scripts\\zm\\_zm_melee_weapon;", "contents": "zm_melee_weapon::find_melee_weapon(${1:weapon})"},
	{ "trigger": "add_stub\t#using scripts\\zm\\_zm_melee_weapon;", "contents": "zm_melee_weapon::add_stub(${1:stub}, ${2:weapon})"},
	{ "trigger": "add_melee_weapon\t#using scripts\\zm\\_zm_melee_weapon;", "contents": "zm_melee_weapon::add_melee_weapon(${1:weapon}, ${2:flourish_weapon}, ${3:ballistic_weapon}, ${4:ballistic_upgraded_weapon}, ${5:cost}, ${6:wallbuy_targetname}, ${7:hint_string}, ${8:vo_dialog_id}, ${9:flourish_fn})"},
	{ "trigger": "set_fallback_weapon\t#using scripts\\zm\\_zm_melee_weapon;", "contents": "zm_melee_weapon::set_fallback_weapon(${1:weapon_name}, ${2:fallback_weapon_name})"},
	{ "trigger": "determine_fallback_weapon\t#using scripts\\zm\\_zm_melee_weapon;", "contents": "zm_melee_weapon::determine_fallback_weapon()"},
	{ "trigger": "give_fallback_weapon\t#using scripts\\zm\\_zm_melee_weapon;", "contents": "zm_melee_weapon::give_fallback_weapon(${1:immediate = false})"},
	{ "trigger": "take_fallback_weapon\t#using scripts\\zm\\_zm_melee_weapon;", "contents": "zm_melee_weapon::take_fallback_weapon()"},
	{ "trigger": "player_can_see_weapon_prompt\t#using scripts\\zm\\_zm_melee_weapon;", "contents": "zm_melee_weapon::player_can_see_weapon_prompt()"},
	{ "trigger": "spectator_respawn_all\t#using scripts\\zm\\_zm_melee_weapon;", "contents": "zm_melee_weapon::spectator_respawn_all()"},
	{ "trigger": "spectator_respawn\t#using scripts\\zm\\_zm_melee_weapon;", "contents": "zm_melee_weapon::spectator_respawn(${1:wallbuy_targetname}, ${2:weapon})"},
	{ "trigger": "trigger_hide_all\t#using scripts\\zm\\_zm_melee_weapon;", "contents": "zm_melee_weapon::trigger_hide_all()"},
	{ "trigger": "trigger_hide\t#using scripts\\zm\\_zm_melee_weapon;", "contents": "zm_melee_weapon::trigger_hide(${1:wallbuy_targetname})"},
	{ "trigger": "has_any_ballistic_knife\t#using scripts\\zm\\_zm_melee_weapon;", "contents": "zm_melee_weapon::has_any_ballistic_knife()"},
	{ "trigger": "has_upgraded_ballistic_knife\t#using scripts\\zm\\_zm_melee_weapon;", "contents": "zm_melee_weapon::has_upgraded_ballistic_knife()"},
	{ "trigger": "give_ballistic_knife\t#using scripts\\zm\\_zm_melee_weapon;", "contents": "zm_melee_weapon::give_ballistic_knife(${1:weapon}, ${2:upgraded})"},
	{ "trigger": "change_melee_weapon\t#using scripts\\zm\\_zm_melee_weapon;", "contents": "zm_melee_weapon::change_melee_weapon(${1:weapon}, ${2:current_weapon})"},
	{ "trigger": "melee_weapon_think\t#using scripts\\zm\\_zm_melee_weapon;", "contents": "zm_melee_weapon::melee_weapon_think(${1:weapon}, ${2:cost}, ${3:flourish_fn}, ${4:vo_dialog_id}, ${5:flourish_weapon}, ${6:ballistic_weapon}, ${7:ballistic_upgraded_weapon})"},
	{ "trigger": "melee_weapon_show\t#using scripts\\zm\\_zm_melee_weapon;", "contents": "zm_melee_weapon::melee_weapon_show(${1:player})"},
	{ "trigger": "award_melee_weapon\t#using scripts\\zm\\_zm_melee_weapon;", "contents": "zm_melee_weapon::award_melee_weapon(${1:weapon_name})"},
	{ "trigger": "give_melee_weapon\t#using scripts\\zm\\_zm_melee_weapon;", "contents": "zm_melee_weapon::give_melee_weapon(${1:vo_dialog_id}, ${2:flourish_weapon}, ${3:weapon}, ${4:ballistic_weapon}, ${5:ballistic_upgraded_weapon}, ${6:flourish_fn}, ${7:trigger})"},
	{ "trigger": "do_melee_weapon_flourish_begin\t#using scripts\\zm\\_zm_melee_weapon;", "contents": "zm_melee_weapon::do_melee_weapon_flourish_begin(${1:flourish_weapon})"},
	{ "trigger": "do_melee_weapon_flourish_end\t#using scripts\\zm\\_zm_melee_weapon;", "contents": "zm_melee_weapon::do_melee_weapon_flourish_end(${1:original_weapon}, ${2:flourish_weapon}, ${3:weapon}, ${4:ballistic_weapon}, ${5:ballistic_upgraded_weapon})"},
	{ "trigger": "defaultRole\t#using scripts\\shared\\vehicles\\_auto_turret;", "contents": "auto_turret::defaultRole()"},
	{ "trigger": "state_death_update\t#using scripts\\shared\\vehicles\\_auto_turret;", "contents": "auto_turret::state_death_update(${1:params})"},
	{ "trigger": "should_switch_to_unaware\t#using scripts\\shared\\vehicles\\_auto_turret;", "contents": "auto_turret::should_switch_to_unaware(${1:current_state}, ${2:to_state}, ${3:connection})"},
	{ "trigger": "state_unaware_update\t#using scripts\\shared\\vehicles\\_auto_turret;", "contents": "auto_turret::state_unaware_update(${1:params})"},
	{ "trigger": "should_switch_to_combat\t#using scripts\\shared\\vehicles\\_auto_turret;", "contents": "auto_turret::should_switch_to_combat(${1:current_state}, ${2:to_state}, ${3:connection})"},
	{ "trigger": "state_combat_update\t#using scripts\\shared\\vehicles\\_auto_turret;", "contents": "auto_turret::state_combat_update(${1:params})"},
	{ "trigger": "state_combat_exit\t#using scripts\\shared\\vehicles\\_auto_turret;", "contents": "auto_turret::state_combat_exit(${1:params})"},
	{ "trigger": "sentry_turret_fire_for_time\t#using scripts\\shared\\vehicles\\_auto_turret;", "contents": "auto_turret::sentry_turret_fire_for_time(${1:totalFireTime}, ${2:enemy})"},
	{ "trigger": "state_off_enter\t#using scripts\\shared\\vehicles\\_auto_turret;", "contents": "auto_turret::state_off_enter(${1:params})"},
	{ "trigger": "state_off_exit\t#using scripts\\shared\\vehicles\\_auto_turret;", "contents": "auto_turret::state_off_exit(${1:params})"},
	{ "trigger": "rest_turret\t#using scripts\\shared\\vehicles\\_auto_turret;", "contents": "auto_turret::rest_turret(${1:resting_pitch})"},
	{ "trigger": "state_emped_enter\t#using scripts\\shared\\vehicles\\_auto_turret;", "contents": "auto_turret::state_emped_enter(${1:params})"},
	{ "trigger": "state_emped_update\t#using scripts\\shared\\vehicles\\_auto_turret;", "contents": "auto_turret::state_emped_update(${1:params})"},
	{ "trigger": "state_emped_exit\t#using scripts\\shared\\vehicles\\_auto_turret;", "contents": "auto_turret::state_emped_exit(${1:params})"},
	{ "trigger": "state_scripted_update\t#using scripts\\shared\\vehicles\\_auto_turret;", "contents": "auto_turret::state_scripted_update(${1:params})"},
	{ "trigger": "turretAllowFriendlyFireDamage\t#using scripts\\shared\\vehicles\\_auto_turret;", "contents": "auto_turret::turretAllowFriendlyFireDamage(${1:eInflictor}, ${2:eAttacker}, ${3:sMeansOfDeath}, ${4:weapon})"},
	{ "trigger": "turretCallback_VehicleDamage\t#using scripts\\shared\\vehicles\\_auto_turret;", "contents": "auto_turret::turretCallback_VehicleDamage(${1:eInflictor}, ${2:eAttacker}, ${3:iDamage}, ${4:iDFlags}, ${5:sMeansOfDeath}, ${6:weapon}, ${7:vPoint}, ${8:vDir}, ${9:sHitLoc}, ${10:vDamageOrigin}, ${11:psOffsetTime}, ${12:damageFromUnderneath}, ${13:modelIndex}, ${14:partName}, ${15:vSurfaceNormal})"},
	{ "trigger": "sentry_turret_alert_sound\t#using scripts\\shared\\vehicles\\_auto_turret;", "contents": "auto_turret::sentry_turret_alert_sound()"},
	{ "trigger": "turret_idle_sound\t#using scripts\\shared\\vehicles\\_auto_turret;", "contents": "auto_turret::turret_idle_sound()"},
	{ "trigger": "turret_idle_sound_stop\t#using scripts\\shared\\vehicles\\_auto_turret;", "contents": "auto_turret::turret_idle_sound_stop()"},
	{ "trigger": "TimeUntilSpawn\t#using scripts\\zm\\gametypes\\_globallogic_spawn;", "contents": "globallogic_spawn::TimeUntilSpawn(${1:includeTeamkillDelay})"},
	{ "trigger": "allTeamsHaveExisted\t#using scripts\\zm\\gametypes\\_globallogic_spawn;", "contents": "globallogic_spawn::allTeamsHaveExisted()"},
	{ "trigger": "maySpawn\t#using scripts\\zm\\gametypes\\_globallogic_spawn;", "contents": "globallogic_spawn::maySpawn()"},
	{ "trigger": "TimeUntilWaveSpawn\t#using scripts\\zm\\gametypes\\_globallogic_spawn;", "contents": "globallogic_spawn::TimeUntilWaveSpawn(${1:minimumWait})"},
	{ "trigger": "stopPoisoningAndFlareOnSpawn\t#using scripts\\zm\\gametypes\\_globallogic_spawn;", "contents": "globallogic_spawn::stopPoisoningAndFlareOnSpawn()"},
	{ "trigger": "spawnPlayerPrediction\t#using scripts\\zm\\gametypes\\_globallogic_spawn;", "contents": "globallogic_spawn::spawnPlayerPrediction()"},
	{ "trigger": "giveLoadoutLevelSpecific\t#using scripts\\zm\\gametypes\\_globallogic_spawn;", "contents": "globallogic_spawn::giveLoadoutLevelSpecific(${1:team}, ${2:_class})"},
	{ "trigger": "giveStartLoadout\t#using scripts\\zm\\gametypes\\_globallogic_spawn;", "contents": "globallogic_spawn::giveStartLoadout()"},
	{ "trigger": "spawnPlayer\t#using scripts\\zm\\gametypes\\_globallogic_spawn;", "contents": "globallogic_spawn::spawnPlayer()"},
	{ "trigger": "spawnSpectator\t#using scripts\\zm\\gametypes\\_globallogic_spawn;", "contents": "globallogic_spawn::spawnSpectator(${1:origin}, ${2:angles})"},
	{ "trigger": "respawn_asSpectator\t#using scripts\\zm\\gametypes\\_globallogic_spawn;", "contents": "globallogic_spawn::respawn_asSpectator(${1:origin}, ${2:angles})"},
	{ "trigger": "in_spawnSpectator\t#using scripts\\zm\\gametypes\\_globallogic_spawn;", "contents": "globallogic_spawn::in_spawnSpectator(${1:origin}, ${2:angles})"},
	{ "trigger": "spectatorThirdPersonness\t#using scripts\\zm\\gametypes\\_globallogic_spawn;", "contents": "globallogic_spawn::spectatorThirdPersonness()"},
	{ "trigger": "forceSpawn\t#using scripts\\zm\\gametypes\\_globallogic_spawn;", "contents": "globallogic_spawn::forceSpawn(${1:time})"},
	{ "trigger": "kickIfDontSpawn\t#using scripts\\zm\\gametypes\\_globallogic_spawn;", "contents": "globallogic_spawn::kickIfDontSpawn()"},
	{ "trigger": "kickIfIDontSpawnInternal\t#using scripts\\zm\\gametypes\\_globallogic_spawn;", "contents": "globallogic_spawn::kickIfIDontSpawnInternal()"},
	{ "trigger": "kickWait\t#using scripts\\zm\\gametypes\\_globallogic_spawn;", "contents": "globallogic_spawn::kickWait(${1:waittime})"},
	{ "trigger": "spawnInterRoundIntermission\t#using scripts\\zm\\gametypes\\_globallogic_spawn;", "contents": "globallogic_spawn::spawnInterRoundIntermission()"},
	{ "trigger": "spawnIntermission\t#using scripts\\zm\\gametypes\\_globallogic_spawn;", "contents": "globallogic_spawn::spawnIntermission(${1:useDefaultCallback})"},
	{ "trigger": "spawnQueuedClientOnTeam\t#using scripts\\zm\\gametypes\\_globallogic_spawn;", "contents": "globallogic_spawn::spawnQueuedClientOnTeam(${1:team})"},
	{ "trigger": "spawnQueuedClient\t#using scripts\\zm\\gametypes\\_globallogic_spawn;", "contents": "globallogic_spawn::spawnQueuedClient(${1:dead_player_team}, ${2:killer})"},
	{ "trigger": "allTeamsNearScoreLimit\t#using scripts\\zm\\gametypes\\_globallogic_spawn;", "contents": "globallogic_spawn::allTeamsNearScoreLimit()"},
	{ "trigger": "shouldShowRespawnMessage\t#using scripts\\zm\\gametypes\\_globallogic_spawn;", "contents": "globallogic_spawn::shouldShowRespawnMessage()"},
	{ "trigger": "default_spawnMessage\t#using scripts\\zm\\gametypes\\_globallogic_spawn;", "contents": "globallogic_spawn::default_spawnMessage()"},
	{ "trigger": "showSpawnMessage\t#using scripts\\zm\\gametypes\\_globallogic_spawn;", "contents": "globallogic_spawn::showSpawnMessage()"},
	{ "trigger": "spawnClient\t#using scripts\\zm\\gametypes\\_globallogic_spawn;", "contents": "globallogic_spawn::spawnClient(${1:timeAlreadyPassed})"},
	{ "trigger": "waitAndSpawnClient\t#using scripts\\zm\\gametypes\\_globallogic_spawn;", "contents": "globallogic_spawn::waitAndSpawnClient(${1:timeAlreadyPassed})"},
	{ "trigger": "waitRespawnOrSafeSpawnButton\t#using scripts\\zm\\gametypes\\_globallogic_spawn;", "contents": "globallogic_spawn::waitRespawnOrSafeSpawnButton()"},
	{ "trigger": "waitInSpawnQueue\t#using scripts\\zm\\gametypes\\_globallogic_spawn;", "contents": "globallogic_spawn::waitInSpawnQueue()"},
	{ "trigger": "setThirdPerson\t#using scripts\\zm\\gametypes\\_globallogic_spawn;", "contents": "globallogic_spawn::setThirdPerson(${1:value})"},
	{ "trigger": "setSpawnVariables\t#using scripts\\zm\\gametypes\\_globallogic_spawn;", "contents": "globallogic_spawn::setSpawnVariables()"},
	{ "trigger": "setup_all_traps\t#using scripts\\shared\\traps_shared;", "contents": "traps::setup_all_traps()"},
	{ "trigger": "precache_all\t#using scripts\\shared\\traps_shared;", "contents": "traps::precache_all()"},
	{ "trigger": "setup_secsystem\t#using scripts\\shared\\traps_shared;", "contents": "traps::setup_secsystem(${1:secsystem})"},
	{ "trigger": "setup_in_array\t#using scripts\\shared\\traps_shared;", "contents": "traps::setup_in_array(${1:str_targetname})"},
	{ "trigger": "new_object_of_type\t#using scripts\\shared\\traps_shared;", "contents": "traps::new_object_of_type(${1:str_targetname})"},
	{ "trigger": "reverse_blockers\t#using scripts\\shared\\traps_shared;", "contents": "traps::reverse_blockers()"},
	{ "trigger": "set_player_last_known_pos\t#using scripts\\shared\\traps_shared;", "contents": "traps::set_player_last_known_pos()"},
	{ "trigger": "decrement_detector_count\t#using scripts\\shared\\traps_shared;", "contents": "traps::decrement_detector_count()"},
	{ "trigger": "decrement_security_node_count\t#using scripts\\shared\\traps_shared;", "contents": "traps::decrement_security_node_count()"},
	{ "trigger": "get_alert_level\t#using scripts\\shared\\traps_shared;", "contents": "traps::get_alert_level()"},
	{ "trigger": "set_alert_level\t#using scripts\\shared\\traps_shared;", "contents": "traps::set_alert_level(${1:n_target_alert_level})"},
	{ "trigger": "respond_to_alert_level\t#using scripts\\shared\\traps_shared;", "contents": "traps::respond_to_alert_level()"},
	{ "trigger": "raise_alert\t#using scripts\\shared\\traps_shared;", "contents": "traps::raise_alert()"},
	{ "trigger": "alert_security_system\t#using scripts\\shared\\traps_shared;", "contents": "traps::alert_security_system()"},
	{ "trigger": "reset_security_system\t#using scripts\\shared\\traps_shared;", "contents": "traps::reset_security_system()"},
	{ "trigger": "deactivate_security_system\t#using scripts\\shared\\traps_shared;", "contents": "traps::deactivate_security_system()"},
	{ "trigger": "activate_consequences\t#using scripts\\shared\\traps_shared;", "contents": "traps::activate_consequences()"},
	{ "trigger": "deactivate_consequences\t#using scripts\\shared\\traps_shared;", "contents": "traps::deactivate_consequences()"},
	{ "trigger": "deactivate_detectors\t#using scripts\\shared\\traps_shared;", "contents": "traps::deactivate_detectors()"},
	{ "trigger": "deactivate_spawned\t#using scripts\\shared\\traps_shared;", "contents": "traps::deactivate_spawned()"},
	{ "trigger": "reactivate_detectors\t#using scripts\\shared\\traps_shared;", "contents": "traps::reactivate_detectors()"},
	{ "trigger": "activate_all_in_array\t#using scripts\\shared\\traps_shared;", "contents": "traps::activate_all_in_array(${1:a_things})"},
	{ "trigger": "deactivate_all_in_array\t#using scripts\\shared\\traps_shared;", "contents": "traps::deactivate_all_in_array(${1:a_things})"},
	{ "trigger": "reactivate_all_in_array\t#using scripts\\shared\\traps_shared;", "contents": "traps::reactivate_all_in_array(${1:a_things})"},
	{ "trigger": "set_security_lights\t#using scripts\\shared\\traps_shared;", "contents": "traps::set_security_lights(${1:b_lights_on})"},
	{ "trigger": "spawn_turrets\t#using scripts\\shared\\traps_shared;", "contents": "traps::spawn_turrets()"},
	{ "trigger": "setup\t#using scripts\\shared\\traps_shared;", "contents": "traps::setup(${1:trigger}, ${2:secsystem})"},
	{ "trigger": "laser_awareness\t#using scripts\\shared\\traps_shared;", "contents": "traps::laser_awareness()"},
	{ "trigger": "laser_movement\t#using scripts\\shared\\traps_shared;", "contents": "traps::laser_movement()"},
	{ "trigger": "deactivate\t#using scripts\\shared\\traps_shared; self = attackble scriptbundle (struct)", "contents": "traps::deactivate()"},
	{ "trigger": "activate\t#using scripts\\shared\\traps_shared; self = attackble scriptbundle (struct)", "contents": "traps::activate()"},
	{ "trigger": "reactivate\t#using scripts\\shared\\traps_shared;", "contents": "traps::reactivate()"},
	{ "trigger": "show_laser\t#using scripts\\shared\\traps_shared;", "contents": "traps::show_laser()"},
	{ "trigger": "hide_laser\t#using scripts\\shared\\traps_shared;", "contents": "traps::hide_laser()"},
	{ "trigger": "setup_mover\t#using scripts\\shared\\traps_shared;", "contents": "traps::setup_mover(${1:mover})"},
	{ "trigger": "breakable_wall_damage_watcher\t#using scripts\\shared\\traps_shared;", "contents": "traps::breakable_wall_damage_watcher()"},
	{ "trigger": "break_wall\t#using scripts\\shared\\traps_shared;", "contents": "traps::break_wall()"},
	{ "trigger": "move_to_endpos\t#using scripts\\shared\\traps_shared;", "contents": "traps::move_to_endpos()"},
	{ "trigger": "move_to_startpos\t#using scripts\\shared\\traps_shared;", "contents": "traps::move_to_startpos()"},
	{ "trigger": "load_pathstructs\t#using scripts\\shared\\traps_shared;", "contents": "traps::load_pathstructs()"},
	{ "trigger": "move_forward_along_path\t#using scripts\\shared\\traps_shared;", "contents": "traps::move_forward_along_path()"},
	{ "trigger": "move_backward_along_path\t#using scripts\\shared\\traps_shared;", "contents": "traps::move_backward_along_path()"},
	{ "trigger": "start_sounds\t#using scripts\\shared\\traps_shared;", "contents": "traps::start_sounds()"},
	{ "trigger": "stop_sounds\t#using scripts\\shared\\traps_shared;", "contents": "traps::stop_sounds()"},
	{ "trigger": "timed_effects\t#using scripts\\shared\\traps_shared;", "contents": "traps::timed_effects(${1:b_play_screen_shake})"},
	{ "trigger": "setup\t#using scripts\\shared\\traps_shared;", "contents": "traps::setup(${1:blocker}, ${2:secsystem})"},
	{ "trigger": "reverse\t#using scripts\\shared\\traps_shared;", "contents": "traps::reverse()"},
	{ "trigger": "blocker_control_thread\t#using scripts\\shared\\traps_shared;", "contents": "traps::blocker_control_thread()"},
	{ "trigger": "setup\t#using scripts\\shared\\traps_shared;", "contents": "traps::setup(${1:door}, ${2:secsystem})"},
	{ "trigger": "door_control_thread\t#using scripts\\shared\\traps_shared;", "contents": "traps::door_control_thread()"},
	{ "trigger": "activate\t#using scripts\\shared\\traps_shared; self = attackble scriptbundle (struct)", "contents": "traps::activate()"},
	{ "trigger": "deactivate\t#using scripts\\shared\\traps_shared; self = attackble scriptbundle (struct)", "contents": "traps::deactivate()"},
	{ "trigger": "close_door\t#using scripts\\shared\\traps_shared;", "contents": "traps::close_door()"},
	{ "trigger": "open_door\t#using scripts\\shared\\traps_shared;", "contents": "traps::open_door()"},
	{ "trigger": "setup\t#using scripts\\shared\\traps_shared;", "contents": "traps::setup(${1:crusher}, ${2:secsystem})"},
	{ "trigger": "watch_for_player_touch\t#using scripts\\shared\\traps_shared;", "contents": "traps::watch_for_player_touch()"},
	{ "trigger": "looping_movement\t#using scripts\\shared\\traps_shared;", "contents": "traps::looping_movement()"},
	{ "trigger": "retract\t#using scripts\\shared\\traps_shared;", "contents": "traps::retract()"},
	{ "trigger": "activate\t#using scripts\\shared\\traps_shared; self = attackble scriptbundle (struct)", "contents": "traps::activate()"},
	{ "trigger": "deactivate\t#using scripts\\shared\\traps_shared; self = attackble scriptbundle (struct)", "contents": "traps::deactivate()"},
	{ "trigger": "setup\t#using scripts\\shared\\traps_shared;", "contents": "traps::setup(${1:securitylight}, ${2:secsystem})"},
	{ "trigger": "activate\t#using scripts\\shared\\traps_shared; self = attackble scriptbundle (struct)", "contents": "traps::activate()"},
	{ "trigger": "deactivate\t#using scripts\\shared\\traps_shared; self = attackble scriptbundle (struct)", "contents": "traps::deactivate()"},
	{ "trigger": "setup\t#using scripts\\shared\\traps_shared;", "contents": "traps::setup(${1:securitynode}, ${2:secsystem})"},
	{ "trigger": "watch_securitynode_death\t#using scripts\\shared\\traps_shared;", "contents": "traps::watch_securitynode_death()"},
	{ "trigger": "setup\t#using scripts\\shared\\traps_shared;", "contents": "traps::setup(${1:trigger}, ${2:secsystem})"},
	{ "trigger": "watch_security_panel_trigger\t#using scripts\\shared\\traps_shared;", "contents": "traps::watch_security_panel_trigger()"},
	{ "trigger": "deactivate\t#using scripts\\shared\\traps_shared; self = attackble scriptbundle (struct)", "contents": "traps::deactivate()"},
	{ "trigger": "security_panel_consequences\t#using scripts\\shared\\traps_shared;", "contents": "traps::security_panel_consequences()"},
	{ "trigger": "setup\t#using scripts\\shared\\traps_shared;", "contents": "traps::setup(${1:trigger}, ${2:secsystem})"},
	{ "trigger": "security_panel_consequences\t#using scripts\\shared\\traps_shared;", "contents": "traps::security_panel_consequences()"},
	{ "trigger": "setup\t#using scripts\\shared\\traps_shared;", "contents": "traps::setup(${1:trigger}, ${2:secsystem})"},
	{ "trigger": "security_panel_consequences\t#using scripts\\shared\\traps_shared;", "contents": "traps::security_panel_consequences()"},
	{ "trigger": "spawn_at_struct\t#using scripts\\shared\\traps_shared;", "contents": "traps::spawn_at_struct(${1:str_struct}, ${2:secsystem})"},
	{ "trigger": "turret_behavior\t#using scripts\\shared\\traps_shared;", "contents": "traps::turret_behavior()"},
	{ "trigger": "turret_movement_behavior\t#using scripts\\shared\\traps_shared;", "contents": "traps::turret_movement_behavior()"},
	{ "trigger": "spawn_at_struct\t#using scripts\\shared\\traps_shared;", "contents": "traps::spawn_at_struct(${1:str_struct}, ${2:secsystem})"},
	{ "trigger": "thread_watch_for_damage\t#using scripts\\shared\\traps_shared;", "contents": "traps::thread_watch_for_damage()"},
	{ "trigger": "thread_watch_for_death\t#using scripts\\shared\\traps_shared;", "contents": "traps::thread_watch_for_death()"},
	{ "trigger": "deactivate\t#using scripts\\shared\\traps_shared; self = attackble scriptbundle (struct)", "contents": "traps::deactivate()"},
	{ "trigger": "deactivation_effects\t#using scripts\\shared\\traps_shared;", "contents": "traps::deactivation_effects()"},
	{ "trigger": "warp_to_struct\t#using scripts\\shared\\traps_shared;", "contents": "traps::warp_to_struct(${1:str_struct})"},
	{ "trigger": "turret_movement_behavior\t#using scripts\\shared\\traps_shared;", "contents": "traps::turret_movement_behavior()"},
	{ "trigger": "follow_mover\t#using scripts\\shared\\traps_shared;", "contents": "traps::follow_mover()"},
	{ "trigger": "move_along_path\t#using scripts\\shared\\traps_shared;", "contents": "traps::move_along_path()"},
	{ "trigger": "stop_moving\t#using scripts\\shared\\traps_shared;", "contents": "traps::stop_moving()"},
	{ "trigger": "turret_awareness\t#using scripts\\shared\\traps_shared;", "contents": "traps::turret_awareness()"},
	{ "trigger": "check_for_target\t#using scripts\\shared\\traps_shared;", "contents": "traps::check_for_target()"},
	{ "trigger": "face_player\t#using scripts\\shared\\traps_shared;", "contents": "traps::face_player()"},
	{ "trigger": "turret_behavior\t#using scripts\\shared\\traps_shared;", "contents": "traps::turret_behavior()"},
	{ "trigger": "set_combat_target_as_player\t#using scripts\\shared\\traps_shared;", "contents": "traps::set_combat_target_as_player()"},
	{ "trigger": "set_combat_target\t#using scripts\\shared\\traps_shared;", "contents": "traps::set_combat_target(${1:target})"},
	{ "trigger": "get_yaw_to_combat_target\t#using scripts\\shared\\traps_shared;", "contents": "traps::get_yaw_to_combat_target()"},
	{ "trigger": "laser_sight_loop\t#using scripts\\shared\\traps_shared;", "contents": "traps::laser_sight_loop()"},
	{ "trigger": "fire_at_target\t#using scripts\\shared\\traps_shared;", "contents": "traps::fire_at_target()"},
	{ "trigger": "play_cooldown_fx\t#using scripts\\shared\\traps_shared;", "contents": "traps::play_cooldown_fx()"},
	{ "trigger": "setup\t#using scripts\\shared\\traps_shared;", "contents": "traps::setup(${1:str_struct}, ${2:secsystem})"},
	{ "trigger": "camera_spotlight_controller\t#using scripts\\shared\\traps_shared;", "contents": "traps::camera_spotlight_controller()"},
	{ "trigger": "activate_camera_light\t#using scripts\\shared\\traps_shared;", "contents": "traps::activate_camera_light(${1:light_type})"},
	{ "trigger": "camera_debug\t#using scripts\\shared\\traps_shared;", "contents": "traps::camera_debug(${1:light_type})"},
	{ "trigger": "camera_scan\t#using scripts\\shared\\traps_shared;", "contents": "traps::camera_scan()"},
	{ "trigger": "camera_death_watcher\t#using scripts\\shared\\traps_shared;", "contents": "traps::camera_death_watcher()"},
	{ "trigger": "camera_awareness\t#using scripts\\shared\\traps_shared;", "contents": "traps::camera_awareness()"},
	{ "trigger": "get_yaw_to_target\t#using scripts\\shared\\traps_shared;", "contents": "traps::get_yaw_to_target()"},
	{ "trigger": "deactivate\t#using scripts\\shared\\traps_shared; self = attackble scriptbundle (struct)", "contents": "traps::deactivate()"},
	{ "trigger": "reactivate\t#using scripts\\shared\\traps_shared;", "contents": "traps::reactivate()"},
	{ "trigger": "watchSmokeGrenadeDetonation\t#using scripts\\shared\\weapons\\_smokegrenade;", "contents": "smokegrenade::watchSmokeGrenadeDetonation(${1:owner}, ${2:statWeapon}, ${3:grenadeWeaponName}, ${4:duration}, ${5:totalTime})"},
	{ "trigger": "smokeDetonate\t#using scripts\\shared\\weapons\\_smokegrenade;", "contents": "smokegrenade::smokeDetonate(${1:owner}, ${2:statWeapon}, ${3:smokeWeapon}, ${4:position}, ${5:radius}, ${6:effectLifetime}, ${7:smokeBlockDuration})"},
	{ "trigger": "damageEffectArea\t#using scripts\\shared\\weapons\\_smokegrenade;", "contents": "smokegrenade::damageEffectArea(${1:owner}, ${2:position}, ${3:radius}, ${4:height}, ${5:killCamEnt})"},
	{ "trigger": "smokeBlockSight\t#using scripts\\shared\\weapons\\_smokegrenade;", "contents": "smokegrenade::smokeBlockSight(${1:radius})"},
	{ "trigger": "spawnSmokeGrenadeTrigger\t#using scripts\\shared\\weapons\\_smokegrenade;", "contents": "smokegrenade::spawnSmokeGrenadeTrigger(${1:duration})"},
	{ "trigger": "IsInSmokeGrenade\t#using scripts\\shared\\weapons\\_smokegrenade;", "contents": "smokegrenade::IsInSmokeGrenade()"},
	{ "trigger": "on_player_spawned\t#using scripts\\shared\\weapons\\_smokegrenade;", "contents": "smokegrenade::on_player_spawned()"},
	{ "trigger": "begin_other_grenade_tracking\t#using scripts\\shared\\weapons\\_smokegrenade;", "contents": "smokegrenade::begin_other_grenade_tracking()"},
	{ "trigger": "playSmokeSound\t#using scripts\\shared\\weapons\\_smokegrenade;", "contents": "smokegrenade::playSmokeSound(${1:position}, ${2:duration}, ${3:startSound}, ${4:stopSound}, ${5:loopSound})"},
	{ "trigger": "flashRumbleLoop\t#using scripts\\shared\\weapons\\_flashgrenades;", "contents": "flashgrenades::flashRumbleLoop(${1:duration})"},
	{ "trigger": "monitorFlash_Internal\t#using scripts\\shared\\weapons\\_flashgrenades;", "contents": "flashgrenades::monitorFlash_Internal(${1:amount_distance}, ${2:amount_angle}, ${3:attacker}, ${4:direct_on_player})"},
	{ "trigger": "monitorFlash\t#using scripts\\shared\\weapons\\_flashgrenades;", "contents": "flashgrenades::monitorFlash()"},
	{ "trigger": "monitorRCBombFlash\t#using scripts\\shared\\weapons\\_flashgrenades;", "contents": "flashgrenades::monitorRCBombFlash()"},
	{ "trigger": "applyFlash\t#using scripts\\shared\\weapons\\_flashgrenades;", "contents": "flashgrenades::applyFlash(${1:duration}, ${2:rumbleduration}, ${3:attacker})"},
	{ "trigger": "playFlashSound\t#using scripts\\shared\\weapons\\_flashgrenades;", "contents": "flashgrenades::playFlashSound(${1:duration})"},
	{ "trigger": "deleteEntOnOwnerDeath\t#using scripts\\shared\\weapons\\_flashgrenades;", "contents": "flashgrenades::deleteEntOnOwnerDeath(${1:owner})"},
	{ "trigger": "margwaCanDamageAnyHead\t#using scripts\\shared\\ai\\margwa;", "contents": "MargwaServerUtils::margwaCanDamageAnyHead()"},
	{ "trigger": "enable_additional_primary_weapon_perk_for_level\t#using scripts\\zm\\_zm_perk_additionalprimaryweapon;", "contents": "zm_perk_additionalprimaryweapon::enable_additional_primary_weapon_perk_for_level()"},
	{ "trigger": "additional_primary_weapon_precache\t#using scripts\\zm\\_zm_perk_additionalprimaryweapon;", "contents": "zm_perk_additionalprimaryweapon::additional_primary_weapon_precache()"},
	{ "trigger": "additional_primary_weapon_register_clientfield\t#using scripts\\zm\\_zm_perk_additionalprimaryweapon;", "contents": "zm_perk_additionalprimaryweapon::additional_primary_weapon_register_clientfield()"},
	{ "trigger": "additional_primary_weapon_set_clientfield\t#using scripts\\zm\\_zm_perk_additionalprimaryweapon;", "contents": "zm_perk_additionalprimaryweapon::additional_primary_weapon_set_clientfield(${1:state})"},
	{ "trigger": "additional_primary_weapon_perk_machine_setup\t#using scripts\\zm\\_zm_perk_additionalprimaryweapon;", "contents": "zm_perk_additionalprimaryweapon::additional_primary_weapon_perk_machine_setup(${1:use_trigger}, ${2:perk_machine}, ${3:bump_trigger}, ${4:collision})"},
	{ "trigger": "give_additional_primary_weapon_perk\t#using scripts\\zm\\_zm_perk_additionalprimaryweapon;", "contents": "zm_perk_additionalprimaryweapon::give_additional_primary_weapon_perk()"},
	{ "trigger": "take_additional_primary_weapon_perk\t#using scripts\\zm\\_zm_perk_additionalprimaryweapon;", "contents": "zm_perk_additionalprimaryweapon::take_additional_primary_weapon_perk(${1:b_pause}, ${2:str_perk}, ${3:str_result})"},
	{ "trigger": "take_additionalprimaryweapon\t#using scripts\\zm\\_zm_perk_additionalprimaryweapon;", "contents": "zm_perk_additionalprimaryweapon::take_additionalprimaryweapon()"},
	{ "trigger": "on_laststand\t#using scripts\\zm\\_zm_perk_additionalprimaryweapon;", "contents": "zm_perk_additionalprimaryweapon::on_laststand()"},
	{ "trigger": "register_clientfields\t#using scripts\\shared\\audio_shared;", "contents": "audio::register_clientfields()"},
	{ "trigger": "sndChyronWatcher\t#using scripts\\shared\\audio_shared;", "contents": "audio::sndChyronWatcher()"},
	{ "trigger": "sndIGCskipWatcher\t#using scripts\\shared\\audio_shared;", "contents": "audio::sndIGCskipWatcher()"},
	{ "trigger": "sndResetSoundSettings\t#using scripts\\shared\\audio_shared;", "contents": "audio::sndResetSoundSettings()"},
	{ "trigger": "on_player_killed\t#using scripts\\shared\\audio_shared;", "contents": "audio::on_player_killed()"},
	{ "trigger": "vehicleSpawnContext\t#using scripts\\shared\\audio_shared;", "contents": "audio::vehicleSpawnContext()"},
	{ "trigger": "sndUpdateVehicleContext\t#using scripts\\shared\\audio_shared;", "contents": "audio::sndUpdateVehicleContext(${1:added})"},
	{ "trigger": "PlayTargetMissileSound\t#using scripts\\shared\\audio_shared;", "contents": "audio::PlayTargetMissileSound(${1:alias}, ${2:looping})"},
	{ "trigger": "missileLockWatcher\t#using scripts\\shared\\audio_shared;", "contents": "audio::missileLockWatcher()"},
	{ "trigger": "missileFireWatcher\t#using scripts\\shared\\audio_shared;", "contents": "audio::missileFireWatcher()"},
	{ "trigger": "unlockFrontendMusic\t#using scripts\\shared\\audio_shared;", "contents": "audio::unlockFrontendMusic(${1:unlockName}, ${2:allplayers=true})"},
	{ "trigger": "footsteps\t#using scripts\\zm\\_load;", "contents": "load::footsteps()"},
	{ "trigger": "setup_traversals\t#using scripts\\zm\\_load;", "contents": "load::setup_traversals()"},
	{ "trigger": "start_intro_screen_zm\t#using scripts\\zm\\_load;", "contents": "load::start_intro_screen_zm()"},
	{ "trigger": "register_clientfields\t#using scripts\\zm\\_load;", "contents": "load::register_clientfields()"},
	{ "trigger": "autoexec first_frame\t#using scripts\\shared\\load_shared;", "contents": "load::autoexec first_frame()"},
	{ "trigger": "count_network_frames\t#using scripts\\shared\\load_shared;", "contents": "load::count_network_frames()"},
	{ "trigger": "keep_time\t#using scripts\\shared\\load_shared;", "contents": "load::keep_time()"},
	{ "trigger": "weapon_ammo\t#using scripts\\shared\\load_shared;", "contents": "load::weapon_ammo()"},
	{ "trigger": "badplace_think\t#using scripts\\shared\\load_shared;", "contents": "load::badplace_think(${1:badplace})"},
	{ "trigger": "playerDamageRumble\t#using scripts\\shared\\load_shared;", "contents": "load::playerDamageRumble()"},
	{ "trigger": "map_is_early_in_the_game\t#using scripts\\shared\\load_shared;", "contents": "load::map_is_early_in_the_game()"},
	{ "trigger": "player_throwgrenade_timer\t#using scripts\\shared\\load_shared;", "contents": "load::player_throwgrenade_timer()"},
	{ "trigger": "player_special_death_hint\t#using scripts\\shared\\load_shared;", "contents": "load::player_special_death_hint()"},
	{ "trigger": "grenade_death_text_hudelement\t#using scripts\\shared\\load_shared;", "contents": "load::grenade_death_text_hudelement(${1:textLine1}, ${2:textLine2})"},
	{ "trigger": "grenade_death_indicator_hudelement\t#using scripts\\shared\\load_shared;", "contents": "load::grenade_death_indicator_hudelement()"},
	{ "trigger": "explosive_arrow_death_indicator_hudelement\t#using scripts\\shared\\load_shared;", "contents": "load::explosive_arrow_death_indicator_hudelement()"},
	{ "trigger": "explosive_dart_death_indicator_hudelement\t#using scripts\\shared\\load_shared;", "contents": "load::explosive_dart_death_indicator_hudelement()"},
	{ "trigger": "explosive_nitrogen_tank_death_indicator_hudelement\t#using scripts\\shared\\load_shared;", "contents": "load::explosive_nitrogen_tank_death_indicator_hudelement()"},
	{ "trigger": "explosive_vehice_death_indicator_hudelement\t#using scripts\\shared\\load_shared;", "contents": "load::explosive_vehice_death_indicator_hudelement()"},
	{ "trigger": "grenade_death_indicator_hudelement_cleanup\t#using scripts\\shared\\load_shared;", "contents": "load::grenade_death_indicator_hudelement_cleanup(${1:hudElemIcon}, ${2:hudElemPointer})"},
	{ "trigger": "special_death_indicator_hudelement\t#using scripts\\shared\\load_shared;", "contents": "load::special_death_indicator_hudelement(${1:shader}, ${2:iWidth}, ${3:iHeight}, ${4:fDelay}, ${5:x}, ${6:y})"},
	{ "trigger": "special_death_death_indicator_hudelement_cleanup\t#using scripts\\shared\\load_shared;", "contents": "load::special_death_death_indicator_hudelement_cleanup(${1:overlay})"},
	{ "trigger": "water_think\t#using scripts\\shared\\load_shared;", "contents": "load::water_think()"},
	{ "trigger": "indicate_start\t#using scripts\\shared\\load_shared;", "contents": "load::indicate_start(${1:start})"},
	{ "trigger": "calculate_map_center\t#using scripts\\shared\\load_shared;", "contents": "load::calculate_map_center()"},
	{ "trigger": "set_objective_text_colors\t#using scripts\\shared\\load_shared;", "contents": "load::set_objective_text_colors()"},
	{ "trigger": "lerp_trigger_dvar_value\t#using scripts\\shared\\load_shared;", "contents": "load::lerp_trigger_dvar_value(${1:trigger}, ${2:dvar}, ${3:value}, ${4:time})"},
	{ "trigger": "set_fog_progress\t#using scripts\\shared\\load_shared;", "contents": "load::set_fog_progress(${1:progress})"},
	{ "trigger": "all_players_spawned\t#using scripts\\shared\\load_shared;", "contents": "load::all_players_spawned()"},
	{ "trigger": "shock_onpain\t#using scripts\\shared\\load_shared;", "contents": "load::shock_onpain()"},
	{ "trigger": "shock_onexplosion\t#using scripts\\shared\\load_shared;", "contents": "load::shock_onexplosion(${1:damage})"},
	{ "trigger": "shock_ondeath\t#using scripts\\shared\\load_shared;", "contents": "load::shock_ondeath()"},
	{ "trigger": "on_spawned\t#using scripts\\shared\\load_shared;", "contents": "load::on_spawned()"},
	{ "trigger": "link_ents\t#using scripts\\shared\\load_shared;", "contents": "load::link_ents()"},
	{ "trigger": "art_review\t#using scripts\\shared\\load_shared;", "contents": "load::art_review()"},
	{ "trigger": "gadget_shock_field_is_inuse\t#using scripts\\shared\\abilities\\gadgets\\_gadget_shock_field;", "contents": "_gadget_shock_field::gadget_shock_field_is_inuse(${1:slot})"},
	{ "trigger": "gadget_shock_field_is_flickering\t#using scripts\\shared\\abilities\\gadgets\\_gadget_shock_field;", "contents": "_gadget_shock_field::gadget_shock_field_is_flickering(${1:slot})"},
	{ "trigger": "gadget_shock_field_on_flicker\t#using scripts\\shared\\abilities\\gadgets\\_gadget_shock_field;", "contents": "_gadget_shock_field::gadget_shock_field_on_flicker(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_shock_field_on_give\t#using scripts\\shared\\abilities\\gadgets\\_gadget_shock_field;", "contents": "_gadget_shock_field::gadget_shock_field_on_give(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_shock_field_on_take\t#using scripts\\shared\\abilities\\gadgets\\_gadget_shock_field;", "contents": "_gadget_shock_field::gadget_shock_field_on_take(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_shock_field_on_connect\t#using scripts\\shared\\abilities\\gadgets\\_gadget_shock_field;", "contents": "_gadget_shock_field::gadget_shock_field_on_connect()"},
	{ "trigger": "gadget_shock_field_on\t#using scripts\\shared\\abilities\\gadgets\\_gadget_shock_field;", "contents": "_gadget_shock_field::gadget_shock_field_on(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_shock_field_off\t#using scripts\\shared\\abilities\\gadgets\\_gadget_shock_field;", "contents": "_gadget_shock_field::gadget_shock_field_off(${1:slot}, ${2:weapon})"},
	{ "trigger": "shock_field_think\t#using scripts\\shared\\abilities\\gadgets\\_gadget_shock_field;", "contents": "_gadget_shock_field::shock_field_think(${1:slot}, ${2:weapon})"},
	{ "trigger": "shock_field_zap_sound\t#using scripts\\shared\\abilities\\gadgets\\_gadget_shock_field;", "contents": "_gadget_shock_field::shock_field_zap_sound(${1:weapon})"},
	{ "trigger": "flicker_field_fx\t#using scripts\\shared\\abilities\\gadgets\\_gadget_shock_field;", "contents": "_gadget_shock_field::flicker_field_fx()"},
	{ "trigger": "watch_for_replay_gun\t#using scripts\\shared\\weapons\\replay_gun;", "contents": "replay_gun::watch_for_replay_gun()"},
	{ "trigger": "watch_lockon\t#using scripts\\shared\\weapons\\replay_gun;", "contents": "replay_gun::watch_lockon(${1:weapon})"},
	{ "trigger": "get_a_target\t#using scripts\\shared\\weapons\\replay_gun;", "contents": "replay_gun::get_a_target(${1:weapon})"},
	{ "trigger": "get_potential_targets\t#using scripts\\shared\\weapons\\replay_gun;", "contents": "replay_gun::get_potential_targets()"},
	{ "trigger": "pick_a_target_from\t#using scripts\\shared\\weapons\\replay_gun;", "contents": "replay_gun::pick_a_target_from(${1:targets})"},
	{ "trigger": "trace\t#using scripts\\shared\\weapons\\replay_gun;", "contents": "replay_gun::trace(${1:from}, ${2:to})"},
	{ "trigger": "can_see_projected_crosshair\t#using scripts\\shared\\weapons\\replay_gun;", "contents": "replay_gun::can_see_projected_crosshair(${1:target}, ${2:target_origin}, ${3:player_origin}, ${4:player_forward}, ${5:distance})"},
	{ "trigger": "is_valid_target\t#using scripts\\shared\\weapons\\replay_gun;", "contents": "replay_gun::is_valid_target(${1:ent})"},
	{ "trigger": "inside_screen_crosshair_radius\t#using scripts\\shared\\weapons\\replay_gun;", "contents": "replay_gun::inside_screen_crosshair_radius(${1:testOrigin}, ${2:weapon})"},
	{ "trigger": "inside_screen_lockon_radius\t#using scripts\\shared\\weapons\\replay_gun;", "contents": "replay_gun::inside_screen_lockon_radius(${1:targetOrigin})"},
	{ "trigger": "inside_screen_radius\t#using scripts\\shared\\weapons\\replay_gun;", "contents": "replay_gun::inside_screen_radius(${1:targetOrigin}, ${2:radius})"},
	{ "trigger": "get_pivot_tether_distance\t#using scripts\\shared\\weapons\\replay_gun;", "contents": "replay_gun::get_pivot_tether_distance()"},
	{ "trigger": "get_replay_range\t#using scripts\\shared\\weapons\\replay_gun;", "contents": "replay_gun::get_replay_range(${1:weapon})"},
	{ "trigger": "get_crosshair_radius\t#using scripts\\shared\\weapons\\replay_gun;", "contents": "replay_gun::get_crosshair_radius(${1:weapon})"},
	{ "trigger": "get_target_lock_on_origin\t#using scripts\\shared\\weapons\\replay_gun;", "contents": "replay_gun::get_target_lock_on_origin(${1:target})"},
	{ "trigger": "get_Lock_on_time\t#using scripts\\shared\\weapons\\replay_gun;", "contents": "replay_gun::get_Lock_on_time()"},
	{ "trigger": "replay_sticky_aim\t#using scripts\\shared\\weapons\\replay_gun;", "contents": "replay_gun::replay_sticky_aim()"},
	{ "trigger": "replay_sticky_aim_think\t#using scripts\\shared\\weapons\\replay_gun;", "contents": "replay_gun::replay_sticky_aim_think()"},
	{ "trigger": "SetExertVoice\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::SetExertVoice(${1:exert_id})"},
	{ "trigger": "playerExert\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::playerExert(${1:exert}, ${2:notifywait = false})"},
	{ "trigger": "exert_timer\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::exert_timer()"},
	{ "trigger": "zmbVox\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::zmbVox()"},
	{ "trigger": "zombie_behind_vox\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::zombie_behind_vox()"},
	{ "trigger": "oh_shit_vox\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::oh_shit_vox()"},
	{ "trigger": "player_killstreak_timer\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::player_killstreak_timer()"},
	{ "trigger": "player_zombie_kill_vox\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::player_zombie_kill_vox(${1:hit_location}, ${2:player}, ${3:mod}, ${4:zombie})"},
	{ "trigger": "get_response_chance\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::get_response_chance(${1:event})"},
	{ "trigger": "get_mod_type\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::get_mod_type(${1:impact}, ${2:mod}, ${3:weapon}, ${4:zombie}, ${5:instakill}, ${6:dist}, ${7:player})"},
	{ "trigger": "timer_actual\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::timer_actual(${1:kills}, ${2:time})"},
	{ "trigger": "zmbVoxCreate\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::zmbVoxCreate()"},
	{ "trigger": "zmbVoxInitSpeaker\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::zmbVoxInitSpeaker(${1:speaker}, ${2:prefix}, ${3:ent})"},
	{ "trigger": "custom_kill_damaged_VO\t#using scripts\\zm\\_zm_audio; self = zombie", "contents": "zm_audio::custom_kill_damaged_VO(${1:player})"},
	{ "trigger": "loadPlayerVoiceCategories\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::loadPlayerVoiceCategories(${1:table})"},
	{ "trigger": "checkStringValid\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::checkStringValid(${1:str})"},
	{ "trigger": "checkStringTrue\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::checkStringTrue(${1:str})"},
	{ "trigger": "checkIntValid\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::checkIntValid(${1:value}, ${2:defaultValue = 0})"},
	{ "trigger": "zmbVoxAdd\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::zmbVoxAdd(${1:category}, ${2:subcategory}, ${3:suffix}, ${4:percentage}, ${5:response}, ${6:delayBeforePlayAgain = 0})"},
	{ "trigger": "create_and_play_dialog\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::create_and_play_dialog(${1:category}, ${2:subcategory}, ${3:force_variant})"},
	{ "trigger": "do_player_or_npc_playvox\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::do_player_or_npc_playvox(${1:sound_to_play}, ${2:category}, ${3:subcategory})"},
	{ "trigger": "setup_response_line\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::setup_response_line(${1:player}, ${2:category}, ${3:subcategory})"},
	{ "trigger": "shouldPlayerSpeak\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::shouldPlayerSpeak(${1:player}, ${2:category}, ${3:subcategory}, ${4:percentage})"},
	{ "trigger": "isVoxOnCooldown\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::isVoxOnCooldown(${1:player}, ${2:category}, ${3:subcategory})"},
	{ "trigger": "zmbVoxGetLineVariant\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::zmbVoxGetLineVariant(${1:prefix}, ${2:suffix}, ${3:force_variant})"},
	{ "trigger": "areNearbySpeakersActive\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::areNearbySpeakersActive(${1:radius = 1000})"},
	{ "trigger": "musicState_Create\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::musicState_Create(${1:stateName}, ${2:playType = PLAYTYPE_REJECT}, ${3:musName1}, ${4:musName2}, ${5:musName3}, ${6:musName4}, ${7:musName5}, ${8:musName6})"},
	{ "trigger": "sndMusicSystem_CreateState\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::sndMusicSystem_CreateState(${1:state}, ${2:stateName}, ${3:playtype = PLAYTYPE_REJECT}, ${4:delay = 0})"},
	{ "trigger": "sndMusicSystem_PlayState\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::sndMusicSystem_PlayState(${1:state})"},
	{ "trigger": "playState\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::playState(${1:state})"},
	{ "trigger": "sndMusicSystem_QueueState\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::sndMusicSystem_QueueState(${1:state})"},
	{ "trigger": "sndMusicSystem_StopAndFlush\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::sndMusicSystem_StopAndFlush()"},
	{ "trigger": "sndMusicSystem_IsAbleToPlay\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::sndMusicSystem_IsAbleToPlay()"},
	{ "trigger": "sndMusicSystem_LocationsInit\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::sndMusicSystem_LocationsInit(${1:locationArray})"},
	{ "trigger": "sndMusicSystem_Locations\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::sndMusicSystem_Locations(${1:locationArray})"},
	{ "trigger": "sndLocationShouldPlay\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::sndLocationShouldPlay(${1:array}, ${2:activeZone})"},
	{ "trigger": "sndCurrentLocationArray\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::sndCurrentLocationArray(${1:current_array}, ${2:activeZone}, ${3:numCut}, ${4:num})"},
	{ "trigger": "sndLocationQueue\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::sndLocationQueue(${1:zone})"},
	{ "trigger": "sndMusicSystem_EESetup\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::sndMusicSystem_EESetup(${1:state}, ${2:origin1}, ${3:origin2}, ${4:origin3}, ${5:origin4}, ${6:origin5})"},
	{ "trigger": "sndMusicSystem_EEWait\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::sndMusicSystem_EEWait(${1:origin}, ${2:state})"},
	{ "trigger": "sndMusicSystem_EEOverride\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::sndMusicSystem_EEOverride(${1:arg1}, ${2:arg2})"},
	{ "trigger": "secretUse\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::secretUse(${1:notify_string}, ${2:color}, ${3:qualifier_func}, ${4:arg1}, ${5:arg2})"},
	{ "trigger": "sndAnnouncer_Init\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::sndAnnouncer_Init()"},
	{ "trigger": "sndAnnouncerVoxAdd\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::sndAnnouncerVoxAdd(${1:type}, ${2:suffix})"},
	{ "trigger": "sndAnnouncerPlayVox\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::sndAnnouncerPlayVox(${1:type}, ${2:player})"},
	{ "trigger": "zmbAIVox_NotifyConvert\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::zmbAIVox_NotifyConvert()"},
	{ "trigger": "zmbAIVox_PlayVox\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::zmbAIVox_PlayVox(${1:zombie}, ${2:type}, ${3:override}, ${4:priority})"},
	{ "trigger": "zmbAIVox_PlayDeath\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::zmbAIVox_PlayDeath()"},
	{ "trigger": "zmbAIVox_PlayElectrocution\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::zmbAIVox_PlayElectrocution()"},
	{ "trigger": "networkSafeReset\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::networkSafeReset()"},
	{ "trigger": "sndIsNetworkSafe\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::sndIsNetworkSafe()"},
	{ "trigger": "is_last_zombie\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::is_last_zombie()"},
	{ "trigger": "sndRadioSetup\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::sndRadioSetup(${1:alias_prefix}, ${2:is_sequential = false}, ${3:origin1}, ${4:origin2}, ${5:origin3}, ${6:origin4}, ${7:origin5})"},
	{ "trigger": "sndRadioWait\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::sndRadioWait(${1:origin}, ${2:radio}, ${3:is_sequential}, ${4:num})"},
	{ "trigger": "sndRadio_Override\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::sndRadio_Override(${1:arg1}, ${2:arg2})"},
	{ "trigger": "sndPerksJingles_Timer\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::sndPerksJingles_Timer()"},
	{ "trigger": "sndPerksJingles_Player\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::sndPerksJingles_Player(${1:type})"},
	{ "trigger": "sndPerksJingles_Cooldown\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::sndPerksJingles_Cooldown()"},
	{ "trigger": "sndConversation_Init\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::sndConversation_Init(${1:name}, ${2:specialEndon = undefined})"},
	{ "trigger": "sndConversation_AddLine\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::sndConversation_AddLine(${1:name}, ${2:line}, ${3:player_or_random}, ${4:ignorePlayer = 5})"},
	{ "trigger": "sndConversation_Play\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::sndConversation_Play(${1:name})"},
	{ "trigger": "sndConvoStopCurrentConversation\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::sndConvoStopCurrentConversation()"},
	{ "trigger": "waitPlaybackTime\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::waitPlaybackTime(${1:alias})"},
	{ "trigger": "isCurrentSpeakerAbleToTalk\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::isCurrentSpeakerAbleToTalk(${1:player})"},
	{ "trigger": "getRandomCharacter\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::getRandomCharacter(${1:ignore})"},
	{ "trigger": "getSpecificCharacter\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::getSpecificCharacter(${1:charIndex})"},
	{ "trigger": "isAnyoneTalking\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::isAnyoneTalking()"},
	{ "trigger": "sndConvoInterrupt\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::sndConvoInterrupt()"},
	{ "trigger": "water_vox\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::water_vox()"},
	{ "trigger": "vo_clear_underwater\t#using scripts\\zm\\_zm_audio;", "contents": "zm_audio::vo_clear_underwater()"},
	{ "trigger": "optimize_for_splitscreen\t#using scripts\\zm\\_zm_ffotd;", "contents": "zm_ffotd::optimize_for_splitscreen()"},
	{ "trigger": "gadget_sensory_overload_is_inuse\t#using scripts\\shared\\abilities\\gadgets\\_gadget_sensory_overload;", "contents": "_gadget_sensory_overload::gadget_sensory_overload_is_inuse(${1:slot})"},
	{ "trigger": "gadget_sensory_overload_is_flickering\t#using scripts\\shared\\abilities\\gadgets\\_gadget_sensory_overload;", "contents": "_gadget_sensory_overload::gadget_sensory_overload_is_flickering(${1:slot})"},
	{ "trigger": "gadget_sensory_overload_on_flicker\t#using scripts\\shared\\abilities\\gadgets\\_gadget_sensory_overload;", "contents": "_gadget_sensory_overload::gadget_sensory_overload_on_flicker(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_sensory_overload_on_give\t#using scripts\\shared\\abilities\\gadgets\\_gadget_sensory_overload;", "contents": "_gadget_sensory_overload::gadget_sensory_overload_on_give(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_sensory_overload_on_take\t#using scripts\\shared\\abilities\\gadgets\\_gadget_sensory_overload;", "contents": "_gadget_sensory_overload::gadget_sensory_overload_on_take(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_sensory_overload_on_connect\t#using scripts\\shared\\abilities\\gadgets\\_gadget_sensory_overload;", "contents": "_gadget_sensory_overload::gadget_sensory_overload_on_connect()"},
	{ "trigger": "gadget_sensory_overload_on\t#using scripts\\shared\\abilities\\gadgets\\_gadget_sensory_overload;", "contents": "_gadget_sensory_overload::gadget_sensory_overload_on(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_sensory_overload_off\t#using scripts\\shared\\abilities\\gadgets\\_gadget_sensory_overload;", "contents": "_gadget_sensory_overload::gadget_sensory_overload_off(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_sensory_overload_is_primed\t#using scripts\\shared\\abilities\\gadgets\\_gadget_sensory_overload;", "contents": "_gadget_sensory_overload::gadget_sensory_overload_is_primed(${1:slot}, ${2:weapon})"},
	{ "trigger": "player_attacks_enemy\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::player_attacks_enemy(${1:player}, ${2:amount}, ${3:type}, ${4:point}, ${5:weapon}, ${6:direction_vec}, ${7:tagName}, ${8:modelName}, ${9:partName}, ${10:dFlags}, ${11:inflictor}, ${12:chargeLevel})"},
	{ "trigger": "player_attacker\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::player_attacker(${1:attacker})"},
	{ "trigger": "enemy_death_detection\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::enemy_death_detection()"},
	{ "trigger": "is_spawner_targeted_by_blocker\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::is_spawner_targeted_by_blocker(${1:ent})"},
	{ "trigger": "add_custom_zombie_spawn_logic\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::add_custom_zombie_spawn_logic(${1:func})"},
	{ "trigger": "zombie_damage_failsafe\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::zombie_damage_failsafe()"},
	{ "trigger": "should_skip_teardown\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::should_skip_teardown(${1:find_flesh_struct_string})"},
	{ "trigger": "zombie_findnodes\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::zombie_findnodes()"},
	{ "trigger": "zombie_think\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::zombie_think()"},
	{ "trigger": "zombie_entered_playable\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::zombie_entered_playable()"},
	{ "trigger": "zombie_goto_entrance\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::zombie_goto_entrance(${1:node}, ${2:endon_bad_path})"},
	{ "trigger": "zombie_assure_node\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::zombie_assure_node()"},
	{ "trigger": "zombie_bad_path\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::zombie_bad_path()"},
	{ "trigger": "zombie_bad_path_notify\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::zombie_bad_path_notify()"},
	{ "trigger": "zombie_bad_path_timeout\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::zombie_bad_path_timeout()"},
	{ "trigger": "tear_into_building\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::tear_into_building()"},
	{ "trigger": "do_a_taunt\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::do_a_taunt()"},
	{ "trigger": "taunt_notetracks\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::taunt_notetracks(${1:msg})"},
	{ "trigger": "should_attack_player_thru_boards\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::should_attack_player_thru_boards()"},
	{ "trigger": "window_notetracks\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::window_notetracks(${1:msg})"},
	{ "trigger": "get_attack_spot\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::get_attack_spot(${1:node})"},
	{ "trigger": "get_attack_spot_index\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::get_attack_spot_index(${1:node})"},
	{ "trigger": "zombie_tear_notetracks\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::zombie_tear_notetracks(${1:msg}, ${2:chunk}, ${3:node})"},
	{ "trigger": "zombie_boardtear_offset_fx_horizontle\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::zombie_boardtear_offset_fx_horizontle(${1:chunk}, ${2:node})"},
	{ "trigger": "zombie_boardtear_offset_fx_verticle\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::zombie_boardtear_offset_fx_verticle(${1:chunk}, ${2:node})"},
	{ "trigger": "zombie_bartear_offset_fx_verticle\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::zombie_bartear_offset_fx_verticle(${1:chunk})"},
	{ "trigger": "zombie_bartear_offset_fx_horizontle\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::zombie_bartear_offset_fx_horizontle(${1:chunk})"},
	{ "trigger": "check_zbarrier_piece_for_zombie_inert\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::check_zbarrier_piece_for_zombie_inert(${1:chunk_index}, ${2:zbarrier}, ${3:zombie})"},
	{ "trigger": "check_zbarrier_piece_for_zombie_death\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::check_zbarrier_piece_for_zombie_death(${1:chunk_index}, ${2:zbarrier}, ${3:zombie})"},
	{ "trigger": "check_for_zombie_death\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::check_for_zombie_death(${1:zombie})"},
	{ "trigger": "player_can_score_from_zombies\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::player_can_score_from_zombies()"},
	{ "trigger": "zombie_can_drop_powerups\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::zombie_can_drop_powerups(${1:zombie})"},
	{ "trigger": "zombie_delay_powerup_drop\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::zombie_delay_powerup_drop(${1:origin})"},
	{ "trigger": "zombie_death_points\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::zombie_death_points(${1:origin}, ${2:mod}, ${3:hit_location}, ${4:attacker}, ${5:zombie}, ${6:team})"},
	{ "trigger": "get_number_variants\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::get_number_variants(${1:aliasPrefix})"},
	{ "trigger": "dragons_breath_flame_death_fx\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::dragons_breath_flame_death_fx()"},
	{ "trigger": "zombie_ragdoll_then_explode\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::zombie_ragdoll_then_explode(${1:launchvector}, ${2:attacker})"},
	{ "trigger": "zombie_death_animscript\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::zombie_death_animscript(${1:eInflictor}, ${2:attacker}, ${3:iDamage}, ${4:sMeansOfDeath}, ${5:weapon}, ${6:vDir}, ${7:sHitLoc}, ${8:psOffsetTime})"},
	{ "trigger": "check_zombie_death_animscript_callbacks\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::check_zombie_death_animscript_callbacks()"},
	{ "trigger": "register_zombie_death_animscript_callback\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::register_zombie_death_animscript_callback(${1:func})"},
	{ "trigger": "damage_on_fire\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::damage_on_fire(${1:player})"},
	{ "trigger": "player_using_hi_score_weapon\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::player_using_hi_score_weapon(${1:player})"},
	{ "trigger": "zombie_damage\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::zombie_damage(${1:mod}, ${2:hit_location}, ${3:hit_origin}, ${4:player}, ${5:amount}, ${6:team}, ${7:weapon}, ${8:direction_vec}, ${9:tagName}, ${10:modelName}, ${11:partName}, ${12:dFlags}, ${13:inflictor}, ${14:chargeLevel})"},
	{ "trigger": "zombie_damage_ads\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::zombie_damage_ads(${1:mod}, ${2:hit_location}, ${3:hit_origin}, ${4:player}, ${5:amount}, ${6:team}, ${7:weapon}, ${8:direction_vec}, ${9:tagName}, ${10:modelName}, ${11:partName}, ${12:dFlags}, ${13:inflictor}, ${14:chargeLevel})"},
	{ "trigger": "check_zombie_damage_callbacks\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::check_zombie_damage_callbacks(${1:mod}, ${2:hit_location}, ${3:hit_origin}, ${4:player}, ${5:amount}, ${6:weapon}, ${7:direction_vec}, ${8:tagName}, ${9:modelName}, ${10:partName}, ${11:dFlags}, ${12:inflictor}, ${13:chargeLevel})"},
	{ "trigger": "register_zombie_damage_callback\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::register_zombie_damage_callback(${1:func})"},
	{ "trigger": "zombie_give_flame_damage_points\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::zombie_give_flame_damage_points()"},
	{ "trigger": "zombie_flame_damage\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::zombie_flame_damage(${1:mod}, ${2:player})"},
	{ "trigger": "is_weapon_shotgun\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::is_weapon_shotgun(${1:weapon})"},
	{ "trigger": "zombie_explodes_intopieces\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::zombie_explodes_intopieces(${1:random_gibs})"},
	{ "trigger": "zombie_death_event\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::zombie_death_event(${1:zombie})"},
	{ "trigger": "check_zombie_death_event_callbacks\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::check_zombie_death_event_callbacks(${1:attacker})"},
	{ "trigger": "register_zombie_death_event_callback\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::register_zombie_death_event_callback(${1:func})"},
	{ "trigger": "deregister_zombie_death_event_callback\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::deregister_zombie_death_event_callback(${1:func})"},
	{ "trigger": "zombie_setup_attack_properties\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::zombie_setup_attack_properties()"},
	{ "trigger": "attractors_generated_listener\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::attractors_generated_listener()"},
	{ "trigger": "zombie_pathing\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::zombie_pathing()"},
	{ "trigger": "zombie_pathing_get_breadcrumb\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::zombie_pathing_get_breadcrumb(${1:origin}, ${2:breadcrumbs}, ${3:bad_crumbs}, ${4:pick_random})"},
	{ "trigger": "crumb_is_bad\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::crumb_is_bad(${1:crumb}, ${2:bad_crumbs})"},
	{ "trigger": "jitter_enemies_bad_breadcrumbs\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::jitter_enemies_bad_breadcrumbs(${1:start_crumb})"},
	{ "trigger": "zombie_repath_notifier\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::zombie_repath_notifier()"},
	{ "trigger": "zombie_follow_enemy\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::zombie_follow_enemy()"},
	{ "trigger": "zombie_history\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::zombie_history(${1:msg})"},
	{ "trigger": "do_zombie_spawn\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::do_zombie_spawn()"},
	{ "trigger": "draw_zone_spawned_from\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::draw_zone_spawned_from()"},
	{ "trigger": "do_zombie_rise\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::do_zombie_rise(${1:spot})"},
	{ "trigger": "zombie_rise_fx\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::zombie_rise_fx(${1:zombie})"},
	{ "trigger": "zombie_rise_burst_fx\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::zombie_rise_burst_fx(${1:zombie})"},
	{ "trigger": "zombie_rise_dust_fx\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::zombie_rise_dust_fx(${1:zombie})"},
	{ "trigger": "stop_zombie_rise_dust_fx\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::stop_zombie_rise_dust_fx(${1:zombie})"},
	{ "trigger": "zombie_tesla_head_gib\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::zombie_tesla_head_gib()"},
	{ "trigger": "play_ambient_zombie_vocals\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::play_ambient_zombie_vocals()"},
	{ "trigger": "zombie_complete_emerging_into_playable_area\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::zombie_complete_emerging_into_playable_area()"},
	{ "trigger": "zombie_free_cam_allowed\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::zombie_free_cam_allowed()"},
	{ "trigger": "zombie_push\t#using scripts\\zm\\_zm_spawner;", "contents": "zm_spawner::zombie_push()"},
	{ "trigger": "struct::delete\t#using scripts\\codescripts\\struct;", "contents": "struct::delete()"},
	{ "trigger": "struct::get\t#using scripts\\codescripts\\struct;", "contents": "struct::get(${1:kvp_value}, ${2:kvp_key = \"targetname\"})"},
	{ "trigger": "struct::spawn\t#using scripts\\codescripts\\struct;", "contents": "struct::spawn(${1:v_origin = (0}, ${2:0}, ${3:0)}, ${4:v_angles = (0}, ${5:0}, ${6:0)})"},
	{ "trigger": "struct::get_array\t#using scripts\\codescripts\\struct;", "contents": "struct::get_array(${1:kvp_value}, ${2:kvp_key = \"targetname\"})"},
	{ "trigger": "struct::get_script_bundle\t#using scripts\\codescripts\\struct;", "contents": "struct::get_script_bundle(${1:str_type}, ${2:str_name})"},
	{ "trigger": "struct::delete_script_bundle\t#using scripts\\codescripts\\struct;", "contents": "struct::delete_script_bundle(${1:str_type}, ${2:str_name})"},
	{ "trigger": "struct::get_script_bundles\t#using scripts\\codescripts\\struct;", "contents": "struct::get_script_bundles(${1:str_type})"},
	{ "trigger": "struct::get_script_bundle_list\t#using scripts\\codescripts\\struct;", "contents": "struct::get_script_bundle_list(${1:str_type}, ${2:str_name})"},
	{ "trigger": "struct::get_script_bundle_instances\t#using scripts\\codescripts\\struct;", "contents": "struct::get_script_bundle_instances(${1:str_type}, ${2:str_name = \"\"})"},
	{ "trigger": "setSkill\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::setSkill(${1:reset}, ${2:skill_override})"},
	{ "trigger": "apply_difficulty_var_with_func\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::apply_difficulty_var_with_func(${1:difficulty_func})"},
	{ "trigger": "apply_threat_bias_to_all_players\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::apply_threat_bias_to_all_players(${1:difficulty_func})"},
	{ "trigger": "coop_damage_and_accuracy_scaling\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::coop_damage_and_accuracy_scaling(${1:difficulty_func})"},
	{ "trigger": "set_difficulty_from_locked_settings\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::set_difficulty_from_locked_settings()"},
	{ "trigger": "get_locked_difficulty_val\t#using scripts\\shared\\gameskill_shared; ignored is there because this is used as a function pointer with another function that does have a second parm", "contents": "gameskill::get_locked_difficulty_val(${1:msg}, ${2:ignored})"},
	{ "trigger": "always_pain\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::always_pain()"},
	{ "trigger": "pain_protection\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::pain_protection()"},
	{ "trigger": "pain_protection_check\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::pain_protection_check()"},
	{ "trigger": "printHealthDebug\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::printHealthDebug()"},
	{ "trigger": "destroyHealthDebug\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::destroyHealthDebug()"},
	{ "trigger": "axisAccuracyControl\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::axisAccuracyControl()"},
	{ "trigger": "alliesAccuracyControl\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::alliesAccuracyControl()"},
	{ "trigger": "playerHurtcheck\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::playerHurtcheck()"},
	{ "trigger": "playerHealthRegen\t#using scripts\\shared\\gameskill_shared; self = player", "contents": "gameskill::playerHealthRegen()"},
	{ "trigger": "reduceTakeCoverWarnings\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::reduceTakeCoverWarnings()"},
	{ "trigger": "playerInvul\t#using scripts\\shared\\gameskill_shared; self = player", "contents": "gameskill::playerInvul(${1:timer})"},
	{ "trigger": "grenadeAwareness\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::grenadeAwareness()"},
	{ "trigger": "playerheartbeatloop\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::playerheartbeatloop(${1:healthcap})"},
	{ "trigger": "delayed_delete\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::delayed_delete(${1:ent}, ${2:time})"},
	{ "trigger": "healthfadeOffWatcher\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::healthfadeOffWatcher(${1:overlay}, ${2:timeToFadeOut})"},
	{ "trigger": "new_style_health_overlay\t#using scripts\\shared\\gameskill_shared; self = player", "contents": "gameskill::new_style_health_overlay()"},
	{ "trigger": "healthOverlay\t#using scripts\\shared\\gameskill_shared; self = player", "contents": "gameskill::healthOverlay()"},
	{ "trigger": "add_hudelm_position_internal\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::add_hudelm_position_internal(${1:alignY})"},
	{ "trigger": "create_warning_elem\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::create_warning_elem(${1:player})"},
	{ "trigger": "play_hurt_vox\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::play_hurt_vox()"},
	{ "trigger": "waitTillPlayerIsHitAgain\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::waitTillPlayerIsHitAgain()"},
	{ "trigger": "destroy_warning_elem_when_mission_failed\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::destroy_warning_elem_when_mission_failed(${1:player})"},
	{ "trigger": "destroy_warning_elem\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::destroy_warning_elem(${1:fadeout})"},
	{ "trigger": "mayChangeCoverWarningAlpha\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::mayChangeCoverWarningAlpha(${1:coverWarning})"},
	{ "trigger": "fontScaler\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::fontScaler(${1:scale}, ${2:timer})"},
	{ "trigger": "cover_warning_check\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::cover_warning_check()"},
	{ "trigger": "shouldShowCoverWarning\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::shouldShowCoverWarning()"},
	{ "trigger": "fadeFunc\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::fadeFunc(${1:overlay}, ${2:coverWarning}, ${3:severity}, ${4:mult}, ${5:hud_scaleOnly})"},
	{ "trigger": "healthOverlay_remove\t#using scripts\\shared\\gameskill_shared; self = player", "contents": "gameskill::healthOverlay_remove(${1:overlay})"},
	{ "trigger": "setTakeCoverWarnings\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::setTakeCoverWarnings()"},
	{ "trigger": "increment_take_cover_warnings_on_death\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::increment_take_cover_warnings_on_death()"},
	{ "trigger": "empty_kill_func\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::empty_kill_func(${1:type}, ${2:loc}, ${3:point}, ${4:attacker}, ${5:amount})"},
	{ "trigger": "update_skill_level\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::update_skill_level(${1:skill_override})"},
	{ "trigger": "coop_enemy_accuracy_scalar_watcher\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::coop_enemy_accuracy_scalar_watcher()"},
	{ "trigger": "coop_friendly_accuracy_scalar_watcher\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::coop_friendly_accuracy_scalar_watcher()"},
	{ "trigger": "coop_axis_accuracy_scaler\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::coop_axis_accuracy_scaler()"},
	{ "trigger": "coop_allies_accuracy_scaler\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::coop_allies_accuracy_scaler()"},
	{ "trigger": "coop_player_threat_bias_adjuster\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::coop_player_threat_bias_adjuster()"},
	{ "trigger": "enable_auto_adjust_threatbias\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::enable_auto_adjust_threatbias(${1:player})"},
	{ "trigger": "setDiffStructArrays\t#using scripts\\shared\\gameskill_shared; called each time a variable is grabbed for live updates while debugging, for performance, should probably be done once at start for shipping game", "contents": "gameskill::setDiffStructArrays()"},
	{ "trigger": "get_player_threat_bias\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::get_player_threat_bias()"},
	{ "trigger": "get_player_xp_difficulty_multiplier\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::get_player_xp_difficulty_multiplier()"},
	{ "trigger": "get_health_overlay_cutoff\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::get_health_overlay_cutoff()"},
	{ "trigger": "get_enemy_pain_chance\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::get_enemy_pain_chance()"},
	{ "trigger": "get_player_death_invulnerable_time\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::get_player_death_invulnerable_time()"},
	{ "trigger": "get_base_enemy_accuracy\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::get_base_enemy_accuracy()"},
	{ "trigger": "get_player_difficulty_health\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::get_player_difficulty_health()"},
	{ "trigger": "get_player_hit_invuln_time\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::get_player_hit_invuln_time()"},
	{ "trigger": "get_miss_time_constant\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::get_miss_time_constant()"},
	{ "trigger": "get_miss_time_reset_delay\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::get_miss_time_reset_delay()"},
	{ "trigger": "get_miss_time_distance_factor\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::get_miss_time_distance_factor()"},
	{ "trigger": "get_dog_health\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::get_dog_health()"},
	{ "trigger": "get_dog_press_time\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::get_dog_press_time()"},
	{ "trigger": "get_dog_hits_before_kill\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::get_dog_hits_before_kill()"},
	{ "trigger": "get_long_regen_time\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::get_long_regen_time()"},
	{ "trigger": "get_player_health_regular_regen_delay\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::get_player_health_regular_regen_delay()"},
	{ "trigger": "get_worthy_damage_ratio\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::get_worthy_damage_ratio()"},
	{ "trigger": "get_coop_enemy_accuracy_modifier\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::get_coop_enemy_accuracy_modifier()"},
	{ "trigger": "get_coop_friendly_accuracy_modifier\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::get_coop_friendly_accuracy_modifier()"},
	{ "trigger": "get_coop_friendly_threat_bias_scalar\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::get_coop_friendly_threat_bias_scalar()"},
	{ "trigger": "get_coop_player_health_modifier\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::get_coop_player_health_modifier()"},
	{ "trigger": "get_coop_player_death_invulnerable_time_modifier\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::get_coop_player_death_invulnerable_time_modifier()"},
	{ "trigger": "get_coop_hit_invulnerability_modifier\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::get_coop_hit_invulnerability_modifier()"},
	{ "trigger": "get_coop_enemy_pain_chance_modifier\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::get_coop_enemy_pain_chance_modifier()"},
	{ "trigger": "get_general_difficulty_level\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::get_general_difficulty_level()"},
	{ "trigger": "player_eligible_for_death_invulnerability\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::player_eligible_for_death_invulnerability()"},
	{ "trigger": "monitor_player_death_invulnerability_eligibility\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::monitor_player_death_invulnerability_eligibility()"},
	{ "trigger": "adjust_damage_for_player_health\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::adjust_damage_for_player_health(${1:player}, ${2:eAttacker}, ${3:eInflictor}, ${4:iDamage}, ${5:weapon}, ${6:sHitLoc}, ${7:sMeansOfDamage})"},
	{ "trigger": "adjust_melee_damage\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::adjust_melee_damage(${1:player}, ${2:eAttacker}, ${3:eInflictor}, ${4:iDamage}, ${5:weapon}, ${6:sHitLoc}, ${7:sMeansOfDamage})"},
	{ "trigger": "accuracy_buildup_before_fire\t#using scripts\\shared\\gameskill_shared;", "contents": "gameskill::accuracy_buildup_before_fire(${1:ai})"},
	{ "trigger": "onPlayerConnect\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::onPlayerConnect()"},
	{ "trigger": "onPlayerSpawned\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::onPlayerSpawned()"},
	{ "trigger": "watchForGrenadeDuds\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::watchForGrenadeDuds()"},
	{ "trigger": "watchForGrenadeLauncherDuds\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::watchForGrenadeLauncherDuds()"},
	{ "trigger": "grenade_safe_to_throw\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::grenade_safe_to_throw(${1:player}, ${2:weapon})"},
	{ "trigger": "grenade_safe_to_bounce\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::grenade_safe_to_bounce(${1:player}, ${2:weapon})"},
	{ "trigger": "makeGrenadeDudAndDestroy\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::makeGrenadeDudAndDestroy()"},
	{ "trigger": "checkGrenadeForDud\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::checkGrenadeForDud(${1:weapon}, ${2:isThrownGrenade}, ${3:player})"},
	{ "trigger": "wait_explode\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::wait_explode()"},
	{ "trigger": "wait_timeout\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::wait_timeout(${1:time})"},
	{ "trigger": "wait_for_explosion\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::wait_for_explosion(${1:time})"},
	{ "trigger": "watchForScriptExplosion\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::watchForScriptExplosion(${1:weapon}, ${2:isThrownGrenade}, ${3:player})"},
	{ "trigger": "get_nonalternate_weapon\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::get_nonalternate_weapon(${1:weapon})"},
	{ "trigger": "switch_from_alt_weapon\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::switch_from_alt_weapon(${1:weapon})"},
	{ "trigger": "give_start_weapons\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::give_start_weapons(${1:takeAllWeapons}, ${2:alreadySpawned})"},
	{ "trigger": "give_fallback_weapon\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::give_fallback_weapon(${1:immediate = false})"},
	{ "trigger": "take_fallback_weapon\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::take_fallback_weapon()"},
	{ "trigger": "switch_back_primary_weapon\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::switch_back_primary_weapon(${1:oldprimary}, ${2:immediate = false})"},
	{ "trigger": "watchWeaponUsageZM\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::watchWeaponUsageZM()"},
	{ "trigger": "trackWeaponZM\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::trackWeaponZM()"},
	{ "trigger": "updateLastHeldWeaponTimingsZM\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::updateLastHeldWeaponTimingsZM(${1:newTime})"},
	{ "trigger": "updateWeaponTimingsZM\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::updateWeaponTimingsZM(${1:newTime})"},
	{ "trigger": "watchWeaponChangeZM\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::watchWeaponChangeZM()"},
	{ "trigger": "weaponobjects_on_player_connect_override_internal\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::weaponobjects_on_player_connect_override_internal()"},
	{ "trigger": "weaponobjects_on_player_connect_override\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::weaponobjects_on_player_connect_override()"},
	{ "trigger": "createBallisticKnifeWatcher_zm\t#using scripts\\zm\\_zm_weapons; self == player", "contents": "zm_weapons::createBallisticKnifeWatcher_zm(${1:weaponName})"},
	{ "trigger": "default_check_firesale_loc_valid_func\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::default_check_firesale_loc_valid_func()"},
	{ "trigger": "add_zombie_weapon\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::add_zombie_weapon(${1:weapon_name}, ${2:upgrade_name}, ${3:hint}, ${4:cost}, ${5:weaponVO}, ${6:weaponVOresp}, ${7:ammo_cost}, ${8:create_vox}, ${9:is_wonder_weapon}, ${10:force_attachments})"},
	{ "trigger": "add_attachments\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::add_attachments(${1:weapon}, ${2:upgrade})"},
	{ "trigger": "is_weapon_included\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::is_weapon_included(${1:weapon})"},
	{ "trigger": "is_weapon_or_base_included\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::is_weapon_or_base_included(${1:weapon})"},
	{ "trigger": "include_zombie_weapon\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::include_zombie_weapon(${1:weapon_name}, ${2:in_box})"},
	{ "trigger": "add_limited_weapon\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::add_limited_weapon(${1:weapon_name}, ${2:amount})"},
	{ "trigger": "limited_weapon_below_quota\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::limited_weapon_below_quota(${1:weapon}, ${2:ignore_player}, ${3:pap_triggers})"},
	{ "trigger": "add_custom_limited_weapon_check\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::add_custom_limited_weapon_check(${1:callback})"},
	{ "trigger": "add_weapon_to_content\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::add_weapon_to_content(${1:weapon_name}, ${2:package})"},
	{ "trigger": "player_can_use_content\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::player_can_use_content(${1:weapon})"},
	{ "trigger": "add_dynamic_wallbuy\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::add_dynamic_wallbuy(${1:weapon}, ${2:wallbuy}, ${3:pristine})"},
	{ "trigger": "wall_weapon_update_prompt\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::wall_weapon_update_prompt(${1:player})"},
	{ "trigger": "reset_wallbuy_internal\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::reset_wallbuy_internal(${1:set_hint_string})"},
	{ "trigger": "reset_wallbuys\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::reset_wallbuys()"},
	{ "trigger": "get_weapon_hint\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::get_weapon_hint(${1:weapon})"},
	{ "trigger": "get_weapon_cost\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::get_weapon_cost(${1:weapon})"},
	{ "trigger": "get_ammo_cost\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::get_ammo_cost(${1:weapon})"},
	{ "trigger": "get_upgraded_ammo_cost\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::get_upgraded_ammo_cost(${1:weapon})"},
	{ "trigger": "get_ammo_cost_for_weapon\t#using scripts\\zm\\_zm_weapons; self = player", "contents": "zm_weapons::get_ammo_cost_for_weapon(${1:w_current}, ${2:n_base_non_wallbuy_cost}, ${3:n_upgraded_non_wallbuy_cost})"},
	{ "trigger": "get_is_in_box\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::get_is_in_box(${1:weapon})"},
	{ "trigger": "get_force_attachments\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::get_force_attachments(${1:weapon})"},
	{ "trigger": "weapon_supports_default_attachment\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::weapon_supports_default_attachment(${1:weapon})"},
	{ "trigger": "default_attachment\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::default_attachment(${1:weapon})"},
	{ "trigger": "weapon_supports_attachments\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::weapon_supports_attachments(${1:weapon})"},
	{ "trigger": "random_attachment\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::random_attachment(${1:weapon}, ${2:exclude})"},
	{ "trigger": "get_attachment_index\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::get_attachment_index(${1:weapon})"},
	{ "trigger": "weapon_supports_this_attachment\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::weapon_supports_this_attachment(${1:weapon}, ${2:att})"},
	{ "trigger": "get_base_weapon\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::get_base_weapon(${1:upgradedweapon})"},
	{ "trigger": "get_upgrade_weapon\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::get_upgrade_weapon(${1:weapon}, ${2:add_attachment})"},
	{ "trigger": "can_upgrade_weapon\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::can_upgrade_weapon(${1:weapon})"},
	{ "trigger": "weapon_supports_aat\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::weapon_supports_aat(${1:weapon})"},
	{ "trigger": "is_weapon_upgraded\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::is_weapon_upgraded(${1:weapon})"},
	{ "trigger": "get_weapon_with_attachments\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::get_weapon_with_attachments(${1:weapon})"},
	{ "trigger": "has_weapon_or_attachments\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::has_weapon_or_attachments(${1:weapon})"},
	{ "trigger": "has_upgrade\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::has_upgrade(${1:weapon})"},
	{ "trigger": "has_weapon_or_upgrade\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::has_weapon_or_upgrade(${1:weapon})"},
	{ "trigger": "add_shared_ammo_weapon\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::add_shared_ammo_weapon(${1:weapon}, ${2:base_weapon})"},
	{ "trigger": "get_shared_ammo_weapon\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::get_shared_ammo_weapon(${1:weapon})"},
	{ "trigger": "get_player_weapon_with_same_base\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::get_player_weapon_with_same_base(${1:weapon})"},
	{ "trigger": "get_weapon_hint_ammo\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::get_weapon_hint_ammo()"},
	{ "trigger": "weapon_set_first_time_hint\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::weapon_set_first_time_hint(${1:cost}, ${2:ammo_cost})"},
	{ "trigger": "placeable_mine_can_buy_weapon_extra_check_func\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::placeable_mine_can_buy_weapon_extra_check_func(${1:w_weapon})"},
	{ "trigger": "weapon_spawn_think\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::weapon_spawn_think()"},
	{ "trigger": "should_upgrade_weapon\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::should_upgrade_weapon(${1:player})"},
	{ "trigger": "show_all_weapon_buys\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::show_all_weapon_buys(${1:player}, ${2:cost}, ${3:ammo_cost}, ${4:is_grenade})"},
	{ "trigger": "weapon_show\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::weapon_show(${1:player})"},
	{ "trigger": "get_pack_a_punch_camo_index\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::get_pack_a_punch_camo_index(${1:prev_pap_index})"},
	{ "trigger": "get_pack_a_punch_weapon_options\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::get_pack_a_punch_weapon_options(${1:weapon})"},
	{ "trigger": "give_build_kit_weapon\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::give_build_kit_weapon(${1:weapon})"},
	{ "trigger": "weapon_give\t#using scripts\\zm\\_zm_weapons; is_upgrade and magic_box are ignored", "contents": "zm_weapons::weapon_give(${1:weapon}, ${2:is_upgrade = false}, ${3:magic_box = false}, ${4:nosound = false}, ${5:b_switch_weapon = true})"},
	{ "trigger": "weapon_take\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::weapon_take(${1:weapon})"},
	{ "trigger": "play_weapon_vo\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::play_weapon_vo(${1:weapon}, ${2:magic_box})"},
	{ "trigger": "weapon_type_check\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::weapon_type_check(${1:weapon})"},
	{ "trigger": "ammo_give\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::ammo_give(${1:weapon})"},
	{ "trigger": "get_default_weapondata\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::get_default_weapondata(${1:weapon})"},
	{ "trigger": "get_player_weapondata\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::get_player_weapondata(${1:player}, ${2:weapon})"},
	{ "trigger": "weapon_is_better\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::weapon_is_better(${1:left}, ${2:right})"},
	{ "trigger": "merge_weapons\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::merge_weapons(${1:oldweapondata}, ${2:newweapondata})"},
	{ "trigger": "weapondata_give\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::weapondata_give(${1:weapondata})"},
	{ "trigger": "weapondata_take\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::weapondata_take(${1:weapondata})"},
	{ "trigger": "create_loadout\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::create_loadout(${1:weapons})"},
	{ "trigger": "player_get_loadout\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::player_get_loadout()"},
	{ "trigger": "player_give_loadout\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::player_give_loadout(${1:loadout}, ${2:replace_existing = true}, ${3:immediate_switch = false})"},
	{ "trigger": "player_take_loadout\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::player_take_loadout(${1:loadout})"},
	{ "trigger": "register_zombie_weapon_callback\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::register_zombie_weapon_callback(${1:weapon}, ${2:func})"},
	{ "trigger": "set_stowed_weapon\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::set_stowed_weapon(${1:weapon})"},
	{ "trigger": "clear_stowed_weapon\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::clear_stowed_weapon()"},
	{ "trigger": "suppress_stowed_weapon\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::suppress_stowed_weapon(${1:onOff})"},
	{ "trigger": "checkStringValid\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::checkStringValid(${1:str})"},
	{ "trigger": "load_weapon_spec_from_table\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::load_weapon_spec_from_table(${1:table}, ${2:first_row})"},
	{ "trigger": "is_wallbuy\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::is_wallbuy(${1:w_to_check})"},
	{ "trigger": "is_wonder_weapon\t#using scripts\\zm\\_zm_weapons;", "contents": "zm_weapons::is_wonder_weapon(${1:w_to_check})"},
	{ "trigger": "gadget_vision_pulse_is_inuse\t#using scripts\\shared\\abilities\\gadgets\\_gadget_vision_pulse;", "contents": "_gadget_vision_pulse::gadget_vision_pulse_is_inuse(${1:slot})"},
	{ "trigger": "gadget_vision_pulse_is_flickering\t#using scripts\\shared\\abilities\\gadgets\\_gadget_vision_pulse;", "contents": "_gadget_vision_pulse::gadget_vision_pulse_is_flickering(${1:slot})"},
	{ "trigger": "gadget_vision_pulse_on_flicker\t#using scripts\\shared\\abilities\\gadgets\\_gadget_vision_pulse;", "contents": "_gadget_vision_pulse::gadget_vision_pulse_on_flicker(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_vision_pulse_on_give\t#using scripts\\shared\\abilities\\gadgets\\_gadget_vision_pulse;", "contents": "_gadget_vision_pulse::gadget_vision_pulse_on_give(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_vision_pulse_on_take\t#using scripts\\shared\\abilities\\gadgets\\_gadget_vision_pulse;", "contents": "_gadget_vision_pulse::gadget_vision_pulse_on_take(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_vision_pulse_on_connect\t#using scripts\\shared\\abilities\\gadgets\\_gadget_vision_pulse;", "contents": "_gadget_vision_pulse::gadget_vision_pulse_on_connect()"},
	{ "trigger": "gadget_vision_pulse_on_spawn\t#using scripts\\shared\\abilities\\gadgets\\_gadget_vision_pulse;", "contents": "_gadget_vision_pulse::gadget_vision_pulse_on_spawn()"},
	{ "trigger": "gadget_vision_pulse_ramp_hold_func\t#using scripts\\shared\\abilities\\gadgets\\_gadget_vision_pulse;", "contents": "_gadget_vision_pulse::gadget_vision_pulse_ramp_hold_func()"},
	{ "trigger": "gadget_vision_pulse_watch_death\t#using scripts\\shared\\abilities\\gadgets\\_gadget_vision_pulse;", "contents": "_gadget_vision_pulse::gadget_vision_pulse_watch_death()"},
	{ "trigger": "gadget_vision_pulse_watch_emp\t#using scripts\\shared\\abilities\\gadgets\\_gadget_vision_pulse;", "contents": "_gadget_vision_pulse::gadget_vision_pulse_watch_emp()"},
	{ "trigger": "gadget_vision_pulse_on\t#using scripts\\shared\\abilities\\gadgets\\_gadget_vision_pulse;", "contents": "_gadget_vision_pulse::gadget_vision_pulse_on(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_vision_pulse_off\t#using scripts\\shared\\abilities\\gadgets\\_gadget_vision_pulse;", "contents": "_gadget_vision_pulse::gadget_vision_pulse_off(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_vision_pulse_start\t#using scripts\\shared\\abilities\\gadgets\\_gadget_vision_pulse;", "contents": "_gadget_vision_pulse::gadget_vision_pulse_start(${1:slot}, ${2:weapon})"},
	{ "trigger": "wait_until_is_done\t#using scripts\\shared\\abilities\\gadgets\\_gadget_vision_pulse;", "contents": "_gadget_vision_pulse::wait_until_is_done(${1:slot}, ${2:timePulse})"},
	{ "trigger": "gadget_vision_pulse_flicker\t#using scripts\\shared\\abilities\\gadgets\\_gadget_vision_pulse;", "contents": "_gadget_vision_pulse::gadget_vision_pulse_flicker(${1:slot}, ${2:weapon})"},
	{ "trigger": "set_gadget_vision_pulse_status\t#using scripts\\shared\\abilities\\gadgets\\_gadget_vision_pulse;", "contents": "_gadget_vision_pulse::set_gadget_vision_pulse_status(${1:status}, ${2:time})"},
	{ "trigger": "gadget_cleanse_is_inuse\t#using scripts\\shared\\abilities\\gadgets\\_gadget_cleanse;", "contents": "_gadget_cleanse::gadget_cleanse_is_inuse(${1:slot})"},
	{ "trigger": "gadget_cleanse_is_flickering\t#using scripts\\shared\\abilities\\gadgets\\_gadget_cleanse;", "contents": "_gadget_cleanse::gadget_cleanse_is_flickering(${1:slot})"},
	{ "trigger": "gadget_cleanse_on_flicker\t#using scripts\\shared\\abilities\\gadgets\\_gadget_cleanse;", "contents": "_gadget_cleanse::gadget_cleanse_on_flicker(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_cleanse_on_give\t#using scripts\\shared\\abilities\\gadgets\\_gadget_cleanse;", "contents": "_gadget_cleanse::gadget_cleanse_on_give(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_cleanse_on_take\t#using scripts\\shared\\abilities\\gadgets\\_gadget_cleanse;", "contents": "_gadget_cleanse::gadget_cleanse_on_take(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_cleanse_on_connect\t#using scripts\\shared\\abilities\\gadgets\\_gadget_cleanse;", "contents": "_gadget_cleanse::gadget_cleanse_on_connect()"},
	{ "trigger": "gadget_cleanse_on\t#using scripts\\shared\\abilities\\gadgets\\_gadget_cleanse;", "contents": "_gadget_cleanse::gadget_cleanse_on(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_cleanse_off\t#using scripts\\shared\\abilities\\gadgets\\_gadget_cleanse;", "contents": "_gadget_cleanse::gadget_cleanse_off(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_cleanse_start\t#using scripts\\shared\\abilities\\gadgets\\_gadget_cleanse;", "contents": "_gadget_cleanse::gadget_cleanse_start(${1:slot}, ${2:weapon})"},
	{ "trigger": "wait_until_is_done\t#using scripts\\shared\\abilities\\gadgets\\_gadget_cleanse;", "contents": "_gadget_cleanse::wait_until_is_done(${1:slot}, ${2:timePulse})"},
	{ "trigger": "gadget_cleanse_flicker\t#using scripts\\shared\\abilities\\gadgets\\_gadget_cleanse;", "contents": "_gadget_cleanse::gadget_cleanse_flicker(${1:slot}, ${2:weapon})"},
	{ "trigger": "set_gadget_cleanse_status\t#using scripts\\shared\\abilities\\gadgets\\_gadget_cleanse;", "contents": "_gadget_cleanse::set_gadget_cleanse_status(${1:status}, ${2:time})"},
	{ "trigger": "door_classify\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::door_classify(${1:parent_trig})"},
	{ "trigger": "door_buy\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::door_buy()"},
	{ "trigger": "blocker_update_prompt_visibility\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::blocker_update_prompt_visibility()"},
	{ "trigger": "door_delay\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::door_delay()"},
	{ "trigger": "door_activate\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::door_activate(${1:time}, ${2:open}, ${3:quick}, ${4:use_blocker_clip_for_pathing})"},
	{ "trigger": "kill_trapped_zombies\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::kill_trapped_zombies(${1:trigger})"},
	{ "trigger": "any_player_touching\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::any_player_touching(${1:trigger})"},
	{ "trigger": "any_player_touching_any\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::any_player_touching_any(${1:trigger}, ${2:more_triggers})"},
	{ "trigger": "any_zombie_touching_any\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::any_zombie_touching_any(${1:trigger}, ${2:more_triggers})"},
	{ "trigger": "wait_trigger_clear\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::wait_trigger_clear(${1:trigger}, ${2:more_triggers}, ${3:end_on})"},
	{ "trigger": "waittill_door_trigger_clear_local_power_off\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::waittill_door_trigger_clear_local_power_off(${1:trigger}, ${2:all_trigs})"},
	{ "trigger": "waittill_door_trigger_clear_global_power_off\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::waittill_door_trigger_clear_global_power_off(${1:trigger}, ${2:all_trigs})"},
	{ "trigger": "waittill_door_can_close\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::waittill_door_can_close()"},
	{ "trigger": "door_think\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::door_think()"},
	{ "trigger": "self_and_flag_wait\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::self_and_flag_wait(${1:msg})"},
	{ "trigger": "door_block\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::door_block()"},
	{ "trigger": "door_opened\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::door_opened(${1:cost}, ${2:quick_close})"},
	{ "trigger": "physics_launch_door\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::physics_launch_door(${1:door_trig})"},
	{ "trigger": "door_solid_thread\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::door_solid_thread()"},
	{ "trigger": "door_solid_thread_anim\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::door_solid_thread_anim()"},
	{ "trigger": "disconnect_paths_when_done\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::disconnect_paths_when_done()"},
	{ "trigger": "self_disconnectpaths\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::self_disconnectpaths()"},
	{ "trigger": "debris_think\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::debris_think()"},
	{ "trigger": "debris_zbarrier_move\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::debris_zbarrier_move()"},
	{ "trigger": "door_zbarrier_move\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::door_zbarrier_move()"},
	{ "trigger": "move_chunk\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::move_chunk(${1:index}, ${2:b_hide})"},
	{ "trigger": "debris_move\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::debris_move(${1:struct})"},
	{ "trigger": "blocker_disconnect_paths\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::blocker_disconnect_paths(${1:start_node}, ${2:end_node}, ${3:two_way})"},
	{ "trigger": "blocker_connect_paths\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::blocker_connect_paths(${1:start_node}, ${2:end_node}, ${3:two_way})"},
	{ "trigger": "should_delete_zbarriers\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::should_delete_zbarriers()"},
	{ "trigger": "destructible_glass_barricade\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::destructible_glass_barricade(${1:unbroken_section}, ${2:node})"},
	{ "trigger": "blocker_attack_spots\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::blocker_attack_spots()"},
	{ "trigger": "blocker_choke\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::blocker_choke()"},
	{ "trigger": "blocker_think\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::blocker_think()"},
	{ "trigger": "player_fails_blocker_repair_trigger_preamble\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::player_fails_blocker_repair_trigger_preamble(${1:player}, ${2:players}, ${3:trigger}, ${4:hold_required})"},
	{ "trigger": "has_blocker_affecting_perk\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::has_blocker_affecting_perk()"},
	{ "trigger": "do_post_chunk_repair_delay\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::do_post_chunk_repair_delay(${1:has_perk})"},
	{ "trigger": "handle_post_board_repair_rewards\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::handle_post_board_repair_rewards(${1:cost}, ${2:zbarrier})"},
	{ "trigger": "blocker_unitrigger_think\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::blocker_unitrigger_think()"},
	{ "trigger": "blocker_trigger_think\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::blocker_trigger_think()"},
	{ "trigger": "increment_window_repaired\t#using scripts\\zm\\_zm_blockers; self = player", "contents": "zm_blockers::increment_window_repaired(${1:s_barrier})"},
	{ "trigger": "blockertrigger_update_prompt\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::blockertrigger_update_prompt(${1:player})"},
	{ "trigger": "blockerstub_update_prompt\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::blockerstub_update_prompt(${1:player})"},
	{ "trigger": "random_destroyed_chunk_show\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::random_destroyed_chunk_show()"},
	{ "trigger": "door_repaired_rumble_n_sound\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::door_repaired_rumble_n_sound()"},
	{ "trigger": "board_completion\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::board_completion()"},
	{ "trigger": "trigger_delete_on_repair\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::trigger_delete_on_repair()"},
	{ "trigger": "blocker_doubler_hint\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::blocker_doubler_hint(${1:hint}, ${2:original_cost})"},
	{ "trigger": "rebuild_barrier_reward_reset\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::rebuild_barrier_reward_reset()"},
	{ "trigger": "remove_chunk\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::remove_chunk(${1:chunk}, ${2:node}, ${3:destroy_immediately}, ${4:zomb})"},
	{ "trigger": "remove_chunk_rotate_grate\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::remove_chunk_rotate_grate(${1:chunk})"},
	{ "trigger": "zombie_boardtear_audio_offset\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::zombie_boardtear_audio_offset(${1:chunk})"},
	{ "trigger": "zombie_bartear_audio_offset\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::zombie_bartear_audio_offset(${1:chunk})"},
	{ "trigger": "ensure_chunk_is_back_to_origin\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::ensure_chunk_is_back_to_origin(${1:chunk})"},
	{ "trigger": "replace_chunk\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::replace_chunk(${1:barrier}, ${2:chunk}, ${3:perk}, ${4:upgrade}, ${5:via_powerup})"},
	{ "trigger": "open_all_zbarriers\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::open_all_zbarriers()"},
	{ "trigger": "zombie_boardtear_audio_plus_fx_offset_repair_horizontal\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::zombie_boardtear_audio_plus_fx_offset_repair_horizontal(${1:chunk})"},
	{ "trigger": "zombie_boardtear_audio_plus_fx_offset_repair_verticle\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::zombie_boardtear_audio_plus_fx_offset_repair_verticle(${1:chunk})"},
	{ "trigger": "zombie_gratetear_audio_plus_fx_offset_repair_horizontal\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::zombie_gratetear_audio_plus_fx_offset_repair_horizontal(${1:chunk})"},
	{ "trigger": "zombie_bartear_audio_plus_fx_offset_repair_horizontal\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::zombie_bartear_audio_plus_fx_offset_repair_horizontal(${1:chunk})"},
	{ "trigger": "zombie_bartear_audio_plus_fx_offset_repair_verticle\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::zombie_bartear_audio_plus_fx_offset_repair_verticle(${1:chunk})"},
	{ "trigger": "flag_blocker\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::flag_blocker()"},
	{ "trigger": "update_states\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::update_states(${1:states})"},
	{ "trigger": "quantum_bomb_open_nearest_door_validation\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::quantum_bomb_open_nearest_door_validation(${1:position})"},
	{ "trigger": "quantum_bomb_open_nearest_door_result\t#using scripts\\zm\\_zm_blockers;", "contents": "zm_blockers::quantum_bomb_open_nearest_door_result(${1:position})"},
	{ "trigger": "perk_machine_think\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::perk_machine_think(${1:str_key}, ${2:s_custom_perk})"},
	{ "trigger": "default_vending_precaching\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::default_vending_precaching()"},
	{ "trigger": "use_solo_revive\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::use_solo_revive()"},
	{ "trigger": "set_power_on\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::set_power_on(${1:state})"},
	{ "trigger": "turn_perk_off\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::turn_perk_off(${1:ishidden})"},
	{ "trigger": "play_loop_on_machine\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::play_loop_on_machine()"},
	{ "trigger": "perk_fx\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::perk_fx(${1:fx}, ${2:turnOffFx})"},
	{ "trigger": "electric_perks_dialog\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::electric_perks_dialog()"},
	{ "trigger": "reset_vending_hint_string\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::reset_vending_hint_string()"},
	{ "trigger": "vending_trigger_can_player_use\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::vending_trigger_can_player_use(${1:player})"},
	{ "trigger": "vending_trigger_think\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::vending_trigger_think()"},
	{ "trigger": "vending_trigger_post_think\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::vending_trigger_post_think(${1:player}, ${2:perk})"},
	{ "trigger": "wait_give_perk\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::wait_give_perk(${1:perk}, ${2:bought})"},
	{ "trigger": "return_retained_perks\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::return_retained_perks()"},
	{ "trigger": "give_perk_presentation\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::give_perk_presentation(${1:perk})"},
	{ "trigger": "give_perk\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::give_perk(${1:perk}, ${2:bought})"},
	{ "trigger": "perk_set_max_health_if_jugg\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::perk_set_max_health_if_jugg(${1:str_perk}, ${2:set_preMaxHealth}, ${3:clamp_health_to_max_health})"},
	{ "trigger": "check_player_has_perk\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::check_player_has_perk(${1:perk})"},
	{ "trigger": "vending_set_hintstring\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::vending_set_hintstring(${1:perk})"},
	{ "trigger": "perk_think\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::perk_think(${1:perk})"},
	{ "trigger": "set_perk_clientfield\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::set_perk_clientfield(${1:perk}, ${2:state})"},
	{ "trigger": "perk_hud_destroy\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::perk_hud_destroy(${1:perk})"},
	{ "trigger": "perk_hud_grey\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::perk_hud_grey(${1:perk}, ${2:grey_on_off})"},
	{ "trigger": "perk_give_bottle_begin\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::perk_give_bottle_begin(${1:perk})"},
	{ "trigger": "perk_give_bottle_end\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::perk_give_bottle_end(${1:original_weapon}, ${2:perk})"},
	{ "trigger": "perk_abort_drinking\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::perk_abort_drinking(${1:post_delay})"},
	{ "trigger": "give_random_perk\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::give_random_perk()"},
	{ "trigger": "lose_random_perk\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::lose_random_perk()"},
	{ "trigger": "update_perk_hud\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::update_perk_hud()"},
	{ "trigger": "quantum_bomb_give_nearest_perk_validation\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::quantum_bomb_give_nearest_perk_validation(${1:position})"},
	{ "trigger": "quantum_bomb_give_nearest_perk_result\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::quantum_bomb_give_nearest_perk_result(${1:position})"},
	{ "trigger": "perk_pause\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::perk_pause(${1:perk})"},
	{ "trigger": "perk_unpause\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::perk_unpause(${1:perk})"},
	{ "trigger": "perk_pause_all_perks\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::perk_pause_all_perks(${1:power_zone})"},
	{ "trigger": "perk_unpause_all_perks\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::perk_unpause_all_perks(${1:power_zone})"},
	{ "trigger": "has_perk_paused\t#using scripts\\zm\\_zm_perks; self = player", "contents": "zm_perks::has_perk_paused(${1:perk})"},
	{ "trigger": "getVendingMachineNotify\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::getVendingMachineNotify()"},
	{ "trigger": "perk_machine_removal\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::perk_machine_removal(${1:machine}, ${2:replacement_model})"},
	{ "trigger": "get_perk_machine_start_state\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::get_perk_machine_start_state(${1:perk})"},
	{ "trigger": "perks_register_clientfield\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::perks_register_clientfield()"},
	{ "trigger": "thread_bump_trigger\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::thread_bump_trigger()"},
	{ "trigger": "players_are_in_perk_area\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::players_are_in_perk_area(${1:perk_machine})"},
	{ "trigger": "perk_hostmigration\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::perk_hostmigration()"},
	{ "trigger": "host_migration_func\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::host_migration_func(${1:s_custom_perk}, ${2:keyName})"},
	{ "trigger": "spare_change\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::spare_change(${1:str_trigger = \"audio_bump_trigger\"}, ${2:str_sound = \"zmb_perks_bump_bottle\"})"},
	{ "trigger": "check_for_change\t#using scripts\\zm\\_zm_perks; self = trigger", "contents": "zm_perks::check_for_change()"},
	{ "trigger": "get_perk_array\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::get_perk_array()"},
	{ "trigger": "register_revive_success_perk_func\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::register_revive_success_perk_func(${1:revive_func})"},
	{ "trigger": "register_perk_basic_info\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::register_perk_basic_info(${1:str_perk}, ${2:str_alias}, ${3:n_perk_cost}, ${4:str_hint_string}, ${5:w_perk_bottle_weapon})"},
	{ "trigger": "register_perk_machine\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::register_perk_machine(${1:str_perk}, ${2:func_perk_machine_setup}, ${3:func_perk_machine_thread})"},
	{ "trigger": "register_perk_machine_power_override\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::register_perk_machine_power_override(${1:str_perk}, ${2:func_perk_machine_power_override})"},
	{ "trigger": "register_perk_precache_func\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::register_perk_precache_func(${1:str_perk}, ${2:func_precache})"},
	{ "trigger": "register_perk_threads\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::register_perk_threads(${1:str_perk}, ${2:func_give_player_perk}, ${3:func_take_player_perk})"},
	{ "trigger": "register_perk_clientfields\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::register_perk_clientfields(${1:str_perk}, ${2:func_clientfield_register}, ${3:func_clientfield_set})"},
	{ "trigger": "register_perk_host_migration_params\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::register_perk_host_migration_params(${1:str_perk}, ${2:str_radiant_name}, ${3:str_effect_name})"},
	{ "trigger": "_register_undefined_perk\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::_register_undefined_perk(${1:str_perk})"},
	{ "trigger": "register_perk_damage_override_func\t#using scripts\\zm\\_zm_perks;", "contents": "zm_perks::register_perk_damage_override_func(${1:func_damage_override})"},
	{ "trigger": "register_unitrigger_system_func\t#using scripts\\zm\\_zm_unitrigger;", "contents": "zm_unitrigger::register_unitrigger_system_func(${1:system}, ${2:trigger_func})"},
	{ "trigger": "unitrigger_force_per_player_triggers\t#using scripts\\zm\\_zm_unitrigger;", "contents": "zm_unitrigger::unitrigger_force_per_player_triggers(${1:unitrigger_stub}, ${2:opt_on_off})"},
	{ "trigger": "unitrigger_trigger\t#using scripts\\zm\\_zm_unitrigger;", "contents": "zm_unitrigger::unitrigger_trigger(${1:player})"},
	{ "trigger": "unitrigger_origin\t#using scripts\\zm\\_zm_unitrigger;", "contents": "zm_unitrigger::unitrigger_origin()"},
	{ "trigger": "register_unitrigger_internal\t#using scripts\\zm\\_zm_unitrigger;", "contents": "zm_unitrigger::register_unitrigger_internal(${1:unitrigger_stub}, ${2:trigger_func})"},
	{ "trigger": "register_unitrigger\t#using scripts\\zm\\_zm_unitrigger;", "contents": "zm_unitrigger::register_unitrigger(${1:unitrigger_stub}, ${2:trigger_func})"},
	{ "trigger": "unregister_unitrigger\t#using scripts\\zm\\_zm_unitrigger;", "contents": "zm_unitrigger::unregister_unitrigger(${1:unitrigger_stub})"},
	{ "trigger": "unregister_unitrigger_internal\t#using scripts\\zm\\_zm_unitrigger;", "contents": "zm_unitrigger::unregister_unitrigger_internal(${1:unitrigger_stub})"},
	{ "trigger": "delay_delete_contact_ent\t#using scripts\\zm\\_zm_unitrigger;", "contents": "zm_unitrigger::delay_delete_contact_ent()"},
	{ "trigger": "register_static_unitrigger\t#using scripts\\zm\\_zm_unitrigger;", "contents": "zm_unitrigger::register_static_unitrigger(${1:unitrigger_stub}, ${2:trigger_func}, ${3:recalculate_zone})"},
	{ "trigger": "register_dyn_unitrigger\t#using scripts\\zm\\_zm_unitrigger;", "contents": "zm_unitrigger::register_dyn_unitrigger(${1:unitrigger_stub}, ${2:trigger_func}, ${3:recalculate_zone})"},
	{ "trigger": "reregister_unitrigger_as_dynamic\t#using scripts\\zm\\_zm_unitrigger;", "contents": "zm_unitrigger::reregister_unitrigger_as_dynamic(${1:unitrigger_stub})"},
	{ "trigger": "debug_unitriggers\t#using scripts\\zm\\_zm_unitrigger;", "contents": "zm_unitrigger::debug_unitriggers()"},
	{ "trigger": "cleanup_trigger\t#using scripts\\zm\\_zm_unitrigger;", "contents": "zm_unitrigger::cleanup_trigger(${1:trigger}, ${2:player})"},
	{ "trigger": "assess_and_apply_visibility\t#using scripts\\zm\\_zm_unitrigger;", "contents": "zm_unitrigger::assess_and_apply_visibility(${1:trigger}, ${2:stub}, ${3:player}, ${4:default_keep})"},
	{ "trigger": "run_visibility_function_for_all_triggers\t#using scripts\\zm\\_zm_unitrigger;", "contents": "zm_unitrigger::run_visibility_function_for_all_triggers()"},
	{ "trigger": "is_same_trigger\t#using scripts\\zm\\_zm_unitrigger;", "contents": "zm_unitrigger::is_same_trigger(${1:old_trigger}, ${2:trigger})"},
	{ "trigger": "check_and_build_trigger_from_unitrigger_stub\t#using scripts\\zm\\_zm_unitrigger;", "contents": "zm_unitrigger::check_and_build_trigger_from_unitrigger_stub(${1:stub}, ${2:player})"},
	{ "trigger": "build_trigger_from_unitrigger_stub\t#using scripts\\zm\\_zm_unitrigger;", "contents": "zm_unitrigger::build_trigger_from_unitrigger_stub(${1:stub}, ${2:player})"},
	{ "trigger": "copy_zombie_keys_onto_trigger\t#using scripts\\zm\\_zm_unitrigger;", "contents": "zm_unitrigger::copy_zombie_keys_onto_trigger(${1:trig}, ${2:stub})"},
	{ "trigger": "trigger_thread\t#using scripts\\zm\\_zm_unitrigger; Wrapper to add kill_trigger endon to all managed trigger threads.", "contents": "zm_unitrigger::trigger_thread(${1:trigger_func})"},
	{ "trigger": "get_closest_unitriggers\t#using scripts\\zm\\_zm_unitrigger;", "contents": "zm_unitrigger::get_closest_unitriggers(${1:org}, ${2:array}, ${3:dist = 9999999})"},
	{ "trigger": "create_unitrigger\t#using scripts\\zm\\_zm_unitrigger;", "contents": "zm_unitrigger::create_unitrigger(${1:str_hint}, ${2:n_radius = 64}, ${3:func_prompt_and_visibility = &unitrigger_prompt_and_visibility}, ${4:func_unitrigger_logic = &unitrigger_logic}, ${5:s_trigger_type = \"unitrigger_radius_use\"})"},
	{ "trigger": "create_dyn_unitrigger\t#using scripts\\zm\\_zm_unitrigger;", "contents": "zm_unitrigger::create_dyn_unitrigger(${1:str_hint}, ${2:n_radius = 64}, ${3:func_prompt_and_visibility = &unitrigger_prompt_and_visibility}, ${4:func_unitrigger_logic = &unitrigger_logic}, ${5:s_trigger_type = \"unitrigger_radius_use\"})"},
	{ "trigger": "unitrigger_prompt_and_visibility\t#using scripts\\zm\\_zm_unitrigger;", "contents": "zm_unitrigger::unitrigger_prompt_and_visibility(${1:player})"},
	{ "trigger": "unitrigger_logic\t#using scripts\\zm\\_zm_unitrigger;", "contents": "zm_unitrigger::unitrigger_logic()"},
	{ "trigger": "grab_carpenter\t#using scripts\\zm\\_zm_powerup_carpenter;", "contents": "zm_powerup_carpenter::grab_carpenter(${1:player})"},
	{ "trigger": "start_carpenter\t#using scripts\\zm\\_zm_powerup_carpenter;", "contents": "zm_powerup_carpenter::start_carpenter(${1:origin})"},
	{ "trigger": "get_closest_window_repair\t#using scripts\\zm\\_zm_powerup_carpenter;", "contents": "zm_powerup_carpenter::get_closest_window_repair(${1:windows}, ${2:origin})"},
	{ "trigger": "start_carpenter_new\t#using scripts\\zm\\_zm_powerup_carpenter;", "contents": "zm_powerup_carpenter::start_carpenter_new(${1:origin})"},
	{ "trigger": "get_near_boards\t#using scripts\\zm\\_zm_powerup_carpenter;", "contents": "zm_powerup_carpenter::get_near_boards(${1:windows})"},
	{ "trigger": "get_far_boards\t#using scripts\\zm\\_zm_powerup_carpenter;", "contents": "zm_powerup_carpenter::get_far_boards(${1:windows})"},
	{ "trigger": "repair_far_boards\t#using scripts\\zm\\_zm_powerup_carpenter;", "contents": "zm_powerup_carpenter::repair_far_boards(${1:barriers}, ${2:upgrade})"},
	{ "trigger": "func_should_drop_carpenter\t#using scripts\\zm\\_zm_powerup_carpenter;", "contents": "zm_powerup_carpenter::func_should_drop_carpenter()"},
	{ "trigger": "get_num_window_destroyed\t#using scripts\\zm\\_zm_powerup_carpenter;", "contents": "zm_powerup_carpenter::get_num_window_destroyed()"},
	{ "trigger": "result\t#using scripts\\zm\\aats\\_zm_aat_blast_furnace;", "contents": "zm_aat_blast_furnace::result(${1:death}, ${2:attacker}, ${3:mod}, ${4:weapon})"},
	{ "trigger": "blast_furnace_explosion\t#using scripts\\zm\\aats\\_zm_aat_blast_furnace;", "contents": "zm_aat_blast_furnace::blast_furnace_explosion(${1:e_attacker}, ${2:w_weapon})"},
	{ "trigger": "blast_furnace_zombie_burn\t#using scripts\\zm\\aats\\_zm_aat_blast_furnace;", "contents": "zm_aat_blast_furnace::blast_furnace_zombie_burn(${1:e_attacker}, ${2:w_weapon})"},
	{ "trigger": "zombie_death_gib\t#using scripts\\zm\\aats\\_zm_aat_blast_furnace;", "contents": "zm_aat_blast_furnace::zombie_death_gib(${1:e_attacker}, ${2:w_weapon})"},
	{ "trigger": "on_player_connect\t#using scripts\\zm\\gametypes\\_clientids;", "contents": "clientids::on_player_connect()"},
	{ "trigger": "on_player_connect\t#using scripts\\shared\\clientids_shared;", "contents": "clientids::on_player_connect()"},
	{ "trigger": "parasite_damage\t#using scripts\\shared\\vehicles\\_parasite;", "contents": "parasite::parasite_damage()"},
	{ "trigger": "get_parasite_enemy\t#using scripts\\shared\\vehicles\\_parasite;", "contents": "parasite::get_parasite_enemy()"},
	{ "trigger": "set_parasite_enemy\t#using scripts\\shared\\vehicles\\_parasite;", "contents": "parasite::set_parasite_enemy(${1:enemy})"},
	{ "trigger": "defaultRole\t#using scripts\\shared\\vehicles\\_parasite;", "contents": "parasite::defaultRole()"},
	{ "trigger": "getParasiteFiringRate\t#using scripts\\shared\\vehicles\\_parasite;", "contents": "parasite::getParasiteFiringRate()"},
	{ "trigger": "state_death_update\t#using scripts\\shared\\vehicles\\_parasite;", "contents": "parasite::state_death_update(${1:params})"},
	{ "trigger": "state_combat_enter\t#using scripts\\shared\\vehicles\\_parasite;", "contents": "parasite::state_combat_enter(${1:params})"},
	{ "trigger": "state_combat_update\t#using scripts\\shared\\vehicles\\_parasite;", "contents": "parasite::state_combat_update(${1:params})"},
	{ "trigger": "fire_pod_logic\t#using scripts\\shared\\vehicles\\_parasite;", "contents": "parasite::fire_pod_logic(${1:choseToJuke})"},
	{ "trigger": "GetNextMovePosition_tactical\t#using scripts\\shared\\vehicles\\_parasite; has self.parasiteEnemy", "contents": "parasite::GetNextMovePosition_tactical()"},
	{ "trigger": "GetNextMovePosition_forwardjuke\t#using scripts\\shared\\vehicles\\_parasite; has self.parasiteEnemy", "contents": "parasite::GetNextMovePosition_forwardjuke()"},
	{ "trigger": "path_update_interrupt\t#using scripts\\shared\\vehicles\\_parasite;", "contents": "parasite::path_update_interrupt()"},
	{ "trigger": "drone_pain_for_time\t#using scripts\\shared\\vehicles\\_parasite;", "contents": "parasite::drone_pain_for_time(${1:time}, ${2:stablizeParam}, ${3:restoreLookPoint})"},
	{ "trigger": "drone_pain\t#using scripts\\shared\\vehicles\\_parasite;", "contents": "parasite::drone_pain(${1:eAttacker}, ${2:damageType}, ${3:hitPoint}, ${4:hitDirection}, ${5:hitLocationInfo}, ${6:partName})"},
	{ "trigger": "register_info\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::register_info(${1:type}, ${2:name}, ${3:version}, ${4:priority}, ${5:lerp_step_count}, ${6:should_activate_per_player}, ${7:lerp_thread}, ${8:ref_count_lerp_thread})"},
	{ "trigger": "activate\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::activate(${1:type}, ${2:name}, ${3:player}, ${4:opt_param_1}, ${5:opt_param_2}, ${6:opt_param_3})"},
	{ "trigger": "deactivate\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::deactivate(${1:type}, ${2:name}, ${3:player})"},
	{ "trigger": "set_state_active\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::set_state_active(${1:player}, ${2:lerp})"},
	{ "trigger": "set_state_inactive\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::set_state_inactive(${1:player})"},
	{ "trigger": "timeout_lerp_thread\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::timeout_lerp_thread(${1:timeout}, ${2:opt_param_2}, ${3:opt_param_3})"},
	{ "trigger": "timeout_lerp_thread_per_player\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::timeout_lerp_thread_per_player(${1:player}, ${2:timeout}, ${3:opt_param_2}, ${4:opt_param_3})"},
	{ "trigger": "duration_lerp_thread\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::duration_lerp_thread(${1:duration}, ${2:max_duration})"},
	{ "trigger": "duration_lerp_thread_per_player\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::duration_lerp_thread_per_player(${1:player}, ${2:duration}, ${3:max_duration})"},
	{ "trigger": "ramp_in_thread_per_player\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::ramp_in_thread_per_player(${1:player}, ${2:duration})"},
	{ "trigger": "ramp_in_out_thread_hold_func\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::ramp_in_out_thread_hold_func()"},
	{ "trigger": "ramp_in_out_thread\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::ramp_in_out_thread(${1:ramp_in}, ${2:full_period}, ${3:ramp_out})"},
	{ "trigger": "ramp_in_out_thread_per_player_internal\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::ramp_in_out_thread_per_player_internal(${1:player}, ${2:ramp_in}, ${3:full_period}, ${4:ramp_out})"},
	{ "trigger": "ramp_in_out_thread_watch_player_shutdown\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::ramp_in_out_thread_watch_player_shutdown(${1:player})"},
	{ "trigger": "ramp_in_out_thread_per_player_death_shutdown\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::ramp_in_out_thread_per_player_death_shutdown(${1:player}, ${2:ramp_in}, ${3:full_period}, ${4:ramp_out})"},
	{ "trigger": "ramp_in_out_thread_per_player\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::ramp_in_out_thread_per_player(${1:player}, ${2:ramp_in}, ${3:full_period}, ${4:ramp_out})"},
	{ "trigger": "register_type\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::register_type(${1:type})"},
	{ "trigger": "finalize_clientfields\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::finalize_clientfields()"},
	{ "trigger": "finalize_type_clientfields\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::finalize_type_clientfields()"},
	{ "trigger": "validate_info\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::validate_info(${1:type}, ${2:name}, ${3:priority})"},
	{ "trigger": "add_sorted_name_key\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::add_sorted_name_key(${1:type}, ${2:name})"},
	{ "trigger": "add_sorted_priority_key\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::add_sorted_priority_key(${1:type}, ${2:name}, ${3:priority})"},
	{ "trigger": "add_info\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::add_info(${1:type}, ${2:name}, ${3:version}, ${4:priority}, ${5:lerp_step_count}, ${6:should_activate_per_player}, ${7:lerp_thread}, ${8:ref_count_lerp_thread})"},
	{ "trigger": "on_player_connect\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::on_player_connect()"},
	{ "trigger": "player_setup\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::player_setup()"},
	{ "trigger": "player_shutdown\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::player_shutdown()"},
	{ "trigger": "monitor\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::monitor()"},
	{ "trigger": "get_first_active_name\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::get_first_active_name(${1:type_struct})"},
	{ "trigger": "update_clientfields\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::update_clientfields(${1:player}, ${2:type_struct})"},
	{ "trigger": "lerp_thread_wrapper\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::lerp_thread_wrapper(${1:func}, ${2:opt_param_1}, ${3:opt_param_2}, ${4:opt_param_3})"},
	{ "trigger": "lerp_thread_per_player_wrapper\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::lerp_thread_per_player_wrapper(${1:func}, ${2:player}, ${3:opt_param_1}, ${4:opt_param_2}, ${5:opt_param_3})"},
	{ "trigger": "activate_per_player\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::activate_per_player(${1:type}, ${2:name}, ${3:player}, ${4:opt_param_1}, ${5:opt_param_2}, ${6:opt_param_3})"},
	{ "trigger": "deactivate_per_player\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::deactivate_per_player(${1:type}, ${2:name}, ${3:player})"},
	{ "trigger": "calc_ramp_in_lerp\t#using scripts\\shared\\visionset_mgr_shared;", "contents": "visionset_mgr::calc_ramp_in_lerp(${1:start_time}, ${2:end_time})"},
	{ "trigger": "on_player_connect\t#using scripts\\shared\\medals_shared;", "contents": "medals::on_player_connect()"},
	{ "trigger": "setLastKilledBy\t#using scripts\\shared\\medals_shared;", "contents": "medals::setLastKilledBy(${1:attacker})"},
	{ "trigger": "offenseGlobalCount\t#using scripts\\shared\\medals_shared;", "contents": "medals::offenseGlobalCount()"},
	{ "trigger": "defenseGlobalCount\t#using scripts\\shared\\medals_shared;", "contents": "medals::defenseGlobalCount()"},
	{ "trigger": "CodeCallback_Medal\t#using scripts\\shared\\medals_shared;", "contents": "medals::CodeCallback_Medal(${1:medalIndex})"},
	{ "trigger": "set_state_leaving\t#using scripts\\zm\\_zm_pack_a_punch; self is a zbarrier", "contents": "_zm_pack_a_punch::set_state_leaving()"},
	{ "trigger": "set_state_arriving\t#using scripts\\zm\\_zm_pack_a_punch; self is a zbarrier", "contents": "_zm_pack_a_punch::set_state_arriving()"},
	{ "trigger": "set_state_power_on\t#using scripts\\zm\\_zm_pack_a_punch; self is a zbarrier", "contents": "_zm_pack_a_punch::set_state_power_on()"},
	{ "trigger": "set_state_hidden\t#using scripts\\zm\\_zm_pack_a_punch; self is a zbarrier", "contents": "_zm_pack_a_punch::set_state_hidden()"},
	{ "trigger": "gadget_cacophany_is_inuse\t#using scripts\\shared\\abilities\\gadgets\\_gadget_cacophany;", "contents": "_gadget_cacophany::gadget_cacophany_is_inuse(${1:slot})"},
	{ "trigger": "gadget_cacophany_is_flickering\t#using scripts\\shared\\abilities\\gadgets\\_gadget_cacophany;", "contents": "_gadget_cacophany::gadget_cacophany_is_flickering(${1:slot})"},
	{ "trigger": "gadget_cacophany_on_flicker\t#using scripts\\shared\\abilities\\gadgets\\_gadget_cacophany;", "contents": "_gadget_cacophany::gadget_cacophany_on_flicker(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_cacophany_on_give\t#using scripts\\shared\\abilities\\gadgets\\_gadget_cacophany;", "contents": "_gadget_cacophany::gadget_cacophany_on_give(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_cacophany_on_take\t#using scripts\\shared\\abilities\\gadgets\\_gadget_cacophany;", "contents": "_gadget_cacophany::gadget_cacophany_on_take(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_cacophany_on_connect\t#using scripts\\shared\\abilities\\gadgets\\_gadget_cacophany;", "contents": "_gadget_cacophany::gadget_cacophany_on_connect()"},
	{ "trigger": "gadget_cacophany_on\t#using scripts\\shared\\abilities\\gadgets\\_gadget_cacophany;", "contents": "_gadget_cacophany::gadget_cacophany_on(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_cacophany_off\t#using scripts\\shared\\abilities\\gadgets\\_gadget_cacophany;", "contents": "_gadget_cacophany::gadget_cacophany_off(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_cacophany_is_primed\t#using scripts\\shared\\abilities\\gadgets\\_gadget_cacophany;", "contents": "_gadget_cacophany::gadget_cacophany_is_primed(${1:slot}, ${2:weapon})"},
	{ "trigger": "RegisterSharedInterfaceAttributes\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::RegisterSharedInterfaceAttributes(${1:archetype})"},
	{ "trigger": "InitThreatBias\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::InitThreatBias()"},
	{ "trigger": "EntityIsArchetype\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::EntityIsArchetype(${1:entity}, ${2:archetype})"},
	{ "trigger": "GetEnemyTarget\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::GetEnemyTarget()"},
	{ "trigger": "GetTargetPos\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::GetTargetPos(${1:target}, ${2:geteye})"},
	{ "trigger": "GetTargetEyeOffset\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::GetTargetEyeOffset(${1:target})"},
	{ "trigger": "fire_for_time\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::fire_for_time(${1:totalFireTime}, ${2:turretIdx}, ${3:target}, ${4:intervalScale = 1.0})"},
	{ "trigger": "fire_for_rounds\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::fire_for_rounds(${1:fireCount}, ${2:turretIdx}, ${3:target})"},
	{ "trigger": "__fire_for_rounds_internal\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::__fire_for_rounds_internal(${1:fireCount}, ${2:fireInterval}, ${3:turretIdx}, ${4:target})"},
	{ "trigger": "owner_in_line_of_fire\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::owner_in_line_of_fire()"},
	{ "trigger": "SetTurretTarget\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::SetTurretTarget(${1:target}, ${2:turretIdx = 0}, ${3:offset = (0}, ${4:0}, ${5:0)})"},
	{ "trigger": "FireTurret\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::FireTurret(${1:turretIdx}, ${2:isFake})"},
	{ "trigger": "Javelin_LoseTargetAtRightTime\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::Javelin_LoseTargetAtRightTime(${1:target})"},
	{ "trigger": "waittill_pathing_done\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::waittill_pathing_done(${1:maxtime = 15})"},
	{ "trigger": "waittill_pathresult\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::waittill_pathresult(${1:maxtime = 0.5})"},
	{ "trigger": "waittill_asm_terminated\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::waittill_asm_terminated()"},
	{ "trigger": "waittill_asm_timeout\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::waittill_asm_timeout(${1:timeout})"},
	{ "trigger": "waittill_asm_complete\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::waittill_asm_complete(${1:substate_to_wait}, ${2:timeout = 10})"},
	{ "trigger": "throw_off_balance\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::throw_off_balance(${1:damageType}, ${2:hitPoint}, ${3:hitDirection}, ${4:hitLocationInfo})"},
	{ "trigger": "predicted_collision\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::predicted_collision()"},
	{ "trigger": "collision_fx\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::collision_fx(${1:normal})"},
	{ "trigger": "nudge_collision\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::nudge_collision()"},
	{ "trigger": "level_out_for_landing\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::level_out_for_landing()"},
	{ "trigger": "immolate\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::immolate(${1:attacker})"},
	{ "trigger": "burning_thread\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::burning_thread(${1:attacker}, ${2:inflictor})"},
	{ "trigger": "iff_notifyMeInNSec\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::iff_notifyMeInNSec(${1:time}, ${2:note})"},
	{ "trigger": "iff_override\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::iff_override(${1:owner}, ${2:time = 60})"},
	{ "trigger": "iff_override_team_switch_behavior\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::iff_override_team_switch_behavior(${1:team})"},
	{ "trigger": "blink_lights_for_time\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::blink_lights_for_time(${1:time})"},
	{ "trigger": "TurnOff\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::TurnOff()"},
	{ "trigger": "TurnOn\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::TurnOn()"},
	{ "trigger": "TurnOffAllLightsAndLaser\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::TurnOffAllLightsAndLaser()"},
	{ "trigger": "TurnOffAllAmbientAnims\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::TurnOffAllAmbientAnims()"},
	{ "trigger": "ClearAllLookingAndTargeting\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::ClearAllLookingAndTargeting()"},
	{ "trigger": "ClearAllMovement\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::ClearAllMovement(${1:zeroOutSpeed = false})"},
	{ "trigger": "shared_callback_damage\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::shared_callback_damage(${1:eInflictor}, ${2:eAttacker}, ${3:iDamage}, ${4:iDFlags}, ${5:sMeansOfDeath}, ${6:weapon}, ${7:vPoint}, ${8:vDir}, ${9:sHitLoc}, ${10:vDamageOrigin}, ${11:psOffsetTime}, ${12:damageFromUnderneath}, ${13:modelIndex}, ${14:partName}, ${15:vSurfaceNormal})"},
	{ "trigger": "should_emp\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::should_emp(${1:vehicle}, ${2:weapon}, ${3:meansOfDeath}, ${4:eInflictor}, ${5:eAttacker})"},
	{ "trigger": "should_burn\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::should_burn(${1:vehicle}, ${2:weapon}, ${3:meansOfDeath}, ${4:eInflictor}, ${5:eAttacker})"},
	{ "trigger": "StartInitialState\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::StartInitialState(${1:defaultState = \"combat\"})"},
	{ "trigger": "start_scripted\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::start_scripted(${1:disable_death_state}, ${2:no_clear_movement})"},
	{ "trigger": "stop_scripted\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::stop_scripted(${1:statename})"},
	{ "trigger": "set_role\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::set_role(${1:rolename})"},
	{ "trigger": "set_state\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::set_state(${1:name}, ${2:params})"},
	{ "trigger": "evaluate_connections\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::evaluate_connections(${1:eval_func}, ${2:params})"},
	{ "trigger": "get_state_callbacks\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::get_state_callbacks(${1:statename})"},
	{ "trigger": "get_state_callbacks_for_role\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::get_state_callbacks_for_role(${1:rolename}, ${2:statename})"},
	{ "trigger": "get_current_state\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::get_current_state()"},
	{ "trigger": "get_previous_state\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::get_previous_state()"},
	{ "trigger": "get_next_state\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::get_next_state()"},
	{ "trigger": "is_instate\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::is_instate(${1:statename})"},
	{ "trigger": "add_state\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::add_state(${1:name}, ${2:enter_func}, ${3:update_func}, ${4:exit_func})"},
	{ "trigger": "add_interrupt_connection\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::add_interrupt_connection(${1:from_state_name}, ${2:to_state_name}, ${3:on_notify}, ${4:checkfunc})"},
	{ "trigger": "add_utility_connection\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::add_utility_connection(${1:from_state_name}, ${2:to_state_name}, ${3:checkfunc}, ${4:defaultScore})"},
	{ "trigger": "register_custom_add_state_callback\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::register_custom_add_state_callback(${1:func})"},
	{ "trigger": "call_custom_add_state_callbacks\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::call_custom_add_state_callbacks()"},
	{ "trigger": "Callback_VehicleKilled\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::Callback_VehicleKilled(${1:eInflictor}, ${2:eAttacker}, ${3:iDamage}, ${4:sMeansOfDeath}, ${5:weapon}, ${6:vDir}, ${7:sHitLoc}, ${8:psOffsetTime})"},
	{ "trigger": "on_death_cleanup\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::on_death_cleanup()"},
	{ "trigger": "defaultstate_death_enter\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::defaultstate_death_enter(${1:params})"},
	{ "trigger": "burning_death_fx\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::burning_death_fx()"},
	{ "trigger": "emp_death_fx\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::emp_death_fx()"},
	{ "trigger": "death_radius_damage_special\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::death_radius_damage_special(${1:radiusScale}, ${2:meansOfDamage})"},
	{ "trigger": "burning_death\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::burning_death(${1:params})"},
	{ "trigger": "emped_death\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::emped_death(${1:params})"},
	{ "trigger": "gibbed_death\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::gibbed_death(${1:params})"},
	{ "trigger": "default_death\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::default_death(${1:params})"},
	{ "trigger": "get_death_type\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::get_death_type(${1:params})"},
	{ "trigger": "defaultstate_death_update\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::defaultstate_death_update(${1:params})"},
	{ "trigger": "defaultstate_scripted_enter\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::defaultstate_scripted_enter(${1:params})"},
	{ "trigger": "defaultstate_scripted_exit\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::defaultstate_scripted_exit(${1:params})"},
	{ "trigger": "defaultstate_combat_enter\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::defaultstate_combat_enter(${1:params})"},
	{ "trigger": "defaultstate_combat_exit\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::defaultstate_combat_exit(${1:params})"},
	{ "trigger": "defaultstate_emped_enter\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::defaultstate_emped_enter(${1:params})"},
	{ "trigger": "emp_startup_fx\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::emp_startup_fx()"},
	{ "trigger": "defaultstate_emped_update\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::defaultstate_emped_update(${1:params})"},
	{ "trigger": "defaultstate_emped_exit\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::defaultstate_emped_exit(${1:params})"},
	{ "trigger": "defaultstate_emped_reenter\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::defaultstate_emped_reenter(${1:params})"},
	{ "trigger": "defaultstate_surge_enter\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::defaultstate_surge_enter(${1:params})"},
	{ "trigger": "defaultstate_surge_exit\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::defaultstate_surge_exit(${1:params})"},
	{ "trigger": "defaultstate_surge_update\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::defaultstate_surge_update(${1:params})"},
	{ "trigger": "path_update_interrupt\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::path_update_interrupt(${1:closest}, ${2:attacker})"},
	{ "trigger": "swap_team_after_time\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::swap_team_after_time(${1:attacker})"},
	{ "trigger": "try_detonate\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::try_detonate(${1:closest}, ${2:attacker})"},
	{ "trigger": "detonate\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::detonate(${1:attacker})"},
	{ "trigger": "flash_team_switching_lights\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::flash_team_switching_lights()"},
	{ "trigger": "defaultstate_off_enter\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::defaultstate_off_enter(${1:params})"},
	{ "trigger": "defaultstate_off_exit\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::defaultstate_off_exit(${1:params})"},
	{ "trigger": "defaultstate_driving_enter\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::defaultstate_driving_enter(${1:params})"},
	{ "trigger": "defaultstate_driving_exit\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::defaultstate_driving_exit(${1:params})"},
	{ "trigger": "defaultstate_pain_enter\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::defaultstate_pain_enter(${1:params})"},
	{ "trigger": "defaultstate_pain_exit\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::defaultstate_pain_exit(${1:params})"},
	{ "trigger": "CanSeeEnemyFromPosition\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::CanSeeEnemyFromPosition(${1:position}, ${2:enemy}, ${3:sight_check_height})"},
	{ "trigger": "FindNewPosition\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::FindNewPosition(${1:sight_check_height})"},
	{ "trigger": "TimeSince\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::TimeSince(${1:startTimeInMilliseconds})"},
	{ "trigger": "CooldownInit\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::CooldownInit()"},
	{ "trigger": "Cooldown\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::Cooldown(${1:name}, ${2:time_seconds})"},
	{ "trigger": "GetCooldownTimeRaw\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::GetCooldownTimeRaw(${1:name})"},
	{ "trigger": "GetCooldownLeft\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::GetCooldownLeft(${1:name})"},
	{ "trigger": "IsCooldownReady\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::IsCooldownReady(${1:name}, ${2:timeForward_seconds})"},
	{ "trigger": "ClearCooldown\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::ClearCooldown(${1:name})"},
	{ "trigger": "AddCooldownTime\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::AddCooldownTime(${1:name}, ${2:time_seconds})"},
	{ "trigger": "ClearAllCooldowns\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::ClearAllCooldowns()"},
	{ "trigger": "PositionQuery_DebugScores\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::PositionQuery_DebugScores(${1:queryResult})"},
	{ "trigger": "DebugScore\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::DebugScore(${1:entity})"},
	{ "trigger": "_less_than_val\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::_less_than_val(${1:left}, ${2:right})"},
	{ "trigger": "_cmp_val\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::_cmp_val(${1:left}, ${2:right}, ${3:descending})"},
	{ "trigger": "_sort_by_score\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::_sort_by_score(${1:left}, ${2:right}, ${3:descending})"},
	{ "trigger": "PositionQuery_Filter_Random\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::PositionQuery_Filter_Random(${1:queryResult}, ${2:min}, ${3:max})"},
	{ "trigger": "PositionQuery_PostProcess_SortScore\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::PositionQuery_PostProcess_SortScore(${1:queryResult}, ${2:descending = true})"},
	{ "trigger": "PositionQuery_Filter_OutOfGoalAnchor\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::PositionQuery_Filter_OutOfGoalAnchor(${1:queryResult}, ${2:tolerance = 1})"},
	{ "trigger": "PositionQuery_Filter_EngagementDist\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::PositionQuery_Filter_EngagementDist(${1:queryResult}, ${2:enemy}, ${3:engagementDistanceMin}, ${4:engagementDistanceMax})"},
	{ "trigger": "PositionQuery_Filter_DistAwayFromTarget\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::PositionQuery_Filter_DistAwayFromTarget(${1:queryResult}, ${2:targetArray}, ${3:distance}, ${4:tooClosePenalty})"},
	{ "trigger": "DistancePointToEngagementHeight\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::DistancePointToEngagementHeight(${1:origin}, ${2:enemy}, ${3:engagementHeightMin}, ${4:engagementHeightMax})"},
	{ "trigger": "PositionQuery_Filter_EngagementHeight\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::PositionQuery_Filter_EngagementHeight(${1:queryResult}, ${2:enemy}, ${3:engagementHeightMin}, ${4:engagementHeightMax})"},
	{ "trigger": "PositionQuery_PostProcess_RemoveOutOfGoalRadius\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::PositionQuery_PostProcess_RemoveOutOfGoalRadius(${1:queryResult}, ${2:tolerance = 1})"},
	{ "trigger": "UpdatePersonalThreatBias_AttackerLockedOnToMe\t#using scripts\\shared\\vehicle_ai_shared; self == sentient", "contents": "vehicle_ai::UpdatePersonalThreatBias_AttackerLockedOnToMe(${1:threat_bias}, ${2:bias_duration}, ${3:get_perfect_info}, ${4:update_last_seen})"},
	{ "trigger": "UpdatePersonalThreatBias_AttackerLockingOnToMe\t#using scripts\\shared\\vehicle_ai_shared; self == sentient", "contents": "vehicle_ai::UpdatePersonalThreatBias_AttackerLockingOnToMe(${1:threat_bias}, ${2:bias_duration}, ${3:get_perfect_info}, ${4:update_last_seen})"},
	{ "trigger": "UpdatePersonalThreatBias_ViaClientFlags\t#using scripts\\shared\\vehicle_ai_shared; self == sentient", "contents": "vehicle_ai::UpdatePersonalThreatBias_ViaClientFlags(${1:client_flags}, ${2:threat_bias}, ${3:bias_duration}, ${4:get_perfect_info = true}, ${5:update_last_seen = true})"},
	{ "trigger": "target_hijackers\t#using scripts\\shared\\vehicle_ai_shared;", "contents": "vehicle_ai::target_hijackers()"},
	{ "trigger": "setup_gadget_thief_array\t#using scripts\\shared\\abilities\\gadgets\\_gadget_thief;", "contents": "thief::setup_gadget_thief_array()"},
	{ "trigger": "gadget_thief_is_inuse\t#using scripts\\shared\\abilities\\gadgets\\_gadget_thief;", "contents": "thief::gadget_thief_is_inuse(${1:slot})"},
	{ "trigger": "gadget_thief_is_flickering\t#using scripts\\shared\\abilities\\gadgets\\_gadget_thief;", "contents": "thief::gadget_thief_is_flickering(${1:slot})"},
	{ "trigger": "gadget_thief_on_flicker\t#using scripts\\shared\\abilities\\gadgets\\_gadget_thief;", "contents": "thief::gadget_thief_on_flicker(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_thief_on_give\t#using scripts\\shared\\abilities\\gadgets\\_gadget_thief;", "contents": "thief::gadget_thief_on_give(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_thief_kill_callback\t#using scripts\\shared\\abilities\\gadgets\\_gadget_thief;", "contents": "thief::gadget_thief_kill_callback(${1:victim}, ${2:weapon})"},
	{ "trigger": "gadget_thief_on_take\t#using scripts\\shared\\abilities\\gadgets\\_gadget_thief;", "contents": "thief::gadget_thief_on_take(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_thief_on_connect\t#using scripts\\shared\\abilities\\gadgets\\_gadget_thief;", "contents": "thief::gadget_thief_on_connect()"},
	{ "trigger": "gadget_thief_on_player_spawn\t#using scripts\\shared\\abilities\\gadgets\\_gadget_thief;", "contents": "thief::gadget_thief_on_player_spawn()"},
	{ "trigger": "watch_entity_shutdown\t#using scripts\\shared\\abilities\\gadgets\\_gadget_thief;", "contents": "thief::watch_entity_shutdown()"},
	{ "trigger": "gadget_thief_on_activate\t#using scripts\\shared\\abilities\\gadgets\\_gadget_thief;", "contents": "thief::gadget_thief_on_activate(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_thief_is_ready\t#using scripts\\shared\\abilities\\gadgets\\_gadget_thief;", "contents": "thief::gadget_thief_is_ready(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_thief_active\t#using scripts\\shared\\abilities\\gadgets\\_gadget_thief;", "contents": "thief::gadget_thief_active(${1:slot}, ${2:weapon})"},
	{ "trigger": "getStolenHeroWeapon\t#using scripts\\shared\\abilities\\gadgets\\_gadget_thief;", "contents": "thief::getStolenHeroWeapon(${1:gadget})"},
	{ "trigger": "resetFlashStartAndEndAfterDelay\t#using scripts\\shared\\abilities\\gadgets\\_gadget_thief;", "contents": "thief::resetFlashStartAndEndAfterDelay(${1:delay})"},
	{ "trigger": "getThiefPowerGain\t#using scripts\\shared\\abilities\\gadgets\\_gadget_thief;", "contents": "thief::getThiefPowerGain()"},
	{ "trigger": "handleThiefKill\t#using scripts\\shared\\abilities\\gadgets\\_gadget_thief;", "contents": "thief::handleThiefKill(${1:slot}, ${2:weapon}, ${3:victim})"},
	{ "trigger": "earnedSpecialistWeapon\t#using scripts\\shared\\abilities\\gadgets\\_gadget_thief;", "contents": "thief::earnedSpecialistWeapon(${1:victim}, ${2:slot}, ${3:wasFullyCharged}, ${4:stolenHeroWeapon})"},
	{ "trigger": "giveFlipWeapon\t#using scripts\\shared\\abilities\\gadgets\\_gadget_thief;", "contents": "thief::giveFlipWeapon(${1:slot}, ${2:victim}, ${3:heroWeapon})"},
	{ "trigger": "givePreviouslyEarnedSpecialistWeapon\t#using scripts\\shared\\abilities\\gadgets\\_gadget_thief;", "contents": "thief::givePreviouslyEarnedSpecialistWeapon(${1:slot}, ${2:justSpawned})"},
	{ "trigger": "disable_hero_gadget_activation\t#using scripts\\shared\\abilities\\gadgets\\_gadget_thief;", "contents": "thief::disable_hero_gadget_activation(${1:duration})"},
	{ "trigger": "failsafe_reenable_offhand_special\t#using scripts\\shared\\abilities\\gadgets\\_gadget_thief;", "contents": "thief::failsafe_reenable_offhand_special()"},
	{ "trigger": "handleStolenScoreEvent\t#using scripts\\shared\\abilities\\gadgets\\_gadget_thief;", "contents": "thief::handleStolenScoreEvent(${1:heroweapon})"},
	{ "trigger": "watchForHeroKill\t#using scripts\\shared\\abilities\\gadgets\\_gadget_thief;", "contents": "thief::watchForHeroKill(${1:slot})"},
	{ "trigger": "spawnThiefBeamEffect\t#using scripts\\shared\\abilities\\gadgets\\_gadget_thief;", "contents": "thief::spawnThiefBeamEffect(${1:origin})"},
	{ "trigger": "waitthendelete\t#using scripts\\shared\\abilities\\gadgets\\_gadget_thief;", "contents": "thief::waitthendelete(${1:time})"},
	{ "trigger": "gadget_give_random_gadget\t#using scripts\\shared\\abilities\\gadgets\\_gadget_thief;", "contents": "thief::gadget_give_random_gadget(${1:slot}, ${2:weapon}, ${3:weaponStolenFromEntnum}, ${4:justSpawned = false})"},
	{ "trigger": "watchForOptionUse\t#using scripts\\shared\\abilities\\gadgets\\_gadget_thief;", "contents": "thief::watchForOptionUse(${1:slot}, ${2:victimBodyIndex}, ${3:justSpawned})"},
	{ "trigger": "dpad_left_pressed\t#using scripts\\shared\\abilities\\gadgets\\_gadget_thief;", "contents": "thief::dpad_left_pressed()"},
	{ "trigger": "watchHeroWeaponChanged\t#using scripts\\shared\\abilities\\gadgets\\_gadget_thief;", "contents": "thief::watchHeroWeaponChanged()"},
	{ "trigger": "watchGadgetActivated\t#using scripts\\shared\\abilities\\gadgets\\_gadget_thief;", "contents": "thief::watchGadgetActivated(${1:slot})"},
	{ "trigger": "gadget_thief_on_deactivate\t#using scripts\\shared\\abilities\\gadgets\\_gadget_thief;", "contents": "thief::gadget_thief_on_deactivate(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_thief_flicker\t#using scripts\\shared\\abilities\\gadgets\\_gadget_thief;", "contents": "thief::gadget_thief_flicker(${1:slot}, ${2:weapon})"},
	{ "trigger": "set_gadget_status\t#using scripts\\shared\\abilities\\gadgets\\_gadget_thief;", "contents": "thief::set_gadget_status(${1:status}, ${2:time})"},
	{ "trigger": "GetVictimBodyIndex\t#using scripts\\shared\\abilities\\gadgets\\_gadget_thief;", "contents": "thief::GetVictimBodyIndex(${1:victim}, ${2:heroWeapon})"},
	{ "trigger": "gadget_hero_weapon_on_activate\t#using scripts\\zm\\_zm_hero_weapon;", "contents": "zm_hero_weapon::gadget_hero_weapon_on_activate(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_hero_weapon_on_off\t#using scripts\\zm\\_zm_hero_weapon;", "contents": "zm_hero_weapon::gadget_hero_weapon_on_off(${1:slot}, ${2:weapon})"},
	{ "trigger": "watch_for_glitches\t#using scripts\\zm\\_zm_hero_weapon;", "contents": "zm_hero_weapon::watch_for_glitches(${1:slot}, ${2:weapon})"},
	{ "trigger": "register_hero_weapon\t#using scripts\\zm\\_zm_hero_weapon;", "contents": "zm_hero_weapon::register_hero_weapon(${1:weapon_name})"},
	{ "trigger": "register_hero_weapon_give_take_callbacks\t#using scripts\\zm\\_zm_hero_weapon;", "contents": "zm_hero_weapon::register_hero_weapon_give_take_callbacks(${1:weapon_name}, ${2:give_fn = &default_give}, ${3:take_fn = &default_take})"},
	{ "trigger": "default_give\t#using scripts\\zm\\_zm_hero_weapon;", "contents": "zm_hero_weapon::default_give(${1:weapon})"},
	{ "trigger": "default_take\t#using scripts\\zm\\_zm_hero_weapon;", "contents": "zm_hero_weapon::default_take(${1:weapon})"},
	{ "trigger": "register_hero_weapon_wield_unwield_callbacks\t#using scripts\\zm\\_zm_hero_weapon;", "contents": "zm_hero_weapon::register_hero_weapon_wield_unwield_callbacks(${1:weapon_name}, ${2:wield_fn = &default_wield}, ${3:unwield_fn = &default_unwield})"},
	{ "trigger": "default_wield\t#using scripts\\zm\\_zm_hero_weapon;", "contents": "zm_hero_weapon::default_wield(${1:weapon})"},
	{ "trigger": "default_unwield\t#using scripts\\zm\\_zm_hero_weapon;", "contents": "zm_hero_weapon::default_unwield(${1:weapon})"},
	{ "trigger": "register_hero_weapon_power_callbacks\t#using scripts\\zm\\_zm_hero_weapon;", "contents": "zm_hero_weapon::register_hero_weapon_power_callbacks(${1:weapon_name}, ${2:power_full_fn = &default_power_full}, ${3:power_empty_fn = &default_power_empty})"},
	{ "trigger": "default_power_full\t#using scripts\\zm\\_zm_hero_weapon;", "contents": "zm_hero_weapon::default_power_full(${1:weapon})"},
	{ "trigger": "default_power_empty\t#using scripts\\zm\\_zm_hero_weapon;", "contents": "zm_hero_weapon::default_power_empty(${1:weapon})"},
	{ "trigger": "set_hero_weapon_state\t#using scripts\\zm\\_zm_hero_weapon;", "contents": "zm_hero_weapon::set_hero_weapon_state(${1:w_weapon}, ${2:state})"},
	{ "trigger": "on_player_spawned\t#using scripts\\zm\\_zm_hero_weapon;", "contents": "zm_hero_weapon::on_player_spawned()"},
	{ "trigger": "watch_hero_weapon_give\t#using scripts\\zm\\_zm_hero_weapon;", "contents": "zm_hero_weapon::watch_hero_weapon_give()"},
	{ "trigger": "watch_hero_weapon_take\t#using scripts\\zm\\_zm_hero_weapon;", "contents": "zm_hero_weapon::watch_hero_weapon_take()"},
	{ "trigger": "watch_hero_weapon_change\t#using scripts\\zm\\_zm_hero_weapon;", "contents": "zm_hero_weapon::watch_hero_weapon_change()"},
	{ "trigger": "watch_hero_power\t#using scripts\\zm\\_zm_hero_weapon;", "contents": "zm_hero_weapon::watch_hero_power(${1:w_weapon})"},
	{ "trigger": "continue_draining_hero_weapon\t#using scripts\\zm\\_zm_hero_weapon;", "contents": "zm_hero_weapon::continue_draining_hero_weapon(${1:w_weapon})"},
	{ "trigger": "register_hero_recharge_event\t#using scripts\\zm\\_zm_hero_weapon;", "contents": "zm_hero_weapon::register_hero_recharge_event(${1:w_hero}, ${2:func})"},
	{ "trigger": "hero_power_event_callback\t#using scripts\\zm\\_zm_hero_weapon;", "contents": "zm_hero_weapon::hero_power_event_callback(${1:e_player}, ${2:ai_enemy})"},
	{ "trigger": "hero_power_event\t#using scripts\\zm\\_zm_hero_weapon;", "contents": "zm_hero_weapon::hero_power_event(${1:player}, ${2:ai_enemy})"},
	{ "trigger": "player_hero_power_event\t#using scripts\\zm\\_zm_hero_weapon;", "contents": "zm_hero_weapon::player_hero_power_event(${1:ai_enemy})"},
	{ "trigger": "take_hero_weapon\t#using scripts\\zm\\_zm_hero_weapon;", "contents": "zm_hero_weapon::take_hero_weapon()"},
	{ "trigger": "is_hero_weapon_in_use\t#using scripts\\zm\\_zm_hero_weapon;", "contents": "zm_hero_weapon::is_hero_weapon_in_use()"},
	{ "trigger": "signal_activated\t#using scripts\\zm\\_zm_equipment;", "contents": "zm_equipment::signal_activated(${1:val = 1})"},
	{ "trigger": "register\t#using scripts\\zm\\_zm_equipment;", "contents": "zm_equipment::register(${1:equipment_name}, ${2:hint}, ${3:howto_hint}, ${4:hint_icon}, ${5:equipmentVO})"},
	{ "trigger": "is_included\t#using scripts\\zm\\_zm_equipment;", "contents": "zm_equipment::is_included(${1:equipment})"},
	{ "trigger": "include\t#using scripts\\zm\\_zm_equipment;", "contents": "zm_equipment::include(${1:equipment_name})"},
	{ "trigger": "set_ammo_driven\t#using scripts\\zm\\_zm_equipment;", "contents": "zm_equipment::set_ammo_driven(${1:equipment_name}, ${2:start}, ${3:refill_max_ammo = false})"},
	{ "trigger": "limit\t#using scripts\\zm\\_zm_equipment;", "contents": "zm_equipment::limit(${1:equipment_name}, ${2:limited})"},
	{ "trigger": "get_hint\t#using scripts\\zm\\_zm_equipment;", "contents": "zm_equipment::get_hint(${1:equipment})"},
	{ "trigger": "get_howto_hint\t#using scripts\\zm\\_zm_equipment;", "contents": "zm_equipment::get_howto_hint(${1:equipment})"},
	{ "trigger": "get_icon\t#using scripts\\zm\\_zm_equipment;", "contents": "zm_equipment::get_icon(${1:equipment})"},
	{ "trigger": "get_notify_strings\t#using scripts\\zm\\_zm_equipment;", "contents": "zm_equipment::get_notify_strings(${1:equipment})"},
	{ "trigger": "add_to_trigger_list\t#using scripts\\zm\\_zm_equipment;", "contents": "zm_equipment::add_to_trigger_list(${1:equipment})"},
	{ "trigger": "equipment_spawn_think\t#using scripts\\zm\\_zm_equipment;", "contents": "zm_equipment::equipment_spawn_think()"},
	{ "trigger": "set_equipment_invisibility_to_player\t#using scripts\\zm\\_zm_equipment;", "contents": "zm_equipment::set_equipment_invisibility_to_player(${1:equipment}, ${2:invisible})"},
	{ "trigger": "take\t#using scripts\\zm\\_zm_equipment;", "contents": "zm_equipment::take(${1:equipment})"},
	{ "trigger": "give\t#using scripts\\zm\\_zm_equipment;", "contents": "zm_equipment::give(${1:equipment})"},
	{ "trigger": "buy\t#using scripts\\zm\\_zm_equipment;", "contents": "zm_equipment::buy(${1:equipment})"},
	{ "trigger": "slot_watcher\t#using scripts\\zm\\_zm_equipment;", "contents": "zm_equipment::slot_watcher(${1:equipment})"},
	{ "trigger": "is_limited\t#using scripts\\zm\\_zm_equipment;", "contents": "zm_equipment::is_limited(${1:equipment})"},
	{ "trigger": "limited_in_use\t#using scripts\\zm\\_zm_equipment;", "contents": "zm_equipment::limited_in_use(${1:equipment})"},
	{ "trigger": "setup_limited\t#using scripts\\zm\\_zm_equipment;", "contents": "zm_equipment::setup_limited(${1:equipment})"},
	{ "trigger": "release_limited_on_taken\t#using scripts\\zm\\_zm_equipment;", "contents": "zm_equipment::release_limited_on_taken(${1:equipment})"},
	{ "trigger": "release_limited_on_disconnect\t#using scripts\\zm\\_zm_equipment;", "contents": "zm_equipment::release_limited_on_disconnect(${1:equipment})"},
	{ "trigger": "is_active\t#using scripts\\zm\\_zm_equipment;", "contents": "zm_equipment::is_active(${1:equipment})"},
	{ "trigger": "setup_client_hintelem\t#using scripts\\zm\\_zm_equipment;", "contents": "zm_equipment::setup_client_hintelem(${1:ypos = 220}, ${2:font_scale = 1.25})"},
	{ "trigger": "show_hint\t#using scripts\\zm\\_zm_equipment;", "contents": "zm_equipment::show_hint(${1:equipment})"},
	{ "trigger": "show_hint_text\t#using scripts\\zm\\_zm_equipment;", "contents": "zm_equipment::show_hint_text(${1:text}, ${2:show_for_time = 3.20}, ${3:font_scale = 1.25}, ${4:ypos = 220})"},
	{ "trigger": "start_ammo\t#using scripts\\zm\\_zm_equipment;", "contents": "zm_equipment::start_ammo(${1:equipment})"},
	{ "trigger": "change_ammo\t#using scripts\\zm\\_zm_equipment;", "contents": "zm_equipment::change_ammo(${1:equipment}, ${2:change})"},
	{ "trigger": "disappear_fx\t#using scripts\\zm\\_zm_equipment;", "contents": "zm_equipment::disappear_fx(${1:origin}, ${2:fx}, ${3:angles})"},
	{ "trigger": "register_for_level\t#using scripts\\zm\\_zm_equipment;", "contents": "zm_equipment::register_for_level(${1:weaponname})"},
	{ "trigger": "is_equipment\t#using scripts\\zm\\_zm_equipment;", "contents": "zm_equipment::is_equipment(${1:weapon})"},
	{ "trigger": "is_equipment_that_blocks_purchase\t#using scripts\\zm\\_zm_equipment;", "contents": "zm_equipment::is_equipment_that_blocks_purchase(${1:weapon})"},
	{ "trigger": "is_player_equipment\t#using scripts\\zm\\_zm_equipment;", "contents": "zm_equipment::is_player_equipment(${1:weapon})"},
	{ "trigger": "has_deployed_equipment\t#using scripts\\zm\\_zm_equipment;", "contents": "zm_equipment::has_deployed_equipment(${1:weapon})"},
	{ "trigger": "has_player_equipment\t#using scripts\\zm\\_zm_equipment;", "contents": "zm_equipment::has_player_equipment(${1:weapon})"},
	{ "trigger": "get_player_equipment\t#using scripts\\zm\\_zm_equipment;", "contents": "zm_equipment::get_player_equipment()"},
	{ "trigger": "hacker_active\t#using scripts\\zm\\_zm_equipment;", "contents": "zm_equipment::hacker_active()"},
	{ "trigger": "set_player_equipment\t#using scripts\\zm\\_zm_equipment;", "contents": "zm_equipment::set_player_equipment(${1:weapon})"},
	{ "trigger": "player_last_stand_stats\t#using scripts\\zm\\_zm_laststand;", "contents": "zm_laststand::player_last_stand_stats(${1:eInflictor}, ${2:attacker}, ${3:iDamage}, ${4:sMeansOfDeath}, ${5:weapon}, ${6:vDir}, ${7:sHitLoc}, ${8:psOffsetTime}, ${9:deathAnimDuration})"},
	{ "trigger": "increment_downed_stat\t#using scripts\\zm\\_zm_laststand;", "contents": "zm_laststand::increment_downed_stat()"},
	{ "trigger": "PlayerLastStand\t#using scripts\\zm\\_zm_laststand;", "contents": "zm_laststand::PlayerLastStand(${1:eInflictor}, ${2:attacker}, ${3:iDamage}, ${4:sMeansOfDeath}, ${5:weapon}, ${6:vDir}, ${7:sHitLoc}, ${8:psOffsetTime}, ${9:deathAnimDuration})"},
	{ "trigger": "refire_player_downed\t#using scripts\\zm\\_zm_laststand;", "contents": "zm_laststand::refire_player_downed()"},
	{ "trigger": "laststand_disable_player_weapons\t#using scripts\\zm\\_zm_laststand;", "contents": "zm_laststand::laststand_disable_player_weapons()"},
	{ "trigger": "laststand_enable_player_weapons\t#using scripts\\zm\\_zm_laststand;", "contents": "zm_laststand::laststand_enable_player_weapons()"},
	{ "trigger": "laststand_clean_up_on_disconnect\t#using scripts\\zm\\_zm_laststand;", "contents": "zm_laststand::laststand_clean_up_on_disconnect(${1:e_revivee}, ${2:w_reviver}, ${3:w_revive_tool})"},
	{ "trigger": "laststand_clean_up_reviving_any\t#using scripts\\zm\\_zm_laststand;", "contents": "zm_laststand::laststand_clean_up_reviving_any(${1:e_revivee})"},
	{ "trigger": "laststand_give_pistol\t#using scripts\\zm\\_zm_laststand;", "contents": "zm_laststand::laststand_give_pistol()"},
	{ "trigger": "wait_switch_weapon\t#using scripts\\zm\\_zm_laststand;", "contents": "zm_laststand::wait_switch_weapon(${1:n_delay}, ${2:w_weapon})"},
	{ "trigger": "Laststand_Bleedout\t#using scripts\\zm\\_zm_laststand;", "contents": "zm_laststand::Laststand_Bleedout(${1:delay})"},
	{ "trigger": "bleed_out\t#using scripts\\zm\\_zm_laststand;", "contents": "zm_laststand::bleed_out()"},
	{ "trigger": "suicide_trigger_spawn\t#using scripts\\zm\\_zm_laststand;", "contents": "zm_laststand::suicide_trigger_spawn()"},
	{ "trigger": "suicide_trigger_think\t#using scripts\\zm\\_zm_laststand;", "contents": "zm_laststand::suicide_trigger_think()"},
	{ "trigger": "suicide_do_suicide\t#using scripts\\zm\\_zm_laststand;", "contents": "zm_laststand::suicide_do_suicide(${1:duration})"},
	{ "trigger": "can_suicide\t#using scripts\\zm\\_zm_laststand;", "contents": "zm_laststand::can_suicide()"},
	{ "trigger": "is_suiciding\t#using scripts\\zm\\_zm_laststand;", "contents": "zm_laststand::is_suiciding(${1:revivee})"},
	{ "trigger": "revive_trigger_spawn\t#using scripts\\zm\\_zm_laststand;", "contents": "zm_laststand::revive_trigger_spawn()"},
	{ "trigger": "revive_trigger_think\t#using scripts\\zm\\_zm_laststand;", "contents": "zm_laststand::revive_trigger_think(${1:t_secondary})"},
	{ "trigger": "revive_give_back_weapons_wait\t#using scripts\\zm\\_zm_laststand;", "contents": "zm_laststand::revive_give_back_weapons_wait(${1:e_reviver}, ${2:e_revivee})"},
	{ "trigger": "revive_give_back_weapons_when_done\t#using scripts\\zm\\_zm_laststand;", "contents": "zm_laststand::revive_give_back_weapons_when_done(${1:w_reviver}, ${2:w_revive_tool}, ${3:e_revivee})"},
	{ "trigger": "revive_give_back_weapons\t#using scripts\\zm\\_zm_laststand;", "contents": "zm_laststand::revive_give_back_weapons(${1:w_reviver}, ${2:w_revive_tool})"},
	{ "trigger": "can_revive\t#using scripts\\zm\\_zm_laststand;", "contents": "zm_laststand::can_revive(${1:e_revivee}, ${2:ignore_sight_checks = false}, ${3:ignore_touch_checks = false})"},
	{ "trigger": "is_reviving\t#using scripts\\zm\\_zm_laststand; self = reviver player", "contents": "zm_laststand::is_reviving(${1:e_revivee}, ${2:t_secondary})"},
	{ "trigger": "is_reviving_any\t#using scripts\\zm\\_zm_laststand;", "contents": "zm_laststand::is_reviving_any()"},
	{ "trigger": "revive_get_revive_time\t#using scripts\\zm\\_zm_laststand;", "contents": "zm_laststand::revive_get_revive_time(${1:e_revivee})"},
	{ "trigger": "revive_do_revive\t#using scripts\\zm\\_zm_laststand;", "contents": "zm_laststand::revive_do_revive(${1:e_revivee}, ${2:w_reviver}, ${3:w_revive_tool}, ${4:t_secondary})"},
	{ "trigger": "checkforbleedout\t#using scripts\\zm\\_zm_laststand;", "contents": "zm_laststand::checkforbleedout(${1:player})"},
	{ "trigger": "auto_revive\t#using scripts\\zm\\_zm_laststand;", "contents": "zm_laststand::auto_revive(${1:reviver}, ${2:dont_enable_weapons})"},
	{ "trigger": "remote_revive\t#using scripts\\zm\\_zm_laststand;", "contents": "zm_laststand::remote_revive(${1:reviver})"},
	{ "trigger": "revive_success\t#using scripts\\zm\\_zm_laststand;", "contents": "zm_laststand::revive_success(${1:reviver}, ${2:b_track_stats = true})"},
	{ "trigger": "xp_revive_once_per_round\t#using scripts\\zm\\_zm_laststand;", "contents": "zm_laststand::xp_revive_once_per_round(${1:player_being_revived})"},
	{ "trigger": "set_ignoreme\t#using scripts\\zm\\_zm_laststand;", "contents": "zm_laststand::set_ignoreme(${1:b_ignoreme})"},
	{ "trigger": "revive_force_revive\t#using scripts\\zm\\_zm_laststand;", "contents": "zm_laststand::revive_force_revive(${1:reviver})"},
	{ "trigger": "player_getup_setup\t#using scripts\\zm\\_zm_laststand;", "contents": "zm_laststand::player_getup_setup()"},
	{ "trigger": "laststand_getup\t#using scripts\\zm\\_zm_laststand;", "contents": "zm_laststand::laststand_getup()"},
	{ "trigger": "laststand_getup_damage_watcher\t#using scripts\\zm\\_zm_laststand;", "contents": "zm_laststand::laststand_getup_damage_watcher()"},
	{ "trigger": "check_for_sacrifice\t#using scripts\\zm\\_zm_laststand;", "contents": "zm_laststand::check_for_sacrifice()"},
	{ "trigger": "check_for_failed_revive\t#using scripts\\zm\\_zm_laststand;", "contents": "zm_laststand::check_for_failed_revive(${1:e_revivee})"},
	{ "trigger": "add_weighted_down\t#using scripts\\zm\\_zm_laststand;", "contents": "zm_laststand::add_weighted_down()"},
	{ "trigger": "register_revive_override\t#using scripts\\zm\\_zm_laststand; self == player", "contents": "zm_laststand::register_revive_override(${1:func_is_reviving}, ${2:func_can_revive = undefined}, ${3:b_use_revive_tool = false})"},
	{ "trigger": "deregister_revive_override\t#using scripts\\zm\\_zm_laststand;", "contents": "zm_laststand::deregister_revive_override(${1:s_revive_override})"},
	{ "trigger": "can_revive_via_override\t#using scripts\\zm\\_zm_laststand; self == reviver player", "contents": "zm_laststand::can_revive_via_override(${1:e_revivee})"},
	{ "trigger": "is_reviving_via_override\t#using scripts\\zm\\_zm_laststand; self == reviver player", "contents": "zm_laststand::is_reviving_via_override(${1:e_revivee})"},
	{ "trigger": "zombieFindFlesh\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::zombieFindFlesh(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieFindFleshCode\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::zombieFindFleshCode(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieUpdateGoal\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::zombieUpdateGoal()"},
	{ "trigger": "zombieUpdateGoalCode\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::zombieUpdateGoalCode()"},
	{ "trigger": "zombieEnteredPlayable\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::zombieEnteredPlayable(${1:behaviorTreeEntity})"},
	{ "trigger": "shouldMoveCondition\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::shouldMoveCondition(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieShouldMoveAwayCondition\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::zombieShouldMoveAwayCondition(${1:behaviorTreeEntity})"},
	{ "trigger": "wasKilledByTeslaCondition\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::wasKilledByTeslaCondition(${1:behaviorTreeEntity})"},
	{ "trigger": "disablePowerups\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::disablePowerups(${1:behaviorTreeEntity})"},
	{ "trigger": "enablePowerups\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::enablePowerups(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieMoveAway\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::zombieMoveAway(${1:behaviorTreeEntity}, ${2:asmStateName})"},
	{ "trigger": "zombieIsBeingGrappled\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::zombieIsBeingGrappled(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieShouldKnockdown\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::zombieShouldKnockdown(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieIsPushed\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::zombieIsPushed(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieGrappleActionStart\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::zombieGrappleActionStart(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieShouldStun\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::zombieShouldStun(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieStunActionStart\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::zombieStunActionStart(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieStunActionEnd\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::zombieStunActionEnd(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieTraverseAction\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::zombieTraverseAction(${1:behaviorTreeEntity}, ${2:asmStateName})"},
	{ "trigger": "zombieTraverseActionTerminate\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::zombieTraverseActionTerminate(${1:behaviorTreeEntity}, ${2:asmStateName})"},
	{ "trigger": "zombieGotToEntranceCondition\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::zombieGotToEntranceCondition(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieGotToAttackSpotCondition\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::zombieGotToAttackSpotCondition(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieHasAttackSpotAlreadyCondition\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::zombieHasAttackSpotAlreadyCondition(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieShouldTearCondition\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::zombieShouldTearCondition(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieShouldAttackThroughBoardsCondition\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::zombieShouldAttackThroughBoardsCondition(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieShouldTauntCondition\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::zombieShouldTauntCondition(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieShouldEnterPlayableCondition\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::zombieShouldEnterPlayableCondition(${1:behaviorTreeEntity})"},
	{ "trigger": "isChunkValidCondition\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::isChunkValidCondition(${1:behaviorTreeEntity})"},
	{ "trigger": "inPlayableArea\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::inPlayableArea(${1:behaviorTreeEntity})"},
	{ "trigger": "shouldSkipTeardown\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::shouldSkipTeardown(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieIsThinkDone\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::zombieIsThinkDone(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieIsAtGoal\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::zombieIsAtGoal(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieIsAtEntrance\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::zombieIsAtEntrance(${1:behaviorTreeEntity})"},
	{ "trigger": "getChunkService\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::getChunkService(${1:behaviorTreeEntity})"},
	{ "trigger": "updateChunkService\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::updateChunkService(${1:behaviorTreeEntity})"},
	{ "trigger": "updateAttackSpotService\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::updateAttackSpotService(${1:behaviorTreeEntity})"},
	{ "trigger": "findNodesService\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::findNodesService(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieAttackableObjectService\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::zombieAttackableObjectService(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieMoveToEntranceAction\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::zombieMoveToEntranceAction(${1:behaviorTreeEntity}, ${2:asmStateName})"},
	{ "trigger": "zombieMoveToEntranceActionTerminate\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::zombieMoveToEntranceActionTerminate(${1:behaviorTreeEntity}, ${2:asmStateName})"},
	{ "trigger": "zombieMoveToAttackSpotAction\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::zombieMoveToAttackSpotAction(${1:behaviorTreeEntity}, ${2:asmStateName})"},
	{ "trigger": "zombieMoveToAttackSpotActionTerminate\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::zombieMoveToAttackSpotActionTerminate(${1:behaviorTreeEntity}, ${2:asmStateName})"},
	{ "trigger": "zombieHoldBoardAction\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::zombieHoldBoardAction(${1:behaviorTreeEntity}, ${2:asmStateName})"},
	{ "trigger": "zombieHoldBoardActionTerminate\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::zombieHoldBoardActionTerminate(${1:behaviorTreeEntity}, ${2:asmStateName})"},
	{ "trigger": "zombieGrabBoardAction\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::zombieGrabBoardAction(${1:behaviorTreeEntity}, ${2:asmStateName})"},
	{ "trigger": "zombieGrabBoardActionTerminate\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::zombieGrabBoardActionTerminate(${1:behaviorTreeEntity}, ${2:asmStateName})"},
	{ "trigger": "zombiePullBoardAction\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::zombiePullBoardAction(${1:behaviorTreeEntity}, ${2:asmStateName})"},
	{ "trigger": "zombiePullBoardActionTerminate\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::zombiePullBoardActionTerminate(${1:behaviorTreeEntity}, ${2:asmStateName})"},
	{ "trigger": "zombieAttackThroughBoardsAction\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::zombieAttackThroughBoardsAction(${1:behaviorTreeEntity}, ${2:asmStateName})"},
	{ "trigger": "zombieAttackThroughBoardsActionTerminate\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::zombieAttackThroughBoardsActionTerminate(${1:behaviorTreeEntity}, ${2:asmStateName})"},
	{ "trigger": "zombieTauntAction\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::zombieTauntAction(${1:behaviorTreeEntity}, ${2:asmStateName})"},
	{ "trigger": "zombieTauntActionTerminate\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::zombieTauntActionTerminate(${1:behaviorTreeEntity}, ${2:asmStateName})"},
	{ "trigger": "zombieMantleAction\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::zombieMantleAction(${1:behaviorTreeEntity}, ${2:asmStateName})"},
	{ "trigger": "zombieMantleActionTerminate\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::zombieMantleActionTerminate(${1:behaviorTreeEntity}, ${2:asmStateName})"},
	{ "trigger": "boardTearMocompStart\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::boardTearMocompStart(${1:entity}, ${2:mocompAnim}, ${3:mocompAnimBlendOutTime}, ${4:mocompAnimFlag}, ${5:mocompDuration})"},
	{ "trigger": "boardTearMocompUpdate\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::boardTearMocompUpdate(${1:entity}, ${2:mocompAnim}, ${3:mocompAnimBlendOutTime}, ${4:mocompAnimFlag}, ${5:mocompDuration})"},
	{ "trigger": "barricadeEnterMocompStart\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::barricadeEnterMocompStart(${1:entity}, ${2:mocompAnim}, ${3:mocompAnimBlendOutTime}, ${4:mocompAnimFlag}, ${5:mocompDuration})"},
	{ "trigger": "barricadeEnterMocompUpdate\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::barricadeEnterMocompUpdate(${1:entity}, ${2:mocompAnim}, ${3:mocompAnimBlendOutTime}, ${4:mocompAnimFlag}, ${5:mocompDuration})"},
	{ "trigger": "barricadeEnterMocompTerminate\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::barricadeEnterMocompTerminate(${1:entity}, ${2:mocompAnim}, ${3:mocompAnimBlendOutTime}, ${4:mocompAnimFlag}, ${5:mocompDuration})"},
	{ "trigger": "barricadeEnterMocompNoZStart\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::barricadeEnterMocompNoZStart(${1:entity}, ${2:mocompAnim}, ${3:mocompAnimBlendOutTime}, ${4:mocompAnimFlag}, ${5:mocompDuration})"},
	{ "trigger": "barricadeEnterMocompNoZUpdate\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::barricadeEnterMocompNoZUpdate(${1:entity}, ${2:mocompAnim}, ${3:mocompAnimBlendOutTime}, ${4:mocompAnimFlag}, ${5:mocompDuration})"},
	{ "trigger": "barricadeEnterMocompNoZTerminate\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::barricadeEnterMocompNoZTerminate(${1:entity}, ${2:mocompAnim}, ${3:mocompAnimBlendOutTime}, ${4:mocompAnimFlag}, ${5:mocompDuration})"},
	{ "trigger": "notetrackBoardTear\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::notetrackBoardTear(${1:animationEntity})"},
	{ "trigger": "notetrackBoardMelee\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::notetrackBoardMelee(${1:animationEntity})"},
	{ "trigger": "findZombieEnemy\t#using scripts\\zm\\_zm_behavior - Copy;", "contents": "zm_behavior::findZombieEnemy()"},
	{ "trigger": "zombieFindFlesh\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::zombieFindFlesh(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieFindFleshCode\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::zombieFindFleshCode(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieUpdateGoal\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::zombieUpdateGoal()"},
	{ "trigger": "zombieUpdateGoalCode\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::zombieUpdateGoalCode()"},
	{ "trigger": "zombieEnteredPlayable\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::zombieEnteredPlayable(${1:behaviorTreeEntity})"},
	{ "trigger": "shouldMoveCondition\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::shouldMoveCondition(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieShouldMoveAwayCondition\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::zombieShouldMoveAwayCondition(${1:behaviorTreeEntity})"},
	{ "trigger": "wasKilledByTeslaCondition\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::wasKilledByTeslaCondition(${1:behaviorTreeEntity})"},
	{ "trigger": "disablePowerups\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::disablePowerups(${1:behaviorTreeEntity})"},
	{ "trigger": "enablePowerups\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::enablePowerups(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieMoveAway\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::zombieMoveAway(${1:behaviorTreeEntity}, ${2:asmStateName})"},
	{ "trigger": "zombieIsBeingGrappled\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::zombieIsBeingGrappled(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieShouldKnockdown\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::zombieShouldKnockdown(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieIsPushed\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::zombieIsPushed(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieGrappleActionStart\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::zombieGrappleActionStart(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieShouldStun\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::zombieShouldStun(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieStunActionStart\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::zombieStunActionStart(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieStunActionEnd\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::zombieStunActionEnd(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieTraverseAction\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::zombieTraverseAction(${1:behaviorTreeEntity}, ${2:asmStateName})"},
	{ "trigger": "zombieTraverseActionTerminate\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::zombieTraverseActionTerminate(${1:behaviorTreeEntity}, ${2:asmStateName})"},
	{ "trigger": "zombieGotToEntranceCondition\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::zombieGotToEntranceCondition(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieGotToAttackSpotCondition\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::zombieGotToAttackSpotCondition(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieHasAttackSpotAlreadyCondition\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::zombieHasAttackSpotAlreadyCondition(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieShouldTearCondition\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::zombieShouldTearCondition(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieShouldAttackThroughBoardsCondition\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::zombieShouldAttackThroughBoardsCondition(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieShouldTauntCondition\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::zombieShouldTauntCondition(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieShouldEnterPlayableCondition\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::zombieShouldEnterPlayableCondition(${1:behaviorTreeEntity})"},
	{ "trigger": "isChunkValidCondition\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::isChunkValidCondition(${1:behaviorTreeEntity})"},
	{ "trigger": "inPlayableArea\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::inPlayableArea(${1:behaviorTreeEntity})"},
	{ "trigger": "shouldSkipTeardown\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::shouldSkipTeardown(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieIsThinkDone\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::zombieIsThinkDone(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieIsAtGoal\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::zombieIsAtGoal(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieIsAtEntrance\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::zombieIsAtEntrance(${1:behaviorTreeEntity})"},
	{ "trigger": "getChunkService\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::getChunkService(${1:behaviorTreeEntity})"},
	{ "trigger": "updateChunkService\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::updateChunkService(${1:behaviorTreeEntity})"},
	{ "trigger": "updateAttackSpotService\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::updateAttackSpotService(${1:behaviorTreeEntity})"},
	{ "trigger": "findNodesService\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::findNodesService(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieAttackableObjectService\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::zombieAttackableObjectService(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieMoveToEntranceAction\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::zombieMoveToEntranceAction(${1:behaviorTreeEntity}, ${2:asmStateName})"},
	{ "trigger": "zombieMoveToEntranceActionTerminate\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::zombieMoveToEntranceActionTerminate(${1:behaviorTreeEntity}, ${2:asmStateName})"},
	{ "trigger": "zombieMoveToAttackSpotAction\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::zombieMoveToAttackSpotAction(${1:behaviorTreeEntity}, ${2:asmStateName})"},
	{ "trigger": "zombieMoveToAttackSpotActionTerminate\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::zombieMoveToAttackSpotActionTerminate(${1:behaviorTreeEntity}, ${2:asmStateName})"},
	{ "trigger": "zombieHoldBoardAction\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::zombieHoldBoardAction(${1:behaviorTreeEntity}, ${2:asmStateName})"},
	{ "trigger": "zombieHoldBoardActionTerminate\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::zombieHoldBoardActionTerminate(${1:behaviorTreeEntity}, ${2:asmStateName})"},
	{ "trigger": "zombieGrabBoardAction\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::zombieGrabBoardAction(${1:behaviorTreeEntity}, ${2:asmStateName})"},
	{ "trigger": "zombieGrabBoardActionTerminate\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::zombieGrabBoardActionTerminate(${1:behaviorTreeEntity}, ${2:asmStateName})"},
	{ "trigger": "zombiePullBoardAction\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::zombiePullBoardAction(${1:behaviorTreeEntity}, ${2:asmStateName})"},
	{ "trigger": "zombiePullBoardActionTerminate\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::zombiePullBoardActionTerminate(${1:behaviorTreeEntity}, ${2:asmStateName})"},
	{ "trigger": "zombieAttackThroughBoardsAction\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::zombieAttackThroughBoardsAction(${1:behaviorTreeEntity}, ${2:asmStateName})"},
	{ "trigger": "zombieAttackThroughBoardsActionTerminate\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::zombieAttackThroughBoardsActionTerminate(${1:behaviorTreeEntity}, ${2:asmStateName})"},
	{ "trigger": "zombieTauntAction\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::zombieTauntAction(${1:behaviorTreeEntity}, ${2:asmStateName})"},
	{ "trigger": "zombieTauntActionTerminate\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::zombieTauntActionTerminate(${1:behaviorTreeEntity}, ${2:asmStateName})"},
	{ "trigger": "zombieMantleAction\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::zombieMantleAction(${1:behaviorTreeEntity}, ${2:asmStateName})"},
	{ "trigger": "zombieMantleActionTerminate\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::zombieMantleActionTerminate(${1:behaviorTreeEntity}, ${2:asmStateName})"},
	{ "trigger": "boardTearMocompStart\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::boardTearMocompStart(${1:entity}, ${2:mocompAnim}, ${3:mocompAnimBlendOutTime}, ${4:mocompAnimFlag}, ${5:mocompDuration})"},
	{ "trigger": "boardTearMocompUpdate\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::boardTearMocompUpdate(${1:entity}, ${2:mocompAnim}, ${3:mocompAnimBlendOutTime}, ${4:mocompAnimFlag}, ${5:mocompDuration})"},
	{ "trigger": "barricadeEnterMocompStart\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::barricadeEnterMocompStart(${1:entity}, ${2:mocompAnim}, ${3:mocompAnimBlendOutTime}, ${4:mocompAnimFlag}, ${5:mocompDuration})"},
	{ "trigger": "barricadeEnterMocompUpdate\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::barricadeEnterMocompUpdate(${1:entity}, ${2:mocompAnim}, ${3:mocompAnimBlendOutTime}, ${4:mocompAnimFlag}, ${5:mocompDuration})"},
	{ "trigger": "barricadeEnterMocompTerminate\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::barricadeEnterMocompTerminate(${1:entity}, ${2:mocompAnim}, ${3:mocompAnimBlendOutTime}, ${4:mocompAnimFlag}, ${5:mocompDuration})"},
	{ "trigger": "barricadeEnterMocompNoZStart\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::barricadeEnterMocompNoZStart(${1:entity}, ${2:mocompAnim}, ${3:mocompAnimBlendOutTime}, ${4:mocompAnimFlag}, ${5:mocompDuration})"},
	{ "trigger": "barricadeEnterMocompNoZUpdate\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::barricadeEnterMocompNoZUpdate(${1:entity}, ${2:mocompAnim}, ${3:mocompAnimBlendOutTime}, ${4:mocompAnimFlag}, ${5:mocompDuration})"},
	{ "trigger": "barricadeEnterMocompNoZTerminate\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::barricadeEnterMocompNoZTerminate(${1:entity}, ${2:mocompAnim}, ${3:mocompAnimBlendOutTime}, ${4:mocompAnimFlag}, ${5:mocompDuration})"},
	{ "trigger": "notetrackBoardTear\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::notetrackBoardTear(${1:animationEntity})"},
	{ "trigger": "notetrackBoardMelee\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::notetrackBoardMelee(${1:animationEntity})"},
	{ "trigger": "findZombieEnemy\t#using scripts\\zm\\_zm_behavior;", "contents": "zm_behavior::findZombieEnemy()"},
	{ "trigger": "zombieFindFlesh\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::zombieFindFlesh(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieFindFleshCode\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::zombieFindFleshCode(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieUpdateGoal\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::zombieUpdateGoal()"},
	{ "trigger": "zombieUpdateGoalCode\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::zombieUpdateGoalCode()"},
	{ "trigger": "zombieEnteredPlayable\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::zombieEnteredPlayable(${1:behaviorTreeEntity})"},
	{ "trigger": "shouldMoveCondition\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::shouldMoveCondition(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieShouldMoveAwayCondition\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::zombieShouldMoveAwayCondition(${1:behaviorTreeEntity})"},
	{ "trigger": "wasKilledByTeslaCondition\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::wasKilledByTeslaCondition(${1:behaviorTreeEntity})"},
	{ "trigger": "disablePowerups\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::disablePowerups(${1:behaviorTreeEntity})"},
	{ "trigger": "enablePowerups\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::enablePowerups(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieMoveAway\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::zombieMoveAway(${1:behaviorTreeEntity}, ${2:asmStateName})"},
	{ "trigger": "zombieIsBeingGrappled\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::zombieIsBeingGrappled(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieShouldKnockdown\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::zombieShouldKnockdown(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieIsPushed\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::zombieIsPushed(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieGrappleActionStart\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::zombieGrappleActionStart(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieShouldStun\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::zombieShouldStun(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieStunActionStart\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::zombieStunActionStart(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieStunActionEnd\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::zombieStunActionEnd(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieTraverseAction\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::zombieTraverseAction(${1:behaviorTreeEntity}, ${2:asmStateName})"},
	{ "trigger": "zombieTraverseActionTerminate\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::zombieTraverseActionTerminate(${1:behaviorTreeEntity}, ${2:asmStateName})"},
	{ "trigger": "zombieGotToEntranceCondition\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::zombieGotToEntranceCondition(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieGotToAttackSpotCondition\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::zombieGotToAttackSpotCondition(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieHasAttackSpotAlreadyCondition\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::zombieHasAttackSpotAlreadyCondition(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieShouldTearCondition\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::zombieShouldTearCondition(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieShouldAttackThroughBoardsCondition\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::zombieShouldAttackThroughBoardsCondition(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieShouldTauntCondition\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::zombieShouldTauntCondition(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieShouldEnterPlayableCondition\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::zombieShouldEnterPlayableCondition(${1:behaviorTreeEntity})"},
	{ "trigger": "isChunkValidCondition\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::isChunkValidCondition(${1:behaviorTreeEntity})"},
	{ "trigger": "inPlayableArea\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::inPlayableArea(${1:behaviorTreeEntity})"},
	{ "trigger": "shouldSkipTeardown\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::shouldSkipTeardown(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieIsThinkDone\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::zombieIsThinkDone(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieIsAtGoal\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::zombieIsAtGoal(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieIsAtEntrance\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::zombieIsAtEntrance(${1:behaviorTreeEntity})"},
	{ "trigger": "getChunkService\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::getChunkService(${1:behaviorTreeEntity})"},
	{ "trigger": "updateChunkService\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::updateChunkService(${1:behaviorTreeEntity})"},
	{ "trigger": "updateAttackSpotService\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::updateAttackSpotService(${1:behaviorTreeEntity})"},
	{ "trigger": "findNodesService\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::findNodesService(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieAttackableObjectService\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::zombieAttackableObjectService(${1:behaviorTreeEntity})"},
	{ "trigger": "zombieMoveToEntranceAction\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::zombieMoveToEntranceAction(${1:behaviorTreeEntity}, ${2:asmStateName})"},
	{ "trigger": "zombieMoveToEntranceActionTerminate\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::zombieMoveToEntranceActionTerminate(${1:behaviorTreeEntity}, ${2:asmStateName})"},
	{ "trigger": "zombieMoveToAttackSpotAction\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::zombieMoveToAttackSpotAction(${1:behaviorTreeEntity}, ${2:asmStateName})"},
	{ "trigger": "zombieMoveToAttackSpotActionTerminate\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::zombieMoveToAttackSpotActionTerminate(${1:behaviorTreeEntity}, ${2:asmStateName})"},
	{ "trigger": "zombieHoldBoardAction\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::zombieHoldBoardAction(${1:behaviorTreeEntity}, ${2:asmStateName})"},
	{ "trigger": "zombieHoldBoardActionTerminate\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::zombieHoldBoardActionTerminate(${1:behaviorTreeEntity}, ${2:asmStateName})"},
	{ "trigger": "zombieGrabBoardAction\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::zombieGrabBoardAction(${1:behaviorTreeEntity}, ${2:asmStateName})"},
	{ "trigger": "zombieGrabBoardActionTerminate\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::zombieGrabBoardActionTerminate(${1:behaviorTreeEntity}, ${2:asmStateName})"},
	{ "trigger": "zombiePullBoardAction\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::zombiePullBoardAction(${1:behaviorTreeEntity}, ${2:asmStateName})"},
	{ "trigger": "zombiePullBoardActionTerminate\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::zombiePullBoardActionTerminate(${1:behaviorTreeEntity}, ${2:asmStateName})"},
	{ "trigger": "zombieAttackThroughBoardsAction\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::zombieAttackThroughBoardsAction(${1:behaviorTreeEntity}, ${2:asmStateName})"},
	{ "trigger": "zombieAttackThroughBoardsActionTerminate\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::zombieAttackThroughBoardsActionTerminate(${1:behaviorTreeEntity}, ${2:asmStateName})"},
	{ "trigger": "zombieTauntAction\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::zombieTauntAction(${1:behaviorTreeEntity}, ${2:asmStateName})"},
	{ "trigger": "zombieTauntActionTerminate\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::zombieTauntActionTerminate(${1:behaviorTreeEntity}, ${2:asmStateName})"},
	{ "trigger": "zombieMantleAction\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::zombieMantleAction(${1:behaviorTreeEntity}, ${2:asmStateName})"},
	{ "trigger": "zombieMantleActionTerminate\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::zombieMantleActionTerminate(${1:behaviorTreeEntity}, ${2:asmStateName})"},
	{ "trigger": "boardTearMocompStart\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::boardTearMocompStart(${1:entity}, ${2:mocompAnim}, ${3:mocompAnimBlendOutTime}, ${4:mocompAnimFlag}, ${5:mocompDuration})"},
	{ "trigger": "boardTearMocompUpdate\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::boardTearMocompUpdate(${1:entity}, ${2:mocompAnim}, ${3:mocompAnimBlendOutTime}, ${4:mocompAnimFlag}, ${5:mocompDuration})"},
	{ "trigger": "barricadeEnterMocompStart\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::barricadeEnterMocompStart(${1:entity}, ${2:mocompAnim}, ${3:mocompAnimBlendOutTime}, ${4:mocompAnimFlag}, ${5:mocompDuration})"},
	{ "trigger": "barricadeEnterMocompUpdate\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::barricadeEnterMocompUpdate(${1:entity}, ${2:mocompAnim}, ${3:mocompAnimBlendOutTime}, ${4:mocompAnimFlag}, ${5:mocompDuration})"},
	{ "trigger": "barricadeEnterMocompTerminate\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::barricadeEnterMocompTerminate(${1:entity}, ${2:mocompAnim}, ${3:mocompAnimBlendOutTime}, ${4:mocompAnimFlag}, ${5:mocompDuration})"},
	{ "trigger": "barricadeEnterMocompNoZStart\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::barricadeEnterMocompNoZStart(${1:entity}, ${2:mocompAnim}, ${3:mocompAnimBlendOutTime}, ${4:mocompAnimFlag}, ${5:mocompDuration})"},
	{ "trigger": "barricadeEnterMocompNoZUpdate\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::barricadeEnterMocompNoZUpdate(${1:entity}, ${2:mocompAnim}, ${3:mocompAnimBlendOutTime}, ${4:mocompAnimFlag}, ${5:mocompDuration})"},
	{ "trigger": "barricadeEnterMocompNoZTerminate\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::barricadeEnterMocompNoZTerminate(${1:entity}, ${2:mocompAnim}, ${3:mocompAnimBlendOutTime}, ${4:mocompAnimFlag}, ${5:mocompDuration})"},
	{ "trigger": "notetrackBoardTear\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::notetrackBoardTear(${1:animationEntity})"},
	{ "trigger": "notetrackBoardMelee\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::notetrackBoardMelee(${1:animationEntity})"},
	{ "trigger": "findZombieEnemy\t#using scripts\\zm\\_zm_behavior3;", "contents": "zm_behavior::findZombieEnemy()"},
	{ "trigger": "on_player_spawned\t#using scripts\\shared\\bb_shared; self == player", "contents": "bb::on_player_spawned()"},
	{ "trigger": "on_player_disconnect\t#using scripts\\shared\\bb_shared;", "contents": "bb::on_player_disconnect()"},
	{ "trigger": "on_player_death\t#using scripts\\shared\\bb_shared;", "contents": "bb::on_player_death()"},
	{ "trigger": "commit_spawn_data\t#using scripts\\shared\\bb_shared;", "contents": "bb::commit_spawn_data()"},
	{ "trigger": "commit_weapon_data\t#using scripts\\shared\\bb_shared;", "contents": "bb::commit_weapon_data(${1:spawnid}, ${2:currentWeapon}, ${3:time0})"},
	{ "trigger": "add_to_stat\t#using scripts\\shared\\bb_shared;", "contents": "bb::add_to_stat(${1:statName}, ${2:delta})"},
	{ "trigger": "recordBBDataForPlayer\t#using scripts\\shared\\bb_shared;", "contents": "bb::recordBBDataForPlayer(${1:breadcrumb_Table})"},
	{ "trigger": "recordBlackBoxBreadcrumbData\t#using scripts\\shared\\bb_shared;", "contents": "bb::recordBlackBoxBreadcrumbData(${1:breadcrumb_Table})"},
	{ "trigger": "set_difficulty\t#using scripts\\zm\\_zm_mgturret;", "contents": "zm_mgturret::set_difficulty(${1:difficulty})"},
	{ "trigger": "turret_set_difficulty\t#using scripts\\zm\\_zm_mgturret;", "contents": "zm_mgturret::turret_set_difficulty(${1:turret}, ${2:difficulty})"},
	{ "trigger": "turret_suppression_fire\t#using scripts\\zm\\_zm_mgturret; self == turret", "contents": "zm_mgturret::turret_suppression_fire(${1:targets})"},
	{ "trigger": "burst_fire_settings\t#using scripts\\zm\\_zm_mgturret;", "contents": "zm_mgturret::burst_fire_settings(${1:setting})"},
	{ "trigger": "burst_fire\t#using scripts\\zm\\_zm_mgturret;", "contents": "zm_mgturret::burst_fire(${1:turret}, ${2:manual_target})"},
	{ "trigger": "burst_fire_unmanned\t#using scripts\\zm\\_zm_mgturret; self == turret", "contents": "zm_mgturret::burst_fire_unmanned()"},
	{ "trigger": "avoid_synchronization\t#using scripts\\zm\\_zm_mgturret;", "contents": "zm_mgturret::avoid_synchronization(${1:time})"},
	{ "trigger": "do_shoot\t#using scripts\\zm\\_zm_mgturret;", "contents": "zm_mgturret::do_shoot()"},
	{ "trigger": "turret_timer\t#using scripts\\zm\\_zm_mgturret;", "contents": "zm_mgturret::turret_timer(${1:duration})"},
	{ "trigger": "random_spread\t#using scripts\\zm\\_zm_mgturret;", "contents": "zm_mgturret::random_spread(${1:ent})"},
	{ "trigger": "siegebot_update_difficulty\t#using scripts\\shared\\vehicles\\_siegebot;", "contents": "siegebot::siegebot_update_difficulty()"},
	{ "trigger": "defaultRole\t#using scripts\\shared\\vehicles\\_siegebot;", "contents": "siegebot::defaultRole()"},
	{ "trigger": "state_death_update\t#using scripts\\shared\\vehicles\\_siegebot;", "contents": "siegebot::state_death_update(${1:params})"},
	{ "trigger": "siegebot_driving\t#using scripts\\shared\\vehicles\\_siegebot;", "contents": "siegebot::siegebot_driving(${1:params})"},
	{ "trigger": "siegebot_kill_on_tilting\t#using scripts\\shared\\vehicles\\_siegebot;", "contents": "siegebot::siegebot_kill_on_tilting()"},
	{ "trigger": "siegebot_player_fireupdate\t#using scripts\\shared\\vehicles\\_siegebot;", "contents": "siegebot::siegebot_player_fireupdate()"},
	{ "trigger": "siegebot_player_aimUpdate\t#using scripts\\shared\\vehicles\\_siegebot;", "contents": "siegebot::siegebot_player_aimUpdate()"},
	{ "trigger": "emped_enter\t#using scripts\\shared\\vehicles\\_siegebot;", "contents": "siegebot::emped_enter(${1:params})"},
	{ "trigger": "emped_update\t#using scripts\\shared\\vehicles\\_siegebot;", "contents": "siegebot::emped_update(${1:params})"},
	{ "trigger": "emped_exit\t#using scripts\\shared\\vehicles\\_siegebot;", "contents": "siegebot::emped_exit(${1:params})"},
	{ "trigger": "emped_reenter\t#using scripts\\shared\\vehicles\\_siegebot;", "contents": "siegebot::emped_reenter(${1:params})"},
	{ "trigger": "pain_toggle\t#using scripts\\shared\\vehicles\\_siegebot;", "contents": "siegebot::pain_toggle(${1:enabled})"},
	{ "trigger": "pain_update\t#using scripts\\shared\\vehicles\\_siegebot;", "contents": "siegebot::pain_update(${1:params})"},
	{ "trigger": "state_unaware_update\t#using scripts\\shared\\vehicles\\_siegebot;", "contents": "siegebot::state_unaware_update(${1:params})"},
	{ "trigger": "Movement_Thread_Unaware\t#using scripts\\shared\\vehicles\\_siegebot;", "contents": "siegebot::Movement_Thread_Unaware()"},
	{ "trigger": "GetNextMovePosition_unaware\t#using scripts\\shared\\vehicles\\_siegebot;", "contents": "siegebot::GetNextMovePosition_unaware()"},
	{ "trigger": "clean_up_spawned\t#using scripts\\shared\\vehicles\\_siegebot;", "contents": "siegebot::clean_up_spawned()"},
	{ "trigger": "clean_up_spawnedOnDeath\t#using scripts\\shared\\vehicles\\_siegebot;", "contents": "siegebot::clean_up_spawnedOnDeath(${1:entToWatch})"},
	{ "trigger": "state_jump_can_enter\t#using scripts\\shared\\vehicles\\_siegebot;", "contents": "siegebot::state_jump_can_enter(${1:from_state}, ${2:to_state}, ${3:connection})"},
	{ "trigger": "state_jump_enter\t#using scripts\\shared\\vehicles\\_siegebot;", "contents": "siegebot::state_jump_enter(${1:params})"},
	{ "trigger": "state_jump_update\t#using scripts\\shared\\vehicles\\_siegebot;", "contents": "siegebot::state_jump_update(${1:params})"},
	{ "trigger": "state_jump_exit\t#using scripts\\shared\\vehicles\\_siegebot;", "contents": "siegebot::state_jump_exit(${1:params})"},
	{ "trigger": "state_combat_update\t#using scripts\\shared\\vehicles\\_siegebot;", "contents": "siegebot::state_combat_update(${1:params})"},
	{ "trigger": "state_combat_exit\t#using scripts\\shared\\vehicles\\_siegebot;", "contents": "siegebot::state_combat_exit(${1:params})"},
	{ "trigger": "locomotion_start\t#using scripts\\shared\\vehicles\\_siegebot;", "contents": "siegebot::locomotion_start()"},
	{ "trigger": "GetNextMovePosition_tactical\t#using scripts\\shared\\vehicles\\_siegebot; has self.parasiteEnemy", "contents": "siegebot::GetNextMovePosition_tactical()"},
	{ "trigger": "path_update_interrupt\t#using scripts\\shared\\vehicles\\_siegebot;", "contents": "siegebot::path_update_interrupt()"},
	{ "trigger": "weapon_doors_state\t#using scripts\\shared\\vehicles\\_siegebot;", "contents": "siegebot::weapon_doors_state(${1:isOpen}, ${2:waittime = 0})"},
	{ "trigger": "Movement_Thread\t#using scripts\\shared\\vehicles\\_siegebot;", "contents": "siegebot::Movement_Thread()"},
	{ "trigger": "stopMovementAndSetBrake\t#using scripts\\shared\\vehicles\\_siegebot;", "contents": "siegebot::stopMovementAndSetBrake()"},
	{ "trigger": "face_target\t#using scripts\\shared\\vehicles\\_siegebot;", "contents": "siegebot::face_target(${1:position}, ${2:targetAngleDiff})"},
	{ "trigger": "Scan\t#using scripts\\shared\\vehicles\\_siegebot;", "contents": "siegebot::Scan()"},
	{ "trigger": "Attack_Thread_machinegun\t#using scripts\\shared\\vehicles\\_siegebot;", "contents": "siegebot::Attack_Thread_machinegun()"},
	{ "trigger": "Attack_Rocket\t#using scripts\\shared\\vehicles\\_siegebot;", "contents": "siegebot::Attack_Rocket(${1:target})"},
	{ "trigger": "Attack_Thread_Rocket\t#using scripts\\shared\\vehicles\\_siegebot;", "contents": "siegebot::Attack_Thread_Rocket()"},
	{ "trigger": "siegebot_callback_damage\t#using scripts\\shared\\vehicles\\_siegebot;", "contents": "siegebot::siegebot_callback_damage(${1:eInflictor}, ${2:eAttacker}, ${3:iDamage}, ${4:iDFlags}, ${5:sMeansOfDeath}, ${6:weapon}, ${7:vPoint}, ${8:vDir}, ${9:sHitLoc}, ${10:vDamageOrigin}, ${11:psOffsetTime}, ${12:damageFromUnderneath}, ${13:modelIndex}, ${14:partName}, ${15:vSurfaceNormal})"},
	{ "trigger": "grab_insta_kill\t#using scripts\\zm\\_zm_powerup_insta_kill;", "contents": "zm_powerup_insta_kill::grab_insta_kill(${1:player})"},
	{ "trigger": "insta_kill_powerup\t#using scripts\\zm\\_zm_powerup_insta_kill;", "contents": "zm_powerup_insta_kill::insta_kill_powerup(${1:drop_item}, ${2:player})"},
	{ "trigger": "is_enabled\t#using scripts\\zm\\_zm_bgb;", "contents": "bgb::is_enabled(${1:name})"},
	{ "trigger": "actor_damage_override\t#using scripts\\zm\\_zm_bgb;", "contents": "bgb::actor_damage_override(${1:inflictor}, ${2:attacker}, ${3:damage}, ${4:flags}, ${5:meansofdeath}, ${6:weapon}, ${7:vpoint}, ${8:vdir}, ${9:sHitLoc}, ${10:psOffsetTime}, ${11:boneIndex}, ${12:surfaceType})"},
	{ "trigger": "actor_death_override\t#using scripts\\zm\\_zm_bgb;", "contents": "bgb::actor_death_override(${1:attacker})"},
	{ "trigger": "suspend_weapon_cycling\t#using scripts\\zm\\_zm_bgb;", "contents": "bgb::suspend_weapon_cycling()"},
	{ "trigger": "resume_weapon_cycling\t#using scripts\\zm\\_zm_bgb;", "contents": "bgb::resume_weapon_cycling()"},
	{ "trigger": "is_active\t#using scripts\\zm\\_zm_bgb;", "contents": "bgb::is_active(${1:name})"},
	{ "trigger": "register_lost_perk_override\t#using scripts\\zm\\_zm_bgb;", "contents": "bgb::register_lost_perk_override(${1:name}, ${2:lost_perk_override_func}, ${3:lost_perk_override_func_always_run})"},
	{ "trigger": "is_team_active\t#using scripts\\zm\\_zm_bgb;", "contents": "bgb::is_team_active(${1:str_name})"},
	{ "trigger": "is_team_enabled\t#using scripts\\zm\\_zm_bgb;", "contents": "bgb::is_team_enabled(${1:str_name})"},
	{ "trigger": "add_to_player_score_override\t#using scripts\\zm\\_zm_bgb;", "contents": "bgb::add_to_player_score_override(${1:n_points}, ${2:str_awarded_by})"},
	{ "trigger": "do_one_shot_use\t#using scripts\\zm\\_zm_bgb;", "contents": "bgb::do_one_shot_use(${1:skip_demo_bookmark = false})"},
	{ "trigger": "cleanup\t#using scripts\\shared\\teamgather_shared;", "contents": "teamgather::cleanup()"},
	{ "trigger": "create_teamgather_event\t#using scripts\\shared\\teamgather_shared;", "contents": "teamgather::create_teamgather_event(${1:v_interact_pos}, ${2:v_interact_angles}, ${3:v_gather_pos}, ${4:e_interact_entity})"},
	{ "trigger": "teamgather_success\t#using scripts\\shared\\teamgather_shared;", "contents": "teamgather::teamgather_success()"},
	{ "trigger": "teamgather_failure\t#using scripts\\shared\\teamgather_shared;", "contents": "teamgather::teamgather_failure()"},
	{ "trigger": "setup_gameobject\t#using scripts\\shared\\teamgather_shared;", "contents": "teamgather::setup_gameobject(${1:v_pos}, ${2:STR_MODEL}, ${3:STR_USE_HINT}, ${4:e_los_ignore_me})"},
	{ "trigger": "onUseGameobject\t#using scripts\\shared\\teamgather_shared;", "contents": "teamgather::onUseGameobject(${1:player})"},
	{ "trigger": "spawn_floor_effect\t#using scripts\\shared\\teamgather_shared;", "contents": "teamgather::spawn_floor_effect()"},
	{ "trigger": "cleanup_floor_effect\t#using scripts\\shared\\teamgather_shared;", "contents": "teamgather::cleanup_floor_effect()"},
	{ "trigger": "interact_entity_highlight\t#using scripts\\shared\\teamgather_shared;", "contents": "teamgather::interact_entity_highlight(${1:highlight_object})"},
	{ "trigger": "gather_players\t#using scripts\\shared\\teamgather_shared;", "contents": "teamgather::gather_players()"},
	{ "trigger": "create_player_huds\t#using scripts\\shared\\teamgather_shared;", "contents": "teamgather::create_player_huds()"},
	{ "trigger": "is_teamgather_complete\t#using scripts\\shared\\teamgather_shared;", "contents": "teamgather::is_teamgather_complete()"},
	{ "trigger": "set_teamgather_complete\t#using scripts\\shared\\teamgather_shared;", "contents": "teamgather::set_teamgather_complete(${1:success})"},
	{ "trigger": "players_in_position\t#using scripts\\shared\\teamgather_shared;", "contents": "teamgather::players_in_position(${1:in_position})"},
	{ "trigger": "update_players_in_radius\t#using scripts\\shared\\teamgather_shared;", "contents": "teamgather::update_players_in_radius(${1:force_player_into_position})"},
	{ "trigger": "is_player_in_gather_position\t#using scripts\\shared\\teamgather_shared;", "contents": "teamgather::is_player_in_gather_position(${1:e_player})"},
	{ "trigger": "player_lowready_state\t#using scripts\\shared\\teamgather_shared;", "contents": "teamgather::player_lowready_state(${1:lower_weapon})"},
	{ "trigger": "team_member_zoom_button_check\t#using scripts\\shared\\teamgather_shared;", "contents": "teamgather::team_member_zoom_button_check(${1:e_player})"},
	{ "trigger": "teleport_player_into_position\t#using scripts\\shared\\teamgather_shared;", "contents": "teamgather::teleport_player_into_position(${1:e_player})"},
	{ "trigger": "display_hud_player_leader\t#using scripts\\shared\\teamgather_shared;", "contents": "teamgather::display_hud_player_leader(${1:e_player})"},
	{ "trigger": "display_hud_player_team_member\t#using scripts\\shared\\teamgather_shared;", "contents": "teamgather::display_hud_player_team_member(${1:e_player})"},
	{ "trigger": "__create_client_hud_elem\t#using scripts\\shared\\teamgather_shared;", "contents": "teamgather::__create_client_hud_elem(${1:alignX}, ${2:alignY}, ${3:horzAlign}, ${4:vertAlign}, ${5:xOffset}, ${6:yOffset}, ${7:fontScale}, ${8:color}, ${9:str_text})"},
	{ "trigger": "start_player_timer\t#using scripts\\shared\\teamgather_shared;", "contents": "teamgather::start_player_timer(${1:total_time})"},
	{ "trigger": "get_players_playing\t#using scripts\\shared\\teamgather_shared;", "contents": "teamgather::get_players_playing()"},
	{ "trigger": "setup_teamgather\t#using scripts\\shared\\teamgather_shared;", "contents": "teamgather::setup_teamgather(${1:v_interact_pos}, ${2:v_interact_angles}, ${3:e_interact_entity})"},
	{ "trigger": "gadget_is_type\t#using scripts\\shared\\abilities\\_ability_util;", "contents": "ability_util::gadget_is_type(${1:slot}, ${2:type})"},
	{ "trigger": "gadget_slot_for_type\t#using scripts\\shared\\abilities\\_ability_util;", "contents": "ability_util::gadget_slot_for_type(${1:type})"},
	{ "trigger": "gadget_is_camo_suit_on\t#using scripts\\shared\\abilities\\_ability_util;", "contents": "ability_util::gadget_is_camo_suit_on()"},
	{ "trigger": "gadget_combat_efficiency_enabled\t#using scripts\\shared\\abilities\\_ability_util;", "contents": "ability_util::gadget_combat_efficiency_enabled()"},
	{ "trigger": "gadget_combat_efficiency_power_drain\t#using scripts\\shared\\abilities\\_ability_util;", "contents": "ability_util::gadget_combat_efficiency_power_drain(${1:score})"},
	{ "trigger": "gadget_is_camo_suit_flickering\t#using scripts\\shared\\abilities\\_ability_util;", "contents": "ability_util::gadget_is_camo_suit_flickering()"},
	{ "trigger": "gadget_is_escort_drone_on\t#using scripts\\shared\\abilities\\_ability_util;", "contents": "ability_util::gadget_is_escort_drone_on()"},
	{ "trigger": "is_weapon_gadget\t#using scripts\\shared\\abilities\\_ability_util;", "contents": "ability_util::is_weapon_gadget(${1:weapon})"},
	{ "trigger": "gadget_power_reset\t#using scripts\\shared\\abilities\\_ability_util;", "contents": "ability_util::gadget_power_reset(${1:gadgetWeapon})"},
	{ "trigger": "gadget_reset\t#using scripts\\shared\\abilities\\_ability_util;", "contents": "ability_util::gadget_reset(${1:gadgetWeapon}, ${2:changedClass}, ${3:roundBased}, ${4:firstRound})"},
	{ "trigger": "gadget_power_armor_on\t#using scripts\\shared\\abilities\\_ability_util;", "contents": "ability_util::gadget_power_armor_on()"},
	{ "trigger": "gadget_is_active\t#using scripts\\shared\\abilities\\_ability_util;", "contents": "ability_util::gadget_is_active(${1:gadgetType})"},
	{ "trigger": "gadget_has_type\t#using scripts\\shared\\abilities\\_ability_util;", "contents": "ability_util::gadget_has_type(${1:gadgetType})"},
	{ "trigger": "camo_is_inuse\t#using scripts\\shared\\abilities\\gadgets\\_gadget_camo;", "contents": "_gadget_camo::camo_is_inuse(${1:slot})"},
	{ "trigger": "camo_is_flickering\t#using scripts\\shared\\abilities\\gadgets\\_gadget_camo;", "contents": "_gadget_camo::camo_is_flickering(${1:slot})"},
	{ "trigger": "camo_on_connect\t#using scripts\\shared\\abilities\\gadgets\\_gadget_camo;", "contents": "_gadget_camo::camo_on_connect()"},
	{ "trigger": "camo_on_disconnect\t#using scripts\\shared\\abilities\\gadgets\\_gadget_camo;", "contents": "_gadget_camo::camo_on_disconnect()"},
	{ "trigger": "camo_on_spawn\t#using scripts\\shared\\abilities\\gadgets\\_gadget_camo;", "contents": "_gadget_camo::camo_on_spawn()"},
	{ "trigger": "suspend_camo_suit\t#using scripts\\shared\\abilities\\gadgets\\_gadget_camo;", "contents": "_gadget_camo::suspend_camo_suit(${1:slot}, ${2:weapon})"},
	{ "trigger": "suspend_camo_suit_wait\t#using scripts\\shared\\abilities\\gadgets\\_gadget_camo;", "contents": "_gadget_camo::suspend_camo_suit_wait(${1:slot}, ${2:weapon})"},
	{ "trigger": "camo_on_give\t#using scripts\\shared\\abilities\\gadgets\\_gadget_camo;", "contents": "_gadget_camo::camo_on_give(${1:slot}, ${2:weapon})"},
	{ "trigger": "camo_on_take\t#using scripts\\shared\\abilities\\gadgets\\_gadget_camo;", "contents": "_gadget_camo::camo_on_take(${1:slot}, ${2:weapon})"},
	{ "trigger": "camo_on_flicker\t#using scripts\\shared\\abilities\\gadgets\\_gadget_camo;", "contents": "_gadget_camo::camo_on_flicker(${1:slot}, ${2:weapon})"},
	{ "trigger": "camo_all_actors\t#using scripts\\shared\\abilities\\gadgets\\_gadget_camo;", "contents": "_gadget_camo::camo_all_actors(${1:value})"},
	{ "trigger": "camo_gadget_on\t#using scripts\\shared\\abilities\\gadgets\\_gadget_camo;", "contents": "_gadget_camo::camo_gadget_on(${1:slot}, ${2:weapon})"},
	{ "trigger": "camo_gadget_off\t#using scripts\\shared\\abilities\\gadgets\\_gadget_camo;", "contents": "_gadget_camo::camo_gadget_off(${1:slot}, ${2:weapon})"},
	{ "trigger": "camo_bread_crumb\t#using scripts\\shared\\abilities\\gadgets\\_gadget_camo;", "contents": "_gadget_camo::camo_bread_crumb(${1:slot}, ${2:weapon})"},
	{ "trigger": "camo_bread_crumb_wait\t#using scripts\\shared\\abilities\\gadgets\\_gadget_camo;", "contents": "_gadget_camo::camo_bread_crumb_wait(${1:slot}, ${2:weapon})"},
	{ "trigger": "camo_bread_crumb_delete\t#using scripts\\shared\\abilities\\gadgets\\_gadget_camo;", "contents": "_gadget_camo::camo_bread_crumb_delete()"},
	{ "trigger": "camo_takedown_watch\t#using scripts\\shared\\abilities\\gadgets\\_gadget_camo;", "contents": "_gadget_camo::camo_takedown_watch(${1:slot}, ${2:weapon})"},
	{ "trigger": "camo_temporary_dont_ignore\t#using scripts\\shared\\abilities\\gadgets\\_gadget_camo;", "contents": "_gadget_camo::camo_temporary_dont_ignore(${1:slot})"},
	{ "trigger": "camo_temporary_dont_ignore_wait\t#using scripts\\shared\\abilities\\gadgets\\_gadget_camo;", "contents": "_gadget_camo::camo_temporary_dont_ignore_wait(${1:slot})"},
	{ "trigger": "camo_suit_flicker\t#using scripts\\shared\\abilities\\gadgets\\_gadget_camo;", "contents": "_gadget_camo::camo_suit_flicker(${1:slot}, ${2:weapon})"},
	{ "trigger": "set_camo_reveal_status\t#using scripts\\shared\\abilities\\gadgets\\_gadget_camo;", "contents": "_gadget_camo::set_camo_reveal_status(${1:status}, ${2:time})"},
	{ "trigger": "on_player_spawned\t#using scripts\\shared\\weapons\\_empgrenade;", "contents": "empgrenade::on_player_spawned()"},
	{ "trigger": "monitorEMPGrenade\t#using scripts\\shared\\weapons\\_empgrenade;", "contents": "empgrenade::monitorEMPGrenade()"},
	{ "trigger": "applyEMP\t#using scripts\\shared\\weapons\\_empgrenade;", "contents": "empgrenade::applyEMP(${1:attacker}, ${2:explosionpoint})"},
	{ "trigger": "empGrenadeDeathWaiter\t#using scripts\\shared\\weapons\\_empgrenade;", "contents": "empgrenade::empGrenadeDeathWaiter()"},
	{ "trigger": "empGrenadeCleanseWaiter\t#using scripts\\shared\\weapons\\_empgrenade;", "contents": "empgrenade::empGrenadeCleanseWaiter()"},
	{ "trigger": "checkToTurnOffEmp\t#using scripts\\shared\\weapons\\_empgrenade;", "contents": "empgrenade::checkToTurnOffEmp()"},
	{ "trigger": "ShutdownEmpRebootIndicatorMenu\t#using scripts\\shared\\weapons\\_empgrenade;", "contents": "empgrenade::ShutdownEmpRebootIndicatorMenu()"},
	{ "trigger": "empRumbleLoop\t#using scripts\\shared\\weapons\\_empgrenade;", "contents": "empgrenade::empRumbleLoop(${1:duration})"},
	{ "trigger": "watchEMPExplosion\t#using scripts\\shared\\weapons\\_empgrenade; self == grenade", "contents": "empgrenade::watchEMPExplosion(${1:owner}, ${2:weapon})"},
	{ "trigger": "empExplosionDamageEnts\t#using scripts\\shared\\weapons\\_empgrenade;", "contents": "empgrenade::empExplosionDamageEnts(${1:owner}, ${2:weapon}, ${3:origin}, ${4:radius}, ${5:damagePlayers})"},
	{ "trigger": "begin_other_grenade_tracking\t#using scripts\\shared\\weapons\\_empgrenade;", "contents": "empgrenade::begin_other_grenade_tracking()"},
	{ "trigger": "gadget_hero_weapon_is_inuse\t#using scripts\\shared\\abilities\\gadgets\\_gadget_hero_weapon;", "contents": "_gadget_hero_weapon::gadget_hero_weapon_is_inuse(${1:slot})"},
	{ "trigger": "gadget_hero_weapon_is_flickering\t#using scripts\\shared\\abilities\\gadgets\\_gadget_hero_weapon;", "contents": "_gadget_hero_weapon::gadget_hero_weapon_is_flickering(${1:slot})"},
	{ "trigger": "gadget_hero_weapon_on_flicker\t#using scripts\\shared\\abilities\\gadgets\\_gadget_hero_weapon;", "contents": "_gadget_hero_weapon::gadget_hero_weapon_on_flicker(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_hero_weapon_on_give\t#using scripts\\shared\\abilities\\gadgets\\_gadget_hero_weapon;", "contents": "_gadget_hero_weapon::gadget_hero_weapon_on_give(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_hero_weapon_on_take\t#using scripts\\shared\\abilities\\gadgets\\_gadget_hero_weapon;", "contents": "_gadget_hero_weapon::gadget_hero_weapon_on_take(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_hero_weapon_on_connect\t#using scripts\\shared\\abilities\\gadgets\\_gadget_hero_weapon;", "contents": "_gadget_hero_weapon::gadget_hero_weapon_on_connect()"},
	{ "trigger": "gadget_hero_weapon_on_spawn\t#using scripts\\shared\\abilities\\gadgets\\_gadget_hero_weapon;", "contents": "_gadget_hero_weapon::gadget_hero_weapon_on_spawn()"},
	{ "trigger": "gadget_hero_weapon_on_activate\t#using scripts\\shared\\abilities\\gadgets\\_gadget_hero_weapon;", "contents": "_gadget_hero_weapon::gadget_hero_weapon_on_activate(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_hero_weapon_on_off\t#using scripts\\shared\\abilities\\gadgets\\_gadget_hero_weapon;", "contents": "_gadget_hero_weapon::gadget_hero_weapon_on_off(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_hero_weapon_ready\t#using scripts\\shared\\abilities\\gadgets\\_gadget_hero_weapon;", "contents": "_gadget_hero_weapon::gadget_hero_weapon_ready(${1:slot}, ${2:weapon})"},
	{ "trigger": "hero_give_ammo\t#using scripts\\shared\\abilities\\gadgets\\_gadget_hero_weapon;", "contents": "_gadget_hero_weapon::hero_give_ammo(${1:slot}, ${2:weapon})"},
	{ "trigger": "hero_handle_ammo_save\t#using scripts\\shared\\abilities\\gadgets\\_gadget_hero_weapon;", "contents": "_gadget_hero_weapon::hero_handle_ammo_save(${1:slot}, ${2:weapon})"},
	{ "trigger": "hero_wait_for_game_end\t#using scripts\\shared\\abilities\\gadgets\\_gadget_hero_weapon;", "contents": "_gadget_hero_weapon::hero_wait_for_game_end(${1:slot}, ${2:weapon})"},
	{ "trigger": "hero_wait_for_death\t#using scripts\\shared\\abilities\\gadgets\\_gadget_hero_weapon;", "contents": "_gadget_hero_weapon::hero_wait_for_death(${1:slot}, ${2:weapon})"},
	{ "trigger": "hero_save_ammo\t#using scripts\\shared\\abilities\\gadgets\\_gadget_hero_weapon;", "contents": "_gadget_hero_weapon::hero_save_ammo(${1:slot}, ${2:weapon})"},
	{ "trigger": "hero_wait_for_out_of_ammo\t#using scripts\\shared\\abilities\\gadgets\\_gadget_hero_weapon;", "contents": "_gadget_hero_weapon::hero_wait_for_out_of_ammo(${1:slot}, ${2:weapon})"},
	{ "trigger": "set_gadget_hero_weapon_status\t#using scripts\\shared\\abilities\\gadgets\\_gadget_hero_weapon;", "contents": "_gadget_hero_weapon::set_gadget_hero_weapon_status(${1:weapon}, ${2:status}, ${3:time})"},
	{ "trigger": "gadget_clone_is_inuse\t#using scripts\\shared\\abilities\\gadgets\\_gadget_clone;", "contents": "_gadget_clone::gadget_clone_is_inuse(${1:slot})"},
	{ "trigger": "gadget_clone_is_flickering\t#using scripts\\shared\\abilities\\gadgets\\_gadget_clone;", "contents": "_gadget_clone::gadget_clone_is_flickering(${1:slot})"},
	{ "trigger": "gadget_clone_on_flicker\t#using scripts\\shared\\abilities\\gadgets\\_gadget_clone;", "contents": "_gadget_clone::gadget_clone_on_flicker(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_clone_on_give\t#using scripts\\shared\\abilities\\gadgets\\_gadget_clone;", "contents": "_gadget_clone::gadget_clone_on_give(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_clone_on_take\t#using scripts\\shared\\abilities\\gadgets\\_gadget_clone;", "contents": "_gadget_clone::gadget_clone_on_take(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_clone_on_connect\t#using scripts\\shared\\abilities\\gadgets\\_gadget_clone;", "contents": "_gadget_clone::gadget_clone_on_connect()"},
	{ "trigger": "killClones\t#using scripts\\shared\\abilities\\gadgets\\_gadget_clone;", "contents": "_gadget_clone::killClones(${1:player})"},
	{ "trigger": "is_jumping\t#using scripts\\shared\\abilities\\gadgets\\_gadget_clone;", "contents": "_gadget_clone::is_jumping()"},
	{ "trigger": "CalculateSpawnOrigin\t#using scripts\\shared\\abilities\\gadgets\\_gadget_clone;", "contents": "_gadget_clone::CalculateSpawnOrigin(${1:origin}, ${2:angles}, ${3:cloneDistance})"},
	{ "trigger": "insertClone\t#using scripts\\shared\\abilities\\gadgets\\_gadget_clone;", "contents": "_gadget_clone::insertClone(${1:clone})"},
	{ "trigger": "removeClone\t#using scripts\\shared\\abilities\\gadgets\\_gadget_clone;", "contents": "_gadget_clone::removeClone(${1:clone})"},
	{ "trigger": "removeOldestClone\t#using scripts\\shared\\abilities\\gadgets\\_gadget_clone;", "contents": "_gadget_clone::removeOldestClone()"},
	{ "trigger": "spawnClones\t#using scripts\\shared\\abilities\\gadgets\\_gadget_clone; self is player", "contents": "_gadget_clone::spawnClones()"},
	{ "trigger": "gadget_clone_on\t#using scripts\\shared\\abilities\\gadgets\\_gadget_clone;", "contents": "_gadget_clone::gadget_clone_on(${1:slot}, ${2:weapon})"},
	{ "trigger": "_CloneOrbFx\t#using scripts\\shared\\abilities\\gadgets\\_gadget_clone; self is player", "contents": "_gadget_clone::_CloneOrbFx(${1:endPos}, ${2:travelTime})"},
	{ "trigger": "gadget_clone_off\t#using scripts\\shared\\abilities\\gadgets\\_gadget_clone;", "contents": "_gadget_clone::gadget_clone_off(${1:slot}, ${2:weapon})"},
	{ "trigger": "ProcessCloneScoreEvent\t#using scripts\\shared\\abilities\\gadgets\\_gadget_clone;", "contents": "_gadget_clone::ProcessCloneScoreEvent(${1:clone}, ${2:attacker}, ${3:weapon})"},
	{ "trigger": "cloneDamageOverride\t#using scripts\\shared\\abilities\\gadgets\\_gadget_clone;", "contents": "_gadget_clone::cloneDamageOverride(${1:eInflictor}, ${2:eAttacker}, ${3:iDamage}, ${4:iDFlags}, ${5:sMeansOfDeath}, ${6:weapon}, ${7:vPoint}, ${8:vDir}, ${9:sHitLoc}, ${10:vDamageOrigin}, ${11:timeOffset}, ${12:boneIndex}, ${13:modelIndex}, ${14:surfaceType}, ${15:surfaceNormal})"},
	{ "trigger": "_CloneWatchOwnerDisconnect\t#using scripts\\shared\\abilities\\gadgets\\_gadget_clone;", "contents": "_gadget_clone::_CloneWatchOwnerDisconnect(${1:player})"},
	{ "trigger": "_CloneWatchShutdown\t#using scripts\\shared\\abilities\\gadgets\\_gadget_clone;", "contents": "_gadget_clone::_CloneWatchShutdown()"},
	{ "trigger": "_CloneBreakGlass\t#using scripts\\shared\\abilities\\gadgets\\_gadget_clone;", "contents": "_gadget_clone::_CloneBreakGlass()"},
	{ "trigger": "_CloneFakeFire\t#using scripts\\shared\\abilities\\gadgets\\_gadget_clone;", "contents": "_gadget_clone::_CloneFakeFire()"},
	{ "trigger": "_CloneSelectWeapon\t#using scripts\\shared\\abilities\\gadgets\\_gadget_clone;", "contents": "_gadget_clone::_CloneSelectWeapon(${1:player})"},
	{ "trigger": "_CloneBuildItemList\t#using scripts\\shared\\abilities\\gadgets\\_gadget_clone;", "contents": "_gadget_clone::_CloneBuildItemList(${1:player})"},
	{ "trigger": "gadget_concussive_wave_is_inuse\t#using scripts\\shared\\abilities\\gadgets\\_gadget_concussive_wave;", "contents": "_gadget_concussive_wave::gadget_concussive_wave_is_inuse(${1:slot})"},
	{ "trigger": "gadget_concussive_wave_is_flickering\t#using scripts\\shared\\abilities\\gadgets\\_gadget_concussive_wave;", "contents": "_gadget_concussive_wave::gadget_concussive_wave_is_flickering(${1:slot})"},
	{ "trigger": "gadget_concussive_wave_on_flicker\t#using scripts\\shared\\abilities\\gadgets\\_gadget_concussive_wave;", "contents": "_gadget_concussive_wave::gadget_concussive_wave_on_flicker(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_concussive_wave_on_give\t#using scripts\\shared\\abilities\\gadgets\\_gadget_concussive_wave;", "contents": "_gadget_concussive_wave::gadget_concussive_wave_on_give(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_concussive_wave_on_take\t#using scripts\\shared\\abilities\\gadgets\\_gadget_concussive_wave;", "contents": "_gadget_concussive_wave::gadget_concussive_wave_on_take(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_concussive_wave_on_connect\t#using scripts\\shared\\abilities\\gadgets\\_gadget_concussive_wave;", "contents": "_gadget_concussive_wave::gadget_concussive_wave_on_connect()"},
	{ "trigger": "gadget_concussive_wave_on\t#using scripts\\shared\\abilities\\gadgets\\_gadget_concussive_wave;", "contents": "_gadget_concussive_wave::gadget_concussive_wave_on(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_concussive_wave_off\t#using scripts\\shared\\abilities\\gadgets\\_gadget_concussive_wave;", "contents": "_gadget_concussive_wave::gadget_concussive_wave_off(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_concussive_wave_is_primed\t#using scripts\\shared\\abilities\\gadgets\\_gadget_concussive_wave;", "contents": "_gadget_concussive_wave::gadget_concussive_wave_is_primed(${1:slot}, ${2:weapon})"},
	{ "trigger": "escort_drone_think\t#using scripts\\shared\\vehicles\\_escort_drone;", "contents": "escort_drone::escort_drone_think(${1:player})"},
	{ "trigger": "escort_drone_start_scripted\t#using scripts\\shared\\vehicles\\_escort_drone;", "contents": "escort_drone::escort_drone_start_scripted()"},
	{ "trigger": "escort_drone_off\t#using scripts\\shared\\vehicles\\_escort_drone;", "contents": "escort_drone::escort_drone_off()"},
	{ "trigger": "escort_drone_on\t#using scripts\\shared\\vehicles\\_escort_drone;", "contents": "escort_drone::escort_drone_on()"},
	{ "trigger": "escort_drone_start_ai\t#using scripts\\shared\\vehicles\\_escort_drone;", "contents": "escort_drone::escort_drone_start_ai()"},
	{ "trigger": "escort_drone_fireupdate\t#using scripts\\shared\\vehicles\\_escort_drone;", "contents": "escort_drone::escort_drone_fireupdate()"},
	{ "trigger": "hud_marker_create\t#using scripts\\shared\\vehicles\\_escort_drone; self = drone", "contents": "escort_drone::hud_marker_create()"},
	{ "trigger": "escort_drone_check_move\t#using scripts\\shared\\vehicles\\_escort_drone;", "contents": "escort_drone::escort_drone_check_move(${1:position})"},
	{ "trigger": "escort_drone_adjust_goal_for_enemy_height\t#using scripts\\shared\\vehicles\\_escort_drone;", "contents": "escort_drone::escort_drone_adjust_goal_for_enemy_height(${1:goalpos})"},
	{ "trigger": "make_sure_goal_is_well_above_ground\t#using scripts\\shared\\vehicles\\_escort_drone;", "contents": "escort_drone::make_sure_goal_is_well_above_ground(${1:pos})"},
	{ "trigger": "waittill_pathing_done\t#using scripts\\shared\\vehicles\\_escort_drone;", "contents": "escort_drone::waittill_pathing_done()"},
	{ "trigger": "goal_flag_monitor\t#using scripts\\shared\\vehicles\\_escort_drone;", "contents": "escort_drone::goal_flag_monitor()"},
	{ "trigger": "escort_drone_movementupdate\t#using scripts\\shared\\vehicles\\_escort_drone;", "contents": "escort_drone::escort_drone_movementupdate()"},
	{ "trigger": "escort_drone_get_closest_node\t#using scripts\\shared\\vehicles\\_escort_drone;", "contents": "escort_drone::escort_drone_get_closest_node()"},
	{ "trigger": "escort_drone_find_new_position\t#using scripts\\shared\\vehicles\\_escort_drone;", "contents": "escort_drone::escort_drone_find_new_position()"},
	{ "trigger": "escort_drone_teleport_to_nearest_node\t#using scripts\\shared\\vehicles\\_escort_drone;", "contents": "escort_drone::escort_drone_teleport_to_nearest_node()"},
	{ "trigger": "escort_drone_exit_vehicle\t#using scripts\\shared\\vehicles\\_escort_drone;", "contents": "escort_drone::escort_drone_exit_vehicle()"},
	{ "trigger": "escort_drone_scripted\t#using scripts\\shared\\vehicles\\_escort_drone;", "contents": "escort_drone::escort_drone_scripted()"},
	{ "trigger": "escort_drone_play_single_fx_on_tag\t#using scripts\\shared\\vehicles\\_escort_drone;", "contents": "escort_drone::escort_drone_play_single_fx_on_tag(${1:effect}, ${2:tag})"},
	{ "trigger": "escort_drone_cleanup_fx\t#using scripts\\shared\\vehicles\\_escort_drone;", "contents": "escort_drone::escort_drone_cleanup_fx()"},
	{ "trigger": "escort_drone_fire_for_time\t#using scripts\\shared\\vehicles\\_escort_drone;", "contents": "escort_drone::escort_drone_fire_for_time(${1:totalFireTime})"},
	{ "trigger": "escort_drone_predicted_collision\t#using scripts\\shared\\vehicles\\_escort_drone;", "contents": "escort_drone::escort_drone_predicted_collision()"},
	{ "trigger": "escort_drone_collision_player\t#using scripts\\shared\\vehicles\\_escort_drone;", "contents": "escort_drone::escort_drone_collision_player()"},
	{ "trigger": "escort_drone_collision\t#using scripts\\shared\\vehicles\\_escort_drone;", "contents": "escort_drone::escort_drone_collision()"},
	{ "trigger": "escort_drone_set_team\t#using scripts\\shared\\vehicles\\_escort_drone;", "contents": "escort_drone::escort_drone_set_team(${1:team})"},
	{ "trigger": "escort_drone_blink_lights\t#using scripts\\shared\\vehicles\\_escort_drone;", "contents": "escort_drone::escort_drone_blink_lights()"},
	{ "trigger": "escort_drone_level_out_for_landing\t#using scripts\\shared\\vehicles\\_escort_drone;", "contents": "escort_drone::escort_drone_level_out_for_landing()"},
	{ "trigger": "escort_drone_emped\t#using scripts\\shared\\vehicles\\_escort_drone;", "contents": "escort_drone::escort_drone_emped()"},
	{ "trigger": "escort_drone_temp_bullet_shield\t#using scripts\\shared\\vehicles\\_escort_drone;", "contents": "escort_drone::escort_drone_temp_bullet_shield(${1:invulnerable_time})"},
	{ "trigger": "EscortDroneCallback_VehicleDamage\t#using scripts\\shared\\vehicles\\_escort_drone;", "contents": "escort_drone::EscortDroneCallback_VehicleDamage(${1:eInflictor}, ${2:eAttacker}, ${3:iDamage}, ${4:iDFlags}, ${5:sMeansOfDeath}, ${6:weapon}, ${7:vPoint}, ${8:vDir}, ${9:sHitLoc}, ${10:psOffsetTime}, ${11:damageFromUnderneath}, ${12:modelIndex}, ${13:partName})"},
	{ "trigger": "escort_drone_power_loss_multiplier\t#using scripts\\shared\\vehicles\\_escort_drone;", "contents": "escort_drone::escort_drone_power_loss_multiplier(${1:sMeansOfDeath})"},
	{ "trigger": "is_in_combat\t#using scripts\\shared\\vehicles\\_escort_drone;", "contents": "escort_drone::is_in_combat()"},
	{ "trigger": "wait_for_face_event\t#using scripts\\shared\\serverfaceanim_shared;", "contents": "serverfaceanim::wait_for_face_event()"},
	{ "trigger": "get_attackable\t#using scripts\\zm\\_zm_attackables; self = zombie AI", "contents": "zm_attackables::get_attackable()"},
	{ "trigger": "get_attackable_slot\t#using scripts\\zm\\_zm_attackables; self = attackble scriptbundle (struct)", "contents": "zm_attackables::get_attackable_slot(${1:entity})"},
	{ "trigger": "activate\t#using scripts\\zm\\_zm_attackables; self = attackble scriptbundle (struct)", "contents": "zm_attackables::activate()"},
	{ "trigger": "deactivate\t#using scripts\\zm\\_zm_attackables; self = attackble scriptbundle (struct)", "contents": "zm_attackables::deactivate()"},
	{ "trigger": "do_damage\t#using scripts\\zm\\_zm_attackables; self = attackble scriptbundle (struct)", "contents": "zm_attackables::do_damage(${1:damage})"},
	{ "trigger": "attackable_callback\t#using scripts\\zm\\_zm_attackables;", "contents": "zm_attackables::attackable_callback(${1:entity})"},
	{ "trigger": "gadget_unstoppable_force_is_inuse\t#using scripts\\shared\\abilities\\gadgets\\_gadget_unstoppable_force;", "contents": "_gadget_unstoppable_force::gadget_unstoppable_force_is_inuse(${1:slot})"},
	{ "trigger": "gadget_unstoppable_force_is_flickering\t#using scripts\\shared\\abilities\\gadgets\\_gadget_unstoppable_force;", "contents": "_gadget_unstoppable_force::gadget_unstoppable_force_is_flickering(${1:slot})"},
	{ "trigger": "gadget_unstoppable_force_on_flicker\t#using scripts\\shared\\abilities\\gadgets\\_gadget_unstoppable_force;", "contents": "_gadget_unstoppable_force::gadget_unstoppable_force_on_flicker(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_unstoppable_force_on_give\t#using scripts\\shared\\abilities\\gadgets\\_gadget_unstoppable_force;", "contents": "_gadget_unstoppable_force::gadget_unstoppable_force_on_give(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_unstoppable_force_on_take\t#using scripts\\shared\\abilities\\gadgets\\_gadget_unstoppable_force;", "contents": "_gadget_unstoppable_force::gadget_unstoppable_force_on_take(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_unstoppable_force_on_connect\t#using scripts\\shared\\abilities\\gadgets\\_gadget_unstoppable_force;", "contents": "_gadget_unstoppable_force::gadget_unstoppable_force_on_connect()"},
	{ "trigger": "gadget_unstoppable_force_on\t#using scripts\\shared\\abilities\\gadgets\\_gadget_unstoppable_force;", "contents": "_gadget_unstoppable_force::gadget_unstoppable_force_on(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_unstoppable_force_off\t#using scripts\\shared\\abilities\\gadgets\\_gadget_unstoppable_force;", "contents": "_gadget_unstoppable_force::gadget_unstoppable_force_off(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_firefly_is_primed\t#using scripts\\shared\\abilities\\gadgets\\_gadget_unstoppable_force;", "contents": "_gadget_unstoppable_force::gadget_firefly_is_primed(${1:slot}, ${2:weapon})"},
	{ "trigger": "deceased.timeOfDeathMillis - GetTime\t#using scripts\\zm\\gametypes\\_spawning;", "contents": "spawning::deceased.timeOfDeathMillis - GetTime(${1:value (in milliseconds) at TOD})"},
	{ "trigger": "on_player_connecting\t#using scripts\\zm\\gametypes\\_spawning;", "contents": "spawning::on_player_connecting()"},
	{ "trigger": "on_player_spawned\t#using scripts\\zm\\gametypes\\_spawning; self == player", "contents": "spawning::on_player_spawned()"},
	{ "trigger": "onDeath\t#using scripts\\zm\\gametypes\\_spawning;", "contents": "spawning::onDeath()"},
	{ "trigger": "on_joined_team\t#using scripts\\zm\\gametypes\\_spawning;", "contents": "spawning::on_joined_team()"},
	{ "trigger": "onGrenadeThrow\t#using scripts\\zm\\gametypes\\_spawning;", "contents": "spawning::onGrenadeThrow()"},
	{ "trigger": "get_friendly_team_mask\t#using scripts\\zm\\gametypes\\_spawning;", "contents": "spawning::get_friendly_team_mask(${1:team})"},
	{ "trigger": "get_enemy_team_mask\t#using scripts\\zm\\gametypes\\_spawning;", "contents": "spawning::get_enemy_team_mask(${1:team})"},
	{ "trigger": "create_influencer\t#using scripts\\zm\\gametypes\\_spawning;", "contents": "spawning::create_influencer(${1:name}, ${2:origin}, ${3:team_mask})"},
	{ "trigger": "create_friendly_influencer\t#using scripts\\zm\\gametypes\\_spawning;", "contents": "spawning::create_friendly_influencer(${1:name}, ${2:origin}, ${3:team})"},
	{ "trigger": "create_enemy_influencer\t#using scripts\\zm\\gametypes\\_spawning;", "contents": "spawning::create_enemy_influencer(${1:name}, ${2:origin}, ${3:team})"},
	{ "trigger": "create_entity_influencer\t#using scripts\\zm\\gametypes\\_spawning;", "contents": "spawning::create_entity_influencer(${1:name}, ${2:team_mask})"},
	{ "trigger": "create_entity_friendly_influencer\t#using scripts\\zm\\gametypes\\_spawning;", "contents": "spawning::create_entity_friendly_influencer(${1:name})"},
	{ "trigger": "create_entity_enemy_influencer\t#using scripts\\zm\\gametypes\\_spawning;", "contents": "spawning::create_entity_enemy_influencer(${1:name})"},
	{ "trigger": "create_entity_masked_friendly_influencer\t#using scripts\\zm\\gametypes\\_spawning;", "contents": "spawning::create_entity_masked_friendly_influencer(${1:name}, ${2:team_mask})"},
	{ "trigger": "create_entity_masked_enemy_influencer\t#using scripts\\zm\\gametypes\\_spawning;", "contents": "spawning::create_entity_masked_enemy_influencer(${1:name}, ${2:team_mask})"},
	{ "trigger": "create_player_influencers\t#using scripts\\zm\\gametypes\\_spawning;", "contents": "spawning::create_player_influencers()"},
	{ "trigger": "remove_influencers\t#using scripts\\zm\\gametypes\\_spawning;", "contents": "spawning::remove_influencers()"},
	{ "trigger": "watch_remove_influencer\t#using scripts\\zm\\gametypes\\_spawning;", "contents": "spawning::watch_remove_influencer()"},
	{ "trigger": "enable_influencers\t#using scripts\\zm\\gametypes\\_spawning;", "contents": "spawning::enable_influencers(${1:enabled})"},
	{ "trigger": "enable_player_influencers\t#using scripts\\zm\\gametypes\\_spawning;", "contents": "spawning::enable_player_influencers(${1:enabled})"},
	{ "trigger": "player_influencers_set_team\t#using scripts\\zm\\gametypes\\_spawning;", "contents": "spawning::player_influencers_set_team()"},
	{ "trigger": "create_grenade_influencers\t#using scripts\\zm\\gametypes\\_spawning;", "contents": "spawning::create_grenade_influencers(${1:parent_team}, ${2:weapon}, ${3:grenade})"},
	{ "trigger": "create_map_placed_influencers\t#using scripts\\zm\\gametypes\\_spawning;", "contents": "spawning::create_map_placed_influencers()"},
	{ "trigger": "create_map_placed_influencer\t#using scripts\\zm\\gametypes\\_spawning;", "contents": "spawning::create_map_placed_influencer(${1:influencer_entity})"},
	{ "trigger": "updateAllSpawnPoints\t#using scripts\\zm\\gametypes\\_spawning;", "contents": "spawning::updateAllSpawnPoints()"},
	{ "trigger": "onSpawnPlayer_Unified\t#using scripts\\zm\\gametypes\\_spawning;", "contents": "spawning::onSpawnPlayer_Unified(${1:predictedSpawn})"},
	{ "trigger": "getSpawnPoint\t#using scripts\\zm\\gametypes\\_spawning;", "contents": "spawning::getSpawnPoint()"},
	{ "trigger": "get_debug_spawnpoint\t#using scripts\\zm\\gametypes\\_spawning;", "contents": "spawning::get_debug_spawnpoint(${1:player})"},
	{ "trigger": "get_best_spawnpoint\t#using scripts\\zm\\gametypes\\_spawning;", "contents": "spawning::get_best_spawnpoint(${1:point_team}, ${2:influencer_team}, ${3:player}, ${4:predictedSpawn})"},
	{ "trigger": "gatherSpawnPoints\t#using scripts\\zm\\gametypes\\_spawning;", "contents": "spawning::gatherSpawnPoints(${1:player_team})"},
	{ "trigger": "is_hardcore\t#using scripts\\zm\\gametypes\\_spawning;", "contents": "spawning::is_hardcore()"},
	{ "trigger": "teams_have_enmity\t#using scripts\\zm\\gametypes\\_spawning;", "contents": "spawning::teams_have_enmity()"},
	{ "trigger": "remove_unused_spawn_entities\t#using scripts\\zm\\gametypes\\_spawning;", "contents": "spawning::remove_unused_spawn_entities()"},
	{ "trigger": "delete_all_spawns\t#using scripts\\zm\\gametypes\\_spawning;", "contents": "spawning::delete_all_spawns(${1:spawnpoints})"},
	{ "trigger": "spawn_point_class_name_being_used\t#using scripts\\zm\\gametypes\\_spawning;", "contents": "spawning::spawn_point_class_name_being_used(${1:name})"},
	{ "trigger": "CodeCallback_UpdateSpawnPoints\t#using scripts\\zm\\gametypes\\_spawning;", "contents": "spawning::CodeCallback_UpdateSpawnPoints()"},
	{ "trigger": "findBoxCenter\t#using scripts\\zm\\gametypes\\_spawnlogic;", "contents": "spawnlogic::findBoxCenter(${1:mins}, ${2:maxs})"},
	{ "trigger": "expandMins\t#using scripts\\zm\\gametypes\\_spawnlogic;", "contents": "spawnlogic::expandMins(${1:mins}, ${2:point})"},
	{ "trigger": "expandMaxs\t#using scripts\\zm\\gametypes\\_spawnlogic;", "contents": "spawnlogic::expandMaxs(${1:maxs}, ${2:point})"},
	{ "trigger": "addSpawnPointsInternal\t#using scripts\\zm\\gametypes\\_spawnlogic;", "contents": "spawnlogic::addSpawnPointsInternal(${1:team}, ${2:spawnPointName})"},
	{ "trigger": "clearSpawnPoints\t#using scripts\\zm\\gametypes\\_spawnlogic;", "contents": "spawnlogic::clearSpawnPoints()"},
	{ "trigger": "addSpawnPoints\t#using scripts\\zm\\gametypes\\_spawnlogic;", "contents": "spawnlogic::addSpawnPoints(${1:team}, ${2:spawnPointName})"},
	{ "trigger": "rebuildSpawnPoints\t#using scripts\\zm\\gametypes\\_spawnlogic;", "contents": "spawnlogic::rebuildSpawnPoints(${1:team})"},
	{ "trigger": "placeSpawnPoints\t#using scripts\\zm\\gametypes\\_spawnlogic;", "contents": "spawnlogic::placeSpawnPoints(${1:spawnPointName})"},
	{ "trigger": "dropSpawnPoints\t#using scripts\\zm\\gametypes\\_spawnlogic;", "contents": "spawnlogic::dropSpawnPoints(${1:spawnPointName})"},
	{ "trigger": "addSpawnPointClassName\t#using scripts\\zm\\gametypes\\_spawnlogic;", "contents": "spawnlogic::addSpawnPointClassName(${1:spawnPointClassName})"},
	{ "trigger": "addSpawnPointTeamClassName\t#using scripts\\zm\\gametypes\\_spawnlogic;", "contents": "spawnlogic::addSpawnPointTeamClassName(${1:team}, ${2:spawnPointClassName})"},
	{ "trigger": "getSpawnpointArray\t#using scripts\\zm\\gametypes\\_spawnlogic;", "contents": "spawnlogic::getSpawnpointArray(${1:classname})"},
	{ "trigger": "spawnPointInit\t#using scripts\\zm\\gametypes\\_spawnlogic;", "contents": "spawnlogic::spawnPointInit()"},
	{ "trigger": "getTeamSpawnPoints\t#using scripts\\zm\\gametypes\\_spawnlogic;", "contents": "spawnlogic::getTeamSpawnPoints(${1:team})"},
	{ "trigger": "getSpawnpoint_Final\t#using scripts\\zm\\gametypes\\_spawnlogic;", "contents": "spawnlogic::getSpawnpoint_Final(${1:spawnpoints}, ${2:useweights})"},
	{ "trigger": "finalizeSpawnpointChoice\t#using scripts\\zm\\gametypes\\_spawnlogic;", "contents": "spawnlogic::finalizeSpawnpointChoice(${1:spawnpoint})"},
	{ "trigger": "getBestWeightedSpawnpoint\t#using scripts\\zm\\gametypes\\_spawnlogic;", "contents": "spawnlogic::getBestWeightedSpawnpoint(${1:spawnpoints})"},
	{ "trigger": "getSpawnpoint_Random\t#using scripts\\zm\\gametypes\\_spawnlogic;", "contents": "spawnlogic::getSpawnpoint_Random(${1:spawnpoints})"},
	{ "trigger": "getAllOtherPlayers\t#using scripts\\zm\\gametypes\\_spawnlogic;", "contents": "spawnlogic::getAllOtherPlayers()"},
	{ "trigger": "getAllAlliedAndEnemyPlayers\t#using scripts\\zm\\gametypes\\_spawnlogic;", "contents": "spawnlogic::getAllAlliedAndEnemyPlayers(${1:obj})"},
	{ "trigger": "spawnPointUpdate_zm\t#using scripts\\zm\\gametypes\\_spawnlogic;", "contents": "spawnlogic::spawnPointUpdate_zm(${1:spawnpoint})"},
	{ "trigger": "getSpawnpoint_NearTeam\t#using scripts\\zm\\gametypes\\_spawnlogic;", "contents": "spawnlogic::getSpawnpoint_NearTeam(${1:spawnpoints}, ${2:favoredspawnpoints}, ${3:forceAllyDistanceWeight}, ${4:forceEnemyDistanceWeight})"},
	{ "trigger": "getSpawnpoint_DM\t#using scripts\\zm\\gametypes\\_spawnlogic;", "contents": "spawnlogic::getSpawnpoint_DM(${1:spawnpoints})"},
	{ "trigger": "getSpawnpoint_Turned\t#using scripts\\zm\\gametypes\\_spawnlogic;", "contents": "spawnlogic::getSpawnpoint_Turned(${1:spawnpoints}, ${2:idealDist}, ${3:badDist}, ${4:idealDistTeam}, ${5:badDistTeam})"},
	{ "trigger": "Spawnlogic_Begin\t#using scripts\\zm\\gametypes\\_spawnlogic;", "contents": "spawnlogic::Spawnlogic_Begin()"},
	{ "trigger": "showDeathsDebug\t#using scripts\\zm\\gametypes\\_spawnlogic;", "contents": "spawnlogic::showDeathsDebug()"},
	{ "trigger": "updateDeathInfoDebug\t#using scripts\\zm\\gametypes\\_spawnlogic;", "contents": "spawnlogic::updateDeathInfoDebug()"},
	{ "trigger": "spawnWeightDebug\t#using scripts\\zm\\gametypes\\_spawnlogic;", "contents": "spawnlogic::spawnWeightDebug(${1:spawnpoints})"},
	{ "trigger": "profileDebug\t#using scripts\\zm\\gametypes\\_spawnlogic;", "contents": "spawnlogic::profileDebug()"},
	{ "trigger": "debugNearbyPlayers\t#using scripts\\zm\\gametypes\\_spawnlogic;", "contents": "spawnlogic::debugNearbyPlayers(${1:players}, ${2:origin})"},
	{ "trigger": "deathOccured\t#using scripts\\zm\\gametypes\\_spawnlogic;", "contents": "spawnlogic::deathOccured(${1:dier}, ${2:killer})"},
	{ "trigger": "checkForSimilarDeaths\t#using scripts\\zm\\gametypes\\_spawnlogic;", "contents": "spawnlogic::checkForSimilarDeaths(${1:deathInfo})"},
	{ "trigger": "updateDeathInfo\t#using scripts\\zm\\gametypes\\_spawnlogic;", "contents": "spawnlogic::updateDeathInfo()"},
	{ "trigger": "avoidDangerousSpawns\t#using scripts\\zm\\gametypes\\_spawnlogic; (assign weights to the return value of this)", "contents": "spawnlogic::avoidDangerousSpawns(${1:spawnpoints}, ${2:teambased})"},
	{ "trigger": "isPointVulnerable\t#using scripts\\zm\\gametypes\\_spawnlogic;", "contents": "spawnlogic::isPointVulnerable(${1:playerorigin})"},
	{ "trigger": "avoidWeaponDamage\t#using scripts\\zm\\gametypes\\_spawnlogic;", "contents": "spawnlogic::avoidWeaponDamage(${1:spawnpoints})"},
	{ "trigger": "spawnPerFrameUpdate\t#using scripts\\zm\\gametypes\\_spawnlogic;", "contents": "spawnlogic::spawnPerFrameUpdate()"},
	{ "trigger": "getNonTeamSum\t#using scripts\\zm\\gametypes\\_spawnlogic;", "contents": "spawnlogic::getNonTeamSum(${1:skip_team}, ${2:sums})"},
	{ "trigger": "getNonTeamMinDist\t#using scripts\\zm\\gametypes\\_spawnlogic;", "contents": "spawnlogic::getNonTeamMinDist(${1:skip_team}, ${2:minDists})"},
	{ "trigger": "spawnPointUpdate\t#using scripts\\zm\\gametypes\\_spawnlogic;", "contents": "spawnlogic::spawnPointUpdate(${1:spawnpoint})"},
	{ "trigger": "getLosPenalty\t#using scripts\\zm\\gametypes\\_spawnlogic;", "contents": "spawnlogic::getLosPenalty()"},
	{ "trigger": "lastMinuteSightTraces\t#using scripts\\zm\\gametypes\\_spawnlogic;", "contents": "spawnlogic::lastMinuteSightTraces(${1:spawnpoint})"},
	{ "trigger": "avoidVisibleEnemies\t#using scripts\\zm\\gametypes\\_spawnlogic;", "contents": "spawnlogic::avoidVisibleEnemies(${1:spawnpoints}, ${2:teambased})"},
	{ "trigger": "avoidSpawnReuse\t#using scripts\\zm\\gametypes\\_spawnlogic;", "contents": "spawnlogic::avoidSpawnReuse(${1:spawnpoints}, ${2:teambased})"},
	{ "trigger": "avoidSameSpawn\t#using scripts\\zm\\gametypes\\_spawnlogic;", "contents": "spawnlogic::avoidSameSpawn(${1:spawnpoints})"},
	{ "trigger": "getRandomIntermissionPoint\t#using scripts\\zm\\gametypes\\_spawnlogic;", "contents": "spawnlogic::getRandomIntermissionPoint()"},
	{ "trigger": "shield_is_inuse\t#using scripts\\shared\\abilities\\gadgets\\_gadget_shield;", "contents": "_gadget_shield::shield_is_inuse(${1:slot})"},
	{ "trigger": "shield_is_flickering\t#using scripts\\shared\\abilities\\gadgets\\_gadget_shield;", "contents": "_gadget_shield::shield_is_flickering(${1:slot})"},
	{ "trigger": "shield_on_flicker\t#using scripts\\shared\\abilities\\gadgets\\_gadget_shield;", "contents": "_gadget_shield::shield_on_flicker(${1:slot})"},
	{ "trigger": "shield_on_give\t#using scripts\\shared\\abilities\\gadgets\\_gadget_shield;", "contents": "_gadget_shield::shield_on_give(${1:slot})"},
	{ "trigger": "shield_on_take\t#using scripts\\shared\\abilities\\gadgets\\_gadget_shield;", "contents": "_gadget_shield::shield_on_take(${1:slot})"},
	{ "trigger": "shield_on_connect\t#using scripts\\shared\\abilities\\gadgets\\_gadget_shield;", "contents": "_gadget_shield::shield_on_connect()"},
	{ "trigger": "shield_gadget_on\t#using scripts\\shared\\abilities\\gadgets\\_gadget_shield;", "contents": "_gadget_shield::shield_gadget_on(${1:slot})"},
	{ "trigger": "shield_gadget_off\t#using scripts\\shared\\abilities\\gadgets\\_gadget_shield;", "contents": "_gadget_shield::shield_gadget_off(${1:slot})"},
	{ "trigger": "reflectBulletsHandler\t#using scripts\\shared\\abilities\\gadgets\\_gadget_shield;", "contents": "_gadget_shield::reflectBulletsHandler(${1:slot})"},
	{ "trigger": "shield_flicker\t#using scripts\\shared\\abilities\\gadgets\\_gadget_shield;", "contents": "_gadget_shield::shield_flicker(${1:slot})"},
	{ "trigger": "set_shield_flicker_status\t#using scripts\\shared\\abilities\\gadgets\\_gadget_shield;", "contents": "_gadget_shield::set_shield_flicker_status(${1:status}, ${2:time})"},
	{ "trigger": "result\t#using scripts\\zm\\aats\\_zm_aat_thunder_wall;", "contents": "zm_aat_thunder_wall::result(${1:death}, ${2:attacker}, ${3:mod}, ${4:weapon})"},
	{ "trigger": "thunder_wall_blast\t#using scripts\\zm\\aats\\_zm_aat_thunder_wall;", "contents": "zm_aat_thunder_wall::thunder_wall_blast(${1:attacker})"},
	{ "trigger": "thunder_wall_blast_fx\t#using scripts\\zm\\aats\\_zm_aat_thunder_wall;", "contents": "zm_aat_thunder_wall::thunder_wall_blast_fx(${1:v_blast_origin}, ${2:v_attacker_orientation})"},
	{ "trigger": "run_door_fxanim\t#using scripts\\zm\\zm_giant_fx;", "contents": "zm_giant_fx::run_door_fxanim(${1:str_flag}, ${2:str_scene}, ${3:str_exploder})"},
	{ "trigger": "precache_scripted_fx\t#using scripts\\zm\\zm_giant_fx;", "contents": "zm_giant_fx::precache_scripted_fx()"},
	{ "trigger": "precache_createfx_fx\t#using scripts\\zm\\zm_giant_fx;", "contents": "zm_giant_fx::precache_createfx_fx()"},
	{ "trigger": "set_current_game_module\t#using scripts\\zm\\_zm_game_module;", "contents": "zm_game_module::set_current_game_module(${1:game_module_index})"},
	{ "trigger": "get_current_game_module\t#using scripts\\zm\\_zm_game_module;", "contents": "zm_game_module::get_current_game_module()"},
	{ "trigger": "get_game_module\t#using scripts\\zm\\_zm_game_module;", "contents": "zm_game_module::get_game_module(${1:game_module_index})"},
	{ "trigger": "freeze_players\t#using scripts\\zm\\_zm_game_module;", "contents": "zm_game_module::freeze_players(${1:freeze})"},
	{ "trigger": "respawn_spectators_and_freeze_players\t#using scripts\\zm\\_zm_game_module;", "contents": "zm_game_module::respawn_spectators_and_freeze_players()"},
	{ "trigger": "damage_callback_no_pvp_damage\t#using scripts\\zm\\_zm_game_module;", "contents": "zm_game_module::damage_callback_no_pvp_damage(${1:eInflictor}, ${2:eAttacker}, ${3:iDamage}, ${4:iDFlags}, ${5:sMeansOfDeath}, ${6:eapon}, ${7:vPoint}, ${8:vDir}, ${9:sHitLoc}, ${10:psOffsetTime})"},
	{ "trigger": "respawn_players\t#using scripts\\zm\\_zm_game_module;", "contents": "zm_game_module::respawn_players()"},
	{ "trigger": "zombie_goto_round\t#using scripts\\zm\\_zm_game_module;", "contents": "zm_game_module::zombie_goto_round(${1:target_round})"},
	{ "trigger": "make_supersprinter\t#using scripts\\zm\\_zm_game_module;", "contents": "zm_game_module::make_supersprinter()"},
	{ "trigger": "game_module_custom_intermission\t#using scripts\\zm\\_zm_game_module;", "contents": "zm_game_module::game_module_custom_intermission(${1:intermission_struct})"},
	{ "trigger": "create_fireworks\t#using scripts\\zm\\_zm_game_module;", "contents": "zm_game_module::create_fireworks(${1:launch_spots}, ${2:min_wait}, ${3:max_wait}, ${4:randomize})"},
	{ "trigger": "fireworks_launch\t#using scripts\\zm\\_zm_game_module;", "contents": "zm_game_module::fireworks_launch(${1:launch_spot})"},
	{ "trigger": "gadget_firefly_swarm_is_inuse\t#using scripts\\shared\\abilities\\gadgets\\_gadget_firefly_swarm;", "contents": "_gadget_firefly_swarm::gadget_firefly_swarm_is_inuse(${1:slot})"},
	{ "trigger": "gadget_firefly_swarm_is_flickering\t#using scripts\\shared\\abilities\\gadgets\\_gadget_firefly_swarm;", "contents": "_gadget_firefly_swarm::gadget_firefly_swarm_is_flickering(${1:slot})"},
	{ "trigger": "gadget_firefly_swarm_on_flicker\t#using scripts\\shared\\abilities\\gadgets\\_gadget_firefly_swarm;", "contents": "_gadget_firefly_swarm::gadget_firefly_swarm_on_flicker(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_firefly_swarm_on_give\t#using scripts\\shared\\abilities\\gadgets\\_gadget_firefly_swarm;", "contents": "_gadget_firefly_swarm::gadget_firefly_swarm_on_give(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_firefly_swarm_on_take\t#using scripts\\shared\\abilities\\gadgets\\_gadget_firefly_swarm;", "contents": "_gadget_firefly_swarm::gadget_firefly_swarm_on_take(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_firefly_swarm_on_connect\t#using scripts\\shared\\abilities\\gadgets\\_gadget_firefly_swarm;", "contents": "_gadget_firefly_swarm::gadget_firefly_swarm_on_connect()"},
	{ "trigger": "gadget_firefly_swarm_on\t#using scripts\\shared\\abilities\\gadgets\\_gadget_firefly_swarm;", "contents": "_gadget_firefly_swarm::gadget_firefly_swarm_on(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_firefly_swarm_off\t#using scripts\\shared\\abilities\\gadgets\\_gadget_firefly_swarm;", "contents": "_gadget_firefly_swarm::gadget_firefly_swarm_off(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_firefly_is_primed\t#using scripts\\shared\\abilities\\gadgets\\_gadget_firefly_swarm;", "contents": "_gadget_firefly_swarm::gadget_firefly_is_primed(${1:slot}, ${2:weapon})"},
	{ "trigger": "deleteAtLimit\t#using scripts\\shared\\ai\\zombie_shared;", "contents": "zombie_shared::deleteAtLimit()"},
	{ "trigger": "LookAtEntity\t#using scripts\\shared\\ai\\zombie_shared;", "contents": "zombie_shared::LookAtEntity(${1:lookTargetEntity}, ${2:lookDuration}, ${3:lookSpeed}, ${4:eyesOnly}, ${5:interruptOthers})"},
	{ "trigger": "LookAtPosition\t#using scripts\\shared\\ai\\zombie_shared;", "contents": "zombie_shared::LookAtPosition(${1:lookTargetPos}, ${2:lookDuration}, ${3:lookSpeed}, ${4:eyesOnly}, ${5:interruptOthers})"},
	{ "trigger": "LookAtAnimations\t#using scripts\\shared\\ai\\zombie_shared;", "contents": "zombie_shared::LookAtAnimations(${1:leftanim}, ${2:rightanim})"},
	{ "trigger": "HandleDogSoundNoteTracks\t#using scripts\\shared\\ai\\zombie_shared;", "contents": "zombie_shared::HandleDogSoundNoteTracks(${1:note})"},
	{ "trigger": "growling\t#using scripts\\shared\\ai\\zombie_shared;", "contents": "zombie_shared::growling()"},
	{ "trigger": "registerNoteTracks\t#using scripts\\shared\\ai\\zombie_shared;", "contents": "zombie_shared::registerNoteTracks()"},
	{ "trigger": "noteTrackStopAnim\t#using scripts\\shared\\ai\\zombie_shared;", "contents": "zombie_shared::noteTrackStopAnim(${1:note}, ${2:flagName})"},
	{ "trigger": "noteTrackStartRagdoll\t#using scripts\\shared\\ai\\zombie_shared;", "contents": "zombie_shared::noteTrackStartRagdoll(${1:note}, ${2:flagName})"},
	{ "trigger": "noteTrackMovementStop\t#using scripts\\shared\\ai\\zombie_shared;", "contents": "zombie_shared::noteTrackMovementStop(${1:note}, ${2:flagName})"},
	{ "trigger": "noteTrackMovementWalk\t#using scripts\\shared\\ai\\zombie_shared;", "contents": "zombie_shared::noteTrackMovementWalk(${1:note}, ${2:flagName})"},
	{ "trigger": "noteTrackMovementRun\t#using scripts\\shared\\ai\\zombie_shared;", "contents": "zombie_shared::noteTrackMovementRun(${1:note}, ${2:flagName})"},
	{ "trigger": "noteTrackAlertnessCasual\t#using scripts\\shared\\ai\\zombie_shared;", "contents": "zombie_shared::noteTrackAlertnessCasual(${1:note}, ${2:flagName})"},
	{ "trigger": "noteTrackAlertnessAlert\t#using scripts\\shared\\ai\\zombie_shared;", "contents": "zombie_shared::noteTrackAlertnessAlert(${1:note}, ${2:flagName})"},
	{ "trigger": "noteTrackPoseStand\t#using scripts\\shared\\ai\\zombie_shared;", "contents": "zombie_shared::noteTrackPoseStand(${1:note}, ${2:flagName})"},
	{ "trigger": "noteTrackPoseCrouch\t#using scripts\\shared\\ai\\zombie_shared;", "contents": "zombie_shared::noteTrackPoseCrouch(${1:note}, ${2:flagName})"},
	{ "trigger": "noteTrackGravity\t#using scripts\\shared\\ai\\zombie_shared;", "contents": "zombie_shared::noteTrackGravity(${1:note}, ${2:flagName})"},
	{ "trigger": "noteTrackBodyFall\t#using scripts\\shared\\ai\\zombie_shared;", "contents": "zombie_shared::noteTrackBodyFall(${1:note}, ${2:flagName})"},
	{ "trigger": "noteTrackFootStep\t#using scripts\\shared\\ai\\zombie_shared;", "contents": "zombie_shared::noteTrackFootStep(${1:note}, ${2:flagName})"},
	{ "trigger": "noteTrackFootScrape\t#using scripts\\shared\\ai\\zombie_shared;", "contents": "zombie_shared::noteTrackFootScrape(${1:note}, ${2:flagName})"},
	{ "trigger": "noteTrackLand\t#using scripts\\shared\\ai\\zombie_shared;", "contents": "zombie_shared::noteTrackLand(${1:note}, ${2:flagName})"},
	{ "trigger": "HandleNoteTrack\t#using scripts\\shared\\ai\\zombie_shared;", "contents": "zombie_shared::HandleNoteTrack(${1:note}, ${2:flagName}, ${3:customFunction}, ${4:var1})"},
	{ "trigger": "DoNoteTracks\t#using scripts\\shared\\ai\\zombie_shared;", "contents": "zombie_shared::DoNoteTracks(${1:flagName}, ${2:customFunction}, ${3:var1})"},
	{ "trigger": "DoNoteTracksForeverProc\t#using scripts\\shared\\ai\\zombie_shared;", "contents": "zombie_shared::DoNoteTracksForeverProc(${1:notetracksFunc}, ${2:flagName}, ${3:killString}, ${4:customFunction}, ${5:var1})"},
	{ "trigger": "DoNoteTracksForever\t#using scripts\\shared\\ai\\zombie_shared;", "contents": "zombie_shared::DoNoteTracksForever(${1:flagName}, ${2:killString}, ${3:customFunction}, ${4:var1})"},
	{ "trigger": "DoNoteTracksForTimeProc\t#using scripts\\shared\\ai\\zombie_shared;", "contents": "zombie_shared::DoNoteTracksForTimeProc(${1:doNoteTracksForeverFunc}, ${2:time}, ${3:flagName}, ${4:customFunction}, ${5:ent}, ${6:var1})"},
	{ "trigger": "DoNoteTracksForTime\t#using scripts\\shared\\ai\\zombie_shared;", "contents": "zombie_shared::DoNoteTracksForTime(${1:time}, ${2:flagName}, ${3:customFunction}, ${4:var1})"},
	{ "trigger": "doNoteTracksForTimeEndNotify\t#using scripts\\shared\\ai\\zombie_shared;", "contents": "zombie_shared::doNoteTracksForTimeEndNotify(${1:time})"},
	{ "trigger": "playFootStep\t#using scripts\\shared\\ai\\zombie_shared;", "contents": "zombie_shared::playFootStep(${1:foot})"},
	{ "trigger": "playFootStepEffect\t#using scripts\\shared\\ai\\zombie_shared;", "contents": "zombie_shared::playFootStepEffect(${1:foot}, ${2:groundType})"},
	{ "trigger": "moveToOriginOverTime\t#using scripts\\shared\\ai\\zombie_shared;", "contents": "zombie_shared::moveToOriginOverTime(${1:origin}, ${2:time})"},
	{ "trigger": "returnTrue\t#using scripts\\shared\\ai\\zombie_shared;", "contents": "zombie_shared::returnTrue()"},
	{ "trigger": "trackLoop\t#using scripts\\shared\\ai\\zombie_shared;", "contents": "zombie_shared::trackLoop()"},
	{ "trigger": "setAnimAimWeight\t#using scripts\\shared\\ai\\zombie_shared;", "contents": "zombie_shared::setAnimAimWeight(${1:goalweight}, ${2:goaltime})"},
	{ "trigger": "incrAnimAimWeight\t#using scripts\\shared\\ai\\zombie_shared;", "contents": "zombie_shared::incrAnimAimWeight()"},
	{ "trigger": "CreateInterfaceForEntity\t#using scripts\\shared\\ai\\systems\\ai_interface;", "contents": "ai::CreateInterfaceForEntity(${1:entity})"},
	{ "trigger": "RegisterMatchedInterface\t#using scripts\\shared\\ai\\systems\\ai_interface;", "contents": "ai::RegisterMatchedInterface(${1:archetype}, ${2:attribute}, ${3:defaultValue}, ${4:possibleValues}, ${5:callbackFunction})"},
	{ "trigger": "RegisterNumericInterface\t#using scripts\\shared\\ai\\systems\\ai_interface;", "contents": "ai::RegisterNumericInterface(${1:archetype}, ${2:attribute}, ${3:defaultValue}, ${4:minimum}, ${5:maximum}, ${6:callbackFunction})"},
	{ "trigger": "set_ignoreme\t#using scripts\\shared\\ai_shared;", "contents": "ai::set_ignoreme(${1:val})"},
	{ "trigger": "set_ignoreall\t#using scripts\\shared\\ai_shared;", "contents": "ai::set_ignoreall(${1:val})"},
	{ "trigger": "set_pacifist\t#using scripts\\shared\\ai_shared;", "contents": "ai::set_pacifist(${1:val})"},
	{ "trigger": "disable_pain\t#using scripts\\shared\\ai_shared;", "contents": "ai::disable_pain()"},
	{ "trigger": "enable_pain\t#using scripts\\shared\\ai_shared;", "contents": "ai::enable_pain()"},
	{ "trigger": "gun_remove\t#using scripts\\shared\\ai_shared;", "contents": "ai::gun_remove()"},
	{ "trigger": "gun_switchto\t#using scripts\\shared\\ai_shared;", "contents": "ai::gun_switchto(${1:weapon}, ${2:whichHand})"},
	{ "trigger": "gun_recall\t#using scripts\\shared\\ai_shared;", "contents": "ai::gun_recall()"},
	{ "trigger": "set_behavior_attribute\t#using scripts\\shared\\ai_shared;", "contents": "ai::set_behavior_attribute(${1:attribute}, ${2:value})"},
	{ "trigger": "get_behavior_attribute\t#using scripts\\shared\\ai_shared;", "contents": "ai::get_behavior_attribute(${1:attribute})"},
	{ "trigger": "has_behavior_attribute\t#using scripts\\shared\\ai_shared;", "contents": "ai::has_behavior_attribute(${1:attribute})"},
	{ "trigger": "is_dead_sentient\t#using scripts\\shared\\ai_shared;", "contents": "ai::is_dead_sentient()"},
	{ "trigger": "waittill_dead\t#using scripts\\shared\\ai_shared;", "contents": "ai::waittill_dead(${1:guys}, ${2:num}, ${3:timeoutLength})"},
	{ "trigger": "waittill_dead_or_dying\t#using scripts\\shared\\ai_shared;", "contents": "ai::waittill_dead_or_dying(${1:guys}, ${2:num}, ${3:timeoutLength})"},
	{ "trigger": "waittill_dead_or_dying_thread\t#using scripts\\shared\\ai_shared;", "contents": "ai::waittill_dead_or_dying_thread(${1:ent})"},
	{ "trigger": "waittill_dead_timeout\t#using scripts\\shared\\ai_shared;", "contents": "ai::waittill_dead_timeout(${1:timeoutLength})"},
	{ "trigger": "shoot_at_target\t#using scripts\\shared\\ai_shared;", "contents": "ai::shoot_at_target(${1:mode}, ${2:target}, ${3:tag}, ${4:duration}, ${5:setHealth}, ${6:ignoreFirstShotWait})"},
	{ "trigger": "stop_shoot_at_target\t#using scripts\\shared\\ai_shared;", "contents": "ai::stop_shoot_at_target()"},
	{ "trigger": "wait_until_done_speaking\t#using scripts\\shared\\ai_shared;", "contents": "ai::wait_until_done_speaking()"},
	{ "trigger": "set_goal\t#using scripts\\shared\\ai_shared;", "contents": "ai::set_goal(${1:value}, ${2:key = \"targetname\"}, ${3:b_force = false})"},
	{ "trigger": "force_goal\t#using scripts\\shared\\ai_shared;", "contents": "ai::force_goal(${1:goto}, ${2:n_radius}, ${3:b_shoot = true}, ${4:str_end_on}, ${5:b_keep_colors = false}, ${6:b_should_sprint = false})"},
	{ "trigger": "_force_goal\t#using scripts\\shared\\ai_shared;", "contents": "ai::_force_goal(${1:s_tracker}, ${2:goto}, ${3:n_radius}, ${4:b_shoot = true}, ${5:str_end_on}, ${6:b_keep_colors = false}, ${7:b_should_sprint = false})"},
	{ "trigger": "stopPainWaitInterval\t#using scripts\\shared\\ai_shared;", "contents": "ai::stopPainWaitInterval()"},
	{ "trigger": "painWaitInterval\t#using scripts\\shared\\ai_shared;", "contents": "ai::painWaitInterval(${1:mSec})"},
	{ "trigger": "patrol\t#using scripts\\shared\\ai_shared;", "contents": "ai::patrol(${1:start_path_node})"},
	{ "trigger": "patrol_next_node\t#using scripts\\shared\\ai_shared;", "contents": "ai::patrol_next_node()"},
	{ "trigger": "end_patrol_on_enemy_targetting\t#using scripts\\shared\\ai_shared;", "contents": "ai::end_patrol_on_enemy_targetting()"},
	{ "trigger": "end_and_clean_patrol_behaviors\t#using scripts\\shared\\ai_shared;", "contents": "ai::end_and_clean_patrol_behaviors()"},
	{ "trigger": "bloody_death\t#using scripts\\shared\\ai_shared;", "contents": "ai::bloody_death(${1:n_delay}, ${2:hit_loc})"},
	{ "trigger": "shouldRegisterClientFieldForArchetype\t#using scripts\\shared\\ai_shared;", "contents": "ai::shouldRegisterClientFieldForArchetype(${1:archetype})"},
	{ "trigger": "register_allowed_gameobject\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::register_allowed_gameobject(${1:gameobject})"},
	{ "trigger": "clear_allowed_gameobjects\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::clear_allowed_gameobjects()"},
	{ "trigger": "entity_is_allowed\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::entity_is_allowed(${1:entity}, ${2:allowed_game_modes})"},
	{ "trigger": "location_is_allowed\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::location_is_allowed(${1:entity}, ${2:location})"},
	{ "trigger": "filter_script_vehicles_from_vehicle_descriptors\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::filter_script_vehicles_from_vehicle_descriptors()"},
	{ "trigger": "on_player_spawned\t#using scripts\\shared\\gameobjects_shared; self == player", "contents": "gameobjects::on_player_spawned()"},
	{ "trigger": "on_death\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::on_death()"},
	{ "trigger": "on_disconnect\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::on_disconnect()"},
	{ "trigger": "on_player_last_stand\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::on_player_last_stand()"},
	{ "trigger": "gameObjects_dropped\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::gameObjects_dropped()"},
	{ "trigger": "create_carry_object\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::create_carry_object(${1:ownerTeam}, ${2:trigger}, ${3:visuals}, ${4:offset}, ${5:objectiveName}, ${6:hitSound})"},
	{ "trigger": "carry_object_use_think\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::carry_object_use_think()"},
	{ "trigger": "carry_object_prox_think\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::carry_object_prox_think()"},
	{ "trigger": "pickup_object_delay\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::pickup_object_delay(${1:origin})"},
	{ "trigger": "set_picked_up\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::set_picked_up(${1:player})"},
	{ "trigger": "unlink_grenades\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::unlink_grenades()"},
	{ "trigger": "ghost_visuals\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::ghost_visuals()"},
	{ "trigger": "update_carry_object_origin\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::update_carry_object_origin()"},
	{ "trigger": "update_carry_object_objective_origin\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::update_carry_object_objective_origin()"},
	{ "trigger": "give_object\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::give_object(${1:object})"},
	{ "trigger": "move_visuals_to_base\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::move_visuals_to_base()"},
	{ "trigger": "return_home\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::return_home()"},
	{ "trigger": "is_object_away_from_home\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::is_object_away_from_home()"},
	{ "trigger": "set_position\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::set_position(${1:origin}, ${2:angles})"},
	{ "trigger": "set_drop_offset\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::set_drop_offset(${1:height})"},
	{ "trigger": "set_dropped\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::set_dropped()"},
	{ "trigger": "update_icons_and_objective\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::update_icons_and_objective()"},
	{ "trigger": "set_carrier\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::set_carrier(${1:carrier})"},
	{ "trigger": "get_carrier\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::get_carrier()"},
	{ "trigger": "clear_carrier\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::clear_carrier()"},
	{ "trigger": "is_touching_any_trigger\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::is_touching_any_trigger(${1:triggers}, ${2:minZ}, ${3:maxZ})"},
	{ "trigger": "is_touching_any_trigger_key_value\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::is_touching_any_trigger_key_value(${1:value}, ${2:key}, ${3:minZ}, ${4:maxZ})"},
	{ "trigger": "should_be_reset\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::should_be_reset(${1:minZ}, ${2:maxZ}, ${3:testHurtTriggers})"},
	{ "trigger": "pickup_timeout\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::pickup_timeout(${1:minZ}, ${2:maxZ})"},
	{ "trigger": "take_object\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::take_object(${1:object})"},
	{ "trigger": "wait_take_carry_weapon\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::wait_take_carry_weapon(${1:weapon})"},
	{ "trigger": "take_carry_weapon_on_death\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::take_carry_weapon_on_death(${1:weapon})"},
	{ "trigger": "take_carry_weapon\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::take_carry_weapon(${1:weapon})"},
	{ "trigger": "track_carrier\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::track_carrier(${1:object})"},
	{ "trigger": "manual_drop_think\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::manual_drop_think()"},
	{ "trigger": "create_use_object\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::create_use_object(${1:ownerTeam}, ${2:trigger}, ${3:visuals}, ${4:offset}, ${5:objectiveName}, ${6:allowInitialHoldDelay = false}, ${7:allowWeaponCyclingDuringHold = false})"},
	{ "trigger": "Sets this use object to require carry object\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::Sets this use object to require carry object(${1:s})"},
	{ "trigger": "set_key_object\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::set_key_object(${1:object})"},
	{ "trigger": "Checks if player is carrying key object\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::Checks if player is carrying key object(${1:s})"},
	{ "trigger": "has_key_object\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::has_key_object(${1:use})"},
	{ "trigger": "use_object_use_think\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::use_object_use_think(${1:disableInitialHoldDelay}, ${2:disableWeaponCyclingDuringHold})"},
	{ "trigger": "use_object_onUse\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::use_object_onUse(${1:player})"},
	{ "trigger": "get_earliest_claim_player\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::get_earliest_claim_player()"},
	{ "trigger": "use_object_prox_think\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::use_object_prox_think()"},
	{ "trigger": "use_object_locked_for_team\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::use_object_locked_for_team(${1:team})"},
	{ "trigger": "can_claim\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::can_claim(${1:player})"},
	{ "trigger": "prox_trigger_think\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::prox_trigger_think(${1:\"proximity\" only})"},
	{ "trigger": "prox_trigger_think\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::prox_trigger_think()"},
	{ "trigger": "is_excluded\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::is_excluded(${1:player})"},
	{ "trigger": "clear_progress\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::clear_progress()"},
	{ "trigger": "set_claim_team\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::set_claim_team(${1:\"proximity\" only})"},
	{ "trigger": "set_claim_team\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::set_claim_team(${1:newTeam})"},
	{ "trigger": "get_claim_team\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::get_claim_team()"},
	{ "trigger": "continue_trigger_touch_think\t#using scripts\\shared\\gameobjects_shared; self == player", "contents": "gameobjects::continue_trigger_touch_think(${1:team}, ${2:object})"},
	{ "trigger": "trigger_touch_think\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::trigger_touch_think(${1:\"proximity\" only})"},
	{ "trigger": "trigger_touch_think\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::trigger_touch_think(${1:object})"},
	{ "trigger": "update_prox_bar\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::update_prox_bar(${1:\"proximity\" only})"},
	{ "trigger": "update_prox_bar\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::update_prox_bar(${1:object}, ${2:forceRemove})"},
	{ "trigger": "get_num_touching_except_team\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::get_num_touching_except_team(${1:ignoreTeam})"},
	{ "trigger": "update_use_rate\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::update_use_rate(${1:\"proximity\" only})"},
	{ "trigger": "update_use_rate\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::update_use_rate()"},
	{ "trigger": "use_hold_think\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::use_hold_think(${1:player}, ${2:disableWeaponCyclingDuringHold})"},
	{ "trigger": "WaitThenFreezePlayerControlsIfGameEndedStill\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::WaitThenFreezePlayerControlsIfGameEndedStill(${1:wait_time = 1.0})"},
	{ "trigger": "take_use_weapon\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::take_use_weapon(${1:useWeapon})"},
	{ "trigger": "continue_hold_think_loop\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::continue_hold_think_loop(${1:player}, ${2:waitForWeapon}, ${3:timedOut}, ${4:useTime})"},
	{ "trigger": "update_current_progress\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::update_current_progress()"},
	{ "trigger": "use_hold_think_loop\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::use_hold_think_loop(${1:player})"},
	{ "trigger": "personal_use_bar\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::personal_use_bar(${1:object})"},
	{ "trigger": "update_trigger\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::update_trigger()"},
	{ "trigger": "update_objective\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::update_objective()"},
	{ "trigger": "update_world_icons\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::update_world_icons()"},
	{ "trigger": "update_world_icon\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::update_world_icon(${1:relativeTeam}, ${2:showIcon})"},
	{ "trigger": "update_compass_icons\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::update_compass_icons()"},
	{ "trigger": "update_compass_icon\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::update_compass_icon(${1:relativeTeam}, ${2:showIcon})"},
	{ "trigger": "hide_waypoint\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::hide_waypoint(${1:e_player})"},
	{ "trigger": "show_waypoint\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::show_waypoint(${1:e_player})"},
	{ "trigger": "should_ping_object\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::should_ping_object(${1:relativeTeam})"},
	{ "trigger": "get_update_teams\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::get_update_teams(${1:relativeTeam})"},
	{ "trigger": "should_show_compass_due_to_radar\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::should_show_compass_due_to_radar(${1:team})"},
	{ "trigger": "update_visibility_according_to_radar\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::update_visibility_according_to_radar()"},
	{ "trigger": "set_owner_team\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::set_owner_team(${1:team})"},
	{ "trigger": "get_owner_team\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::get_owner_team()"},
	{ "trigger": "set_decay_time\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::set_decay_time(${1:time})"},
	{ "trigger": "set_use_time\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::set_use_time(${1:time})"},
	{ "trigger": "set_use_text\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::set_use_text(${1:text})"},
	{ "trigger": "set_team_use_time\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::set_team_use_time(${1:relativeTeam}, ${2:time})"},
	{ "trigger": "set_team_use_text\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::set_team_use_text(${1:relativeTeam}, ${2:text})"},
	{ "trigger": "set_use_hint_text\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::set_use_hint_text(${1:text})"},
	{ "trigger": "allow_carry\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::allow_carry(${1:relativeTeam})"},
	{ "trigger": "allow_use\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::allow_use(${1:relativeTeam})"},
	{ "trigger": "set_visible_team\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::set_visible_team(${1:relativeTeam})"},
	{ "trigger": "set_model_visibility\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::set_model_visibility(${1:visibility})"},
	{ "trigger": "make_solid\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::make_solid()"},
	{ "trigger": "set_carrier_visible\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::set_carrier_visible(${1:relativeTeam})"},
	{ "trigger": "set_can_use\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::set_can_use(${1:relativeTeam})"},
	{ "trigger": "set_2d_icon\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::set_2d_icon(${1:relativeTeam}, ${2:shader})"},
	{ "trigger": "set_3d_icon\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::set_3d_icon(${1:relativeTeam}, ${2:shader})"},
	{ "trigger": "set_3d_icon_color\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::set_3d_icon_color(${1:relativeTeam}, ${2:v_color}, ${3:alpha})"},
	{ "trigger": "set_objective_color\t#using scripts\\shared\\gameobjects_shared; self = gameobject", "contents": "gameobjects::set_objective_color(${1:relativeTeam}, ${2:v_color}, ${3:alpha = 1})"},
	{ "trigger": "set_objective_entity\t#using scripts\\shared\\gameobjects_shared; self = gameobject", "contents": "gameobjects::set_objective_entity(${1:entity})"},
	{ "trigger": "get_objective_ids\t#using scripts\\shared\\gameobjects_shared; self = gameobject", "contents": "gameobjects::get_objective_ids(${1:str_team})"},
	{ "trigger": "hide_icon_distance_and_los\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::hide_icon_distance_and_los(${1:v_color}, ${2:hide_distance}, ${3:los_check}, ${4:ignore_ent})"},
	{ "trigger": "gameobject_is_player_looking_at\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::gameobject_is_player_looking_at(${1:origin}, ${2:dot}, ${3:do_trace}, ${4:ignore_ent}, ${5:ignore_trace_distance})"},
	{ "trigger": "hide_icons\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::hide_icons(${1:team})"},
	{ "trigger": "show_icons\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::show_icons(${1:team})"},
	{ "trigger": "set_3d_use_icon\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::set_3d_use_icon(${1:relativeTeam}, ${2:shader})"},
	{ "trigger": "set_3d_is_waypoint\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::set_3d_is_waypoint(${1:relativeTeam}, ${2:waypoint})"},
	{ "trigger": "set_carry_icon\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::set_carry_icon(${1:shader})"},
	{ "trigger": "set_visible_carrier_model\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::set_visible_carrier_model(${1:visibleModel})"},
	{ "trigger": "get_visible_carrier_model\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::get_visible_carrier_model()"},
	{ "trigger": "destroy_object\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::destroy_object(${1:deleteTrigger}, ${2:forceHide}, ${3:b_connect_paths = false})"},
	{ "trigger": "disable_object\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::disable_object(${1:forceHide})"},
	{ "trigger": "enable_object\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::enable_object(${1:forceShow})"},
	{ "trigger": "get_relative_team\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::get_relative_team(${1:team})"},
	{ "trigger": "is_friendly_team\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::is_friendly_team(${1:team})"},
	{ "trigger": "can_interact_with\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::can_interact_with(${1:player})"},
	{ "trigger": "is_team\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::is_team(${1:team})"},
	{ "trigger": "is_relative_team\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::is_relative_team(${1:relativeTeam})"},
	{ "trigger": "get_enemy_team\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::get_enemy_team(${1:team})"},
	{ "trigger": "get_next_obj_id\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::get_next_obj_id()"},
	{ "trigger": "release_obj_id\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::release_obj_id(${1:objID})"},
	{ "trigger": "release_all_objective_ids\t#using scripts\\shared\\gameobjects_shared; self = gameobject", "contents": "gameobjects::release_all_objective_ids()"},
	{ "trigger": "get_label\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::get_label()"},
	{ "trigger": "can_contest_claim\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::can_contest_claim(${1:enabled})"},
	{ "trigger": "set_flags\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::set_flags(${1:flags})"},
	{ "trigger": "get_flags\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::get_flags(${1:flags})"},
	{ "trigger": "create_pack_object\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::create_pack_object(${1:ownerTeam}, ${2:trigger}, ${3:visuals}, ${4:offset}, ${5:objectiveName})"},
	{ "trigger": "give_pack_object\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::give_pack_object(${1:object})"},
	{ "trigger": "get_packIcon_offset\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::get_packIcon_offset(${1:index})"},
	{ "trigger": "set_pack_icon\t#using scripts\\shared\\gameobjects_shared;", "contents": "gameobjects::set_pack_icon(${1:shader})"},
	{ "trigger": "on_player_spawned\t#using scripts\\shared\\weapons\\_tacticalinsertion;", "contents": "tacticalinsertion::on_player_spawned()"},
	{ "trigger": "isTacSpawnTouchingCrates\t#using scripts\\shared\\weapons\\_tacticalinsertion;", "contents": "tacticalinsertion::isTacSpawnTouchingCrates(${1:origin}, ${2:angles})"},
	{ "trigger": "overrideSpawn\t#using scripts\\shared\\weapons\\_tacticalinsertion;", "contents": "tacticalinsertion::overrideSpawn(${1:isPredictedSpawn})"},
	{ "trigger": "waitAndDelete\t#using scripts\\shared\\weapons\\_tacticalinsertion;", "contents": "tacticalinsertion::waitAndDelete(${1:time})"},
	{ "trigger": "watch\t#using scripts\\shared\\weapons\\_tacticalinsertion;", "contents": "tacticalinsertion::watch(${1:player})"},
	{ "trigger": "watchUseTrigger\t#using scripts\\shared\\weapons\\_tacticalinsertion;", "contents": "tacticalinsertion::watchUseTrigger(${1:trigger}, ${2:callback}, ${3:playerSoundOnUse}, ${4:npcSoundOnUse})"},
	{ "trigger": "watchDisconnect\t#using scripts\\shared\\weapons\\_tacticalinsertion;", "contents": "tacticalinsertion::watchDisconnect()"},
	{ "trigger": "destroy_tactical_insertion\t#using scripts\\shared\\weapons\\_tacticalinsertion;", "contents": "tacticalinsertion::destroy_tactical_insertion(${1:attacker})"},
	{ "trigger": "fizzle\t#using scripts\\shared\\weapons\\_tacticalinsertion;", "contents": "tacticalinsertion::fizzle(${1:attacker})"},
	{ "trigger": "pickUp\t#using scripts\\shared\\weapons\\_tacticalinsertion;", "contents": "tacticalinsertion::pickUp(${1:attacker})"},
	{ "trigger": "spawnTacticalInsertion\t#using scripts\\shared\\weapons\\_tacticalinsertion; self == player", "contents": "tacticalinsertion::spawnTacticalInsertion()"},
	{ "trigger": "cancel_button_think\t#using scripts\\shared\\weapons\\_tacticalinsertion;", "contents": "tacticalinsertion::cancel_button_think()"},
	{ "trigger": "cancelTackInsertionButton\t#using scripts\\shared\\weapons\\_tacticalinsertion;", "contents": "tacticalinsertion::cancelTackInsertionButton()"},
	{ "trigger": "cancel_button_press\t#using scripts\\shared\\weapons\\_tacticalinsertion;", "contents": "tacticalinsertion::cancel_button_press()"},
	{ "trigger": "cancel_text_create\t#using scripts\\shared\\weapons\\_tacticalinsertion;", "contents": "tacticalinsertion::cancel_text_create()"},
	{ "trigger": "getTacticalInsertions\t#using scripts\\shared\\weapons\\_tacticalinsertion;", "contents": "tacticalinsertion::getTacticalInsertions()"},
	{ "trigger": "tacticalInsertionDestroyedByTrophySystem\t#using scripts\\shared\\weapons\\_tacticalinsertion; self == tac insert", "contents": "tacticalinsertion::tacticalInsertionDestroyedByTrophySystem(${1:attacker}, ${2:trophySystem})"},
	{ "trigger": "begin_other_grenade_tracking\t#using scripts\\shared\\weapons\\_tacticalinsertion;", "contents": "tacticalinsertion::begin_other_grenade_tracking()"},
	{ "trigger": "CopyDestructState\t#using scripts\\shared\\ai\\systems\\destructible_character;", "contents": "DestructServerUtils::CopyDestructState(${1:originalEntity}, ${2:newEntity})"},
	{ "trigger": "enable_sleight_of_hand_perk_for_level\t#using scripts\\zm\\_zm_perk_sleight_of_hand;", "contents": "zm_perk_sleight_of_hand::enable_sleight_of_hand_perk_for_level()"},
	{ "trigger": "sleight_of_hand_precache\t#using scripts\\zm\\_zm_perk_sleight_of_hand;", "contents": "zm_perk_sleight_of_hand::sleight_of_hand_precache()"},
	{ "trigger": "sleight_of_hand_register_clientfield\t#using scripts\\zm\\_zm_perk_sleight_of_hand;", "contents": "zm_perk_sleight_of_hand::sleight_of_hand_register_clientfield()"},
	{ "trigger": "sleight_of_hand_set_clientfield\t#using scripts\\zm\\_zm_perk_sleight_of_hand;", "contents": "zm_perk_sleight_of_hand::sleight_of_hand_set_clientfield(${1:state})"},
	{ "trigger": "sleight_of_hand_perk_machine_setup\t#using scripts\\zm\\_zm_perk_sleight_of_hand;", "contents": "zm_perk_sleight_of_hand::sleight_of_hand_perk_machine_setup(${1:use_trigger}, ${2:perk_machine}, ${3:bump_trigger}, ${4:collision})"},
	{ "trigger": "get_gadget_name\t#using scripts\\shared\\abilities\\gadgets\\_gadget_turret_deploy;", "contents": "_gadget_turret_deploy::get_gadget_name()"},
	{ "trigger": "get_gadget_recover_name\t#using scripts\\shared\\abilities\\gadgets\\_gadget_turret_deploy;", "contents": "_gadget_turret_deploy::get_gadget_recover_name()"},
	{ "trigger": "turret_precache\t#using scripts\\shared\\abilities\\gadgets\\_gadget_turret_deploy;", "contents": "_gadget_turret_deploy::turret_precache()"},
	{ "trigger": "gadget_turret_deploy_is_inuse\t#using scripts\\shared\\abilities\\gadgets\\_gadget_turret_deploy;", "contents": "_gadget_turret_deploy::gadget_turret_deploy_is_inuse(${1:slot})"},
	{ "trigger": "gadget_turret_deploy_is_flickering\t#using scripts\\shared\\abilities\\gadgets\\_gadget_turret_deploy;", "contents": "_gadget_turret_deploy::gadget_turret_deploy_is_flickering(${1:slot})"},
	{ "trigger": "gadget_turret_deploy_on_flicker\t#using scripts\\shared\\abilities\\gadgets\\_gadget_turret_deploy;", "contents": "_gadget_turret_deploy::gadget_turret_deploy_on_flicker(${1:slot})"},
	{ "trigger": "gadget_turret_deploy_on_give\t#using scripts\\shared\\abilities\\gadgets\\_gadget_turret_deploy;", "contents": "_gadget_turret_deploy::gadget_turret_deploy_on_give(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_turret_deploy_on_take\t#using scripts\\shared\\abilities\\gadgets\\_gadget_turret_deploy;", "contents": "_gadget_turret_deploy::gadget_turret_deploy_on_take(${1:slot})"},
	{ "trigger": "gadget_turret_deploy_on_connect\t#using scripts\\shared\\abilities\\gadgets\\_gadget_turret_deploy;", "contents": "_gadget_turret_deploy::gadget_turret_deploy_on_connect()"},
	{ "trigger": "gadget_turret_deploy_failed_activate\t#using scripts\\shared\\abilities\\gadgets\\_gadget_turret_deploy;", "contents": "_gadget_turret_deploy::gadget_turret_deploy_failed_activate()"},
	{ "trigger": "gadget_turret_deploy_on\t#using scripts\\shared\\abilities\\gadgets\\_gadget_turret_deploy;", "contents": "_gadget_turret_deploy::gadget_turret_deploy_on(${1:slot})"},
	{ "trigger": "can_recover_turret\t#using scripts\\shared\\abilities\\gadgets\\_gadget_turret_deploy;", "contents": "_gadget_turret_deploy::can_recover_turret(${1:turret})"},
	{ "trigger": "button_pressed\t#using scripts\\shared\\abilities\\gadgets\\_gadget_turret_deploy;", "contents": "_gadget_turret_deploy::button_pressed(${1:slot})"},
	{ "trigger": "watch_turret_recovery\t#using scripts\\shared\\abilities\\gadgets\\_gadget_turret_deploy;", "contents": "_gadget_turret_deploy::watch_turret_recovery(${1:slot})"},
	{ "trigger": "gadget_turret_deploy_off\t#using scripts\\shared\\abilities\\gadgets\\_gadget_turret_deploy;", "contents": "_gadget_turret_deploy::gadget_turret_deploy_off(${1:slot})"},
	{ "trigger": "set_player_turret\t#using scripts\\shared\\abilities\\gadgets\\_gadget_turret_deploy;", "contents": "_gadget_turret_deploy::set_player_turret(${1:turret})"},
	{ "trigger": "switch_player_gadget\t#using scripts\\shared\\abilities\\gadgets\\_gadget_turret_deploy;", "contents": "_gadget_turret_deploy::switch_player_gadget()"},
	{ "trigger": "watch_player_death\t#using scripts\\shared\\abilities\\gadgets\\_gadget_turret_deploy;", "contents": "_gadget_turret_deploy::watch_player_death(${1:owner})"},
	{ "trigger": "drop_to_ground\t#using scripts\\shared\\abilities\\gadgets\\_gadget_turret_deploy;", "contents": "_gadget_turret_deploy::drop_to_ground()"},
	{ "trigger": "deploy_turret\t#using scripts\\shared\\abilities\\gadgets\\_gadget_turret_deploy;", "contents": "_gadget_turret_deploy::deploy_turret(${1:slot})"},
	{ "trigger": "turret_update_damage\t#using scripts\\shared\\abilities\\gadgets\\_gadget_turret_deploy;", "contents": "_gadget_turret_deploy::turret_update_damage()"},
	{ "trigger": "setup_turret_damage_states\t#using scripts\\shared\\abilities\\gadgets\\_gadget_turret_deploy;", "contents": "_gadget_turret_deploy::setup_turret_damage_states()"},
	{ "trigger": "turret_drain_power\t#using scripts\\shared\\abilities\\gadgets\\_gadget_turret_deploy;", "contents": "_gadget_turret_deploy::turret_drain_power()"},
	{ "trigger": "turret_owner_power_callback\t#using scripts\\shared\\abilities\\gadgets\\_gadget_turret_deploy;", "contents": "_gadget_turret_deploy::turret_owner_power_callback(${1:turret}, ${2:delta}, ${3:use = TURRET_BURST_POWER_USE})"},
	{ "trigger": "keep_power_constant\t#using scripts\\shared\\abilities\\gadgets\\_gadget_turret_deploy;", "contents": "_gadget_turret_deploy::keep_power_constant()"},
	{ "trigger": "turret_delete\t#using scripts\\shared\\abilities\\gadgets\\_gadget_turret_deploy;", "contents": "_gadget_turret_deploy::turret_delete(${1:time}, ${2:explode})"},
	{ "trigger": "turret_can_be_hacked\t#using scripts\\shared\\abilities\\gadgets\\_gadget_turret_deploy;", "contents": "_gadget_turret_deploy::turret_can_be_hacked(${1:player})"},
	{ "trigger": "turret_hack_start\t#using scripts\\shared\\abilities\\gadgets\\_gadget_turret_deploy;", "contents": "_gadget_turret_deploy::turret_hack_start(${1:hacker})"},
	{ "trigger": "turret_hack_fail\t#using scripts\\shared\\abilities\\gadgets\\_gadget_turret_deploy;", "contents": "_gadget_turret_deploy::turret_hack_fail(${1:hacker})"},
	{ "trigger": "turret_hacked\t#using scripts\\shared\\abilities\\gadgets\\_gadget_turret_deploy;", "contents": "_gadget_turret_deploy::turret_hacked(${1:hacker})"},
	{ "trigger": "wait_and_clear_hack\t#using scripts\\shared\\abilities\\gadgets\\_gadget_turret_deploy;", "contents": "_gadget_turret_deploy::wait_and_clear_hack()"},
	{ "trigger": "persistent_carpenter_ability_check\t#using scripts\\zm\\_zm_pers_upgrades;", "contents": "zm_pers_upgrades::persistent_carpenter_ability_check()"},
	{ "trigger": "gadget_overdrive_is_inuse\t#using scripts\\shared\\abilities\\gadgets\\_gadget_overdrive;", "contents": "_gadget_overdrive::gadget_overdrive_is_inuse(${1:slot})"},
	{ "trigger": "gadget_overdrive_is_flickering\t#using scripts\\shared\\abilities\\gadgets\\_gadget_overdrive;", "contents": "_gadget_overdrive::gadget_overdrive_is_flickering(${1:slot})"},
	{ "trigger": "gadget_overdrive_on_flicker\t#using scripts\\shared\\abilities\\gadgets\\_gadget_overdrive;", "contents": "_gadget_overdrive::gadget_overdrive_on_flicker(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_overdrive_on_give\t#using scripts\\shared\\abilities\\gadgets\\_gadget_overdrive;", "contents": "_gadget_overdrive::gadget_overdrive_on_give(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_overdrive_on_take\t#using scripts\\shared\\abilities\\gadgets\\_gadget_overdrive;", "contents": "_gadget_overdrive::gadget_overdrive_on_take(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_overdrive_on_connect\t#using scripts\\shared\\abilities\\gadgets\\_gadget_overdrive;", "contents": "_gadget_overdrive::gadget_overdrive_on_connect()"},
	{ "trigger": "gadget_overdrive_on\t#using scripts\\shared\\abilities\\gadgets\\_gadget_overdrive;", "contents": "_gadget_overdrive::gadget_overdrive_on(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_overdrive_off\t#using scripts\\shared\\abilities\\gadgets\\_gadget_overdrive;", "contents": "_gadget_overdrive::gadget_overdrive_off(${1:slot}, ${2:weapon})"},
	{ "trigger": "on_connect\t#using scripts\\zm\\_zm_daily_challenges; self = player", "contents": "zm_daily_challenges::on_connect()"},
	{ "trigger": "on_spawned\t#using scripts\\zm\\_zm_daily_challenges;", "contents": "zm_daily_challenges::on_spawned()"},
	{ "trigger": "round_tracking\t#using scripts\\zm\\_zm_daily_challenges; self = player", "contents": "zm_daily_challenges::round_tracking()"},
	{ "trigger": "death_check_for_challenge_updates\t#using scripts\\zm\\_zm_daily_challenges; self = zombie", "contents": "zm_daily_challenges::death_check_for_challenge_updates(${1:e_attacker})"},
	{ "trigger": "spent_points_tracking\t#using scripts\\zm\\_zm_daily_challenges;", "contents": "zm_daily_challenges::spent_points_tracking()"},
	{ "trigger": "earned_points_tracking\t#using scripts\\zm\\_zm_daily_challenges;", "contents": "zm_daily_challenges::earned_points_tracking()"},
	{ "trigger": "challenge_ingame_time_tracking\t#using scripts\\zm\\_zm_daily_challenges;", "contents": "zm_daily_challenges::challenge_ingame_time_tracking()"},
	{ "trigger": "increment_windows_repaired\t#using scripts\\zm\\_zm_daily_challenges; self = player", "contents": "zm_daily_challenges::increment_windows_repaired(${1:s_barrier})"},
	{ "trigger": "increment_magic_box\t#using scripts\\zm\\_zm_daily_challenges; self = player", "contents": "zm_daily_challenges::increment_magic_box()"},
	{ "trigger": "increment_nuked_zombie\t#using scripts\\zm\\_zm_daily_challenges;", "contents": "zm_daily_challenges::increment_nuked_zombie()"},
	{ "trigger": "perk_purchase_tracking\t#using scripts\\zm\\_zm_daily_challenges; self = player", "contents": "zm_daily_challenges::perk_purchase_tracking()"},
	{ "trigger": "perk_drink_tracking\t#using scripts\\zm\\_zm_daily_challenges; self = player", "contents": "zm_daily_challenges::perk_drink_tracking()"},
	{ "trigger": "debug_print\t#using scripts\\zm\\_zm_daily_challenges;", "contents": "zm_daily_challenges::debug_print(${1:str_line})"},
	{ "trigger": "on_challenge_complete\t#using scripts\\zm\\_zm_daily_challenges;", "contents": "zm_daily_challenges::on_challenge_complete(${1:params})"},
	{ "trigger": "is_daily_challenge\t#using scripts\\zm\\_zm_daily_challenges;", "contents": "zm_daily_challenges::is_daily_challenge(${1:n_challenge_index})"},
	{ "trigger": "freezePlayerForRoundEnd\t#using scripts\\zm\\gametypes\\_globallogic_player;", "contents": "globallogic_player::freezePlayerForRoundEnd()"},
	{ "trigger": "Callback_PlayerConnect\t#using scripts\\zm\\gametypes\\_globallogic_player;", "contents": "globallogic_player::Callback_PlayerConnect()"},
	{ "trigger": "spectate_player_watcher\t#using scripts\\zm\\gametypes\\_globallogic_player;", "contents": "globallogic_player::spectate_player_watcher()"},
	{ "trigger": "Callback_PlayerMigrated\t#using scripts\\zm\\gametypes\\_globallogic_player;", "contents": "globallogic_player::Callback_PlayerMigrated()"},
	{ "trigger": "inform_clientvm_of_migration\t#using scripts\\zm\\gametypes\\_globallogic_player;", "contents": "globallogic_player::inform_clientvm_of_migration()"},
	{ "trigger": "ArrayToString\t#using scripts\\zm\\gametypes\\_globallogic_player;", "contents": "globallogic_player::ArrayToString(${1:inputArray})"},
	{ "trigger": "recordZMEndGameComScoreEventForPlayer\t#using scripts\\zm\\gametypes\\_globallogic_player;", "contents": "globallogic_player::recordZMEndGameComScoreEventForPlayer(${1:player}, ${2:result})"},
	{ "trigger": "Callback_PlayerDisconnect\t#using scripts\\zm\\gametypes\\_globallogic_player;", "contents": "globallogic_player::Callback_PlayerDisconnect()"},
	{ "trigger": "Callback_PlayerMelee\t#using scripts\\zm\\gametypes\\_globallogic_player;", "contents": "globallogic_player::Callback_PlayerMelee(${1:eAttacker}, ${2:iDamage}, ${3:weapon}, ${4:vOrigin}, ${5:vDir}, ${6:boneIndex}, ${7:shieldHit}, ${8:fromBehind})"},
	{ "trigger": "chooseNextBestNemesis\t#using scripts\\zm\\gametypes\\_globallogic_player;", "contents": "globallogic_player::chooseNextBestNemesis()"},
	{ "trigger": "custom_gamemodes_modified_damage\t#using scripts\\zm\\gametypes\\_globallogic_player;", "contents": "globallogic_player::custom_gamemodes_modified_damage(${1:victim}, ${2:eAttacker}, ${3:iDamage}, ${4:sMeansOfDeath}, ${5:weapon}, ${6:eInflictor}, ${7:sHitLoc})"},
	{ "trigger": "figureOutAttacker\t#using scripts\\zm\\gametypes\\_globallogic_player;", "contents": "globallogic_player::figureOutAttacker(${1:eAttacker})"},
	{ "trigger": "figureOutWeapon\t#using scripts\\zm\\gametypes\\_globallogic_player;", "contents": "globallogic_player::figureOutWeapon(${1:weapon}, ${2:eInflictor})"},
	{ "trigger": "figureOutFriendlyFire\t#using scripts\\zm\\gametypes\\_globallogic_player;", "contents": "globallogic_player::figureOutFriendlyFire(${1:victim})"},
	{ "trigger": "isPlayerImmuneToKillstreak\t#using scripts\\zm\\gametypes\\_globallogic_player;", "contents": "globallogic_player::isPlayerImmuneToKillstreak(${1:eAttacker}, ${2:weapon})"},
	{ "trigger": "Callback_PlayerDamage\t#using scripts\\zm\\gametypes\\_globallogic_player;", "contents": "globallogic_player::Callback_PlayerDamage(${1:eInflictor}, ${2:eAttacker}, ${3:iDamage}, ${4:iDFlags}, ${5:sMeansOfDeath}, ${6:weapon}, ${7:vPoint}, ${8:vDir}, ${9:sHitLoc}, ${10:psOffsetTime}, ${11:boneIndex})"},
	{ "trigger": "resetAttackerList\t#using scripts\\zm\\gametypes\\_globallogic_player;", "contents": "globallogic_player::resetAttackerList()"},
	{ "trigger": "doDamageFeedback\t#using scripts\\zm\\gametypes\\_globallogic_player;", "contents": "globallogic_player::doDamageFeedback(${1:weapon}, ${2:eInflictor}, ${3:iDamage}, ${4:sMeansOfDeath})"},
	{ "trigger": "isTacticalHitMarker\t#using scripts\\zm\\gametypes\\_globallogic_player;", "contents": "globallogic_player::isTacticalHitMarker(${1:weapon}, ${2:sMeansOfDeath}, ${3:iDamage})"},
	{ "trigger": "doPerkFeedBack\t#using scripts\\zm\\gametypes\\_globallogic_player;", "contents": "globallogic_player::doPerkFeedBack(${1:player}, ${2:weapon}, ${3:sMeansOfDeath}, ${4:eInflictor})"},
	{ "trigger": "isAIKillstreakDamage\t#using scripts\\zm\\gametypes\\_globallogic_player;", "contents": "globallogic_player::isAIKillstreakDamage(${1:weapon}, ${2:eInflictor})"},
	{ "trigger": "finishPlayerDamageWrapper\t#using scripts\\zm\\gametypes\\_globallogic_player;", "contents": "globallogic_player::finishPlayerDamageWrapper(${1:eInflictor}, ${2:eAttacker}, ${3:iDamage}, ${4:iDFlags}, ${5:sMeansOfDeath}, ${6:weapon}, ${7:vPoint}, ${8:vDir}, ${9:sHitLoc}, ${10:vDamageOrigin}, ${11:psOffsetTime}, ${12:boneIndex}, ${13:vSurfaceNormal})"},
	{ "trigger": "allowedAssistWeapon\t#using scripts\\zm\\gametypes\\_globallogic_player;", "contents": "globallogic_player::allowedAssistWeapon(${1:weapon})"},
	{ "trigger": "Callback_PlayerKilled\t#using scripts\\zm\\gametypes\\_globallogic_player;", "contents": "globallogic_player::Callback_PlayerKilled(${1:eInflictor}, ${2:attacker}, ${3:iDamage}, ${4:sMeansOfDeath}, ${5:weapon}, ${6:vDir}, ${7:sHitLoc}, ${8:psOffsetTime}, ${9:deathAnimDuration})"},
	{ "trigger": "updateGlobalBotKilledCounter\t#using scripts\\zm\\gametypes\\_globallogic_player;", "contents": "globallogic_player::updateGlobalBotKilledCounter()"},
	{ "trigger": "WaitTillKillStreakDone\t#using scripts\\zm\\gametypes\\_globallogic_player;", "contents": "globallogic_player::WaitTillKillStreakDone()"},
	{ "trigger": "TeamKillKick\t#using scripts\\zm\\gametypes\\_globallogic_player;", "contents": "globallogic_player::TeamKillKick()"},
	{ "trigger": "TeamKillDelay\t#using scripts\\zm\\gametypes\\_globallogic_player;", "contents": "globallogic_player::TeamKillDelay()"},
	{ "trigger": "ShouldTeamKillKick\t#using scripts\\zm\\gametypes\\_globallogic_player;", "contents": "globallogic_player::ShouldTeamKillKick(${1:teamKillDelay})"},
	{ "trigger": "reduceTeamKillsOverTime\t#using scripts\\zm\\gametypes\\_globallogic_player;", "contents": "globallogic_player::reduceTeamKillsOverTime()"},
	{ "trigger": "IgnoreTeamKills\t#using scripts\\zm\\gametypes\\_globallogic_player;", "contents": "globallogic_player::IgnoreTeamKills(${1:weapon}, ${2:sMeansOfDeath})"},
	{ "trigger": "Callback_PlayerLastStand\t#using scripts\\zm\\gametypes\\_globallogic_player;", "contents": "globallogic_player::Callback_PlayerLastStand(${1:eInflictor}, ${2:attacker}, ${3:iDamage}, ${4:sMeansOfDeath}, ${5:weapon}, ${6:vDir}, ${7:sHitLoc}, ${8:psOffsetTime}, ${9:deathAnimDuration})"},
	{ "trigger": "damageShellshockAndRumble\t#using scripts\\zm\\gametypes\\_globallogic_player;", "contents": "globallogic_player::damageShellshockAndRumble(${1:eAttacker}, ${2:eInflictor}, ${3:weapon}, ${4:sMeansOfDeath}, ${5:iDamage})"},
	{ "trigger": "createDeadBody\t#using scripts\\zm\\gametypes\\_globallogic_player;", "contents": "globallogic_player::createDeadBody(${1:iDamage}, ${2:sMeansOfDeath}, ${3:weapon}, ${4:sHitLoc}, ${5:vDir}, ${6:vAttackerOrigin}, ${7:deathAnimDuration}, ${8:eInflictor}, ${9:ragdoll_jib}, ${10:body})"},
	{ "trigger": "is_explosive_ragdoll\t#using scripts\\zm\\gametypes\\_globallogic_player;", "contents": "globallogic_player::is_explosive_ragdoll(${1:weapon}, ${2:inflictor})"},
	{ "trigger": "start_explosive_ragdoll\t#using scripts\\zm\\gametypes\\_globallogic_player;", "contents": "globallogic_player::start_explosive_ragdoll(${1:dir}, ${2:weapon})"},
	{ "trigger": "notifyConnecting\t#using scripts\\zm\\gametypes\\_globallogic_player;", "contents": "globallogic_player::notifyConnecting()"},
	{ "trigger": "delayStartRagdoll\t#using scripts\\zm\\gametypes\\_globallogic_player;", "contents": "globallogic_player::delayStartRagdoll(${1:ent}, ${2:sHitLoc}, ${3:vDir}, ${4:weapon}, ${5:eInflictor}, ${6:sMeansOfDeath})"},
	{ "trigger": "trackAttackerDamage\t#using scripts\\zm\\gametypes\\_globallogic_player;", "contents": "globallogic_player::trackAttackerDamage(${1:eAttacker}, ${2:iDamage}, ${3:sMeansOfDeath}, ${4:weapon})"},
	{ "trigger": "giveAttackerAndInflictorOwnerAssist\t#using scripts\\zm\\gametypes\\_globallogic_player;", "contents": "globallogic_player::giveAttackerAndInflictorOwnerAssist(${1:eAttacker}, ${2:eInflictor}, ${3:iDamage}, ${4:sMeansOfDeath}, ${5:weapon})"},
	{ "trigger": "updateMeansOfDeath\t#using scripts\\zm\\gametypes\\_globallogic_player;", "contents": "globallogic_player::updateMeansOfDeath(${1:weapon}, ${2:sMeansOfDeath})"},
	{ "trigger": "updateAttacker\t#using scripts\\zm\\gametypes\\_globallogic_player;", "contents": "globallogic_player::updateAttacker(${1:attacker}, ${2:weapon})"},
	{ "trigger": "updateInflictor\t#using scripts\\zm\\gametypes\\_globallogic_player;", "contents": "globallogic_player::updateInflictor(${1:eInflictor})"},
	{ "trigger": "updateWeapon\t#using scripts\\zm\\gametypes\\_globallogic_player;", "contents": "globallogic_player::updateWeapon(${1:eInflictor}, ${2:weapon})"},
	{ "trigger": "getClosestKillcamEntity\t#using scripts\\zm\\gametypes\\_globallogic_player;", "contents": "globallogic_player::getClosestKillcamEntity(${1:attacker}, ${2:killCamEntities}, ${3:depth})"},
	{ "trigger": "getKillcamEntity\t#using scripts\\zm\\gametypes\\_globallogic_player;", "contents": "globallogic_player::getKillcamEntity(${1:attacker}, ${2:eInflictor}, ${3:weapon})"},
	{ "trigger": "playKillBattleChatter\t#using scripts\\zm\\gametypes\\_globallogic_player;", "contents": "globallogic_player::playKillBattleChatter(${1:attacker}, ${2:weapon}, ${3:victim})"},
	{ "trigger": "recordActivePlayersEndGameMatchRecordStats\t#using scripts\\zm\\gametypes\\_globallogic_player;", "contents": "globallogic_player::recordActivePlayersEndGameMatchRecordStats()"},
	{ "trigger": "set\t#using scripts\\shared\\flagsys_shared;", "contents": "flagsys::set(${1:str_flag})"},
	{ "trigger": "set_for_time\t#using scripts\\shared\\flagsys_shared;", "contents": "flagsys::set_for_time(${1:n_time}, ${2:str_flag})"},
	{ "trigger": "clear\t#using scripts\\shared\\flagsys_shared;", "contents": "flagsys::clear(${1:str_flag})"},
	{ "trigger": "set_val\t#using scripts\\shared\\flagsys_shared;", "contents": "flagsys::set_val(${1:str_flag}, ${2:b_val})"},
	{ "trigger": "toggle\t#using scripts\\shared\\flagsys_shared;", "contents": "flagsys::toggle(${1:str_flag})"},
	{ "trigger": "get\t#using scripts\\shared\\flagsys_shared;", "contents": "flagsys::get(${1:str_flag})"},
	{ "trigger": "wait_till\t#using scripts\\shared\\flagsys_shared;", "contents": "flagsys::wait_till(${1:str_flag})"},
	{ "trigger": "wait_till_timeout\t#using scripts\\shared\\flagsys_shared;", "contents": "flagsys::wait_till_timeout(${1:n_timeout}, ${2:str_flag})"},
	{ "trigger": "wait_till_all\t#using scripts\\shared\\flagsys_shared;", "contents": "flagsys::wait_till_all(${1:a_flags})"},
	{ "trigger": "wait_till_all_timeout\t#using scripts\\shared\\flagsys_shared;", "contents": "flagsys::wait_till_all_timeout(${1:n_timeout}, ${2:a_flags})"},
	{ "trigger": "wait_till_any\t#using scripts\\shared\\flagsys_shared;", "contents": "flagsys::wait_till_any(${1:a_flags})"},
	{ "trigger": "wait_till_any_timeout\t#using scripts\\shared\\flagsys_shared;", "contents": "flagsys::wait_till_any_timeout(${1:n_timeout}, ${2:a_flags})"},
	{ "trigger": "wait_till_clear\t#using scripts\\shared\\flagsys_shared;", "contents": "flagsys::wait_till_clear(${1:str_flag})"},
	{ "trigger": "wait_till_clear_timeout\t#using scripts\\shared\\flagsys_shared;", "contents": "flagsys::wait_till_clear_timeout(${1:n_timeout}, ${2:str_flag})"},
	{ "trigger": "wait_till_clear_all\t#using scripts\\shared\\flagsys_shared;", "contents": "flagsys::wait_till_clear_all(${1:a_flags})"},
	{ "trigger": "wait_till_clear_all_timeout\t#using scripts\\shared\\flagsys_shared;", "contents": "flagsys::wait_till_clear_all_timeout(${1:n_timeout}, ${2:a_flags})"},
	{ "trigger": "wait_till_clear_any\t#using scripts\\shared\\flagsys_shared;", "contents": "flagsys::wait_till_clear_any(${1:a_flags})"},
	{ "trigger": "wait_till_clear_any_timeout\t#using scripts\\shared\\flagsys_shared;", "contents": "flagsys::wait_till_clear_any_timeout(${1:n_timeout}, ${2:a_flags})"},
	{ "trigger": "delete\t#using scripts\\shared\\flagsys_shared;", "contents": "flagsys::delete(${1:str_flag})"},
	{ "trigger": "script_flag_wait\t#using scripts\\shared\\flagsys_shared;", "contents": "flagsys::script_flag_wait()"},
	{ "trigger": "watch_bolt_detonation\t#using scripts\\shared\\weapons\\_sticky_grenade; self == explosive_bolt entity", "contents": "sticky_grenade::watch_bolt_detonation(${1:owner})"},
	{ "trigger": "gadget_immolation_is_inuse\t#using scripts\\shared\\abilities\\gadgets\\_gadget_immolation;", "contents": "_gadget_immolation::gadget_immolation_is_inuse(${1:slot})"},
	{ "trigger": "gadget_immolation_is_flickering\t#using scripts\\shared\\abilities\\gadgets\\_gadget_immolation;", "contents": "_gadget_immolation::gadget_immolation_is_flickering(${1:slot})"},
	{ "trigger": "gadget_immolation_on_flicker\t#using scripts\\shared\\abilities\\gadgets\\_gadget_immolation;", "contents": "_gadget_immolation::gadget_immolation_on_flicker(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_immolation_on_give\t#using scripts\\shared\\abilities\\gadgets\\_gadget_immolation;", "contents": "_gadget_immolation::gadget_immolation_on_give(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_immolation_on_take\t#using scripts\\shared\\abilities\\gadgets\\_gadget_immolation;", "contents": "_gadget_immolation::gadget_immolation_on_take(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_immolation_on_connect\t#using scripts\\shared\\abilities\\gadgets\\_gadget_immolation;", "contents": "_gadget_immolation::gadget_immolation_on_connect()"},
	{ "trigger": "gadget_immolation_on\t#using scripts\\shared\\abilities\\gadgets\\_gadget_immolation;", "contents": "_gadget_immolation::gadget_immolation_on(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_immolation_off\t#using scripts\\shared\\abilities\\gadgets\\_gadget_immolation;", "contents": "_gadget_immolation::gadget_immolation_off(${1:slot}, ${2:weapon})"},
	{ "trigger": "gadget_immolation_is_primed\t#using scripts\\shared\\abilities\\gadgets\\_gadget_immolation;", "contents": "_gadget_immolation::gadget_immolation_is_primed(${1:slot}, ${2:weapon})"},
	{ "trigger": "register\t#using scripts\\shared\\clientfield_shared;", "contents": "clientfield::register(${1:str_pool_name}, ${2:str_name}, ${3:n_version}, ${4:n_bits}, ${5:str_type})"},
	{ "trigger": "set\t#using scripts\\shared\\clientfield_shared;", "contents": "clientfield::set(${1:str_field_name}, ${2:n_value})"},
	{ "trigger": "set_to_player\t#using scripts\\shared\\clientfield_shared;", "contents": "clientfield::set_to_player(${1:str_field_name}, ${2:n_value})"},
	{ "trigger": "set_player_uimodel\t#using scripts\\shared\\clientfield_shared;", "contents": "clientfield::set_player_uimodel(${1:str_field_name}, ${2:n_value})"},
	{ "trigger": "get_player_uimodel\t#using scripts\\shared\\clientfield_shared;", "contents": "clientfield::get_player_uimodel(${1:str_field_name})"},
	{ "trigger": "increment\t#using scripts\\shared\\clientfield_shared;", "contents": "clientfield::increment(${1:str_field_name}, ${2:n_increment_count = 1})"},
	{ "trigger": "increment_uimodel\t#using scripts\\shared\\clientfield_shared;", "contents": "clientfield::increment_uimodel(${1:str_field_name}, ${2:n_increment_count = 1})"},
	{ "trigger": "increment_to_player\t#using scripts\\shared\\clientfield_shared;", "contents": "clientfield::increment_to_player(${1:str_field_name}, ${2:n_increment_count = 1})"},
	{ "trigger": "get\t#using scripts\\shared\\clientfield_shared;", "contents": "clientfield::get(${1:str_field_name})"},
	{ "trigger": "get_to_player\t#using scripts\\shared\\clientfield_shared;", "contents": "clientfield::get_to_player(${1:field_name})"},
	{ "trigger": "get_killcam_entity_start_time\t#using scripts\\shared\\killcam_shared;", "contents": "killcam::get_killcam_entity_start_time(${1:killcamentity})"},
	{ "trigger": "store_killcam_entity_on_entity\t#using scripts\\shared\\killcam_shared;", "contents": "killcam::store_killcam_entity_on_entity(${1:killcam_entity})"},
	{ "trigger": "grab_free_perk\t#using scripts\\zm\\_zm_powerup_free_perk;", "contents": "zm_powerup_free_perk::grab_free_perk(${1:player})"},
	{ "trigger": "free_perk_powerup\t#using scripts\\zm\\_zm_powerup_free_perk;", "contents": "zm_powerup_free_perk::free_perk_powerup(${1:item})"},
	{ "trigger": "disable_perk_before_power\t#using scripts\\zm\\_zm_powerup_free_perk;", "contents": "zm_powerup_free_perk::disable_perk_before_power(${1:perk})"}
	]
}