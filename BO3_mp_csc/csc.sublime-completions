{
	"scope": "source.csc",
	"completions":
[	
		"#using scripts\\mp\\gametypes\\ctf;",
	"#using scripts\\mp\\gametypes\\dm;",
	"#using scripts\\mp\\gametypes\\dom;",
	"#using scripts\\mp\\gametypes\\fr;",
	"#using scripts\\mp\\gametypes\\koth;",
	"#using scripts\\mp\\gametypes\\sd;",
	"#using scripts\\mp\\gametypes\\tdm;",
	"#using scripts\\mp\\gametypes\\_globallogic;",
	"#using scripts\\mp\\gametypes\\_weaponobjects;",
	"#using scripts\\mp\\vehicles\\_quadtank;",
	"#using scripts\\mp\\vehicles\\_siegebot;",
	"#using scripts\\mp\\vehicles\\_siegebot_theia;",
	"#using scripts\\mp\\killstreaks\\_airsupport;",
	"#using scripts\\mp\\killstreaks\\_ai_tank;",
	"#using scripts\\mp\\killstreaks\\_counteruav;",
	"#using scripts\\mp\\killstreaks\\_dart;",
	"#using scripts\\mp\\killstreaks\\_dogs;",
	"#using scripts\\mp\\killstreaks\\_emp;",
	"#using scripts\\mp\\killstreaks\\_flak_drone;",
	"#using scripts\\mp\\killstreaks\\_helicopter;",
	"#using scripts\\mp\\killstreaks\\_helicopter_gunner;",
	"#using scripts\\mp\\killstreaks\\_killstreak_detect;",
	"#using scripts\\mp\\killstreaks\\_microwave_turret;",
	"#using scripts\\mp\\killstreaks\\_missile_drone;",
	"#using scripts\\mp\\killstreaks\\_missile_swarm;",
	"#using scripts\\mp\\killstreaks\\_planemortar;",
	"#using scripts\\mp\\killstreaks\\_qrdrone;",
	"#using scripts\\mp\\killstreaks\\_raps;",
	"#using scripts\\mp\\killstreaks\\_rcbomb;",
	"#using scripts\\mp\\killstreaks\\_remotemissile;",
	"#using scripts\\mp\\killstreaks\\_turret;",
	"#using scripts\\mp\\mpdialog;",
	"#using scripts\\mp\\mp_combine;",
	"#using scripts\\mp\\_ambient;",
	"#using scripts\\mp\\_callbacks;",
	"#using scripts\\mp\\_claymore;",
	"#using scripts\\mp\\_ctf;",
	"#using scripts\\mp\\_destructible;",
	"#using scripts\\mp\\_end_game_flow;",
	"#using scripts\\mp\\_explosive_bolt;",
	"#using scripts\\mp\\_global_fx;",
	"#using scripts\\mp\\_gravity_spikes;",
	"#using scripts\\mp\\_helicopter_sounds;",
	"#using scripts\\mp\\_load;",
	"#using scripts\\mp\\_perks;",
	"#using scripts\\mp\\_rewindobjects;",
	"#using scripts\\mp\\_rotating_object;",
	"#using scripts\\mp\\_shoutcaster;",
	"#using scripts\\mp\\_threat_detector;",
	"#using scripts\\mp\\_vehicle;",
	"#using scripts\\mp\\_waterfall;",
	{ "trigger": "rotating_object_think\t#using scripts\\mp\\_rotating_object;", "contents": "rotating_object::rotating_object_think()"},
	{ "trigger": "spawned\t#using scripts\\mp\\killstreaks\\_ai_tank;", "contents": "ai_tank::spawned(${1:localClientNum}, ${2:killstreak_duration})"},
	{ "trigger": "missile_fire\t#using scripts\\mp\\killstreaks\\_ai_tank;", "contents": "ai_tank::missile_fire(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "update_hud\t#using scripts\\mp\\killstreaks\\_ai_tank; self == player", "contents": "ai_tank::update_hud(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "update_ui_ammo_count\t#using scripts\\mp\\killstreaks\\_ai_tank; self == vehicle", "contents": "ai_tank::update_ui_ammo_count(${1:localClientNum}, ${2:missiles_loaded})"},
	{ "trigger": "update_ui_model_ammo_count\t#using scripts\\mp\\killstreaks\\_ai_tank;", "contents": "ai_tank::update_ui_model_ammo_count(${1:localClientNum}, ${2:missiles_loaded})"},
	{ "trigger": "tank_stun\t#using scripts\\mp\\killstreaks\\_ai_tank;", "contents": "ai_tank::tank_stun(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "death\t#using scripts\\mp\\killstreaks\\_ai_tank;", "contents": "ai_tank::death(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "start_stun_fx\t#using scripts\\mp\\killstreaks\\_ai_tank;", "contents": "ai_tank::start_stun_fx(${1:localClientNum})"},
	{ "trigger": "stop_stun_fx\t#using scripts\\mp\\killstreaks\\_ai_tank;", "contents": "ai_tank::stop_stun_fx(${1:localClientNum})"},
	{ "trigger": "play_driving_rumble\t#using scripts\\mp\\killstreaks\\_ai_tank;", "contents": "ai_tank::play_driving_rumble(${1:localClientNum})"},
	{ "trigger": "game_ended\t#using scripts\\mp\\gametypes\\_globallogic;", "contents": "globallogic::game_ended(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "post_game\t#using scripts\\mp\\gametypes\\_globallogic;", "contents": "globallogic::post_game(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "firefly_effect_cb\t#using scripts\\mp\\gametypes\\_globallogic;", "contents": "globallogic::firefly_effect_cb(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "annihilate_effect_cb\t#using scripts\\mp\\gametypes\\_globallogic;", "contents": "globallogic::annihilate_effect_cb(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "pineapplegun_effect_cb\t#using scripts\\mp\\gametypes\\_globallogic;", "contents": "globallogic::pineapplegun_effect_cb(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "watch_plant_sound\t#using scripts\\mp\\gametypes\\_globallogic;", "contents": "globallogic::watch_plant_sound(${1:localClientNum})"},
	{ "trigger": "play_plant_sound\t#using scripts\\mp\\gametypes\\_globallogic;", "contents": "globallogic::play_plant_sound(${1:localClientNum})"},
	{ "trigger": "vehicle_transition\t#using scripts\\mp\\killstreaks\\_killstreak_detect;", "contents": "killstreak_detect::vehicle_transition(${1:local_client_num}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "should_set_compass_icon\t#using scripts\\mp\\killstreaks\\_killstreak_detect;", "contents": "killstreak_detect::should_set_compass_icon(${1:local_client_num})"},
	{ "trigger": "enemyScriptMoverVehicle_changed\t#using scripts\\mp\\killstreaks\\_killstreak_detect;", "contents": "killstreak_detect::enemyScriptMoverVehicle_changed(${1:local_client_num}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "enemyMissileVehicle_changed\t#using scripts\\mp\\killstreaks\\_killstreak_detect;", "contents": "killstreak_detect::enemyMissileVehicle_changed(${1:local_client_num}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "enemymissile_changed\t#using scripts\\mp\\killstreaks\\_killstreak_detect;", "contents": "killstreak_detect::enemymissile_changed(${1:local_client_num}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "enemyvehicle_changed\t#using scripts\\mp\\killstreaks\\_killstreak_detect;", "contents": "killstreak_detect::enemyvehicle_changed(${1:local_client_num}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "updateTeamVehicles\t#using scripts\\mp\\killstreaks\\_killstreak_detect;", "contents": "killstreak_detect::updateTeamVehicles(${1:local_client_num}, ${2:newVal})"},
	{ "trigger": "updateTeamMissiles\t#using scripts\\mp\\killstreaks\\_killstreak_detect;", "contents": "killstreak_detect::updateTeamMissiles(${1:local_client_num}, ${2:newVal})"},
	{ "trigger": "updateEnemyVehicles\t#using scripts\\mp\\killstreaks\\_killstreak_detect;", "contents": "killstreak_detect::updateEnemyVehicles(${1:local_client_num}, ${2:newVal})"},
	{ "trigger": "updateEnemyMissiles\t#using scripts\\mp\\killstreaks\\_killstreak_detect;", "contents": "killstreak_detect::updateEnemyMissiles(${1:local_client_num}, ${2:newVal})"},
	{ "trigger": "watch_killstreak_detect_perks_changed\t#using scripts\\mp\\killstreaks\\_killstreak_detect;", "contents": "killstreak_detect::watch_killstreak_detect_perks_changed(${1:local_client_num})"},
	{ "trigger": "checkTeamVehicles\t#using scripts\\mp\\killstreaks\\_killstreak_detect;", "contents": "killstreak_detect::checkTeamVehicles(${1:localClientNum})"},
	{ "trigger": "checkTeamMissiles\t#using scripts\\mp\\killstreaks\\_killstreak_detect;", "contents": "killstreak_detect::checkTeamMissiles(${1:localClientNum})"},
	{ "trigger": "client_voice_setup\t#using scripts\\mp\\mpdialog;", "contents": "mpdialog::client_voice_setup(${1:localClientNum})"},
	{ "trigger": "sniperVoNotify\t#using scripts\\mp\\mpdialog;", "contents": "mpdialog::sniperVoNotify(${1:localClientNum}, ${2:notifyString}, ${3:dialogKey})"},
	{ "trigger": "set_boost_number\t#using scripts\\mp\\mpdialog;", "contents": "mpdialog::set_boost_number(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "play_boost_vox\t#using scripts\\mp\\mpdialog;", "contents": "mpdialog::play_boost_vox(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "play_boost_start_vox\t#using scripts\\mp\\mpdialog;", "contents": "mpdialog::play_boost_start_vox(${1:localClientNum})"},
	{ "trigger": "play_boost_start_response_vox\t#using scripts\\mp\\mpdialog;", "contents": "mpdialog::play_boost_start_response_vox(${1:localClientNum})"},
	{ "trigger": "get_commander_dialog_alias\t#using scripts\\mp\\mpdialog;", "contents": "mpdialog::get_commander_dialog_alias(${1:commanderName}, ${2:dialogKey})"},
	{ "trigger": "get_player_dialog_alias\t#using scripts\\mp\\mpdialog;", "contents": "mpdialog::get_player_dialog_alias(${1:dialogKey})"},
	{ "trigger": "get_dialog_bundle_alias\t#using scripts\\mp\\mpdialog;", "contents": "mpdialog::get_dialog_bundle_alias(${1:dialogBundle}, ${2:dialogKey})"},
	{ "trigger": "play_dialog\t#using scripts\\mp\\mpdialog;", "contents": "mpdialog::play_dialog(${1:dialogKey}, ${2:localClientNum})"},
	{ "trigger": "update_voice_origin\t#using scripts\\mp\\mpdialog;", "contents": "mpdialog::update_voice_origin(${1:voiceBox})"},
	{ "trigger": "delete_after\t#using scripts\\mp\\mpdialog;", "contents": "mpdialog::delete_after(${1:waitTime})"},
	{ "trigger": "spawned\t#using scripts\\mp\\_claymore; self == qrdrone", "contents": "claymore::spawned(${1:localClientNum})"},
	{ "trigger": "is_shoutcaster\t#using scripts\\mp\\_shoutcaster;", "contents": "shoutcaster::is_shoutcaster(${1:localClientNum})"},
	{ "trigger": "is_shoutcaster_using_team_identity\t#using scripts\\mp\\_shoutcaster;", "contents": "shoutcaster::is_shoutcaster_using_team_identity(${1:localClientNum})"},
	{ "trigger": "get_team_color_id\t#using scripts\\mp\\_shoutcaster;", "contents": "shoutcaster::get_team_color_id(${1:localClientNum}, ${2:team})"},
	{ "trigger": "get_team_color_fx\t#using scripts\\mp\\_shoutcaster;", "contents": "shoutcaster::get_team_color_fx(${1:localClientNum}, ${2:team}, ${3:script_bundle})"},
	{ "trigger": "get_color_fx\t#using scripts\\mp\\_shoutcaster;", "contents": "shoutcaster::get_color_fx(${1:localClientNum}, ${2:script_bundle})"},
	{ "trigger": "is_friendly\t#using scripts\\mp\\_shoutcaster;", "contents": "shoutcaster::is_friendly(${1:localClientNum})"},
	{ "trigger": "dom_flag_base_fx_override\t#using scripts\\mp\\mp_combine;", "contents": "mp_combine::dom_flag_base_fx_override(${1:flag}, ${2:team})"},
	{ "trigger": "dom_flag_cap_fx_override\t#using scripts\\mp\\mp_combine;", "contents": "mp_combine::dom_flag_cap_fx_override(${1:flag}, ${2:team})"},
	{ "trigger": "onPrecacheGameType\t#using scripts\\mp\\gametypes\\dm;", "contents": "dm::onPrecacheGameType()"},
	{ "trigger": "onStartGameType\t#using scripts\\mp\\gametypes\\dm;", "contents": "dm::onStartGameType()"},
	{ "trigger": "spawned\t#using scripts\\mp\\killstreaks\\_rcbomb;", "contents": "rcbomb::spawned(${1:localClientNum})"},
	{ "trigger": "demo_think\t#using scripts\\mp\\killstreaks\\_rcbomb;", "contents": "rcbomb::demo_think(${1:localClientNum})"},
	{ "trigger": "boost_blur\t#using scripts\\mp\\killstreaks\\_rcbomb;", "contents": "rcbomb::boost_blur(${1:localClientNum})"},
	{ "trigger": "boost_think\t#using scripts\\mp\\killstreaks\\_rcbomb;", "contents": "rcbomb::boost_think(${1:localClientNum})"},
	{ "trigger": "shutdown_think\t#using scripts\\mp\\killstreaks\\_rcbomb;", "contents": "rcbomb::shutdown_think(${1:localClientNum})"},
	{ "trigger": "play_screen_fx_dirt\t#using scripts\\mp\\killstreaks\\_rcbomb;", "contents": "rcbomb::play_screen_fx_dirt(${1:localClientNum})"},
	{ "trigger": "play_screen_fx_dust\t#using scripts\\mp\\killstreaks\\_rcbomb;", "contents": "rcbomb::play_screen_fx_dust(${1:localClientNum})"},
	{ "trigger": "play_driving_screen_fx\t#using scripts\\mp\\killstreaks\\_rcbomb;", "contents": "rcbomb::play_driving_screen_fx(${1:localClientNum})"},
	{ "trigger": "play_boost_fx\t#using scripts\\mp\\killstreaks\\_rcbomb;", "contents": "rcbomb::play_boost_fx(${1:localClientNum})"},
	{ "trigger": "stunnedHandler\t#using scripts\\mp\\killstreaks\\_rcbomb;", "contents": "rcbomb::stunnedHandler(${1:localClientNum})"},
	{ "trigger": "notStunnedHandler\t#using scripts\\mp\\killstreaks\\_rcbomb;", "contents": "rcbomb::notStunnedHandler(${1:localClientNum})"},
	{ "trigger": "play_stunned_fx_handler\t#using scripts\\mp\\killstreaks\\_rcbomb; self == rc car", "contents": "rcbomb::play_stunned_fx_handler(${1:localClientNum})"},
	{ "trigger": "engineStutterHandler\t#using scripts\\mp\\killstreaks\\_rcbomb;", "contents": "rcbomb::engineStutterHandler(${1:localClientNum})"},
	{ "trigger": "OnDrivingFxCollision\t#using scripts\\mp\\killstreaks\\_rcbomb;", "contents": "rcbomb::OnDrivingFxCollision(${1:localClientNum}, ${2:player}, ${3:hip}, ${4:hitn}, ${5:hit_intensity})"},
	{ "trigger": "OnDrivingFxJumpLanding\t#using scripts\\mp\\killstreaks\\_rcbomb;", "contents": "rcbomb::OnDrivingFxJumpLanding(${1:localClientNum}, ${2:player})"},
	{ "trigger": "update_ammo\t#using scripts\\mp\\killstreaks\\_dart;", "contents": "dart::update_ammo(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "spawned\t#using scripts\\mp\\killstreaks\\_dart;", "contents": "dart::spawned(${1:localClientNum})"},
	{ "trigger": "fog_bank_3_callback\t#using scripts\\mp\\killstreaks\\_dart;", "contents": "dart::fog_bank_3_callback(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "updateSitrepScan\t#using scripts\\mp\\_perks;", "contents": "perks::updateSitrepScan()"},
	{ "trigger": "flying_callback\t#using scripts\\mp\\_perks;", "contents": "perks::flying_callback(${1:local_client_num}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "on_local_client_connect\t#using scripts\\mp\\_perks;", "contents": "perks::on_local_client_connect(${1:local_client_num})"},
	{ "trigger": "on_localplayer_spawned\t#using scripts\\mp\\_perks;", "contents": "perks::on_localplayer_spawned(${1:local_client_num})"},
	{ "trigger": "on_player_spawned\t#using scripts\\mp\\_perks;", "contents": "perks::on_player_spawned(${1:local_client_num})"},
	{ "trigger": "get_players\t#using scripts\\mp\\_perks;", "contents": "perks::get_players(${1:local_client_num})"},
	{ "trigger": "monitor_tracker_existing_players\t#using scripts\\mp\\_perks; self == localplayer", "contents": "perks::monitor_tracker_existing_players(${1:local_client_num})"},
	{ "trigger": "monitor_tracker_perk_killcam\t#using scripts\\mp\\_perks;", "contents": "perks::monitor_tracker_perk_killcam(${1:local_client_num})"},
	{ "trigger": "monitor_tracker_perk\t#using scripts\\mp\\_perks;", "contents": "perks::monitor_tracker_perk(${1:local_client_num})"},
	{ "trigger": "tracker_playFX\t#using scripts\\mp\\_perks;", "contents": "perks::tracker_playFX(${1:local_client_num}, ${2:positionAndRotationStruct})"},
	{ "trigger": "killTrackerFX_track\t#using scripts\\mp\\_perks;", "contents": "perks::killTrackerFX_track(${1:local_client_num}, ${2:handle})"},
	{ "trigger": "killTrackerFX_on_death\t#using scripts\\mp\\_perks;", "contents": "perks::killTrackerFX_on_death(${1:local_client_num})"},
	{ "trigger": "getTrackerFXPosition\t#using scripts\\mp\\_perks;", "contents": "perks::getTrackerFXPosition(${1:local_client_num})"},
	{ "trigger": "monitor_detectnearbyenemies\t#using scripts\\mp\\_perks;", "contents": "perks::monitor_detectnearbyenemies(${1:local_client_num})"},
	{ "trigger": "monitor_emp_killstreaks\t#using scripts\\mp\\killstreaks\\_emp;", "contents": "emp::monitor_emp_killstreaks()"},
	{ "trigger": "get_closest_enemy_emp_killstreak\t#using scripts\\mp\\killstreaks\\_emp;", "contents": "emp::get_closest_enemy_emp_killstreak(${1:local_player})"},
	{ "trigger": "update_distance_to_closest_emp\t#using scripts\\mp\\killstreaks\\_emp;", "contents": "emp::update_distance_to_closest_emp(${1:localClientNum}, ${2:new_value})"},
	{ "trigger": "cleanup_fx_on_shutdown\t#using scripts\\mp\\killstreaks\\_emp;", "contents": "emp::cleanup_fx_on_shutdown(${1:localClientNum}, ${2:handle})"},
	{ "trigger": "emp_turret_deploy_start\t#using scripts\\mp\\killstreaks\\_emp;", "contents": "emp::emp_turret_deploy_start(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "emp_turret_deploy\t#using scripts\\mp\\killstreaks\\_emp;", "contents": "emp::emp_turret_deploy(${1:localClientNum})"},
	{ "trigger": "swarm_start\t#using scripts\\mp\\killstreaks\\_missile_swarm;", "contents": "missile_swarm::swarm_start(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "swarm_think\t#using scripts\\mp\\killstreaks\\_missile_swarm;", "contents": "missile_swarm::swarm_think(${1:localClientNum}, ${2:sound_origin})"},
	{ "trigger": "projectile_spawn\t#using scripts\\mp\\killstreaks\\_missile_swarm;", "contents": "missile_swarm::projectile_spawn(${1:localClientNum})"},
	{ "trigger": "projectile_move_think\t#using scripts\\mp\\killstreaks\\_missile_swarm;", "contents": "missile_swarm::projectile_move_think(${1:localClientNum}, ${2:player}, ${3:start}, ${4:end})"},
	{ "trigger": "swarm_sound\t#using scripts\\mp\\killstreaks\\_missile_swarm;", "contents": "missile_swarm::swarm_sound(${1:localClientNum}, ${2:origin})"},
	{ "trigger": "deleteOnMissileSwarmStop\t#using scripts\\mp\\killstreaks\\_missile_swarm;", "contents": "missile_swarm::deleteOnMissileSwarmStop()"},
	{ "trigger": "projectile_delete_think\t#using scripts\\mp\\killstreaks\\_missile_swarm;", "contents": "missile_swarm::projectile_delete_think(${1:localClientNum})"},
	{ "trigger": "check_for_wind_override\t#using scripts\\mp\\_global_fx;", "contents": "global_fx::check_for_wind_override()"},
	{ "trigger": "turret_destroyed_0\t#using scripts\\mp\\killstreaks\\_helicopter_gunner;", "contents": "helicopter_gunner::turret_destroyed_0(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "turret_destroyed_1\t#using scripts\\mp\\killstreaks\\_helicopter_gunner;", "contents": "helicopter_gunner::turret_destroyed_1(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "update_turret_destroyed\t#using scripts\\mp\\killstreaks\\_helicopter_gunner;", "contents": "helicopter_gunner::update_turret_destroyed(${1:localClientNum}, ${2:ui_model_name}, ${3:new_value})"},
	{ "trigger": "update_client\t#using scripts\\mp\\killstreaks\\_helicopter_gunner;", "contents": "helicopter_gunner::update_client(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "fog_bank_2_callback\t#using scripts\\mp\\killstreaks\\_helicopter_gunner;", "contents": "helicopter_gunner::fog_bank_2_callback(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "watchRewindableEvents\t#using scripts\\mp\\_rewindobjects;", "contents": "rewindobjects::watchRewindableEvents(${1:localClientNum})"},
	{ "trigger": "startRewindableEvent\t#using scripts\\mp\\_rewindobjects;", "contents": "rewindobjects::startRewindableEvent(${1:localClientNum}, ${2:timeKey})"},
	{ "trigger": "createNapalmRewindWatcher\t#using scripts\\mp\\_rewindobjects;", "contents": "rewindobjects::createNapalmRewindWatcher(${1:localClientNum})"},
	{ "trigger": "createAirstrikeRewindWatcher\t#using scripts\\mp\\_rewindobjects;", "contents": "rewindobjects::createAirstrikeRewindWatcher(${1:localClientNum})"},
	{ "trigger": "createRewindWatcher\t#using scripts\\mp\\_rewindobjects;", "contents": "rewindobjects::createRewindWatcher(${1:localClientNum}, ${2:name})"},
	{ "trigger": "resetOnDemoJump\t#using scripts\\mp\\_rewindobjects;", "contents": "rewindobjects::resetOnDemoJump(${1:localClientNum})"},
	{ "trigger": "addTimedFunction\t#using scripts\\mp\\_rewindobjects;", "contents": "rewindobjects::addTimedFunction(${1:name}, ${2:func}, ${3:relativeStartTimeInSecs})"},
	{ "trigger": "getRewindWatcher\t#using scripts\\mp\\_rewindobjects;", "contents": "rewindobjects::getRewindWatcher(${1:localClientNum}, ${2:name})"},
	{ "trigger": "addRewindableEventToWatcher\t#using scripts\\mp\\_rewindobjects;", "contents": "rewindobjects::addRewindableEventToWatcher(${1:startTime}, ${2:data})"},
	{ "trigger": "serverTimedMoveTo\t#using scripts\\mp\\_rewindobjects;", "contents": "rewindobjects::serverTimedMoveTo(${1:localClientNum}, ${2:startPoint}, ${3:endPoint}, ${4:startTime}, ${5:duration})"},
	{ "trigger": "serverTimedRotateTo\t#using scripts\\mp\\_rewindobjects;", "contents": "rewindobjects::serverTimedRotateTo(${1:localClientNum}, ${2:angles}, ${3:startTime}, ${4:duration}, ${5:timeIn}, ${6:timeout})"},
	{ "trigger": "waitForServerTime\t#using scripts\\mp\\_rewindobjects;", "contents": "rewindobjects::waitForServerTime(${1:localClientNum}, ${2:timeFromStart})"},
	{ "trigger": "removeClientEntOnJump\t#using scripts\\mp\\_rewindobjects;", "contents": "rewindobjects::removeClientEntOnJump(${1:clientEnt}, ${2:localClientNum})"},
	{ "trigger": "getPointOnLine\t#using scripts\\mp\\_rewindobjects;", "contents": "rewindobjects::getPointOnLine(${1:startPoint}, ${2:endPoint}, ${3:ratio})"},
	{ "trigger": "vehicle_is_firing_function\t#using scripts\\mp\\_helicopter_sounds;", "contents": "helicopter_sounds::vehicle_is_firing_function(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "sound_linkto\t#using scripts\\mp\\_helicopter_sounds;", "contents": "helicopter_sounds::sound_linkto(${1:parent}, ${2:tag})"},
	{ "trigger": "setup_heli_sounds\t#using scripts\\mp\\_helicopter_sounds;", "contents": "helicopter_sounds::setup_heli_sounds(${1:bone_location}, ${2:type}, ${3:tag}, ${4:run}, ${5:dmg1}, ${6:dmg2}, ${7:dmg3})"},
	{ "trigger": "setup_terrain_sounds\t#using scripts\\mp\\_helicopter_sounds; self == helicopter", "contents": "helicopter_sounds::setup_terrain_sounds(${1:surface_type}, ${2:alias})"},
	{ "trigger": "setup_terrain_brass_sounds\t#using scripts\\mp\\_helicopter_sounds; self == helicopter", "contents": "helicopter_sounds::setup_terrain_brass_sounds(${1:surface_type}, ${2:alias})"},
	{ "trigger": "start_helicopter_sounds\t#using scripts\\mp\\_helicopter_sounds;", "contents": "helicopter_sounds::start_helicopter_sounds(${1:localClientNum})"},
	{ "trigger": "heli_loop_sound_delete\t#using scripts\\mp\\_helicopter_sounds;", "contents": "helicopter_sounds::heli_loop_sound_delete(${1:real_ent})"},
	{ "trigger": "heli_linkto_sound_ents_delete\t#using scripts\\mp\\_helicopter_sounds;", "contents": "helicopter_sounds::heli_linkto_sound_ents_delete(${1:localClientNum}, ${2:entity})"},
	{ "trigger": "heli_sound_play\t#using scripts\\mp\\_helicopter_sounds;", "contents": "helicopter_sounds::heli_sound_play(${1:heli_bone})"},
	{ "trigger": "play_player_controlled_sounds\t#using scripts\\mp\\_helicopter_sounds; self == helicopter Cobra", "contents": "helicopter_sounds::play_player_controlled_sounds()"},
	{ "trigger": "play_attack_ai_sounds\t#using scripts\\mp\\_helicopter_sounds; self == helicopter", "contents": "helicopter_sounds::play_attack_ai_sounds()"},
	{ "trigger": "play_supply_sounds\t#using scripts\\mp\\_helicopter_sounds; self == helicopter", "contents": "helicopter_sounds::play_supply_sounds()"},
	{ "trigger": "play_gunner_sounds\t#using scripts\\mp\\_helicopter_sounds; self == helicopter", "contents": "helicopter_sounds::play_gunner_sounds()"},
	{ "trigger": "play_player_drone_sounds\t#using scripts\\mp\\_helicopter_sounds; self == helicopter Cobra", "contents": "helicopter_sounds::play_player_drone_sounds()"},
	{ "trigger": "play_heli_guard_sounds\t#using scripts\\mp\\_helicopter_sounds;", "contents": "helicopter_sounds::play_heli_guard_sounds()"},
	{ "trigger": "tempBrassNotify\t#using scripts\\mp\\_helicopter_sounds;", "contents": "helicopter_sounds::tempBrassNotify()"},
	{ "trigger": "heli_idle_run_transition\t#using scripts\\mp\\_helicopter_sounds;", "contents": "helicopter_sounds::heli_idle_run_transition(${1:heli_type}, ${2:heli_part}, ${3:wait_time}, ${4:updown})"},
	{ "trigger": "terrain_trace_brass\t#using scripts\\mp\\_helicopter_sounds;", "contents": "helicopter_sounds::terrain_trace_brass()"},
	{ "trigger": "terrain_trace\t#using scripts\\mp\\_helicopter_sounds;", "contents": "helicopter_sounds::terrain_trace()"},
	{ "trigger": "aircraft_dustkick\t#using scripts\\mp\\_helicopter_sounds;", "contents": "helicopter_sounds::aircraft_dustkick(${1:localClientNum})"},
	{ "trigger": "play_targeting_sound\t#using scripts\\mp\\_helicopter_sounds;", "contents": "helicopter_sounds::play_targeting_sound(${1:play}, ${2:sound}, ${3:handle})"},
	{ "trigger": "play_targeted_sound\t#using scripts\\mp\\_helicopter_sounds;", "contents": "helicopter_sounds::play_targeted_sound(${1:play})"},
	{ "trigger": "play_locked_sound\t#using scripts\\mp\\_helicopter_sounds;", "contents": "helicopter_sounds::play_locked_sound(${1:play})"},
	{ "trigger": "play_fired_sound\t#using scripts\\mp\\_helicopter_sounds;", "contents": "helicopter_sounds::play_fired_sound(${1:play})"},
	{ "trigger": "play_leaving_battlefield_alarm\t#using scripts\\mp\\_helicopter_sounds;", "contents": "helicopter_sounds::play_leaving_battlefield_alarm(${1:play})"},
	{ "trigger": "get_heli_sound_ent\t#using scripts\\mp\\_helicopter_sounds;", "contents": "helicopter_sounds::get_heli_sound_ent(${1:sound_ent})"},
	{ "trigger": "get_lock_sound_ent\t#using scripts\\mp\\_helicopter_sounds;", "contents": "helicopter_sounds::get_lock_sound_ent()"},
	{ "trigger": "get_leaving_sound_ent\t#using scripts\\mp\\_helicopter_sounds;", "contents": "helicopter_sounds::get_leaving_sound_ent()"},
	{ "trigger": "heli_sound_ent_delete\t#using scripts\\mp\\_helicopter_sounds;", "contents": "helicopter_sounds::heli_sound_ent_delete(${1:real_ent})"},
	{ "trigger": "drone_up_down_transition\t#using scripts\\mp\\_helicopter_sounds;", "contents": "helicopter_sounds::drone_up_down_transition()"},
	{ "trigger": "qr_ent_cleanup\t#using scripts\\mp\\_helicopter_sounds;", "contents": "helicopter_sounds::qr_ent_cleanup(${1:veh_ent})"},
	{ "trigger": "drone_rotate_angle\t#using scripts\\mp\\_helicopter_sounds; self == drone", "contents": "helicopter_sounds::drone_rotate_angle(${1:heli_type}, ${2:heli_part})"},
	{ "trigger": "drone_button_watch\t#using scripts\\mp\\_helicopter_sounds;", "contents": "helicopter_sounds::drone_button_watch()"},
	{ "trigger": "active_camo_changed\t#using scripts\\mp\\killstreaks\\_flak_drone;", "contents": "flak_drone::active_camo_changed(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "doReveal\t#using scripts\\mp\\killstreaks\\_flak_drone;", "contents": "flak_drone::doReveal(${1:localClientNum}, ${2:direction})"},
	{ "trigger": "missile_drone_projectile_animate_cb\t#using scripts\\mp\\killstreaks\\_missile_drone;", "contents": "missile_drone::missile_drone_projectile_animate_cb(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "missile_drone_projectile_active_cb\t#using scripts\\mp\\killstreaks\\_missile_drone;", "contents": "missile_drone::missile_drone_projectile_active_cb(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "missile_drone_active_cb\t#using scripts\\mp\\killstreaks\\_missile_drone;", "contents": "missile_drone::missile_drone_active_cb(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "targetLost\t#using scripts\\mp\\killstreaks\\_missile_drone;", "contents": "missile_drone::targetLost(${1:localClientNum})"},
	{ "trigger": "targetAcquired\t#using scripts\\mp\\killstreaks\\_missile_drone;", "contents": "missile_drone::targetAcquired(${1:localClientNum})"},
	{ "trigger": "targetScan\t#using scripts\\mp\\killstreaks\\_missile_drone;", "contents": "missile_drone::targetScan(${1:localClientNum})"},
	{ "trigger": "onPrecacheGameType\t#using scripts\\mp\\gametypes\\tdm;", "contents": "tdm::onPrecacheGameType()"},
	{ "trigger": "onStartGameType\t#using scripts\\mp\\gametypes\\tdm;", "contents": "tdm::onStartGameType()"},
	{ "trigger": "spawned\t#using scripts\\mp\\_explosive_bolt; self == qrdrone", "contents": "explosive_bolt::spawned(${1:localClientNum})"},
	{ "trigger": "fx_think\t#using scripts\\mp\\_explosive_bolt;", "contents": "explosive_bolt::fx_think(${1:localClientNum})"},
	{ "trigger": "start_light_fx\t#using scripts\\mp\\_explosive_bolt;", "contents": "explosive_bolt::start_light_fx(${1:localClientNum})"},
	{ "trigger": "stop_light_fx\t#using scripts\\mp\\_explosive_bolt;", "contents": "explosive_bolt::stop_light_fx(${1:localClientNum})"},
	{ "trigger": "fullscreen_fx\t#using scripts\\mp\\_explosive_bolt;", "contents": "explosive_bolt::fullscreen_fx(${1:localClientNum})"},
	{ "trigger": "_setup_\t#using scripts\\mp\\vehicles\\_siegebot_theia;", "contents": "siegebot_theia::_setup_(${1:localClientNum})"},
	{ "trigger": "sarah_rumble_on_landing\t#using scripts\\mp\\vehicles\\_siegebot_theia;", "contents": "siegebot_theia::sarah_rumble_on_landing(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "sarah_minigun_spin\t#using scripts\\mp\\vehicles\\_siegebot_theia;", "contents": "siegebot_theia::sarah_minigun_spin(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "_setup_\t#using scripts\\mp\\vehicles\\_siegebot;", "contents": "siegebot::_setup_(${1:localClientNum})"},
	{ "trigger": "player_enter\t#using scripts\\mp\\vehicles\\_siegebot;", "contents": "siegebot::player_enter(${1:localClientNum})"},
	{ "trigger": "player_exit\t#using scripts\\mp\\vehicles\\_siegebot;", "contents": "siegebot::player_exit(${1:localClientNum})"},
	{ "trigger": "setupScriptMoverCompassIcons\t#using scripts\\mp\\gametypes\\_weaponobjects;", "contents": "weaponobjects::setupScriptMoverCompassIcons()"},
	{ "trigger": "setupMissileCompassIcons\t#using scripts\\mp\\gametypes\\_weaponobjects;", "contents": "weaponobjects::setupMissileCompassIcons()"},
	{ "trigger": "planeSounds\t#using scripts\\mp\\killstreaks\\_airsupport;", "contents": "airsupport::planeSounds(${1:localClientNum}, ${2:spawnSound}, ${3:flybySound}, ${4:flybySoundLoop})"},
	{ "trigger": "getPlaneModel\t#using scripts\\mp\\killstreaks\\_airsupport;", "contents": "airsupport::getPlaneModel(${1:teamFaction})"},
	{ "trigger": "planeTurnRight\t#using scripts\\mp\\killstreaks\\_airsupport;", "contents": "airsupport::planeTurnRight(${1:localClientNum}, ${2:plane}, ${3:yaw}, ${4:halfLife}, ${5:startTime})"},
	{ "trigger": "planeTurnLeft\t#using scripts\\mp\\killstreaks\\_airsupport;", "contents": "airsupport::planeTurnLeft(${1:localClientNum}, ${2:plane}, ${3:yaw}, ${4:halfLife}, ${5:startTime})"},
	{ "trigger": "planeTurn\t#using scripts\\mp\\killstreaks\\_airsupport;", "contents": "airsupport::planeTurn(${1:localClientNum}, ${2:plane}, ${3:yaw}, ${4:halfLife}, ${5:startTime}, ${6:isTurningRight})"},
	{ "trigger": "doABarrelRoll\t#using scripts\\mp\\killstreaks\\_airsupport;", "contents": "airsupport::doABarrelRoll(${1:localClientNum}, ${2:plane}, ${3:endPoint}, ${4:flytime}, ${5:startTime})"},
	{ "trigger": "planeGoStraight\t#using scripts\\mp\\killstreaks\\_airsupport;", "contents": "airsupport::planeGoStraight(${1:localClientNum}, ${2:plane}, ${3:startPoint}, ${4:endPoint}, ${5:moveTime}, ${6:startTime})"},
	{ "trigger": "setAnimationOnModel\t#using scripts\\mp\\_end_game_flow;", "contents": "end_game_flow::setAnimationOnModel(${1:localClientNum}, ${2:characterModel}, ${3:topPlayerIndex})"},
	{ "trigger": "loadCharacterOnModel\t#using scripts\\mp\\_end_game_flow;", "contents": "end_game_flow::loadCharacterOnModel(${1:localClientNum}, ${2:characterModel}, ${3:topPlayerIndex})"},
	{ "trigger": "setupModelAndAnimation\t#using scripts\\mp\\_end_game_flow;", "contents": "end_game_flow::setupModelAndAnimation(${1:localClientNum}, ${2:characterModel}, ${3:topPlayerIndex})"},
	{ "trigger": "prepareTopThreePlayers\t#using scripts\\mp\\_end_game_flow;", "contents": "end_game_flow::prepareTopThreePlayers(${1:localClientNum})"},
	{ "trigger": "showTopThreePlayers\t#using scripts\\mp\\_end_game_flow;", "contents": "end_game_flow::showTopThreePlayers(${1:localClientNum})"},
	{ "trigger": "checkForGestures\t#using scripts\\mp\\_end_game_flow;", "contents": "end_game_flow::checkForGestures(${1:localClientNum})"},
	{ "trigger": "checkForPlayerGestures\t#using scripts\\mp\\_end_game_flow;", "contents": "end_game_flow::checkForPlayerGestures(${1:localClientNum}, ${2:localPlayer}, ${3:playerIndex})"},
	{ "trigger": "showGestures\t#using scripts\\mp\\_end_game_flow;", "contents": "end_game_flow::showGestures(${1:localClientNum}, ${2:playerIndex})"},
	{ "trigger": "handlePlayTop0Gesture\t#using scripts\\mp\\_end_game_flow;", "contents": "end_game_flow::handlePlayTop0Gesture(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "handlePlayTop1Gesture\t#using scripts\\mp\\_end_game_flow;", "contents": "end_game_flow::handlePlayTop1Gesture(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "handlePlayTop2Gesture\t#using scripts\\mp\\_end_game_flow;", "contents": "end_game_flow::handlePlayTop2Gesture(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "handlePlayGesture\t#using scripts\\mp\\_end_game_flow;", "contents": "end_game_flow::handlePlayGesture(${1:localClientNum}, ${2:topPlayerIndex}, ${3:gestureType})"},
	{ "trigger": "streamerWatcher\t#using scripts\\mp\\_end_game_flow;", "contents": "end_game_flow::streamerWatcher()"},
	{ "trigger": "handleTopThreePlayers\t#using scripts\\mp\\_end_game_flow;", "contents": "end_game_flow::handleTopThreePlayers(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "showScoreboard\t#using scripts\\mp\\_end_game_flow;", "contents": "end_game_flow::showScoreboard(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "levelNotifyHandler\t#using scripts\\mp\\_load;", "contents": "load::levelNotifyHandler(${1:clientNum}, ${2:state}, ${3:oldState})"},
	{ "trigger": "register_clientfields\t#using scripts\\mp\\_load;", "contents": "load::register_clientfields()"},
	{ "trigger": "turret_microwave_sounds\t#using scripts\\mp\\killstreaks\\_microwave_turret;", "contents": "microwave_turret::turret_microwave_sounds(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "turret_microwave_sound_start\t#using scripts\\mp\\killstreaks\\_microwave_turret;", "contents": "microwave_turret::turret_microwave_sound_start(${1:localClientNum})"},
	{ "trigger": "turret_microwave_sound_off_waiter\t#using scripts\\mp\\killstreaks\\_microwave_turret;", "contents": "microwave_turret::turret_microwave_sound_off_waiter(${1:localClientNum})"},
	{ "trigger": "turret_microwave_sound_updater\t#using scripts\\mp\\killstreaks\\_microwave_turret;", "contents": "microwave_turret::turret_microwave_sound_updater()"},
	{ "trigger": "microwave_open\t#using scripts\\mp\\killstreaks\\_microwave_turret;", "contents": "microwave_turret::microwave_open(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "microwave_close_anim\t#using scripts\\mp\\killstreaks\\_microwave_turret;", "contents": "microwave_turret::microwave_close_anim(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "StartMicrowaveFx\t#using scripts\\mp\\killstreaks\\_microwave_turret;", "contents": "microwave_turret::StartMicrowaveFx(${1:localClientNum})"},
	{ "trigger": "UpdateMicrowaveAim\t#using scripts\\mp\\killstreaks\\_microwave_turret;", "contents": "microwave_turret::UpdateMicrowaveAim(${1:microwaveFXEnt})"},
	{ "trigger": "MicrowaveFxHash\t#using scripts\\mp\\killstreaks\\_microwave_turret;", "contents": "microwave_turret::MicrowaveFxHash(${1:trace}, ${2:origin}, ${3:name})"},
	{ "trigger": "CleanupFx\t#using scripts\\mp\\killstreaks\\_microwave_turret;", "contents": "microwave_turret::CleanupFx(${1:localClientNum}, ${2:microwaveFXEnt})"},
	{ "trigger": "play_fx_on_tag\t#using scripts\\mp\\killstreaks\\_microwave_turret;", "contents": "microwave_turret::play_fx_on_tag(${1:localClientNum}, ${2:fxName}, ${3:tag})"},
	{ "trigger": "stop_fx_on_tag\t#using scripts\\mp\\killstreaks\\_microwave_turret;", "contents": "microwave_turret::stop_fx_on_tag(${1:localClientNum}, ${2:fxName}, ${3:tag})"},
	{ "trigger": "stop_or_start_fx\t#using scripts\\mp\\killstreaks\\_microwave_turret;", "contents": "microwave_turret::stop_or_start_fx(${1:localClientNum}, ${2:fxName}, ${3:tag}, ${4:start})"},
	{ "trigger": "PlayMicrowaveFx\t#using scripts\\mp\\killstreaks\\_microwave_turret;", "contents": "microwave_turret::PlayMicrowaveFx(${1:localCLientNum}, ${2:trace}, ${3:traceRight}, ${4:traceLeft}, ${5:origin})"},
	{ "trigger": "spawned\t#using scripts\\mp\\killstreaks\\_dogs;", "contents": "dogs::spawned(${1:localClientNum})"},
	{ "trigger": "animCategoryChanged\t#using scripts\\mp\\killstreaks\\_dogs;", "contents": "dogs::animCategoryChanged(${1:localClientNum}, ${2:animCategory})"},
	{ "trigger": "animCategoryWatcher\t#using scripts\\mp\\killstreaks\\_dogs;", "contents": "dogs::animCategoryWatcher(${1:localClientNum})"},
	{ "trigger": "enemyWatcher\t#using scripts\\mp\\killstreaks\\_dogs;", "contents": "dogs::enemyWatcher(${1:localClientNum})"},
	{ "trigger": "isLocalPlayerEnemy\t#using scripts\\mp\\killstreaks\\_dogs;", "contents": "dogs::isLocalPlayerEnemy(${1:enemy})"},
	{ "trigger": "hasEnemyChanged\t#using scripts\\mp\\killstreaks\\_dogs;", "contents": "dogs::hasEnemyChanged(${1:last_enemy})"},
	{ "trigger": "getMovementSoundState\t#using scripts\\mp\\killstreaks\\_dogs;", "contents": "dogs::getMovementSoundState()"},
	{ "trigger": "playMovementSounds\t#using scripts\\mp\\killstreaks\\_dogs;", "contents": "dogs::playMovementSounds(${1:localClientNum})"},
	{ "trigger": "playPainSounds\t#using scripts\\mp\\killstreaks\\_dogs;", "contents": "dogs::playPainSounds(${1:localClientNum})"},
	{ "trigger": "playDeathSounds\t#using scripts\\mp\\killstreaks\\_dogs;", "contents": "dogs::playDeathSounds(${1:localClientNum})"},
	{ "trigger": "playLockOnSounds\t#using scripts\\mp\\killstreaks\\_dogs;", "contents": "dogs::playLockOnSounds(${1:localClientNum})"},
	{ "trigger": "soundNotify\t#using scripts\\mp\\killstreaks\\_dogs;", "contents": "dogs::soundNotify(${1:client_num}, ${2:entity}, ${3:note})"},
	{ "trigger": "dog_get_dvar_int\t#using scripts\\mp\\killstreaks\\_dogs;", "contents": "dogs::dog_get_dvar_int(${1:dvar}, ${2:def})"},
	{ "trigger": "dog_get_dvar\t#using scripts\\mp\\killstreaks\\_dogs;", "contents": "dogs::dog_get_dvar(${1:dvar}, ${2:def})"},
	{ "trigger": "dog_sound_print\t#using scripts\\mp\\killstreaks\\_dogs;", "contents": "dogs::dog_sound_print(${1:message})"},
	{ "trigger": "dog_print\t#using scripts\\mp\\killstreaks\\_dogs;", "contents": "dogs::dog_print(${1:message})"},
	{ "trigger": "play_dog_sound\t#using scripts\\mp\\killstreaks\\_dogs;", "contents": "dogs::play_dog_sound(${1:localClientNum}, ${2:sound}, ${3:position})"},
	{ "trigger": "playGrenadeRumble\t#using scripts\\mp\\_destructible;", "contents": "destructible::playGrenadeRumble(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "doExplosion\t#using scripts\\mp\\_destructible;", "contents": "destructible::doExplosion(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "vehicle_rumble\t#using scripts\\mp\\_vehicle;", "contents": "vehicle::vehicle_rumble(${1:localClientNum})"},
	{ "trigger": "set_static_amount\t#using scripts\\mp\\_vehicle;", "contents": "vehicle::set_static_amount(${1:staticAmount})"},
	{ "trigger": "vehicle_variants\t#using scripts\\mp\\_vehicle;", "contents": "vehicle::vehicle_variants(${1:localClientNum})"},
	{ "trigger": "timeout_beep\t#using scripts\\mp\\_vehicle;", "contents": "vehicle::timeout_beep(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "on_player_spawned\t#using scripts\\mp\\killstreaks\\_helicopter;", "contents": "helicopter::on_player_spawned(${1:localClientNum})"},
	{ "trigger": "SetupAnimTree\t#using scripts\\mp\\killstreaks\\_helicopter;", "contents": "helicopter::SetupAnimTree()"},
	{ "trigger": "active_camo_changed\t#using scripts\\mp\\killstreaks\\_helicopter;", "contents": "helicopter::active_camo_changed(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "doReveal\t#using scripts\\mp\\killstreaks\\_helicopter;", "contents": "helicopter::doReveal(${1:local_client_num}, ${2:direction})"},
	{ "trigger": "heli_comlink_bootup_anim\t#using scripts\\mp\\killstreaks\\_helicopter;", "contents": "helicopter::heli_comlink_bootup_anim(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "supplydrop_care_package_state\t#using scripts\\mp\\killstreaks\\_helicopter;", "contents": "helicopter::supplydrop_care_package_state(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "supplydrop_ai_tank_state\t#using scripts\\mp\\killstreaks\\_helicopter;", "contents": "helicopter::supplydrop_ai_tank_state(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "warnMissileLocking\t#using scripts\\mp\\killstreaks\\_helicopter;", "contents": "helicopter::warnMissileLocking(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "warnMissileLocked\t#using scripts\\mp\\killstreaks\\_helicopter;", "contents": "helicopter::warnMissileLocked(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "warnMissileFired\t#using scripts\\mp\\killstreaks\\_helicopter;", "contents": "helicopter::warnMissileFired(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "heli_deletefx\t#using scripts\\mp\\killstreaks\\_helicopter;", "contents": "helicopter::heli_deletefx(${1:localClientNum})"},
	{ "trigger": "startfx\t#using scripts\\mp\\killstreaks\\_helicopter;", "contents": "helicopter::startfx(${1:localClientNum})"},
	{ "trigger": "startfx_loop\t#using scripts\\mp\\killstreaks\\_helicopter;", "contents": "helicopter::startfx_loop(${1:localClientNum})"},
	{ "trigger": "damage_fx_stages\t#using scripts\\mp\\killstreaks\\_helicopter;", "contents": "helicopter::damage_fx_stages(${1:localClientNum})"},
	{ "trigger": "trail_fx\t#using scripts\\mp\\killstreaks\\_helicopter;", "contents": "helicopter::trail_fx(${1:localClientNum}, ${2:trail_fx}, ${3:trail_tag})"},
	{ "trigger": "heli_comlink_lights_on_after_wait\t#using scripts\\mp\\killstreaks\\_helicopter;", "contents": "helicopter::heli_comlink_lights_on_after_wait(${1:localClientNum}, ${2:wait_time})"},
	{ "trigger": "heli_comlink_lights_on\t#using scripts\\mp\\killstreaks\\_helicopter;", "contents": "helicopter::heli_comlink_lights_on(${1:localClientNum})"},
	{ "trigger": "heli_comlink_lights_off\t#using scripts\\mp\\killstreaks\\_helicopter;", "contents": "helicopter::heli_comlink_lights_off(${1:localClientNum})"},
	{ "trigger": "UpdateMarkerThread\t#using scripts\\mp\\killstreaks\\_helicopter;", "contents": "helicopter::UpdateMarkerThread(${1:localClientNum})"},
	{ "trigger": "StopCrateEffects\t#using scripts\\mp\\killstreaks\\_helicopter;", "contents": "helicopter::StopCrateEffects(${1:localClientNum})"},
	{ "trigger": "CleanupThrustersThread\t#using scripts\\mp\\killstreaks\\_helicopter;", "contents": "helicopter::CleanupThrustersThread(${1:localClientNum})"},
	{ "trigger": "setSupplydropThrustersState\t#using scripts\\mp\\killstreaks\\_helicopter;", "contents": "helicopter::setSupplydropThrustersState(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "mothership_cb\t#using scripts\\mp\\killstreaks\\_helicopter;", "contents": "helicopter::mothership_cb(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "setAITankhrustersState\t#using scripts\\mp\\killstreaks\\_helicopter;", "contents": "helicopter::setAITankhrustersState(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "marker_state_changed\t#using scripts\\mp\\killstreaks\\_helicopter;", "contents": "helicopter::marker_state_changed(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "spawned\t#using scripts\\mp\\killstreaks\\_qrdrone; self == qrdrone", "contents": "qrdrone::spawned(${1:localClientNum})"},
	{ "trigger": "stateChange\t#using scripts\\mp\\killstreaks\\_qrdrone;", "contents": "qrdrone::stateChange(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "restartFX\t#using scripts\\mp\\killstreaks\\_qrdrone; self == qrdrone", "contents": "qrdrone::restartFX(${1:localClientNum}, ${2:blinkStage})"},
	{ "trigger": "watchRestartFX\t#using scripts\\mp\\killstreaks\\_qrdrone;", "contents": "qrdrone::watchRestartFX(${1:localClientNum})"},
	{ "trigger": "spawn_solid_fx\t#using scripts\\mp\\killstreaks\\_qrdrone; self == qrdrone", "contents": "qrdrone::spawn_solid_fx(${1:localClientNum})"},
	{ "trigger": "spawn_blinking_fx\t#using scripts\\mp\\killstreaks\\_qrdrone;", "contents": "qrdrone::spawn_blinking_fx(${1:localClientNum})"},
	{ "trigger": "blink_fx_and_sound\t#using scripts\\mp\\killstreaks\\_qrdrone;", "contents": "qrdrone::blink_fx_and_sound(${1:localClientNum}, ${2:soundAlias})"},
	{ "trigger": "cleanupFX\t#using scripts\\mp\\killstreaks\\_qrdrone;", "contents": "qrdrone::cleanupFX(${1:localClientNum}, ${2:handle})"},
	{ "trigger": "start_blink\t#using scripts\\mp\\killstreaks\\_qrdrone;", "contents": "qrdrone::start_blink(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "final_blink\t#using scripts\\mp\\killstreaks\\_qrdrone;", "contents": "qrdrone::final_blink(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "out_of_range_update\t#using scripts\\mp\\killstreaks\\_qrdrone;", "contents": "qrdrone::out_of_range_update(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "loop_local_sound\t#using scripts\\mp\\killstreaks\\_qrdrone;", "contents": "qrdrone::loop_local_sound(${1:localClientNum}, ${2:alias}, ${3:interval}, ${4:fx})"},
	{ "trigger": "check_for_player_switch_or_time_jump\t#using scripts\\mp\\killstreaks\\_qrdrone;", "contents": "qrdrone::check_for_player_switch_or_time_jump(${1:localClientNum})"},
	{ "trigger": "blink_light\t#using scripts\\mp\\killstreaks\\_qrdrone;", "contents": "qrdrone::blink_light(${1:localClientNum})"},
	{ "trigger": "collisionHandler\t#using scripts\\mp\\killstreaks\\_qrdrone;", "contents": "qrdrone::collisionHandler(${1:localClientNum})"},
	{ "trigger": "engineStutterHandler\t#using scripts\\mp\\killstreaks\\_qrdrone;", "contents": "qrdrone::engineStutterHandler(${1:localClientNum})"},
	{ "trigger": "getMinimumFlyHeight\t#using scripts\\mp\\killstreaks\\_qrdrone;", "contents": "qrdrone::getMinimumFlyHeight()"},
	{ "trigger": "QRDrone_watch_distance\t#using scripts\\mp\\killstreaks\\_qrdrone;", "contents": "qrdrone::QRDrone_watch_distance()"},
	{ "trigger": "QRDrone_in_range\t#using scripts\\mp\\killstreaks\\_qrdrone;", "contents": "qrdrone::QRDrone_in_range()"},
	{ "trigger": "QRDrone_staticFade\t#using scripts\\mp\\killstreaks\\_qrdrone;", "contents": "qrdrone::QRDrone_staticFade(${1:staticAlpha}, ${2:sndent}, ${3:sid})"},
	{ "trigger": "QRDrone_staticStopOnDeath\t#using scripts\\mp\\killstreaks\\_qrdrone;", "contents": "qrdrone::QRDrone_staticStopOnDeath(${1:sndent})"},
	{ "trigger": "get_shoutcaster_fx\t#using scripts\\mp\\gametypes\\koth;", "contents": "koth::get_shoutcaster_fx(${1:local_client_num})"},
	{ "trigger": "get_fx_state\t#using scripts\\mp\\gametypes\\koth;", "contents": "koth::get_fx_state(${1:local_client_num}, ${2:state}, ${3:is_shoutcaster})"},
	{ "trigger": "get_fx\t#using scripts\\mp\\gametypes\\koth;", "contents": "koth::get_fx(${1:fx_name}, ${2:fx_state}, ${3:effects})"},
	{ "trigger": "setup_hardpoint_fx\t#using scripts\\mp\\gametypes\\koth;", "contents": "koth::setup_hardpoint_fx(${1:local_client_num}, ${2:zone_index}, ${3:state})"},
	{ "trigger": "hardpoint\t#using scripts\\mp\\gametypes\\koth;", "contents": "koth::hardpoint(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "hardpoint_state\t#using scripts\\mp\\gametypes\\koth;", "contents": "koth::hardpoint_state(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "watch_for_team_change\t#using scripts\\mp\\gametypes\\koth;", "contents": "koth::watch_for_team_change(${1:localClientNum})"},
	{ "trigger": "missile_fired\t#using scripts\\mp\\killstreaks\\_remotemissile;", "contents": "remotemissile::missile_fired(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "bomblets_deployed\t#using scripts\\mp\\killstreaks\\_remotemissile;", "contents": "remotemissile::bomblets_deployed(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "destruction_watcher\t#using scripts\\mp\\killstreaks\\_remotemissile;", "contents": "remotemissile::destruction_watcher(${1:localClientNum}, ${2:clientObjID})"},
	{ "trigger": "hud_update\t#using scripts\\mp\\killstreaks\\_remotemissile;", "contents": "remotemissile::hud_update(${1:localClientNum})"},
	{ "trigger": "spawnedThreatDetector\t#using scripts\\mp\\_threat_detector;", "contents": "threat_detector::spawnedThreatDetector(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "sensorGrenadeThink\t#using scripts\\mp\\_threat_detector;", "contents": "threat_detector::sensorGrenadeThink(${1:sensorEnt}, ${2:sensorHandle}, ${3:localClientNum})"},
	{ "trigger": "clearThreatDetectorOnDelete\t#using scripts\\mp\\_threat_detector;", "contents": "threat_detector::clearThreatDetectorOnDelete(${1:sensorEnt}, ${2:sensorHandle}, ${3:localClientNum})"},
	{ "trigger": "CounterUAVChanged\t#using scripts\\mp\\killstreaks\\_counteruav;", "contents": "counteruav::CounterUAVChanged(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "watchForGravitySpikeExplosion\t#using scripts\\mp\\_gravity_spikes;", "contents": "gravity_spikes::watchForGravitySpikeExplosion()"},
	{ "trigger": "do_gravity_spike_fx\t#using scripts\\mp\\_gravity_spikes;", "contents": "gravity_spikes::do_gravity_spike_fx(${1:localClientNum}, ${2:owner}, ${3:weapon}, ${4:position})"},
	{ "trigger": "getIdealLocationForFX\t#using scripts\\mp\\_gravity_spikes;", "contents": "gravity_spikes::getIdealLocationForFX(${1:startPos}, ${2:fxIndex}, ${3:fxCount}, ${4:defaultDistance}, ${5:rotation})"},
	{ "trigger": "randomizeLocation\t#using scripts\\mp\\_gravity_spikes;", "contents": "gravity_spikes::randomizeLocation(${1:startPos}, ${2:max_x_offset}, ${3:max_y_offset})"},
	{ "trigger": "ground_trace\t#using scripts\\mp\\_gravity_spikes;", "contents": "gravity_spikes::ground_trace(${1:startPos}, ${2:owner})"},
	{ "trigger": "do_gravity_spike_fx_circle\t#using scripts\\mp\\_gravity_spikes;", "contents": "gravity_spikes::do_gravity_spike_fx_circle(${1:localClientNum}, ${2:owner}, ${3:center}, ${4:radius}, ${5:count})"},
	{ "trigger": "on_player_connect\t#using scripts\\mp\\_ambient;", "contents": "ambient::on_player_connect(${1:localclientnum})"},
	{ "trigger": "setup_point_fx\t#using scripts\\mp\\_ambient;", "contents": "ambient::setup_point_fx(${1:point}, ${2:fx_id})"},
	{ "trigger": "ambient_flak_think\t#using scripts\\mp\\_ambient;", "contents": "ambient::ambient_flak_think(${1:point})"},
	{ "trigger": "ambient_flak_rotate\t#using scripts\\mp\\_ambient;", "contents": "ambient::ambient_flak_rotate(${1:point})"},
	{ "trigger": "ambient_flak_flash\t#using scripts\\mp\\_ambient;", "contents": "ambient::ambient_flak_flash(${1:point}, ${2:min_burst_time}, ${3:max_burst_time})"},
	{ "trigger": "ambient_fakefire_think\t#using scripts\\mp\\_ambient;", "contents": "ambient::ambient_fakefire_think(${1:point})"},
	{ "trigger": "spin_fan\t#using scripts\\mp\\_ambient; self == fan from the array", "contents": "ambient::spin_fan()"},
	{ "trigger": "clock_run\t#using scripts\\mp\\_ambient; self == either hour hand, minute hand, or second hand", "contents": "ambient::clock_run(${1:time_values})"},
	{ "trigger": "spin_anemometers\t#using scripts\\mp\\_ambient;", "contents": "ambient::spin_anemometers(${1:clientNum})"},
	{ "trigger": "spoon_spin_func\t#using scripts\\mp\\_ambient;", "contents": "ambient::spoon_spin_func()"},
	{ "trigger": "arrow_spin_func\t#using scripts\\mp\\_ambient;", "contents": "ambient::arrow_spin_func()"},
	{ "trigger": "setCTFAway\t#using scripts\\mp\\_ctf;", "contents": "client_flag::setCTFAway(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "clearCTFAway\t#using scripts\\mp\\_ctf;", "contents": "client_flag::clearCTFAway(${1:localClientNum}, ${2:team})"},
	{ "trigger": "on_localclient_connect\t#using scripts\\mp\\gametypes\\ctf;", "contents": "ctf::on_localclient_connect(${1:localClientNum})"},
	{ "trigger": "setup_flag\t#using scripts\\mp\\gametypes\\ctf;", "contents": "ctf::setup_flag(${1:localClientNum}, ${2:flag})"},
	{ "trigger": "setup_flag_fx\t#using scripts\\mp\\gametypes\\ctf;", "contents": "ctf::setup_flag_fx(${1:localClientNum}, ${2:flag}, ${3:effects})"},
	{ "trigger": "setup_fx\t#using scripts\\mp\\gametypes\\ctf;", "contents": "ctf::setup_fx(${1:localClientNum})"},
	{ "trigger": "watch_for_team_change\t#using scripts\\mp\\gametypes\\ctf;", "contents": "ctf::watch_for_team_change(${1:localClientNum})"},
	{ "trigger": "_setup_\t#using scripts\\mp\\vehicles\\_quadtank;", "contents": "quadtank::_setup_(${1:localClientNum})"},
	{ "trigger": "player_enter\t#using scripts\\mp\\vehicles\\_quadtank;", "contents": "quadtank::player_enter(${1:localClientNum})"},
	{ "trigger": "player_exit\t#using scripts\\mp\\vehicles\\_quadtank;", "contents": "quadtank::player_exit(${1:localClientNum})"},
	{ "trigger": "update_trophy_system_state\t#using scripts\\mp\\vehicles\\_quadtank;", "contents": "quadtank::update_trophy_system_state(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "player_shock_fx_handler\t#using scripts\\mp\\vehicles\\_quadtank;", "contents": "quadtank::player_shock_fx_handler(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "player_shock_fx_fade_off\t#using scripts\\mp\\vehicles\\_quadtank;", "contents": "quadtank::player_shock_fx_fade_off(${1:localClientNum}, ${2:amount}, ${3:fadeoutTime})"},
	{ "trigger": "wait_for_bullet_impact\t#using scripts\\mp\\vehicles\\_quadtank;", "contents": "quadtank::wait_for_bullet_impact(${1:localClientNum})"},
	{ "trigger": "on_player_connect\t#using scripts\\mp\\gametypes\\fr;", "contents": "fr::on_player_connect(${1:localClientNum})"},
	{ "trigger": "freerunStateChanged\t#using scripts\\mp\\gametypes\\fr;", "contents": "fr::freerunStateChanged(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "freerunRetriesUpdated\t#using scripts\\mp\\gametypes\\fr;", "contents": "fr::freerunRetriesUpdated(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "freerunFaultsUpdated\t#using scripts\\mp\\gametypes\\fr;", "contents": "fr::freerunFaultsUpdated(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "freerunStartTimeUpdated\t#using scripts\\mp\\gametypes\\fr;", "contents": "fr::freerunStartTimeUpdated(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "freerunFinishTimeUpdated\t#using scripts\\mp\\gametypes\\fr;", "contents": "fr::freerunFinishTimeUpdated(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "freerunBestTimeUpdated\t#using scripts\\mp\\gametypes\\fr;", "contents": "fr::freerunBestTimeUpdated(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "freerunTimeAdjustmentUpdated\t#using scripts\\mp\\gametypes\\fr;", "contents": "fr::freerunTimeAdjustmentUpdated(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "freerunTimeAdjustmentSignUpdated\t#using scripts\\mp\\gametypes\\fr;", "contents": "fr::freerunTimeAdjustmentSignUpdated(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "freerunbulletPenaltyUpdated\t#using scripts\\mp\\gametypes\\fr;", "contents": "fr::freerunbulletPenaltyUpdated(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "freerunPausedTimeUpdated\t#using scripts\\mp\\gametypes\\fr;", "contents": "fr::freerunPausedTimeUpdated(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "freerunCheckPointUpdated\t#using scripts\\mp\\gametypes\\fr;", "contents": "fr::freerunCheckPointUpdated(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "onPrecacheGameType\t#using scripts\\mp\\gametypes\\fr;", "contents": "fr::onPrecacheGameType()"},
	{ "trigger": "onStartGameType\t#using scripts\\mp\\gametypes\\fr;", "contents": "fr::onStartGameType()"},
	{ "trigger": "planemortar_contrail\t#using scripts\\mp\\killstreaks\\_planemortar;", "contents": "planemortar::planemortar_contrail(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "waterfallOverlay\t#using scripts\\mp\\_waterfall;", "contents": "waterfall::waterfallOverlay(${1:localClientNum})"},
	{ "trigger": "waterfallMistOverlay\t#using scripts\\mp\\_waterfall;", "contents": "waterfall::waterfallMistOverlay(${1:localClientNum})"},
	{ "trigger": "waterfallMistOverlayReset\t#using scripts\\mp\\_waterfall;", "contents": "waterfall::waterfallMistOverlayReset(${1:localClientNum})"},
	{ "trigger": "setupWaterfallMist\t#using scripts\\mp\\_waterfall;", "contents": "waterfall::setupWaterfallMist(${1:localClientNum})"},
	{ "trigger": "setupWaterfall\t#using scripts\\mp\\_waterfall;", "contents": "waterfall::setupWaterfall(${1:localClientNum}, ${2:localowner})"},
	{ "trigger": "trig_enter_waterfall\t#using scripts\\mp\\_waterfall;", "contents": "waterfall::trig_enter_waterfall(${1:localplayer})"},
	{ "trigger": "trig_leave_waterfall\t#using scripts\\mp\\_waterfall;", "contents": "waterfall::trig_leave_waterfall(${1:localplayer})"},
	{ "trigger": "trig_enter_waterfall_mist\t#using scripts\\mp\\_waterfall;", "contents": "waterfall::trig_enter_waterfall_mist(${1:localPlayer})"},
	{ "trigger": "trig_leave_waterfall_mist\t#using scripts\\mp\\_waterfall;", "contents": "waterfall::trig_leave_waterfall_mist(${1:localPlayer})"},
	{ "trigger": "turret_open\t#using scripts\\mp\\killstreaks\\_turret;", "contents": "autoturret::turret_open(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "turret_close_anim\t#using scripts\\mp\\killstreaks\\_turret;", "contents": "autoturret::turret_close_anim(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "heli_low_health_fx\t#using scripts\\mp\\killstreaks\\_raps;", "contents": "raps_mp::heli_low_health_fx(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "heli_extra_low_health_fx\t#using scripts\\mp\\killstreaks\\_raps;", "contents": "raps_mp::heli_extra_low_health_fx(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "monitor__drop_landing_changed\t#using scripts\\mp\\killstreaks\\_raps;", "contents": "raps_mp::monitor__drop_landing_changed(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "monitor_drop_landing\t#using scripts\\mp\\killstreaks\\_raps;", "contents": "raps_mp::monitor_drop_landing(${1:localClientNum})"},
	{ "trigger": "on_localclient_connect\t#using scripts\\mp\\gametypes\\dom;", "contents": "dom::on_localclient_connect(${1:localClientNum})"},
	{ "trigger": "monitor_flag_fx\t#using scripts\\mp\\gametypes\\dom;", "contents": "dom::monitor_flag_fx(${1:localClientNum}, ${2:flag_objective}, ${3:flag_name})"},
	{ "trigger": "play_base_fx\t#using scripts\\mp\\gametypes\\dom;", "contents": "dom::play_base_fx(${1:localClientNum}, ${2:flag}, ${3:fx_name}, ${4:team})"},
	{ "trigger": "update_base_fx\t#using scripts\\mp\\gametypes\\dom;", "contents": "dom::update_base_fx(${1:localClientNum}, ${2:flag}, ${3:team})"},
	{ "trigger": "play_cap_fx\t#using scripts\\mp\\gametypes\\dom;", "contents": "dom::play_cap_fx(${1:localClientNum}, ${2:flag}, ${3:fx_name}, ${4:team})"},
	{ "trigger": "update_cap_fx\t#using scripts\\mp\\gametypes\\dom;", "contents": "dom::update_cap_fx(${1:localClientNum}, ${2:flag}, ${3:team}, ${4:progress})"},
	{ "trigger": "get_base_fx\t#using scripts\\mp\\gametypes\\dom;", "contents": "dom::get_base_fx(${1:flag}, ${2:team})"},
	{ "trigger": "get_cap_fx\t#using scripts\\mp\\gametypes\\dom;", "contents": "dom::get_cap_fx(${1:flag}, ${2:team})"},
	{ "trigger": "set_default_callbacks\t#using scripts\\mp\\_callbacks;", "contents": "callback::set_default_callbacks()"},
	{ "trigger": "localclientconnect\t#using scripts\\mp\\_callbacks;", "contents": "callback::localclientconnect(${1:localClientNum})"},
	{ "trigger": "playerspawned\t#using scripts\\mp\\_callbacks;", "contents": "callback::playerspawned(${1:localClientNum})"},
	{ "trigger": "entityspawned\t#using scripts\\mp\\_callbacks;", "contents": "callback::entityspawned(${1:localClientNum})"},
	{ "trigger": "airsupport\t#using scripts\\mp\\_callbacks;", "contents": "callback::airsupport(${1:localClientNum}, ${2:x}, ${3:y}, ${4:z}, ${5:type}, ${6:yaw}, ${7:team}, ${8:teamfaction}, ${9:owner}, ${10:exittype}, ${11:time}, ${12:height})"},
	{ "trigger": "creating_corpse\t#using scripts\\mp\\_callbacks;", "contents": "callback::creating_corpse(${1:localClientNum}, ${2:player})"},
	{ "trigger": "callback_stunned\t#using scripts\\mp\\_callbacks;", "contents": "callback::callback_stunned(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "callback_emp\t#using scripts\\mp\\_callbacks;", "contents": "callback::callback_emp(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "callback_proximity\t#using scripts\\mp\\_callbacks;", "contents": "callback::callback_proximity(${1:localClientNum}, ${2:oldVal}, ${3:newVal}, ${4:bNewEnt}, ${5:bInitialSnap}, ${6:fieldName}, ${7:bWasTimeJump})"},
	{ "trigger": "onStartGameType\t#using scripts\\mp\\gametypes\\sd;", "contents": "sd::onStartGameType()"},
	{ "trigger": "on_player_spawned\t#using scripts\\mp\\gametypes\\sd;", "contents": "sd::on_player_spawned(${1:localClientNum})"},
	]
}